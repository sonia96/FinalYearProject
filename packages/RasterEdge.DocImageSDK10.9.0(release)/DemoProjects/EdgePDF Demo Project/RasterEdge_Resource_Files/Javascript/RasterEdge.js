///<jscompress sourcefile="resize.js" />
var isIE = (document.all) ? true : false;

var div_$ = function (id) {
	return "string" == typeof id ? document.getElementById(id) : id;
};

var Class = {
    create: function () {
        return function () { this.initialize.apply(this, arguments); }
    }
};

var Extend = function (destination, source) {
    for (var property in source) {
        destination[property] = source[property];
    }
};

var Bind = function (object, fun) {
    return function () {
        return fun.apply(object, arguments);
    }
};

var BindAsEventListener = function (object, fun) {
    var args = Array.prototype.slice.call(arguments).slice(2);
    return function (event) {
        return fun.apply(object, [event || window.event].concat(args));
    }
};

var CurrentStyle = function (element) {
    return element.currentStyle || document.defaultView.getComputedStyle(element, null);
};

function addEventHandler(oTarget, sEventType, fnHandler) {
	if (oTarget.addEventListener) {
		oTarget.addEventListener(sEventType, fnHandler, false);
	} else if (oTarget.attachEvent) {
		oTarget.attachEvent("on" + sEventType, fnHandler);
	} else {
		oTarget["on" + sEventType] = fnHandler;
	}
};

function removeEventHandler(oTarget, sEventType, fnHandler) {
    if (oTarget.removeEventListener) {
        oTarget.removeEventListener(sEventType, fnHandler, false);
    } else if (oTarget.detachEvent) {
        oTarget.detachEvent("on" + sEventType, fnHandler);
    } else { 
        oTarget["on" + sEventType] = null;
    }
};

var tempWidth = 0;
var tempHeight = 0;

var Resize = Class.create();
Resize.prototype = {
  initialize: function(obj,options) {
	this._obj = div_$(obj);
	this._styleWidth = this._styleHeight = this._styleLeft = this._styleTop = 0;
	this._sideRight = this._sideDown = this._sideLeft = this._sideUp = 0;
	this._fixLeft = this._fixTop = 0;
	this._scaleLeft = this._scaleTop = 0;
	
	this._mxSet = function(){};
	this._mxRightWidth = this._mxDownHeight = this._mxUpHeight = this._mxLeftWidth = 0;
	this._mxScaleWidth = this._mxScaleHeight = 0;
	
	this._fun = function(){};
	
	//Get Border Width
	var _style = CurrentStyle(this._obj);
	this._borderX = (parseInt(_style.borderLeftWidth) || 0) + (parseInt(_style.borderRightWidth) || 0);
	this._borderY = (parseInt(_style.borderTopWidth) || 0) + (parseInt(_style.borderBottomWidth) || 0);
	//Event object (for binding remove events)
	this._fR = BindAsEventListener(this, this.Resize);
	this._fS = Bind(this, this.Stop);
	
	this.SetOptions(options);
	
	this.Max = !!this.options.Max;
	this._mxContainer = div_$(this.options.mxContainer) || null;
	this.mxLeft = Math.round(this.options.mxLeft);
	this.mxRight = Math.round(this.options.mxRight);
	this.mxTop = Math.round(this.options.mxTop);
	this.mxBottom = Math.round(this.options.mxBottom);
	
	this.Min = !!this.options.Min;
	this.minWidth = Math.round(this.options.minWidth);
	this.minHeight = Math.round(this.options.minHeight);
	
	this.Scale = !!this.options.Scale;
	this.Ratio = Math.max(this.options.Ratio, 0);
	
	this.onResize = this.options.onResize;
	
	this._obj.style.position = "absolute";
	this.finalZoom=1;
  },
  //Set default properties
  SetOptions: function(options) {
    this.options = {
		Max:		false,//Whether the Maximum width and height restrictions ( the following parameter is useful when true)
		mxContainer:"",//Specified limit within the container
		mxLeft:		0,
		mxRight:	9999,
		mxTop:		0,
		mxBottom:	9999,
		Min:		false,//Whether the minimum width and height restrictions ( the following parameter is useful when true)
		minWidth:	50,
		minHeight:	50,
		Scale:		false,//Whether scaling
		Ratio: 0,//Scaling (width / height)
		isImg:false,
		onResize:	function(){}
    };
    Extend(this.options, options || {});
  },
  
  Set: function(resize, side) {
	var resize = div_$(resize), fun;
	if(!resize) return;
	
	switch (side.toLowerCase()) {
	case "up" :
		fun = this.Up;
		break;
	case "down" :
		fun = this.Down;
		break;
	case "left" :
		fun = this.Left;
		break;
	case "right" :
		fun = this.Right;
		break;
	case "left-up" :
		fun = this.LeftUp;
		break;
	case "right-up" :
		fun = this.RightUp;
		break;
	case "left-down" :
		fun = this.LeftDown;
		break;
	case "right-down" :
	default :
		fun = this.RightDown;
	};
	//Set the trigger object
	addEventHandler(resize, "mousedown", BindAsEventListener(this, this.Start, fun));
  },
  
  Start: function(e, fun, touch) {	
	    $(".showByDrag").unbind("mousedown",dragImageMouseDown);
		$(".showByDrag").unbind("mousemove",dragImageMouseMove);
		$(".showByDrag").unbind("mouseup",dragImageMouseUp);
		$(".showByDrag").removeClass("mouseStyleMove");
		$(".showByDrag").addClass("mouseStyleAnnotation");
	if (this.options.isImg)
		    this.finalZoom = zoomValue>0?zoomValue:1;
	//Prevent bubbling (set with drag-and-drop)
	e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);
	//Set the execution
	this._fun = fun;
    //Style parameter values
	this._styleWidth = this._obj.clientWidth;
	this._styleHeight = this._obj.clientHeight;
	this._styleLeft = this._obj.offsetLeft;
	this._styleTop = this._obj.offsetTop;
	//Positioning coordinates of the four sides
	this._sideLeft = (e.clientX /this.finalZoom- this._styleWidth);
	this._sideRight = (e.clientX / this.finalZoom + this._styleWidth);
	this._sideUp = (e.clientY / this.finalZoom - this._styleHeight);
	this._sideDown = (e.clientY / this.finalZoom + this._styleHeight);
	//The top and left positioning parameters
	this._fixLeft = this._styleLeft + this._styleWidth;
	this._fixTop = this._styleTop + this._styleHeight;
	
	//Scaling
	if(this.Scale){
	
		this.Ratio = Math.max(this.Ratio, 0) || this._styleWidth / this._styleHeight;

		this._scaleLeft = this._styleLeft + this._styleWidth / 2;
		this._scaleTop = this._styleTop + this._styleHeight / 2;
	};
	
	if(this.Max){
		//Set the range of parameters
		var mxLeft = this.mxLeft, mxRight = this.mxRight, mxTop = this.mxTop, mxBottom = this.mxBottom;
		
		//rechange according to the minimum
		mxRight = Math.max(mxRight, mxLeft + (this.Min ? this.minWidth : 0) + this._borderX);
		mxBottom = Math.max(mxBottom, mxTop + (this.Min ? this.minHeight : 0) + this._borderY);
	
		this._mxSet = function(){
			this._mxRightWidth = mxRight - this._styleLeft - this._borderX;
			this._mxDownHeight = mxBottom - this._styleTop - this._borderY;
			this._mxUpHeight = Math.max(this._fixTop - mxTop, this.Min ? this.minHeight : 0);
			this._mxLeftWidth = Math.max(this._fixLeft - mxLeft, this.Min ? this.minWidth : 0);
		};
		this._mxSet();
		//Scaling range limit
		if(this.Scale){
			this._mxScaleWidth = Math.min(this._scaleLeft - mxLeft, mxRight - this._scaleLeft - this._borderX) * 2;
			this._mxScaleHeight = Math.min(this._scaleTop - mxTop, mxBottom - this._scaleTop - this._borderY) * 2;
		};
	};
	//When the mousemove scaling, mouseup stop
	addEventHandler(document, "mousemove", this._fR);
	addEventHandler(document, "mouseup", this._fS);
	if(isIE){
		addEventHandler(this._obj, "losecapture", this._fS);
		this._obj.setCapture();
	}else{
		addEventHandler(window, "blur", this._fS);
		e.preventDefault();
	};
  },

  Resize: function(e) {
	//Clear selection
	window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
	//Perform scaling program
	this._fun(e);
	//Set the style, the variable must be greater than or equal to 0 otherwise, ie errors
	with(this._obj.style){
	        width = this._styleWidth  + "px"; height = this._styleHeight + "px";
	   		top = this._styleTop + "px"; left = this._styleLeft + "px";
	
	}
	
	this.onResize();
  },

  Up: function(e) {
      this.RepairY(this._sideDown - e.clientY / this.finalZoom, this._mxUpHeight);
	this.RepairTop();
	this.TurnDown(this.Down);
  },
 
  Down: function(e) {
    this._mxDownHeight = this._mxDownHeight > 0 ? this._mxDownHeight : -this._mxDownHeight;
    this.RepairY(e.clientY / this.finalZoom - this._sideUp, this._mxDownHeight);
	this.TurnUp(this.Up);
  },

  Right: function(e) {
      this.RepairX(e.clientX / this.finalZoom - this._sideLeft, this._mxRightWidth);
	this.TurnLeft(this.Left);
  },

  Left: function(e) {
      this.RepairX(this._sideRight - e.clientX / this.finalZoom, this._mxLeftWidth);
	this.RepairLeft();
	this.TurnRight(this.Right);
  },

  RightDown: function(e) {
    this._mxDownHeight = this._mxDownHeight > 0 ? this._mxDownHeight : -this._mxDownHeight;
	this.RepairAngle(
		e.clientX / this.finalZoom - this._sideLeft, this._mxRightWidth,
		e.clientY / this.finalZoom - this._sideUp, this._mxDownHeight
	);
	this.TurnLeft(this.LeftDown) || this.Scale || this.TurnUp(this.RightUp);
  },

  RightUp: function(e) {
	this.RepairAngle(
		e.clientX / this.finalZoom - this._sideLeft, this._mxRightWidth,
		this._sideDown - e.clientY / this.finalZoom, this._mxUpHeight
	);
	this.RepairTop();
	this.TurnLeft(this.LeftUp) || this.Scale || this.TurnDown(this.RightDown);
  },

  LeftDown: function(e) {
    this._mxDownHeight = this._mxDownHeight > 0 ? this._mxDownHeight : -this._mxDownHeight;
	this.RepairAngle(
		this._sideRight - e.clientX / this.finalZoom, this._mxLeftWidth,
		e.clientY / this.finalZoom - this._sideUp, this._mxDownHeight
	);
	this.RepairLeft();
	this.TurnRight(this.RightDown) || this.Scale || this.TurnUp(this.LeftUp);
  },

  LeftUp: function(e) {
	this.RepairAngle(
		this._sideRight - e.clientX / this.finalZoom, this._mxLeftWidth,
		this._sideDown - e.clientY / this.finalZoom, this._mxUpHeight
	);
	this.RepairTop(); this.RepairLeft();
	this.TurnRight(this.RightUp) || this.Scale || this.TurnDown(this.LeftDown);
  },
  
  RepairX: function(iWidth, mxWidth) {
	iWidth = this.RepairWidth(iWidth, mxWidth);
	if(this.Scale){
		var iHeight = this.RepairScaleHeight(iWidth);
		if(this.Max && iHeight > this._mxScaleHeight){
			iHeight = this._mxScaleHeight;
			iWidth = this.RepairScaleWidth(iHeight);
		}else if(this.Min && iHeight < this.minHeight){
			var tWidth = this.RepairScaleWidth(this.minHeight);
			if(tWidth < mxWidth){ iHeight = this.minHeight; iWidth = tWidth; }
		}
		this._styleHeight = iHeight;
		this._styleTop = this._scaleTop - iHeight / 2;
	}
	this._styleWidth = iWidth;
  },

  RepairY: function(iHeight, mxHeight) {
	iHeight = this.RepairHeight(iHeight, mxHeight);
	if(this.Scale){
		var iWidth = this.RepairScaleWidth(iHeight);
		if(this.Max && iWidth > this._mxScaleWidth){
			iWidth = this._mxScaleWidth;
			iHeight = this.RepairScaleHeight(iWidth);
		}else if(this.Min && iWidth < this.minWidth){
			var tHeight = this.RepairScaleHeight(this.minWidth);
			if(tHeight < mxHeight){ iWidth = this.minWidth; iHeight = tHeight; }
		}
		this._styleWidth = iWidth;
		this._styleLeft = this._scaleLeft - iWidth / 2;
	}
	this._styleHeight = iHeight;
  },

  RepairAngle: function(iWidth, mxWidth, iHeight, mxHeight) {
	iWidth = this.RepairWidth(iWidth, mxWidth);	
	if(this.Scale){
		iHeight = this.RepairScaleHeight(iWidth);
		if(this.Max && iHeight > mxHeight){
			iHeight = mxHeight;
			iWidth = this.RepairScaleWidth(iHeight);
		}else if(this.Min && iHeight < this.minHeight){
			var tWidth = this.RepairScaleWidth(this.minHeight);
			if(tWidth < mxWidth){ iHeight = this.minHeight; iWidth = tWidth; }
		}
	}else{
		iHeight = this.RepairHeight(iHeight, mxHeight);
	}
	this._styleWidth = iWidth;
	this._styleHeight = iHeight;
  },

  RepairTop: function() {
	this._styleTop = this._fixTop - this._styleHeight;
  },
 
  RepairLeft: function() {
	this._styleLeft = this._fixLeft - this._styleWidth;
  },

  RepairHeight: function(iHeight, mxHeight) {
	iHeight = Math.min(this.Max ? mxHeight : iHeight, iHeight);
	iHeight = Math.max(this.Min ? this.minHeight : iHeight, iHeight, 0);
	return iHeight;
  },

  RepairWidth: function(iWidth, mxWidth) {
	iWidth = Math.min(this.Max ? mxWidth : iWidth, iWidth);
	iWidth = Math.max(this.Min ? this.minWidth : iWidth, iWidth, 0);
	return iWidth;
  },
 
  RepairScaleHeight: function(iWidth) {
	return Math.max(Math.round((iWidth + this._borderX) / this.Ratio - this._borderY), 0);
  },

  RepairScaleWidth: function(iHeight) {
	return Math.max(Math.round((iHeight + this._borderY) * this.Ratio - this._borderX), 0);
  },


  TurnRight: function(fun) {
	if(!(this.Min || this._styleWidth)){
		this._fun = fun;
		this._sideLeft = this._sideRight;
		this.Max && this._mxSet();
		return true;
	}
  },

  TurnLeft: function(fun) {
	if(!(this.Min || this._styleWidth)){
		this._fun = fun;
		this._sideRight = this._sideLeft;
		this._fixLeft = this._styleLeft;
		this.Max && this._mxSet();
		return true;
	}
  },

  TurnUp: function(fun) {
	if(!(this.Min || this._styleHeight)){
		this._fun = fun;
		this._sideDown = this._sideUp;
		this._fixTop = this._styleTop;
		this.Max && this._mxSet();
		return true;
	}
  },

  TurnDown: function(fun) {
	if(!(this.Min || this._styleHeight)){
		this._fun = fun;
		this._sideUp = this._sideDown;
		this.Max && this._mxSet();
		return true;
	}
  },
 
  Stop: function() {
	removeEventHandler(document, "mousemove", this._fR);
	removeEventHandler(document, "mouseup", this._fS);
	if(isIE){
		removeEventHandler(this._obj, "losecapture", this._fS);
		this._obj.releaseCapture();
	}else{
		removeEventHandler(window, "blur", this._fS);
	}
	var id = this._obj.id;
	if(id.indexOf("REimg") == 0 || id.indexOf("RECanvas") == 0)
	    return;
	$(".showByDrag").bind("mousedown",dragImageMouseDown);
	$(".showByDrag").bind("mousemove",dragImageMouseMove);
	$(".showByDrag").bind("mouseup",dragImageMouseUp);
	$(".showByDrag").removeClass("mouseStyleAnnotation");
	$(".showByDrag").addClass("mouseStyleMove");
  }
};
;
///<jscompress sourcefile="sparkmd5.js" />
(function (factory) {
    if (typeof exports === 'object') {
        // Node/CommonJS
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        // AMD
        define(factory);
    } else {
        // Browser globals (with support for web workers)
        var glob;

        try {
            glob = window;
        } catch (e) {
            glob = self;
        }

        glob.SparkMD5 = factory();
    }
}(function (undefined) {

    'use strict';

    ////////////////////////////////////////////////////////////////////////////

    /*
     * Fastest md5 implementation around (JKM md5)
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var add32 = function (a, b) {
        return (a + b) & 0xFFFFFFFF;
    },

    cmn = function (q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
    },

    ff = function (a, b, c, d, x, s, t) {
        return cmn((b & c) | ((~b) & d), a, b, x, s, t);
    },

    gg = function (a, b, c, d, x, s, t) {
        return cmn((b & d) | (c & (~d)), a, b, x, s, t);
    },

    hh = function (a, b, c, d, x, s, t) {
        return cmn(b ^ c ^ d, a, b, x, s, t);
    },

    ii = function (a, b, c, d, x, s, t) {
        return cmn(c ^ (b | (~d)), a, b, x, s, t);
    },

    md5cycle = function (x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a = ff(a, b, c, d, k[0], 7, -680876936);
        d = ff(d, a, b, c, k[1], 12, -389564586);
        c = ff(c, d, a, b, k[2], 17, 606105819);
        b = ff(b, c, d, a, k[3], 22, -1044525330);
        a = ff(a, b, c, d, k[4], 7, -176418897);
        d = ff(d, a, b, c, k[5], 12, 1200080426);
        c = ff(c, d, a, b, k[6], 17, -1473231341);
        b = ff(b, c, d, a, k[7], 22, -45705983);
        a = ff(a, b, c, d, k[8], 7, 1770035416);
        d = ff(d, a, b, c, k[9], 12, -1958414417);
        c = ff(c, d, a, b, k[10], 17, -42063);
        b = ff(b, c, d, a, k[11], 22, -1990404162);
        a = ff(a, b, c, d, k[12], 7, 1804603682);
        d = ff(d, a, b, c, k[13], 12, -40341101);
        c = ff(c, d, a, b, k[14], 17, -1502002290);
        b = ff(b, c, d, a, k[15], 22, 1236535329);

        a = gg(a, b, c, d, k[1], 5, -165796510);
        d = gg(d, a, b, c, k[6], 9, -1069501632);
        c = gg(c, d, a, b, k[11], 14, 643717713);
        b = gg(b, c, d, a, k[0], 20, -373897302);
        a = gg(a, b, c, d, k[5], 5, -701558691);
        d = gg(d, a, b, c, k[10], 9, 38016083);
        c = gg(c, d, a, b, k[15], 14, -660478335);
        b = gg(b, c, d, a, k[4], 20, -405537848);
        a = gg(a, b, c, d, k[9], 5, 568446438);
        d = gg(d, a, b, c, k[14], 9, -1019803690);
        c = gg(c, d, a, b, k[3], 14, -187363961);
        b = gg(b, c, d, a, k[8], 20, 1163531501);
        a = gg(a, b, c, d, k[13], 5, -1444681467);
        d = gg(d, a, b, c, k[2], 9, -51403784);
        c = gg(c, d, a, b, k[7], 14, 1735328473);
        b = gg(b, c, d, a, k[12], 20, -1926607734);

        a = hh(a, b, c, d, k[5], 4, -378558);
        d = hh(d, a, b, c, k[8], 11, -2022574463);
        c = hh(c, d, a, b, k[11], 16, 1839030562);
        b = hh(b, c, d, a, k[14], 23, -35309556);
        a = hh(a, b, c, d, k[1], 4, -1530992060);
        d = hh(d, a, b, c, k[4], 11, 1272893353);
        c = hh(c, d, a, b, k[7], 16, -155497632);
        b = hh(b, c, d, a, k[10], 23, -1094730640);
        a = hh(a, b, c, d, k[13], 4, 681279174);
        d = hh(d, a, b, c, k[0], 11, -358537222);
        c = hh(c, d, a, b, k[3], 16, -722521979);
        b = hh(b, c, d, a, k[6], 23, 76029189);
        a = hh(a, b, c, d, k[9], 4, -640364487);
        d = hh(d, a, b, c, k[12], 11, -421815835);
        c = hh(c, d, a, b, k[15], 16, 530742520);
        b = hh(b, c, d, a, k[2], 23, -995338651);

        a = ii(a, b, c, d, k[0], 6, -198630844);
        d = ii(d, a, b, c, k[7], 10, 1126891415);
        c = ii(c, d, a, b, k[14], 15, -1416354905);
        b = ii(b, c, d, a, k[5], 21, -57434055);
        a = ii(a, b, c, d, k[12], 6, 1700485571);
        d = ii(d, a, b, c, k[3], 10, -1894986606);
        c = ii(c, d, a, b, k[10], 15, -1051523);
        b = ii(b, c, d, a, k[1], 21, -2054922799);
        a = ii(a, b, c, d, k[8], 6, 1873313359);
        d = ii(d, a, b, c, k[15], 10, -30611744);
        c = ii(c, d, a, b, k[6], 15, -1560198380);
        b = ii(b, c, d, a, k[13], 21, 1309151649);
        a = ii(a, b, c, d, k[4], 6, -145523070);
        d = ii(d, a, b, c, k[11], 10, -1120210379);
        c = ii(c, d, a, b, k[2], 15, 718787259);
        b = ii(b, c, d, a, k[9], 21, -343485551);

        x[0] = add32(a, x[0]);
        x[1] = add32(b, x[1]);
        x[2] = add32(c, x[2]);
        x[3] = add32(d, x[3]);
    },

    /* there needs to be support for Unicode here,
       * unless we pretend that we can redefine the MD-5
       * algorithm for multi-byte characters (perhaps
       * by adding every four 16-bit characters and
       * shortening the sum to 32 bits). Otherwise
       * I suggest performing MD-5 as if every character
       * was two bytes--e.g., 0040 0025 = @%--but then
       * how will an ordinary MD-5 sum be matched?
       * There is no way to standardize text to something
       * like UTF-8 before transformation; speed cost is
       * utterly prohibitive. The JavaScript standard
       * itself needs to look at this: it should start
       * providing access to strings as preformed UTF-8
       * 8-bit unsigned value arrays.
       */
    md5blk = function (s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    },

    md5blk_array = function (a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    },

    md51 = function (s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    },

    md51_array = function (a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    },

    hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'],

    rhex = function (n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    },

    hex = function (x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    },

    md5 = function (s) {
        return hex(md51(s));
    },



    ////////////////////////////////////////////////////////////////////////////

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */
    SparkMD5 = function () {
        // call reset to init the instance
        this.reset();
    };


    // In some cases the fast add32 function cannot be used..
    if (md5('hello') !== '5d41402abc4b2a76b9719d911017c592') {
        add32 = function (x, y) {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        };
    }


    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // converts the string to utf8 bytes if necessary
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        // then append as binary
        this.appendBinary(str);

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._state, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substr(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     * Use the raw parameter to obtain the raw result instead of the hex one.
     *
     * @param {Boolean} raw True to get the raw result, false to get the hex result
     *
     * @return {String|Array} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = !!raw ? this._state : hex(this._state);

        this.reset();

        return ret;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._state, tail);
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._state = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other aditional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._state;
        delete this._buff;
        delete this._length;
    };


    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} raw True to get the raw result, false to get the hex result
     *
     * @return {String|Array} The result
     */
    SparkMD5.hash = function (str, raw) {
        // converts the string to utf8 bytes if necessary
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        var hash = md51(str);

        return !!raw ? hash : hex(hash);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} raw     True to get the raw result, false to get the hex result
     *
     * @return {String|Array} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content);

        return !!raw ? hash : hex(hash);
    };

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    ////////////////////////////////////////////////////////////////////////////

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        // TODO: we could avoid the concatenation here but the algorithm would be more complex
        //       if you find yourself needing extra performance, please make a PR.
        var buff = this._concatArrayBuffer(this._buff, arr),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._state, md5blk_array(buff.subarray(i - 64, i)));
        }

        // Avoids IE10 weirdness (documented above)
        this._buff = (i - 64) < length ? buff.subarray(i - 64) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     * Use the raw parameter to obtain the raw result instead of the hex one.
     *
     * @param {Boolean} raw True to get the raw result, false to get the hex result
     *
     * @return {String|Array} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = !!raw ? this._state : hex(this._state);

        this.reset();

        return ret;
    };

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._state = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other aditional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    /**
     * Concats two array buffers, returning a new one.
     *
     * @param  {ArrayBuffer} first  The first array buffer
     * @param  {ArrayBuffer} second The second array buffer
     *
     * @return {ArrayBuffer} The new array buffer
     */
    SparkMD5.ArrayBuffer.prototype._concatArrayBuffer = function (first, second) {
        var firstLength = first.length,
            result = new Uint8Array(firstLength + second.byteLength);

        result.set(first);
        result.set(new Uint8Array(second), firstLength);

        return result;
    };

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     raw True to get the raw result, false to get the hex result
     *
     * @return {String|Array} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr));

        return !!raw ? hash : hex(hash);
    };

    return SparkMD5;
}));

;
///<jscompress sourcefile="Viewer.js" />
var boxWidth = 1; 
var addWidth = 5;
var addHeight = 7;
var maxwidth = 0;
var _pageSizeType=2;
var Viewer = Class.create();
Viewer.prototype = 
{
	initialize: function(options) 
	{
		this.SetOptions(options);
		this.PageIndex = this.options.PageIndex;
		this.ShowIndex = this.options.PageIndex;
		this.TempExIndex = this.options.TempExIndex;
		this.Width = this.options.Width;
		this.Height = this.options.Height;
		this.ThumbWidth = this.options.ThumbWidth;
		this.ThumbHeight = this.options.ThumbHeight;
		this.ActualWidth = this.options.ActualWidth;
		this.ActualHeight = this.options.ActualHeight;
		this.BigWidth = this.options.BigWidth;
		this.BigHeight = this.options.BigHeight;
		this.Left = this.options.Left;
		this.Top = this.options.Top;
		this.ZoomIndex = this.options.ZoomIndex;
		this.Rotate = this.options.Rotate;		
		this.PageSizeType = this.options.PageSizeType;
		this.Annotations = this.options.Annotations;
		this.Links = this.options.Links;
		this.FirstLeft = this.options.FirstLeft;		
		this.FirstTop = this.options.FirstTop;
		this.FirstActualWidth = this.options.FirstActualWidth;
		this.FirstActualHeight = this.options.FirstActualHeight;
		this.BlankLeft = this.options.BlankLeft;
		this.Init = false;
		this.NoScrollBox=this.options.NoScrollBox;
		this.isChange = this.options.isChange;
		this.Currentzoom = this.options.Currentzoom;
		this.thumbShowWidth = this.options.thumbShowWidth;
		this.thumbShowHeight = this.options.thumbShowHeight;
		this.DocImageIsExist = this.options.DocImageIsExist;
		this.ThumbImageIsExist = this.options.ThumbImageIsExist;
		this.svgAjaxRequest = this.options.svgAjaxRequest;
		this.charRectsAjaxRequest = this.options.charRectsAjaxRequest;
		this.isEmptyPage = this.options.isEmptyPage;
		this.SourcePageIndex = this.options.SourcePageIndex;
		this.InsertFid = this.options.InsertFid;
		this.IsInsertPage = this.options.IsInsertPage;
		this.ThumbScaleX = this.options.ThumbScaleX;
		this.ThumbScaleY = this.options.ThumbScaleY;
		this.SourceRotate = this.options.SourceRotate;
	},
		
	SetOptions: function(options) 
	{
		this.options = 
		{
			PageIndex:			0,
			ShowIndex:			0,
			TempExIndex:       0,
			Width:				0,
			Height:				0,
            ThumbWidth:         0,
            ThumbHeight:        0,
			ActualWidth:		0,
			ActualHeight:		0,
			BigWidth:			0,
			BigHeight:			0,
			Left:				0,
			Top:				0,
			ZoomIndex:			0,
			Rotate: 0,
		    SourceRotate:0,
			PageSizeType: 0,
			ThumbScaleX: 1,
			ThumbScaleY: 1,
			Annotations:		new Array(),
			Links:              new Array(),
			FirstLeft:			0,
			FirstTop:			0,
			FirstActualWidth:	0,
			FirstActualHeight:	0,
			isChange:           true,
			Currentzoom:        8,
			thumbShowWidth:     0,
			thumbShowHeight: 0,
		    BlankLeft: 0,
			DocImageIsExist:    false,
			ThumbImageIsExist:  false,
			svgAjaxRequest:        "",
			charRectsAjaxRequest:          "",
			isEmptyPage:        false,
			NoScrollBox: true,
			SourcePageIndex: 0,
			InsertFid: "",
			IsInsertPage:false,

		};
		Extend(this.options, options || {});
    },

	GetInitialSize: function()
	{			
		this.OneToOne_Width = WidthArray[this.PageIndex] + addWidth;
		this.OneToOne_Height = HeightArray[this.PageIndex] + addHeight;
		this.SourceRotate = RotateArray[this.PageIndex];
		this.FitWidth_Width = _docWidth;
		this.FitWidth_Height = this.FitWidth_Width/this.OneToOne_Width*this.OneToOne_Height;
		
		this.BestFit_Height = _docHeight;	
		this.BestFit_Width = this.BestFit_Height/this.OneToOne_Height*this.OneToOne_Width;
		this.isChange = false;
		this.GetFirstViewerLeftTop();		
	},

	GetFirstViewerLeftTop: function()
	{
		this.FirstLeft = 0;
		this.FirstTop = 0;
		this.ChangeDocWidthOrHeight();	
		if(_pageSizeType == 0)//fit-width
		{
			this.FirstActualWidth = this.FitWidth_Width - addWidth;
			this.FirstActualHeight = this.FirstActualWidth / (this.OneToOne_Width - addWidth)*(this.OneToOne_Height-addHeight);
		}
		else if(_pageSizeType == 1)//best-fit
		{
			this.FirstActualHeight = this.BestFit_Height - addWidth;
			this.FirstActualWidth = this.FirstActualHeight/(this.OneToOne_Height - addHeight)*(this.OneToOne_Width - addWidth);	
		}
		else if(_pageSizeType == 2)//1:1
		{
			this.FirstActualWidth = this.OneToOne_Width - addWidth;
			this.FirstActualHeight = this.OneToOne_Height - addHeight;
		}		
		{
			this.FirstLeft = (_docWidth - this.FirstActualWidth)/2;
		}
		{
			this.FirstTop = (_docHeight - this.FirstActualHeight)/2;
		}	
	},
    
    ChangeDocWidthOrHeight:function()
    {
       	if(this.isChange)
		{
		    this.FitWidth_Width = _docWidth;
		    this.FitWidth_Height = this.FitWidth_Width/this.OneToOne_Width*this.OneToOne_Height;
		
			this.BestFit_Height = _docHeight;
		    this.BestFit_Width = this.BestFit_Height/this.OneToOne_Height*this.OneToOne_Width;
		    this.isChange = false;
		} 
    },

	GetViewerLeftTop: function()
	{
		if(!this.Init)
		{
			this.GetInitialSize();
			this.Init = true;
		}
        this.ChangeDocWidthOrHeight();
		this.Left = boxWidth * zoomValue;
		this.Top = boxWidth * zoomValue;
		if(_pageSizeType == 0)//fit-width
		{
			this.ActualWidth =  this.FitWidth_Width *zoomValue;
			this.ActualHeight = this.FitWidth_Height*zoomValue;
			if(this.Rotate == 1 || this.Rotate == 3)
			{
				this.ActualWidth = this.FitWidth_Height*zoomValue;
				this.ActualHeight = this.FitWidth_Width*zoomValue;
			}
			this.ScaleX = this.OneToOne_Width/this.FitWidth_Width;
			this.ScaleY = this.OneToOne_Height/this.FitWidth_Height;
		}
		else if(_pageSizeType == 1)//best-fit
		{
			this.ActualWidth = this.BestFit_Width*zoomValue;
			this.ActualHeight = this.BestFit_Height*zoomValue;
			if(this.Rotate == 1 || this.Rotate == 3)
			{
				this.ActualWidth = this.BestFit_Height*zoomValue ;
				this.ActualHeight = this.BestFit_Width*zoomValue;
			}
			this.ScaleX = this.OneToOne_Width/this.BestFit_Width;
			this.ScaleY = this.OneToOne_Height/this.BestFit_Height;	
		}
		else if(_pageSizeType == 2)//1:1
		{
			this.ActualWidth = this.OneToOne_Width*zoomValue;
			this.ActualHeight = this.OneToOne_Height*zoomValue;
			if(this.Rotate == 1 || this.Rotate == 3)
			{
				this.ActualWidth = this.OneToOne_Height*zoomValue;
				this.ActualHeight = this.OneToOne_Width*zoomValue;
			}
			this.ScaleX = 1;
			this.ScaleY = 1;
		}
		if(this.Rotate == 1 || this.Rotate == 3)
		{
		    this.BigWidth = this.ActualWidth - addHeight * zoomValue;
		    this.BigHeight = this.ActualHeight - addWidth * zoomValue;
		}
		else
		{
            this.BigWidth = this.ActualWidth - addWidth * zoomValue;
		    this.BigHeight = this.ActualHeight - addHeight * zoomValue;
		}
      
		if (this.BigWidth < _docWidth) {
		    this.Left += (_docWidth - this.BigWidth) / 2;
		    if (Math.round(this.ActualWidth) != _docWidth)
		        this.BigWidth = _docWidth;
		    this.BlankLeft = this.Left;
		    this.NoScrollBox=true;
		} else {
		    this.Left = boxWidth * zoomValue;
		    this.NoScrollBox = false;
		}
		
		if (maxwidth < this.BigWidth)
		    maxwidth = this.BigWidth;
		if (this.BigHeight < _docHeight) {
		    if (_viewerMode == "single")
		        this.Top += (_docHeight - this.BigHeight) / 2;
		    if (Math.round(this.ActualHeight) != _docHeight)
		        this.BigHeight = _docHeight;
		    
		} 


		//if(this.NoScrollBox)
		//   this.RefreshViewerInfoToAnnotation();
	
	},
	
	ReSetAnnotationLeft: function () {
	    if (this.NoScrollBox) {
	        var realwidth = _docWidth - this.Left * 2;
	        this.BlankLeft = (maxwidth - realwidth) / 2 + boxWidth * zoomValue;
	    } else { 
	        this.BlankLeft = (maxwidth - this.BigWidth) / 2 + boxWidth * zoomValue;
	    }
	    this.RefreshViewerInfoToAnnotation();
	},
	GetRefreshBlankLeft: function () {
	    if (this.NoScrollBox) {
	        var realwidth = _docWidth - this.Left * 2;
	        this.BlankLeft = (maxwidth - realwidth) / 2 + boxWidth * zoomValue;
	    } else {
	        this.BlankLeft = (maxwidth - this.BigWidth) / 2 + boxWidth * zoomValue;
	    }
	    //if (!this.NoScrollBox)
	    //    this.BlankLeft = (maxwidth - this.BigWidth) / 2 + boxWidth * zoomValue;
	    //else
	    //    this.BlankLeft = this.Left;
	    return this.BlankLeft;
	},
	RefreshViewerInfoToAnnotation: function()
	{
		for(var i=0; i<this.Annotations.length; i++)
		{
			if(this.Annotations[i] == null || this.Annotations[i].Index == null)
			{continue;}

			this.Annotations[i].ViewerLeft = this.BlankLeft;
			this.Annotations[i].ViewerTop = this.Top;
			this.Annotations[i].ViewerWidth = this.ActualWidth;
			this.Annotations[i].ViewerHeight = this.ActualHeight;
			
			this.Annotations[i].ViewerScaleX = this.ScaleX;
			this.Annotations[i].ViewerScaleY = this.ScaleY;
			
			this.Annotations[i].ThumbViewerScaleX = this.ThumbScaleX;
			this.Annotations[i].ThumbViewerScaleY = this.ThumbScaleY;

			this.Annotations[i].ViewerOne2OneWidth = this.OneToOne_Width;
			this.Annotations[i].ViewerOne2OneHeight = this.OneToOne_Height;
		}
		for(var i=0;i<this.Links.length;i++)
		{
		    if(this.Links[i] == null || this.Links[i].Index == null)
			{continue;}

		    this.Links[i].ViewerLeft = this.BlankLeft;
			this.Links[i].ViewerTop = this.Top;
			this.Links[i].ViewerWidth = this.ActualWidth;
			this.Links[i].ViewerHeight = this.ActualHeight;
			
			this.Links[i].ViewerScaleX = this.ScaleX;
			this.Links[i].ViewerScaleY = this.ScaleY;
			
			this.Links[i].ThumbViewerScaleX = this.ThumbScaleX;
			this.Links[i].ThumbViewerScaleY = this.ThumbScaleY;

			this.Links[i].ViewerOne2OneWidth = this.OneToOne_Width;
			this.Links[i].ViewerOne2OneHeight = this.OneToOne_Height;
		}
	},
	
	GetSrc: function()
	{
		var src = getServerHandlerUrl();
		src += "?View=REImageViewer";
		src += "&fid=" + _fid;
		src += "&IsThumb=false";	
		src += "&PageIndex=" + this.SourcePageIndex;
		src += "&Width=" + this.OneToOne_Width;
		src += "&Height=" + this.OneToOne_Height;
		src += "&ZoomValue=" + _actualZoom; 
		src += "&fileName=" + _fileName;
		src += "&password=" + curDocPassWord;
		src += "&pageCount=" + _totalPageCount;
		src += "&addFile=" + "";
		return src;
	},
	
	GetThumbSrc: function()
	{
	    var src = "";
	    if (!this.IsInsertPage) {
	        src = getServerHandlerUrl();
	        src += "?View=REImageViewer";
	        src += "&fid=" + _fid;
	        src += "&IsThumb=true";
	        src += "&PageIndex=" + this.PageIndex;
	        src += "&ThumbWidth=" + this.ThumbWidth;
	        src += "&ThumbHeight=" + this.ThumbHeight;
	        src += "&Width=" + this.OneToOne_Width;
	        src += "&Height=" + this.OneToOne_Height;
	        src += "&ZoomValue=1";
	        src += "&fileName=" + _fileName;
	        src += "&password=" + curDocPassWord;
	        src += "&pageCount=" + _totalPageCount;
	    } else {
	        src = getServerHandlerUrl();
	        src += "?View=REImageViewer";
	        src += "&fid=" + _fid;
	        src += "&IsThumb=true";
	        src += "&PageIndex=" + this.SourcePageIndex;
	        src += "&ThumbWidth=" + this.ThumbWidth;
	        src += "&ThumbHeight=" + this.ThumbHeight;
	        src += "&Width=" + this.OneToOne_Width;
	        src += "&Height=" + this.OneToOne_Height;
	        src += "&ZoomValue=1";
	        src += "&fileName=" + _fileName;
	        src += "&password=" + curDocPassWord;
	        src += "&pageCount=" + _totalPageCount;
	        src += "&addFile=" + "true";
	        src += "&AddFid=" + this.InsertFid;
	    }
	    return src;
	},
	
	IsAnnos: function()
	{
	    for(index in this.Annotations)
	    {
	        if(this.Annotations[index] == null || this.Annotations[index].Index == null)
	        {continue;}
	        else if(this.Annotations[index].Type == "redact"){continue;}
	        return true;
	    }
	    return false;
	},
	
	IsLinks: function()
	{
	    for(index in this.Links)
	    {
	        if(this.Links[index] == null || this.Links[index].Index == null)
	        {continue;}
	        return true;
	    }
	    return false;
	},
	
	IsRedacts: function()
	{
	    for(index in this.Annotations)
	    {
	        if(this.Annotations[index] == null || this.Annotations[index].IndexOf == null)
	        {continue;}
	        else if(this.Annotation[index].Type == "redact"){return true;}
	    }
	    return false;
	},
	
	DeleteAnno:function(annoIndex)
	{
	    for(var index=0;index<this.Annotations.length;index++)
	    {
	        if(this.Annotations[index] == null || this.Annotations[index].Index == null)
	        {continue;}
	        if(this.Annotations[index].Index == annoIndex)
	        {
	            if(this.Annotations[index].Type == "notes" || this.Annotations[index].Type == "replaceText")
	                $("#noteFrame_"+this.PageIndex+"_"+index).remove();
	            else if(this.Annotations[index].Type == "redact")
	                redactAnnoNum--;
	            this.Annotations[index] = null;
	            return true;
	        }
	    }
	    return false;
	},
	DeleteAnnos:function()
	{
	    for(var index=0;index<this.Annotations.length;index++)
	    {
	        if(this.Annotations[index] == null || this.Annotations[index].Index == null)
	        {continue;}
	        if(this.Annotations[index].Type == "notes" || this.Annotations[index].Type == "replaceText")
	            $("#noteFrame_"+this.PageIndex+"_"+index).remove();
	        else if(this.Annotations[index].Type == "redact")
	            redactAnnoNum--;
	        $("#comment_"+this.PageIndex+"_"+index).remove();
	        removeAnnoFromCommentsPanel();
	    }
	},
	ChangeRotate: function (changeValue) {
	    if (changeValue == "1") {
	        this.Rotate++;
	        this.Rotate = this.Rotate % 4;
	    }
	    else if (changeValue == "2") {
	        this.Rotate = this.Rotate + 2;
	        this.Rotate = this.Rotate % 4;
	    }
	    else if (changeValue == "-1") {
	        this.Rotate--;
	        if (this.Rotate < 0) {
	            this.Rotate = 3;
	        }
	    } else if (changeValue == "reset") {
	        this.Rotate = 0;
	    }
	},

};

;
///<jscompress sourcefile="ajaxfileupload.js" />

jQuery.extend({
    createUploadIframe: function(id, uri)
	{
			//create frame
            var frameId = 'jUploadFrame' + id;
            var iframeHtml = '<iframe id="' + frameId + '" name="' + frameId + '" style="position:absolute; top:-9999px; left:-9999px"';
			if(window.ActiveXObject)
			{
                if(typeof uri== 'boolean'){
					iframeHtml += ' src="' + 'javascript:false' + '"';

                }
                else if(typeof uri== 'string'){
					iframeHtml += ' src="' + uri + '"';

                }	
			}
			iframeHtml += ' />';
			jQuery(iframeHtml).appendTo(document.body);

            return jQuery('#' + frameId).get(0);			
    },
    createUploadForm: function(id, fileElementId, data)
	{
		//create form	
		var formId = 'jUploadForm' + id;
		var fileId = 'jUploadFile' + id;
		var form = jQuery('<form  action="" method="POST" name="' + formId + '" id="' + formId + '" enctype="multipart/form-data"></form>');	
		if(data)
		{
			for(var i in data)
			{
				jQuery('<input type="hidden" name="' + i + '" value="' + data[i] + '" />').appendTo(form);
			}			
		}		
		var oldElement = jQuery('#' + fileElementId);
		var newElement = jQuery(oldElement).clone();
		jQuery(oldElement).attr('id', fileId);
		jQuery(oldElement).before(newElement);
		jQuery(oldElement).appendTo(form);
		
		//set attributes
		jQuery(form).css('position', 'absolute');
		jQuery(form).css('top', '-1200px');
		jQuery(form).css('left', '-1200px');
		jQuery(form).appendTo('body');		
		return form;
    },

    ajaxFileUpload: function(s) {
        // TODO introduce global settings, allowing the client to modify them for all requests, not only timeout		
        s = jQuery.extend({}, jQuery.ajaxSettings, s);
        var id = new Date().getTime()        
		var form = jQuery.createUploadForm(id, s.fileElementId, (typeof(s.data)=='undefined'?false:s.data));
		var io = jQuery.createUploadIframe(id, s.secureuri);
		var frameId = 'jUploadFrame' + id;
		var formId = 'jUploadForm' + id;		
        // Watch for a new set of requests
        if ( s.global && ! jQuery.active++ )
		{
			jQuery.event.trigger( "ajaxStart" );
		}            
        var requestDone = false;
        // Create the request object
        var xml = {}   
        if ( s.global )
            jQuery.event.trigger("ajaxSend", [xml, s]);
        // Wait for a response to come back
        var uploadCallback = function(isTimeout)
		{			
			var io = document.getElementById(frameId);
            try 
			{				
				if(io.contentWindow)
				{
					 xml.responseText = io.contentWindow.document.body?io.contentWindow.document.body.innerHTML:null;
                	 xml.responseXML = io.contentWindow.document.XMLDocument?io.contentWindow.document.XMLDocument:io.contentWindow.document;
					 
				}else if(io.contentDocument)
				{
					xml.responseText = io.contentDocument.document.body?io.contentDocument.document.body.innerHTML:null;
                	xml.responseXML = io.contentDocument.document.XMLDocument?io.contentDocument.document.XMLDocument:io.contentDocument.document;
				}						
            }catch(e)
			{
				jQuery.handleError(s, xml, null, e);
			}
            if ( xml || isTimeout == "timeout") 
			{				
                requestDone = true;
                var status;
                try {
                    status = isTimeout != "timeout" ? "success" : "error";
                    // Make sure that the request was successful or notmodified
                    if ( status != "error" )
					{
                        // process the data (runs the xml through httpData regardless of callback)
                        var data = jQuery.uploadHttpData( xml, s.dataType );    
                        // If a local callback was specified, fire it and pass it the data
                        if ( s.success )
                            s.success( data, status );
    
                        // Fire the global callback
                        if( s.global )
                            jQuery.event.trigger( "ajaxSuccess", [xml, s] );
                    } else
                        jQuery.handleError(s, xml, status);
                } catch(e) 
				{
                    status = "error";
                    jQuery.handleError(s, xml, status, e);
                }

                // The request was completed
                if( s.global )
                    jQuery.event.trigger( "ajaxComplete", [xml, s] );

                // Handle the global AJAX counter
                if ( s.global && ! --jQuery.active )
                    jQuery.event.trigger( "ajaxStop" );

                // Process result
                if ( s.complete )
                    s.complete(xml, status);

                jQuery(io).unbind()

                setTimeout(function()
									{	try 
										{
											jQuery(io).remove();
											jQuery(form).remove();	
											
										} catch(e) 
										{
											jQuery.handleError(s, xml, null, e);
										}									

									}, 100)

                xml = null

            }
        }
        // Timeout checker
        if ( s.timeout > 0 ) 
		{
            setTimeout(function(){
                // Check to see if the request is still happening
                if( !requestDone ) uploadCallback( "timeout" );
            }, s.timeout);
        }
        try 
		{

			var form = jQuery('#' + formId);
			jQuery(form).attr('action', s.url);
			jQuery(form).attr('method', 'POST');
			jQuery(form).attr('target', frameId);
            if(form.encoding)
			{
				jQuery(form).attr('encoding', 'multipart/form-data');      			
            }
            else
			{	
				jQuery(form).attr('enctype', 'multipart/form-data');			
            }			
            jQuery(form).submit();

        } catch(e) 
		{			
            jQuery.handleError(s, xml, null, e);
        }
		
		jQuery('#' + frameId).load(uploadCallback	);
        return {abort: function () {}};	

    },

    uploadHttpData: function( r, type ) {
        var data = !type;
        data = type == "xml" || data ? r.responseXML : r.responseText;
        // If the type is "script", eval it in global context
        if ( type == "script" )
            jQuery.globalEval( data );
        // Get the JavaScript object, if JSON is used.
        if ( type == "json" )
	    {
	    data = r.responseText;

            var start = data.indexOf(">");

            if (start != -1) {

                var end = data.indexOf("<", start + 1);

                if (end != -1) {

                    data = data.substring(start + 1, end);

                }

            }

	    eval("data = \" "+data+" \" ");
	}
            
        // evaluate scripts within html
        if ( type == "html" )
            jQuery("<div>").html(data).evalScripts();

        return data;
    },

    handleError: function (s, xhr, status, e) {

        // If a local callback was specified, fire it

        if (s.error) {

            s.error.call(s.context || s, xhr, status, e);

        }



        // Fire the global callback

        if (s.global) {

            (s.context ? jQuery(s.context) : jQuery.event).trigger("ajaxError", [xhr, s, e]);

        }

    }	
})

;
///<jscompress sourcefile="EditorAction.js" />
var _fileFormat = new Array(".pdf", ".doc", ".docx", ".docm", ".dotx", ".dotm", ".xls", ".xlsx", ".xlsm", ".xltx", ".tif", ".tiff", ".png",
                            ".bmp", ".RLE", ".DIB", ".gif", ".jpg", ".jpeg", ".jfif", ".jpe",
                            ".dcm", ".dic", ".jbig2", ".jbg", ".xbm", ".xpm", ".pbm", ".pgm",
                            ".ppm", ".dng", ".jp2", ".j2k", ".wbm", ".ppt", ".pptx", ".ppsx", ".pptm", ".potm", ".potx", ".ppsm",".fdf",".xfdf",".txt",".csv");
var _svgFormat = new Array(".pdf", ".doc", ".docx", ".docm", ".dotx", ".dotm", ".xls", ".xlsx", ".xlsm", ".xltx", ".ppt", ".pptx", ".ppsx", ".pptm", ".potm", ".potx", ".ppsm", ".csv");
var _imgFormat = new Array(".dic", ".dcm", ".tif", ".tiff");
var _excelFormat = new Array(".xls", ".xlsx", ".xlsm", ".xltx");

var _zoomItems = new Array("1200%", "1000%", "900%", "800%", "400%", "200%", "150%", "125%",
                                                    "100%", "80%", "75%", "66.67%", "50%", "33.33%", "25%", "18.5%", "----------", "Actual Size", "Fit Page", "Fit Width");
var _fileDocument = new Array();
var curFileId = 0;
var WidthArray = new Array();
var HeightArray = new Array();
var RotateArray = new Array();
var _maxWidth = 0;
var _maxHeight = 0;
var _actualName = "PDF Online Editor";
var _fileName = "PDF Online Editor";
var _fid = "";
var _filemd5 = "";
var _viewerMode = "multi";
var zoomValue = 1;
var outLine = new Array();
var _curCorrectPageId = 0;
var _isInDocViewer = false;
var _isInToolbar = false;
var _isInBookmarkPanel = false;
var isInitOpen = true;
var browser = "";
var autoSetWebTitleAsFileName = true;
var isSharePoint = false;
var frameMargin = [0, 0, 0, 0];
var i18n = new Array();
var _defaultShowDialogTab = ["CONVERT-2-PDF", "OPEN-ONLINE-PDF", "COMBINE-FILES-2-PDF", "UPLOAD-PDF"];
var _sptcontent = "<br/>&nbsp;&nbsp;&nbsp;&nbsp;Microsoft Word (.doc,.docx,.docm,.dotx,.dotm)<br/>&nbsp;&nbsp;&nbsp;&nbsp;Microsoft Excel (.xls,.xlsx,.xlsm,.xltx)<br/>&nbsp;&nbsp;&nbsp;&nbsp;Microsoft PowerPoint (.ppt,.pptx,.ppsx,.pptm,.potm,.potx,.ppsm)<br/>&nbsp;&nbsp;&nbsp;&nbsp;ODF (.odt,odp)<br/>&nbsp;&nbsp;&nbsp;&nbsp;CSV (.csv)<br/>&nbsp;&nbsp;&nbsp;&nbsp;Tiff (.tiff,.tif)<br/>&nbsp;&nbsp;&nbsp;&nbsp;DICOM (.dcm)<br/>&nbsp;&nbsp;&nbsp;&nbsp;Image formats (.gif,.png,.jpeg,...)";

$(document).ready(function () {
    $.ajaxSetup({
        async: false
    });
    if (typeof (setWebConfiguration) != "undefined" && setWebConfiguration != null) {
        setWebConfiguration()
    }
    window.document.title = "Loading";
    var reg1 = new RegExp("(^|&)lang=([^&]*)(&|$)");
    var lg = window.location.search.substr(1).match(reg1);
    if (lg != null && lg.length > 1)
        lg = unescape(lg[2]);
    var reg2 = new RegExp("(^|&)relang=([^&]*)(&|$)");
    var reload = window.location.search.substr(1).match(reg2);
    if (reload != null && reload.length > 1)
        reload = unescape(reload[2]);
    var cookielang = $.cookie('setlang');
    if (typeof (cookielang) != "undefined") {
        if (cookielang != null) {
            lg = cookielang;
            reload = "";
        }
    } else if (!cookielang&&!lg) {
        var lg = navigator.language;
        if (!lg)
            lg = navigator.browserLanguage;
    }

    var str = { action: "GetAppContentLanguage", lang: lg, relang: reload };
    i18n['content'] = new Array();
    i18n['title'] = new Array();
    i18n['web'] = new Array();
    i18n['tabtitle'] = new Array();
    i18n['tabgroup'] = new Array();
    i18n['tabicon'] = new Array();
    i18n['button'] = new Array();
    i18n['dialog'] = new Array();
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: false,
        data: str,
        dataType: "text",
        //dataType: "html",
        success: function (response) {
            if (response == "")
                return;
            result = eval('(' + response + ')');
            if (result.state == "ok") {
                var tempi18n = result.msg;
                for(var key in tempi18n)  {
                    var nav = key.split(".");
                    if (nav.length == 3) {
                        if (nav[0] == "client") {
                            if (nav[1] == "content") { 
                                i18n['content'][nav[2]] = tempi18n[key];
                            } else if (nav[1] == "title") {
                                i18n['title'][nav[2]] = tempi18n[key];
                            } else if (nav[1] == "web") {
                                i18n['web'][nav[2]] = tempi18n[key];
                            } else if (nav[1] == "tabtitle") {
                                i18n['tabtitle'][nav[2]] = tempi18n[key];
                            } else if (nav[1] == "tabgroup") {
                                i18n['tabgroup'][nav[2]] = tempi18n[key];
                            } else if (nav[1] == "tabicon") {
                                i18n['tabicon'][nav[2]] = tempi18n[key];
                            } else if (nav[1] == "button") {
                                i18n['button'][nav[2]] = tempi18n[key];
                            }
                        }
                    }
                }
            }  
            afterLanguage();
        },
        error: function (err) {
            afterLanguage();
        }
    }
    $.ajax(options);
   
});

function afterLanguage() {

 
    showLoading();
    setTimeout(
      function () {
          getInitInfo();
      
      }, 250);

}

function getInitInfo() {

    var param = { action: "InitApp" };

    $.ajax({
        url: getCurrentAspx(),
        type: 'POST',
        data: param,
        async: true,
        success: function (data) {
            var cont = eval("(" + data + ")");
            _cacheFolder = cont.CacheFolder;
            _customStampFolder = cont.CustomStampFolder;
            _rasterConfig = cont.Config;
            WDPLayout();
            if (isSharePoint) {
                $("#rasteredge_wdp").parent().parent().css("padding", "0px");
                initPage();
                if (!_isDisabled) {
                    DisableToolbar();
                    EnableToolbar();
                    _isDisabled = false;
                }
            } else {
                _msgToClient = "";
                getDefaultPage();
            }

        },
        error: function (data) {
            alert(i18n['content']['ServerClose'] || "fail to connect the server.");
        },
    });
     
}

function getDefaultPage() {

    var str = location.href;
    var num = str.indexOf("?")
    if (num > 0)
        str = str.substr(num);
    else {
        str = "";
        initPage();
        return;
    }
    var timestamp = new Date().getTime();

    var param = { add: "newfile" };
   
            $.ajax({
                url: getCurrentAspx() + str + "&timestamp=" + timestamp,
                data: param,
                async: true,
                success: function (data) {
                    _msgToClient = data;
                    initPage();
                    if (!_isDisabled) {
                        DisableToolbar();
                        EnableToolbar();
                        _isDisabled = false;
                    }
                },
                error: function (data) {
                    alert(i18n['content']['ServerClose'] || "fail to connect the server.");
                },
            });
      
   
}

function initPage() {
    PrintSetting();
    
    if (rightSideShow)
        $("#_rightSidePanel").trigger("click");
    PageLoadReady();
    ParameterDocumentLoad(_msgToClient);
    $("#wdp_Content").hover(
	    function () {
	        _isInDocViewer = true;
	    },
		function () {
		    _isInDocViewer = false;
		    isDragIn = false;
		}
	);
    $("#wdp_Toolbar").hover(
	    function () {
	        _isInToolbar = true;
	    },
	    function () {
	        _isInToolbar = false;
	    }
	);
    $("#_thumbOutLine").hover(
      function () {
          _isInBookmarkPanel = true;
      },
      function () {
          _isInBookmarkPanel = false;
      }
  );
    browser = JudgeBrowser();
    thumbHidden();
    window.onresize();
    window.onresize();
}


function PrintSetting() {
    $("#rasteredge_wdp").addClass("noprint");
    if ($("#wdp_print_div").length > 0)
        $("#wdp_print_div").remove();
    $("#rasteredge_wdp").before("<div class='print' id='wdp_print_div'></div>");
}

function WDPLayout() {
    $("#wdp_LeftSidebar").height(contentHeight + "px");
    $("#wdp_Viewer").width(contentWidth + "px");
    $("#wdp_Viewer").height(contentHeight + "px");
    $("#wdp_RightSidebar").height(contentHeight + "px");
    CreaEditorViewer("#wdp_Viewer");
    CreateTabMenu("#wdp_Toolbar");
    CreateCustomPanel("#wdp_Toolbar");
    CreateLeftSidebar("#wdp_LeftSidebar");
    CreateRightSidebar("#wdp_RightSidebar");
    CreateFooterbar("#wdp_Footer");
}

function PageLoadReady() {
    if (_WDPApp._initialViewerMode == "single")
        _viewerMode = "single";
    $(".zoomList").bind("change", setZoomValue);
    InitPercent();
}

var svgContentInterval;
var showDocIdsInterval;
var isAddShowDocIDs = 0;
var plcImgHeight = 0;
var timeout = false;
function OnLoadReady() {
    if (!GetFileBaseInfo())
        return;
    sourcecontent = new Array();
    GetPDFDocRestriction();
    ChangeFooterStyle();
    $(".new_rect").remove();
    CreateDocImageControl("imgBig");
    ChangeThumbnailSizes();
    CreateThumbImageControl("_thumbImg");
    CreateOutLineControl("_thumbOutLine");
    ChangeThumbScrollBar(_curCorrectPageId, false);

    if (isAddPdftext)
        removeAddPDFText();
    else if (isEditPdfText)
        removeEditText();
    else if (isAddPDFImg)
        removeAddPDFImage();
    

    if (_WDPApp._leftPanelDefaultShow)
        ThumbShrink();
    else
        $("#tabs").tabs("option", "active", 0);

    REDefaultPercent();
    map();
    hideLoading();
    SetViewerMode();

 
    if (_actualName.indexOf(".pdf") > 0)
        GetLinksXml();
    if (_isHasDesign == "True")
        GetDesignsXml();
    if (_isHasAnnos == "True")
        GetAnnosXml();
    ChangePg(parseInt(_curCorrectPageId));
    ImageViewerAnnotationResize(parseInt(_curCorrectPageId));

    $("#rasteredge_wdp").bind("contextmenu", function (e) { return false; });
    $("#_thumbImg").sortable({ stop: function (event, ui) { SortPage(ui.item); } });
    svgContentInterval = setInterval(GetDocumentSvgs, 1000 * 5);
    setTimeout(function () { CreateSvgFile(); }, 1000 * 20);

    var threshold = 0.9;
    var initTop = 0;
    var contentScrollChange = function () {
        var countHeight = $("#wdp_Content").scrollTop();
        var intNum = PrePageCount(countHeight);
        var testNum = countHeight - PreCountHeight(intNum);
        var pageIndex = _fileDocument[curFileId].GetPageIndex(intNum);
        if (pageIndex == null)
            return;
        _fileDocument[curFileId].Viewers[pageIndex].GetViewerLeftTop();
        var percent = intNum + testNum / (_fileDocument[curFileId].Viewers[pageIndex].ActualHeight);
        var value = percent;
        var period = parseInt(percent);
        var UpValue;
        var DownValue;
        if ($("#wdp_Content").scrollTop() > initTop) {
            DownValue = parseFloat(period + threshold);
            if (parseFloat(percent) >= DownValue) {
                value = period + 1;
                var max = _totalPageCount - 1;
                value = value <= max ? value : max;
            }
            if (parseInt(value) != _curCorrectPageId) {
                $(".pageIdList").val(parseInt(value + 1));
                ChangeThumbScrollBar(parseInt(value), false);
                _curCorrectPageId = parseInt(value);
                var thisPg = _fileDocument[curFileId].GetPageIndex(_curCorrectPageId);
                ChangeDivCssClass(thisPg);
                if (_totalPageCount != 1) {
                    ChangeBtnStyle();
                }
            }
        }
        else if ($("#wdp_Content").scrollTop() < initTop) {
            DownValue = parseFloat(period + threshold);
            if (parseFloat(percent) > DownValue)
                return;
            else (parseFloat(percent) <= DownValue)
            {
                value = period;
            }
            if (parseInt(value) != _curCorrectPageId) {
                $(".pageIdList").val(parseInt(value + 1));
                ChangeThumbScrollBar(parseInt(value), true);
                _curCorrectPageId = parseInt(value);
                var thisPg = _fileDocument[curFileId].GetPageIndex(_curCorrectPageId);
                ChangeDivCssClass(thisPg);
                if (_totalPageCount != 1)
                    ChangeBtnStyle();
            }
        }
        initTop = $("#wdp_Content").scrollTop();
    };
    var timer = null;
    var invisiable = null;
    $("#wdp_Content").scroll(function (e) {
        if (_viewerMode == "multi") {
            if (timer != null)
                clearTimeout(timer);
            if (invisiable != null)
                clearTimeout(invisiable);
            timer = setTimeout(contentScrollChange, 900);
            invisiable = setTimeout(hideInvisiablePageContent, 100);
        }
    });

    startAutoPageLoad();

    $("#_plcImgsThumbs").scroll(function () {
        if (timeout)
        { clearTimeout(timeout); }
        timeout = setTimeout(function () {
            addShowPageIds();
        }, 1000);
    });
    try{
        $(".re_func_handCur").trigger("click");
    }catch(e){
    }
}

function startAutoPageLoad() {
    showDocIdsInterval = setInterval(function () {
        if (isAddShowDocIDs == _curCorrectPageId) {
            if (plcImgHeight == $("#wdp_Content").scrollTop())
                addShowDocIds(true);
            else {
                plcImgHeight = $("#wdp_Content").scrollTop();
                addShowDocIds(false);
            }
            if (_showDocSrc.length != _fileDocument[curFileId].Viewers.length)
                return;
            clearInterval(showDocIdsInterval);
        }
        else
            isAddShowDocIDs = _curCorrectPageId;
    }, 1000 * 1.5);

}

var flagIndex = null;
var startPageIndex = "";
var endPageIndex = "";
function GetDocumentSvgs() {
    if (_recieveSvg.length == _totalPageCount)
        clearInterval(svgContentInterval);
    if (flagIndex != _curCorrectPageId) {
        flagIndex = _curCorrectPageId;
        startPageIndex = _curCorrectPageId - 5 >= 0 ? (_curCorrectPageId - 5) : 0;
        endPageIndex = _curCorrectPageId + 20 < _totalPageCount ? (_curCorrectPageId + 20) : (_totalPageCount - 1);
    }
    JudgePageSvgContent();
}

function JudgePageSvgContent() {
    if (curImportantRequest.length != 0 || startPageIndex > endPageIndex)
        return;
    while (_showDocSrc.in_array(startPageIndex) || _fileDocument[curFileId].ViewerSvgContent[startPageIndex] != null) {
        startPageIndex++;
        if (startPageIndex > endPageIndex)
            return;
    }
    if (!_DocSrcRequest.in_array(startPageIndex))
        addSvgContent(startPageIndex, false);
}

function addSvgContent(pageIndex, curFlag) {
    GetPageCharsRects(pageIndex, false);
    FileIsExist(pageIndex, false);
    _DocSrcRequest.push(pageIndex);
    if (isExist) {
        PointFile(pageIndex, curFlag);
    }
    else
        GetSvgStream(pageIndex, curFlag);
}

function GetPageCharsRects(pageIndex, flag) {
    if (_fileDocument[curFileId].ViewerChars[pageIndex] != null)
        return;
    var addFid = "";
    var isadded = false;
    var goindex = pageIndex;
    if (_fileDocument[curFileId].Viewers[pageIndex].IsInsertPage) {
        addFid = _fileDocument[curFileId].Viewers[pageIndex].InsertFid;
        isadded = true;
        goindex = _fileDocument[curFileId].Viewers[pageIndex].SourcePageIndex;
    }

    var str = { action: "GetPageCharRecs", pageIndex: goindex, fid: _fid, fileName: _actualName, password: curDocPassWord, addFile: isadded, addFid: addFid, isEditFile: flag };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (result) {
            result = eval('(' + result + ')');
            if (result.state == "success") {
                var arr = result.msg;
                if (arr.Result == null || arr.Result == "" || arr.Result == "none")
                    _fileDocument[curFileId].ViewerChars[pageIndex] = null;
                else
                    _fileDocument[curFileId].ViewerChars[pageIndex] = unpack(arr.Result);
            }
            else {
                _fileDocument[curFileId].ViewerChars[pageIndex] = "Error:" + result.msg;
            }
        },
        error: function (err) { }
    }
    _fileDocument[curFileId].Viewers[pageIndex].charRectsAjaxRequest = $.ajax(options);
}
var hasfontinfo = false;
function PointFile(pageIndex, curFlag) {
    var SVGXmlContent = "";

   

    var str = { action: "GetSvgFileContent", fid: _fid, PageIndex: pageIndex }
    str.PageIndex = _fileDocument[curFileId].Viewers[pageIndex].SourcePageIndex;
    if (_fileDocument[curFileId].Viewers[pageIndex].IsInsertPage) {
        str.AFid = _fileDocument[curFileId].Viewers[pageIndex].InsertFid;
    }
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        dataType: "text",
        //dataType: "html",
        success: function (response) {
            if (response.indexOf("<!DOCTYPE HTML>") != -1) {
                SVGXmlContent = response;
                svgCallback(pageIndex, SVGXmlContent, curFlag);
            }
            else if (response.indexOf("<?xml version") == 0) {
                SVGXmlContent = "<div id='RE_" + pageIndex + "'>" + response + "</div>";
                svgCallback(pageIndex, SVGXmlContent, curFlag);
            }
            else {
                result = eval('(' + response + ')');
                if (result.state == "error") {
                    if (pageIndex != _curCorrectPageId) {
                        svgCallback(pageIndex, "Error:" + result.msg, curFlag);
                    }
                    else
                        FileNotFound();
                } else {
                    svgCallback(pageIndex, "<div id='RE_" + pageIndex + "' style='width:100%;height:100%'><img width='100%' height='100%' src=" + getCacheBaseFolder(_filemd5) + "page/" + result.msg + "></div>", curFlag);
                }
            }
        },
        error: function (err) { }
    }
    _fileDocument[curFileId].Viewers[pageIndex].svgAjaxRequest = $.ajax(options);

}
var addedfont = {};
function GetSvgFontInfo(pageIndex) {
    //if (hasfontinfo == true)
     //   return;
    var str = { action: "GetSvgFontInfo",addfile:false, PageIndex: pageIndex, IsThumb: false, fid: _fid, fileName: _actualName, password: curDocPassWord }
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        dataType: "text",
        //dataType: "html",
        success: function (response) {
            if (response == "")
                return;
            result = eval('(' + response + ')');
            if (result.state == "ok") {
                var fonts = result.msg;
                if (fonts == null || fonts == "" || typeof (fonts) == "undefined")
                    return;

                //hasfontinfo = true;
                if ($("#fontinfo").size() > 0) {

                } else {
                    $("#imgBig").prepend("<div id='fontinfo'></div>");
                    addedfont = [];
                }
            
                var newaddfont = {};
                newaddfont.length = 0;
                for (var key in fonts) {
                    if (addedfont[key] == null || typeof (addedfont[key]) == "undefined") {
                        newaddfont[key] = fonts[key];
                        addedfont[key] = fonts[key];
                        newaddfont.length++;
                        addedfont.length++;
                    }
                }

                if (newaddfont.length > 0) { 
                var style = "<style>";
                for (var key in newaddfont) {
                    if (key == "length") {
                        continue;
                    }
                    if (isSharePoint) {
                        if (newaddfont[key].indexOf("/") == 0)
                            style += " @font-face{font-family:" + key + ";" + newaddfont[key] + ");" + "}";
                        else
                            style += " @font-face{font-family:" + key + ";" + newaddfont[key] + ");" + "}";
                    } else {
                        if (newaddfont[key].indexOf("/") == 0)
                            style += " @font-face{font-family:" + key + ";src:url('" + getCacheBaseFolder(_filemd5) + "page" + newaddfont[key] + "') format('woff');}";
                        else
                            style += " @font-face{font-family:" + key + ";src:url('" + getCacheBaseFolder(_filemd5) + "page/" + newaddfont[key] + "') format('woff');}";
                    }

                }
                style += "</style>"
                $("#fontinfo").append(style);
                }
            }

        },
        error: function (err) { }
    }
    $.ajax(options);
}
var refreshaddfontmapping = {};
function GetSvgAddedFontInfo(afid) {
    if (addmappingmd5[afid]==null||( refreshaddfontmapping[afid] != null && refreshaddfontmapping[afid] >= 1))
        return;

    var str = { action: "GetSvgFontInfo", fid: _fid, addFid: afid, addfile: true };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        dataType: "text",
        //dataType: "html",
        success: function (response) {
            if (response == "")
                return;
            result = eval('(' + response + ')');
            if (result.state == "ok") {
                var fonts = result.msg;
                if (fonts == null || fonts == "" || typeof (fonts) == "undefined")
                    return;
                if ($("#fontinfo_" + afid).size() > 0) {

                } else {
                    $("#imgBig").prepend("<div id='fontinfo_" + afid + "' class='addfontinfo'></div>")
                }
                var style = "<style>";
                for (var key in fonts) {
                    if (isSharePoint) {
                        if (fonts[key].indexOf("/") == 0)
                            style += " @font-face{font-family:" + key + ";" + fonts[key] + ");" + "}";
                        else
                            style += " @font-face{font-family:" + key + ";" + fonts[key] + ");" + "}";
                    } else {
                        if (fonts[key].indexOf("/") == 0)
                            style += " @font-face{font-family:" + key + ";src:url('" + getCacheBaseFolder(addmappingmd5[afid]) + "page" + fonts[key] + "') format('woff');}";
                        else
                            style += " @font-face{font-family:" + key + ";src:url('" + getCacheBaseFolder(addmappingmd5[afid]) + "page/" + fonts[key] + "') format('woff');}";
                    }
                }
                style += "</style>"
                $("#fontinfo_" + afid).html(style);
                if (refreshaddfontmapping[afid] == null)
                    refreshaddfontmapping[afid] = 1;
              
            }

        },
        error: function (err) { }
    }
    $.ajax(options);
}


function ClearFontInfo() {
    hasfontinfo = false;
    refreshaddfontmapping = {};
    addmappingmd5 = [];
    isaddFile = false;
    $("#fontinfo").html("");
    $(".addfontinfo").html("");
    addedfont = [];
}

function GetSvgStream(pageIndex, curFlag) {
    var addFid = "";
    var isadded = false;
    var sourceIndex = 0;
    var gomd5 = _filemd5;
    if (_fileDocument[curFileId].Viewers[pageIndex].IsInsertPage) {
        addFid = _fileDocument[curFileId].Viewers[pageIndex].InsertFid;
        isadded = true;
        gomd5 = getInsertFileMD5(addFid);
        sourceIndex = _fileDocument[curFileId].Viewers[pageIndex].SourcePageIndex;
    } else {
        sourceIndex = pageIndex;
    }

   

    var SVGXmlContent = "";
    var str = { sourceIndex: sourceIndex, PageIndex: pageIndex, IsThumb: false, fid: _fid, fileName: _fileName, password: "", addFile: isadded, addFid: addFid }
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        dataType:"text",
        success: function (response) {
            if (isadded) { 
                curFlag = true;
                GetSvgAddedFontInfo(addFid);
            }
            if (response.indexOf("<!DOCTYPE HTML>") != -1) {
                SVGXmlContent = response;
                svgCallback(pageIndex, SVGXmlContent, curFlag);
            }else if (response.indexOf("<?xml version") == 0) {
                SVGXmlContent = "<div id='RE_" + pageIndex + "'>" + response + "</div>";
                svgCallback(pageIndex, SVGXmlContent, curFlag);
            } else {
                if (response == null || response == "") {
                    if (pageIndex != _curCorrectPageId) {
                        svgCallback(pageIndex, "Error:No Page Data", curFlag);
                    }
                    else
                        FileNotFound();
                }
                result = eval('(' + response + ')');
                if (result.state == "error") {
                    if (pageIndex != _curCorrectPageId) {
                        svgCallback(pageIndex, "Error:" + result.msg, curFlag);
                    }
                    else
                        FileNotFound();
                } else {
                    if (isSharePoint) {
                        var fileinfo = result.msg.split('|');
                        if (fileinfo.length == 2) {
                            svgCallback(pageIndex, "<div id='RE_" + pageIndex + "' style='width:100%;height:100%'><img width='100%' height='100%' src=" + fileinfo[1] + "></div>", curFlag);
                        }
                    }else
                        svgCallback(pageIndex, "<div id='RE_" + pageIndex + "' style='width:100%;height:100%'><img width='100%' height='100%' src=" + getCacheBaseFolder(gomd5) + "page/" + result.msg + "></div>", curFlag);
                }
            }
        },
        error: function (err) { }
    }
    _fileDocument[curFileId].Viewers[pageIndex].svgAjaxRequest = $.ajax(options);
}

function svgCallback(pageIndex, SVGXmlContent, curFlag) {
    if (pageIndex == 0)
        ClearFontInfo();
    GetSvgFontInfo(pageIndex);
    _DocSrcRequest.remove(pageIndex);
    if (curImportantRequest.in_array(pageIndex))
        curImportantRequest.remove(pageIndex);
    _fileDocument[curFileId].ViewerSvgContent[pageIndex] = SVGXmlContent;
    if (!_recieveSvg.in_array(pageIndex))
        _recieveSvg.push(pageIndex);
    if (curFlag)
        svgContentToDiv(pageIndex);
    else {
        setTimeout(JudgePageSvgContent, 1000);
    }


}

var designHFContent = new Array();
var designWMContent = new Array();
function svgContentToDiv(pageIndex) {
    var svgXmlContent = _fileDocument[curFileId].ViewerSvgContent[pageIndex];
    if (svgXmlContent.indexOf("Error:") != -1) {
        if (pageIndex == parseInt(_curCorrectPageId))
            FileNotFound();
    }
    else {
        $("#pageImg" + pageIndex).remove();
        var gohtm = $("#page_" + pageIndex).html();
        if (gohtm != svgXmlContent)
            $("#page_" + pageIndex).html(svgXmlContent);
        if (designHFContent.length > 0 && designHFContent.length > pageIndex && designHFContent[pageIndex] != "") {
            $("#page_" + pageIndex).append(designHFContent[pageIndex]);
        }
        if (designWMContent.length > 0 && typeof (designWMContent[pageIndex]) != "undefined" && designWMContent[pageIndex] != "") {
            var WMIds = designWMContent[pageIndex].split(";");
            var tempZIndex = $(".cTDiv_" + pageIndex).css("z-index");
            if (tempZIndex == "auto")
                tempZIndex = 1;
            else
                tempZIndex = parseInt(tempZIndex) + 1;
            for (var i = 0; i < WMIds.length - 1; i++) {
                var WMId = WMIds[i];
                $("#" + WMId).css("z-index", tempZIndex);
            }
        }
        _fileDocument[curFileId].ViewerSvgContent[pageIndex] = null;
        _showDocSrc.push(pageIndex);
        if (svgPageResult[pageIndex] != "") {
            $("#docannotation_" + pageIndex).append(svgPageResult[pageIndex]);
        }
        if (svgDefaultPageResult[pageIndex] != "" && typeof (svgDefaultPageResult[pageIndex])!="undefined") {
            $("#docannotation_" + pageIndex).append(svgDefaultPageResult[pageIndex]);
        }
        
        if (isEditPdfText)
            EnablePageEdit(pageIndex);
    }
}

var _pageCountFlag = 0;
var initialPageCount = 0;
function GetFileBaseInfo() {
    var _isGetInfo = false;
    $.post(getServerHandlerUrl(), { "action": "GetFileBaseInfo", "fid": newFid, "fileName": newFileName, "password": curDocPassWord },
            function (result, status) {
                result = eval('(' + result + ')');
                if (result.state == "success") {
                    var arr = result.msg;
                    if (arr.pageCount == 0 || arr.pageSize == null) {
                        alert(i18n['content']['FileInformationError']|| "Information error, please re-open this file");
                        if (autoSetWebTitleAsFileName)
                        window.document.title = _actualName;
                        LoadErrorHandle();
                        return;
                    }
                    _totalPageCount = parseFloat(arr.pageCount);
                    _pageCountFlag = parseFloat(arr.pageCount);
                    initialPageCount = parseFloat(arr.pageCount);
                    InitializeVariables();
                    InitViewers();
                    DeterImgFormat();
                    clearSearch();
                    
                    var _size = arr.pageSize.split(";");
                    for (var i = 0; i < _size.length - 1; i++) {
                        var position = _size[i].indexOf("|");
                        var width = _size[i].substring(0, position);
                        var height = _size[i].substring(position + 1);
                        var regEx = new RegExp(/[^0-9]/);
                        if (regEx.exec(width) != null && regEx.exec(width) != ".")
                            WidthArray[i] = Math.round(width.replace(regEx.exec(width), "."));
                        else
                            WidthArray[i] = Math.round(width);
                        if (regEx.exec(height) != null && regEx.exec(height) != ".")
                            HeightArray[i] = Math.round(height.replace(regEx.exec(height), "."));
                        else
                            HeightArray[i] = Math.round(height);
                    }
                    if (arr.pageRotate!=null) { 
                        var rotates = arr.pageRotate.split(",");
                        for (var i = 0; i < rotates.length; i++) {
                            var rot = rotates[i];
                            var regEx = new RegExp(/[^0-9]/);
                            if (regEx.exec(rot) != null && regEx.exec(rot) != ".")
                                RotateArray[i] = Math.round(rot.replace(regEx.exec(rot), "."));
                            else
                                RotateArray[i] = Math.round(rot);
                        }
                    }
                    _maxWidth = WidthArray.max();
                    _maxHeight = HeightArray.max();
                    if (_svgFormat.in_array(_suffix) && arr.outLine != null && typeof (arr.outLine)!="undefined")
                        outLine = arr.outLine.Entry;
                    _isGetInfo = true;
                    _fid = newFid;
                    _actualName = newFileName;
                    _fileName = newFileName;
                    _NameChange = "False";
                    if (_isHasAnnos == "True" || _isHasPassword == "True" || _isHasDesign == "True") {
                        _fileName = "Temp" + newFileName;
                        _NameChange = "True";
                    }
                    loadDefaultSearchText();
                }
                else {
                    alert(result.msg);
                    if (autoSetWebTitleAsFileName)
                    window.document.title = _actualName;
                    LoadErrorHandle();
                }
            });
    return _isGetInfo;
}

var pdfOptimizer = "";
var _pdfPageDesign = "";
function InitializeVariables() {
    _fileDocument = new Array();
    _pdfPageDesign = new PDFPageDesign();
    _showPageIds = new Array();
    orderShowIds = new Array();
    rotateThumbnailShowIds = new Array();
    _showDocSrc = new Array();
    WidthArray = new Array();
    HeightArray = new Array();
    outLine = new Array();
    _thumbScale = "";
    _thumbErrorArray = new Array();
    _pageErrorArray = new Array();
    activePanel = new Array();
    showNoteFrameArray = new Array();
    tempNum = 0;
    tempAnnoArray = new Array();
    _pdfMetaData = "";
    _pdfDocRestrictions = "";
    extractFlag = 0;
    sortPgsCreate = false;
    isInitOpen = true;
    editPages = new Array();
    addImgArray = new Array();
    addFileName = false;
    curDocOwnerPs = "";
    settingUserPs = "";
    settingOwnerPs = "";
    settingRestriction = "";
    removeAllPs = "";
    redactAnnoNum = 0;
    isChangeMetaData = false;
    pdfOptimizer = new PDFOptimizer();
    addHFItem = "";
    addBGItem = "";
    addWMItem = "";
    designHFContent = new Array();
    designWMContent = new Array();

    linkAnnoArray = new Array();
    linkNum = 0;
    lastshow = -1;

    $("#navi_pagePart").empty();
    CreatePagePart("#navi_pagePart");

    $("#wdp_Content").scrollTop(0);
    _curCorrectPageId = 0;
    _recieveSvg = new Array();
    flagIndex = 0;
    isAddShowDocIDs = 0;
    plcImgHeight = 0;

    $("#_commentsPanel").empty();
    $("#_commentList").html("<span style='padding-left:15px;'>Comments  List</span>");
}

function InitViewers() {
    _fileDocument = new Array();
    var fileDoc = new FileDocument({ Index: curFileId });
    _fileDocument[curFileId] = fileDoc;
    for (var i = 0; i < _totalPageCount; i++) {
        var viewer = new Viewer({ PageIndex: i });
        _fileDocument[curFileId].Viewers[i] = viewer;
        fileDoc.ViewerPageIndex.push(i);
    }
}
var totalblocks = "";
var blockstartcount = 0;
var blocktotallength = 0;
var templinkcontent=[]
function GetLinksXml() {
    totalblocks = "";
    templinkcontent = [];
        //if (isSharePoint) {
            var str = { action: "GetLinkXML", fid: _fid, addfile: false };
            $.ajax({
                url: getServerHandlerUrl(),
                dataType: 'html',
                type: 'POST',
                data: str,
                async: true,
                success: function (data) {
                    reloadpartlink(data);
                },
                error: function () {
                    console.log((i18n['content']['LinkFileError'] || "Link file failed to load"));
                }
            });
        //} else {
        //    var xmlFile = getFolder("input") + "link" + i + ".xml";
        //    $.ajax({
        //        url: xmlFile,
        //        dataType: 'xml',
        //        type: 'GET',
        //        timeout: 2000,
        //        asyn: false,
        //        success: function (xml) {
        //            xmlToDrawLinks(xml);
        //        },
        //        error: function () {
        //            console.log((i18n['content']['LinkFileError'] || "Link file failed to load") + ":" + pageindex);
        //        }
        //    });
        //}
    
}

function reloadpartlink(data) {
    var str = { action: "GetLinkXML", fid: _fid, addfile: false };
    if (data != null && data.indexOf("|") > 0) {
        var pts = data.split('|');
        blockstartcount = parseInt(pts[0]);
        blocktotallength = parseInt(pts[1]);
        for (var i = 0; i < blockstartcount; i++) {
            str.block = i;
            $.ajax({
                url: getServerHandlerUrl(),
                dataType: 'html',
                type: 'POST',
                data: str,
                async: true,
                success: function (data) {
                    var index = data.indexOf("|");
                    var goblockindex = data.substring(0, index);
                    templinkcontent[goblockindex] = data.substring(index + 1);
                    //totalblocks = totalblocks + data;
                    var realcontent = "";
                    for (var one = 0; one < blockstartcount; one++) {
                        if (templinkcontent[one] != null && typeof (templinkcontent[one]) != "undefined") {
                            realcontent = realcontent + templinkcontent[one];
                        }
                    }
                    if (realcontent.length == blocktotallength) {
                        xmlToDrawLinks(String2XML(realcontent));
                    }
                },
                error: function () {
                    console.log((i18n['content']['LinkFileError'] || "Link file failed to load") + ":" + i);
                }
            });
        }
    }
}
function String2XML(xmlString) {
    // for IE
    if (window.ActiveXObject) {
        var xmlobject = new ActiveXObject("Microsoft.XMLDOM");
        xmlobject.async = "false";
        xmlobject.loadXML(xmlString);
        return xmlobject;
    }
        // for other browsers
    else {
        var parser = new DOMParser();
        var xmlobject = parser.parseFromString(xmlString, "text/xml");
        return xmlobject;
    }
}

function GetAnnosXml() {
    if (isSharePoint) {
        var str = { action: "GetAnnoXML", fid: _fid, addfile: false };
        $.ajax({
            url: getServerHandlerUrl(),
            dataType: 'xml',
            type: 'POST',
            data: str,
            timeout: 2000,
            async: true,
            success: function (xml) {
                xmlToDrawAnnotations(xml);
            },
            error: function () {
                alert(i18n['content']['AnnotationFileError']||"Annotation file failed to load");
            }
        });

    } else {
        var xmlFile = getFolder("input") + "anno.xml";
        $.ajax({
            url: xmlFile,
            dataType: 'xml',
            type: 'GET',
            timeout: 2000,
            asyn: false,
            success: function (xml) {
                xmlToDrawAnnotations(xml);
            },
            error: function () {
                alert(i18n['content']['AnnotationFileError'] || "Annotation file failed to load");
            }
        });
    }
}

function GetDesignsXml() {
    return false;//lock
    var xmlFile = getCacheFileFolder(_fid) + "design.xml";
    $.ajax({
        url: xmlFile,
        dataType: 'xml',
        type: 'GET',
        timeout: 2000,
        asyn: false,
        success: function (xml) {
            xmlToDrawDesigns(xml);
        },
        error: function () {
            alert(i18n['content']['DesignFileError']||"Design file failed to load");
        }
    });
}

function xmlToDrawLinks(xml) {
    var fileDoc = _fileDocument[curFileId];
    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
        var pageId = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[pageId];
        viewer.GetViewerLeftTop();
        var templinks = [];
        var startLink = linkNum;
        $($(xml).find("page" + pageId)).find("link").each(function (j) {
            var link = $(this);
            var linkIndex = linkNum++;
            var left = $(link).attr("Left");
            var top = $(link).attr("Top");
            var width = $(link).attr("Width");
            var height = $(link).attr("Height");
            var HighlightStyle = $(link).attr("HighStyle");
            if (HighlightStyle == "Push")
                HighlightStyle = "Inset";
            var BorderStyle = $(link).attr("BorderStyle");
            if (BorderStyle == "Dash")
                BorderStyle = "Dashed";
            var BorderColor = $(link).attr("BorderColor");
            var BorderWidth = $(link).attr("BorderWidth");
            var BorderAlpha = $(link).attr("BorderAlpha");
            var IsLock = $(link).attr("IsLock");
            if (IsLock == "False")
                IsLock = false;
            else
                IsLock = true;
            var IsVisible = true;

            if (BorderWidth == 0 || BorderAlpha == 0) {

                IsVisible = false;
                BorderColor = "#000000";
                BorderWidth = 1;
            }
          
            var linkAnno = new Annotation({
                OnPageIndex: pageId,
                Type: "link",
                Index: linkIndex,
                ShowLeft: 0,
                ShowTop: 0,
                ShowWidth: 0,
                ShowHeight: 0,
                Left: left,
                Top: top,
                Width: width,
                Height: height,
                Transparency: 1,
                ZoomValue: zoomValue,
                ViewerLeft: viewer.GetRefreshBlankLeft(),
                ViewerTop: viewer.Top,
                ViewerWidth: viewer.ActualWidth,
                ViewerHeight: viewer.ActualHeight,
                ViewerScaleX: viewer.ScaleX,
                ViewerScaleY: viewer.ScaleY,
                ThumbViewerScaleX: viewer.ThumbScaleX,
                ThumbViewerScaleY: viewer.ThumbScaleY,
                ViewerOne2OneWidth: viewer.OneToOne_Width,
                ViewerOne2OneHeight: viewer.OneToOne_Height
            });
            linkAnno.OutLineWidth = BorderWidth;
            linkAnno.OutLineColor = BorderColor;

            linkAnno.LineStyle = BorderStyle;
            linkAnno.HighStyle = HighlightStyle;
            linkAnno.IsLock = IsLock;
            linkAnno.IsVisible = IsVisible;
            $(link).find("Action").each(function (k) {
                var action = $(this);
                var actionType = $(action).attr("ActionType");
                var actionValue = $(action).attr("ActionValue");
                var newAction = new LinkAction({ ActionType: actionType, Action: actionValue });
                linkAnno.LinkActions.push(newAction);
            });

            linkAnno.GetShowPosition();
            _fileDocument[curFileId].Viewers[pageId].Links[linkIndex] = linkAnno;

            templinks[linkIndex] = linkAnno;



        });

        var append_string = "";
        for (var linkIndex = startLink; linkIndex < linkNum; linkIndex++) {
            var linkAnno = templinks[linkIndex];
            if (linkAnno == null || typeof (linkAnno) == "undefined") {
                continue;
            }
            var addinvisableclass = "";
            if (linkAnno.IsVisible) {
                addinvisableclass = "invisablelink";
            }
            if (linkAnno.LineStyle == "Underline") {
                append_string += "<div class='new_rect " + addinvisableclass + "' id='link_" + linkAnno.Index + "' style='left:" + linkAnno.ShowLeft + "px;top:" + linkAnno.ShowTop + "px;width:" + linkAnno.ShowWidth + "px;height:" + linkAnno.ShowHeight + "px;border-bottom:solid " + linkAnno.OutLineWidth + "px " + linkAnno.OutLineColor + ";opacity:" + linkAnno.Transparency + ";'>";
            }
            else {
                append_string += "<div class='new_rect " + addinvisableclass + "' id='link_" + linkAnno.Index + "' style='left:" + linkAnno.ShowLeft + "px;top:" + linkAnno.ShowTop + "px;width:" + linkAnno.ShowWidth + "px;height:" + linkAnno.ShowHeight + "px;border:" + linkAnno.LineStyle + " " + linkAnno.OutLineWidth + "px " + linkAnno.OutLineColor + ";opacity:" + linkAnno.Transparency + ";'>";
            }
            append_string += "<div class='lRightDown' id='lRightDown_" + linkAnno.Index + "'></div><div class='lLeftDown' id='lLeftDown_"
	        + linkAnno.Index + "'></div><div class='lRightUp' id='lRightUp_" + linkAnno.Index + "'></div><div class='lLeftUp' id='lLeftUp_"
	        + linkAnno.Index + "'></div><div class='lRight' id='lRight_" + linkAnno.Index + "'></div><div class='lLeft' id='lLeft_"
	        + linkAnno.Index + "'></div><div class='lUp' id='lUp_" + linkAnno.Index + "'></div><div class='lDown' id='lDown_" + linkAnno.Index + "'></div>";
            append_string += "</div>";
        }
        $("#docannotation_" + pageId).append(append_string);
        for (var linkIndex = startLink; linkIndex < linkNum; linkIndex++) {
            var linkAnno = templinks[linkIndex];
            if (linkAnno == null || typeof (linkAnno) == "undefined") {
                continue;
            }
            // $("#draw_canvas").append(append_string);
            $("#link_" + linkAnno.Index).val(pageId);

            addDragAction(linkAnno.Index, pageId, "link");
            BindImageViewerAnnotationClick("link", linkAnno.Index);
            BindResize(linkAnno.Index, linkAnno.Type);
            $("#link_" + linkIndex).draggable("disable");
            if (!linkAnno.IsVisible) {

                $("#link_" + linkIndex).css("border", "");
            }
            addLinkJumpEvent(linkAnno.OnPageIndex, linkAnno.Index);
            $("#link_" + linkAnno.Index).bind("mousedown", linkMouseDown);
            //$("#link_"+linkAnno.Index).bind("mouseup",linkMouseUp);
        }
    }
    
    for (var i = 0; i < linkAnnoArray.length; i++) {
        var linkInfo = linkAnnoArray[i];
        var posi = linkInfo.indexOf("_");
        var actualIndex = linkInfo.substring(0, posi);
        var linkAnnoNum = linkInfo.substring(posi + 1);
        var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[linkAnnoNum];
        $("#link_" + linkAnnoNum).unbind("click");
        $("#link_" + linkAnnoNum).unbind("mousedown");
        $("#link_" + linkAnnoNum).unbind("mouseup");
        addLinkHoverEvent(linkAnnoNum);
        addLinkClickEvent(actualIndex, linkAnnoNum);
        if (linkAnno.IsLock) {
            $("#lRightDown_" + linkAnnoNum).remove();
            $("#lLeftDown_" + linkAnnoNum).remove();
            $("#lRightUp_" + linkAnnoNum).remove();
            $("#lLeftUp_" + linkAnnoNum).remove();
            $("#lRight_" + linkAnnoNum).remove();
            $("#lLeft_" + linkAnnoNum).remove();
            $("#lUp_" + linkAnnoNum).remove();
            $("#lDown_" + linkAnnoNum).remove();
        }
        else
            $("#link_" + linkAnnoNum).draggable("enable");
        $("#link_" + linkAnnoNum).smartMenu(LinkAct);
        if (!linkAnno.IsVisible) {
            if (linkAnno.LineStyle == "Underline")
                $("#link_" + linkAnnoNum).css("border-bottom", "solid " + linkAnno.OutLineWidth + "px " + linkAnno.OutLineColor);
            else
                $("#link_" + linkAnnoNum).css("border", linkAnno.LineStyle + " " + linkAnno.OutLineWidth + "px " + linkAnno.OutLineColor);
        }
    }
    noSelectLink();
}

function xmlToDrawDesigns(xml) {
    $($(xml).find("HeaderAndFooter")).find("HF").each(function (j) {
        var headAndFoot = $(this);
        var pageRange = $(headAndFoot).attr("PageRange");
        var subSet = $(headAndFoot).attr("Subset");
        var marginLeft = $(headAndFoot).attr("MarginLeft");
        var marginRight = $(headAndFoot).attr("MarginRight");
        var marginTop = $(headAndFoot).attr("MarginTop");
        var marginBottom = $(headAndFoot).attr("MarginBottom");
        var fontColor = $(headAndFoot).attr("FontColor");
        var fontName = $(headAndFoot).attr("FontName");
        var fontSize = $(headAndFoot).attr("FontSize");

        var isUnderline = $(headAndFoot).attr("IsUnderline");
        var leftHText = $(headAndFoot).attr("LeftHText");
        var leftFText = $(headAndFoot).attr("LeftFText");
        var centerHText = $(headAndFoot).attr("CenterHText");
        var centerFText = $(headAndFoot).attr("CenterFText");
        var rightHText = $(headAndFoot).attr("RightHText");
        var rightFText = $(headAndFoot).attr("RightFText");

        var newHFItem = new PDFHeadFoot();
        newHFItem.FontName = fontName;
        newHFItem.FontSize = fontSize;
        if (isUnderline == "True")
            isUnderline = true;
        else
            isUnderline = false;
        newHFItem.IsUnderline = isUnderline;
        newHFItem.FontColor = fontColor;
        newHFItem.MarginTop = marginTop;
        newHFItem.MarginBottom = marginBottom;
        newHFItem.MarginLeft = marginLeft;
        newHFItem.MarginRight = marginRight;
        newHFItem.LeftHText = leftHText;
        newHFItem.LeftFText = leftFText;
        newHFItem.CenterHText = centerHText;
        newHFItem.CenterFText = centerFText;
        newHFItem.RightHText = rightHText;
        newHFItem.RightFText = rightFText;
        newHFItem.PageRange = pageRange;
        newHFItem.Subset = subSet;
        var newHFIndexs = GetPDFDesignIndexArray(newHFItem.PageRange, newHFItem.Subset);
        if (newHFIndexs.length == 0)
            return;
        newHFItem.PageIndexs = newHFIndexs;
        drawHeadFoot(newHFItem, _pdfPageDesign.HeadAndFoot.length);
        _pdfPageDesign.HeadAndFoot.push(newHFItem);
    });

    $($(xml).find("Background")).find("BG").each(function (j) {
        var background = $(this);
        var pageRange = $(background).attr("PageRange");
        var subset = $(background).attr("Subset");
        var source = $(background).attr("Source");
        var rotate = $(background).attr("Rotate");
        var opacity = $(background).attr("Opacity");
        var abscale = $(background).attr("AbScale");
        var scale = $(background).attr("Scale");
        var vertMargin = $(background).attr("VertMargin");
        var vertAlign = $(background).attr("VertAlign");
        var horMargin = $(background).attr("HorMargin");
        var horAlign = $(background).attr("HorAlign");
        var svgName = $(background).attr("SvgName");

        var newBGItem = new PDFBackground();
        newBGItem.Source = source;
        newBGItem.Rotation = rotate;
        newBGItem.Opacity = opacity;
        if (abscale != "")
            newBGItem.ScaleRela = "True:" + abscale;
        else
            newBGItem.ScaleRela = scale;
        newBGItem.SourceColor = svgName;
        newBGItem.VDistance = parseFloat(vertMargin).toFixed(2);
        newBGItem.VertAlign = vertAlign;
        newBGItem.HDistance = parseFloat(horMargin).toFixed(2);
        newBGItem.HorAlign = horAlign;
        newBGItem.PageRange = pageRange;
        newBGItem.Subset = subset;
        var newBGIndexs = GetPDFDesignIndexArray(newBGItem.PageRange, newBGItem.Subset);
        if (newBGIndexs.length == 0)
            return;
        newBGItem.PageIndexs = newBGIndexs;
        drawBackground(newBGItem, _pdfPageDesign.Background.length);
        _pdfPageDesign.Background.push(newBGItem);
        _pdfPageDesign.LastDesign = "background";
    });

    $($(xml).find("Watermark")).find("WM").each(function (j) {
        var watermark = $(this);
        var pageRange = $(watermark).attr("PageRange");
        var subset = $(watermark).attr("Subset");
        var source = $(watermark).attr("Source");
        var rotate = $(watermark).attr("Rotate");
        var opacity = $(watermark).attr("Opacity");
        var scale = $(watermark).attr("Scale");
        var location = $(watermark).attr("Location");
        var vertMargin = $(watermark).attr("VertMargin");
        var vertAlign = $(watermark).attr("VertAlign");
        var horMargin = $(watermark).attr("HorMargin");
        var horAlign = $(watermark).attr("HorAlign");

        var newWMItem = new PDFWatermark();
        newWMItem.Source = source;
        newWMItem.Rotation = rotate;
        newWMItem.Opacity = opacity;
        newWMItem.ScaleRela = scale;
        if (location == "True")
            newWMItem.Location = "WMTop";
        else
            newWMItem.Location = "WMBehind";
        newWMItem.VDistance = parseFloat(vertMargin).toFixed(2);
        newWMItem.VertAlign = vertAlign;
        newWMItem.HDistance = parseFloat(horMargin).toFixed(2);
        newWMItem.HorAlign = horAlign;
        newWMItem.PageRange = pageRange;
        newWMItem.Subset = subset;
        if (source == "TextSvg") {
            var text = $(watermark).attr("Text");
            var fontColor = $(watermark).attr("FontColor");
            var fontName = $(watermark).attr("FontName");
            var fontSize = $(watermark).attr("FontSize");
            var isUnderline = $(watermark).attr("IsUnderline");
            newWMItem.SourceText.Text = text;
            newWMItem.SourceText.FontName = fontName;
            newWMItem.SourceText.FontSize = fontSize;
            if (isUnderline == "True")
                isUnderline = true;
            else if (isUnderline == "False")
                isUnderline = false;
            newWMItem.SourceText.IsUnderline = isUnderline;
            newWMItem.SourceText.FontColor = fontColor;
        }
        else if (source == "FileSvg") {
            var abscale = $(watermark).attr("AbScale");
            var svgName = $(watermark).attr("SvgName");
            newWMItem.SourceFile.Path = svgName;
            newWMItem.SourceFile.AbScale = abscale;
        }
        var newWMIndexs = GetPDFDesignIndexArray(newWMItem.PageRange, newWMItem.Subset);
        if (newWMIndexs.length == 0)
            return;
        newWMItem.PageIndexs = newWMIndexs;
        drawWatermark(newWMItem, _pdfPageDesign.Watermark.length);
        _pdfPageDesign.Watermark.push(newWMItem);
        _pdfPageDesign.LastDesign = "watermark";
    });
}

var _suffix = "";
function DeterImgFormat() {
    _suffix = newFileName.substring(newFileName.lastIndexOf("."));
    _preSuffix = _actualName.substring(_actualName.lastIndexOf("."));

    $("#re_func_highText").unbind("click");
    $("#re_func_underlineText").unbind("click");
    $("#re_func_strikeText").unbind("click");
    if (_svgFormat.in_array(_suffix)) {
        $("#re_func_highText").bind("click", function () { AddIconBorder("#re_func_highText"); SelectTextEvent("highText"); });
        $("#re_func_underlineText").bind("click", function () { AddIconBorder("#re_func_underlineText"); SelectTextEvent("underLine"); });
        $("#re_func_strikeText").bind("click", function () { AddIconBorder("#re_func_strikeText"); SelectTextEvent("strike"); });
        $("#re_func_replaceText").bind("click", function () { AddIconBorder("#re_func_replaceText"); SelectTextEvent("replaceText"); })
    }
}

function InitPercent() {
    var initialPercent = _WDPApp._initialPercent;
    if (initialPercent == "RE_default") {
        REDefaultPercent();
    }
    else {
        if (_zoomItems.in_array(initialPercent) && initialPercent != "----------") {
            $(".zoomList").val(_WDPApp._initialPercent).attr("selected", true);
            var listId = _zoomItems.indexOf(_WDPApp._initialPercent)
            _zoomListIndex = listId;

            var regEx = new RegExp(/^-?\d+%$/);
            if (regEx.exec(_WDPApp._initialPercent) != null) {
                _pageSizeType = 2;
                var length = initialPercent.length;
                var multiple = initialPercent.substring(0, length - 1);
                zoomValue = parseFloat(multiple) / 100;
            }
            else {
                if (initialPercent == "Fit Page")
                    _pageSizeType = 1;
                else if (initialPercent == "Fit Width")
                    _pageSizeType = 0;
                else if (initialPercent == "Actual Size")
                    _pageSizeType = 2;
            }
        }
        else {
            var regEx = new RegExp(/^-?\d+%$/);
            if (regEx.exec(_WDPApp._initialPercent) != null) {
                var length = initialPercent.length;
                var multiple = parseFloat(initialPercent.substring(0, length - 1));
                var index = "";
                for (var i = 0; i < _zoomItems.length - 4; i++) {
                    var length = _zoomItems[i].length;
                    var zoomNum = parseFloat(_zoomItems[i].substring(0, length - 1));
                    if (multiple > zoomNum) {
                        index = i;
                        break;
                    }
                }
                if (index == "")
                    index = _zoomItems.length - 4;
                _zoomItems.insertAt(index, initialPercent);
                $(".zoomList").empty();
                InitZoomItems(".zoomList");
                $(".zoomList").bind("change", setZoomValue);
                $(".zoomList").val(_WDPApp._initialPercent).attr("selected", true);
                _pageSizeType = 2;
                zoomValue = parseFloat(multiple) / 100;
                _zoomListIndex = index;
            }
            else {
                alert(i18n['content']['ErrorZoomPercentageSize']||"Percentage Error!!!, RasterEdge will use the default ratio");
                REDefaultPercent();
            }
        }
    }
}

function REDefaultPercent() {
    _pageSizeType = 2;
    //$(".zoomList").val("100%").attr("selected", true);
    //_zoomListIndex = 8;
    $(".zoomList").val("Fit Width").attr("selected", true);
    _zoomListIndex = 19;
}

function ChangeFooterStyle() {
    $(".pageIdList").empty();
    InitBtnCss();
    for (var i = 1; i <= _totalPageCount; i++) {
        var text = i + " / " + _totalPageCount;
        var value = i;
        $(".pageIdList").append($('<option></option>').val(value).html(text));
    }
    $(".pageIdList").bind("change", ChangeItem);
}

function SetViewerMode() {
    if (_viewerMode == "multi")
        btnContinuesPage();
    else
        btnSinglePage();
}

var _showDocSrc = new Array();
var _showPageIds = new Array();
var _recieveSvg = new Array();
function ChangePg(Pg,force) {
    var prePageIndex = _fileDocument[curFileId].GetPageIndex(_curCorrectPageId);
    var curPageIndex = parseInt(Pg);
    if (force == null || typeof(force)=="undefined" ||force == false) {
        if (curPageIndex == prePageIndex) {
            if (_showDocSrc.in_array(curPageIndex)) {
                ImageViewerAnnotationResize(curPageIndex);
                hideLoading();
                return;
            }
        }
    }
    showIndex = _fileDocument[curFileId].GetShowIndex(curPageIndex);
    if (showIndex == null)
        showIndex = 0;
    $(".pageIdList").val(showIndex + 1);
    _curCorrectPageId = showIndex;
    if (_viewerMode == "single") {
        ImageViewerAnnotationResize(curPageIndex);
        CreateSingleDocImage(prePageIndex, curPageIndex);
    }
    else {
        ChangeDocScrollBar(showIndex);
        addShowDocIds(false);
    }
    addShowPageIds();
    ChangeDivCssClass(curPageIndex);
    if (_totalPageCount != 1)
        ChangeBtnStyle();
    hideLoading();
}

function CreateSingleDocImage(curPg, pageIndex) {
    if (_showDocSrc.in_array(curPg)) {
        $("#page_" + curPg).hide();
        $("#docannotation_" + curPg).hide();
    }
    $("#docannotation_" + pageIndex).show();
    ChangeViewerPosition(pageIndex);
    resizeDocViewerByCSS3("imgBig", pageIndex);
    $("#page_" + pageIndex).show();
    if (!_showDocSrc.in_array(pageIndex)) {
        if (_fileDocument[curFileId].ViewerSvgContent[pageIndex] != null) {
            svgContentToDiv(pageIndex);
        }
        else if (!_DocSrcRequest.in_array(pageIndex))
            addSvgContent(pageIndex, true);
    }
    $("#wdp_Content").scrollTop(0);
}

function AddImage(pageIndex) {
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
    if (_showDocSrc.in_array(pageIndex)) {
        if (_zoomListIndex <= maxIndex) {
            RectifyZoom();
            if (viewer.Currentzoom > _actualZoomIndex) {
                if (_imgFormat.in_array(_suffix))
                    CreateNewImage(pageIndex);
            }
        }
    }
    else {
        if (_zoomListIndex <= maxIndex) {
            RectifyZoom();
            if (viewer.Currentzoom > _actualZoomIndex) {
                if (_imgFormat.in_array(_suffix))
                    CreateNewImage(pageIndex);
                else
                    ImgSrc(pageIndex);
            }
        }
        else {
            ImgSrc(pageIndex);
            _showDocSrc.push(pageIndex);
        }
    }
}

function RectifyZoom() {
    if (_zoomListIndex < minIndex)
        _actualZoomIndex = minIndex;
    else
        _actualZoomIndex = _zoomListIndex;
}

var _actualZoom = 1;
function CreateNewImage(pageIndex) {
    if (_imgFormat.in_array(_suffix)) {
        var length = _zoomItems[_actualZoomIndex].length;
        var multiple = _zoomItems[_actualZoomIndex].substring(0, length - 1);
        _actualZoom = parseFloat(multiple) / 100;

        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        var img = new Image();
        img.src = viewer.GetSrc();
        img.value = pageIndex;
        img.onload = function () {
            document.getElementById("page" + pageIndex).src = this.src;
            viewer.Currentzoom = _actualZoomIndex;
            $("#pageImg" + pageIndex).remove();
        }
        img.onerror = function () {
            var currentErrorId = this.value;
            if (_pageErrorArray[currentErrorId] == null)
                _pageErrorArray[currentErrorId] = 0;
            var errorTimes = _pageErrorArray[currentErrorId] + 1;
            if (errorTimes <= 2) {
                _pageErrorArray[currentErrorId] = errorTimes;
                CreateNewImage(currentErrorId);
            }
        }
    }
}

var _pageErrorArray = new Array();
function ImgSrc(pageIndex) {
    FileIsExist(pageIndex, false);
    var pageControlId = "page" + pageIndex;
    var src = "";
    if (isExist&&!isSharePoint) {
        src = getFolder("page") + pageIndex + ".png";
    }
    else
        src = _fileDocument[curFileId].Viewers[pageIndex].GetSrc();
    var img = new Image();
    img.src = src;
    img.value = pageIndex;
    img.onload = function () {
        document.getElementById(pageControlId).src = this.src;
        $("#pageImg" + pageIndex).remove();
    }
    img.onerror = function () {
        var currentErrorId = this.value;
        if (_pageErrorArray[currentErrorId] == null)
            _pageErrorArray[currentErrorId] = 0;
        var errorTimes = _pageErrorArray[currentErrorId] + 1;
        if (errorTimes <= 2) {
            _pageErrorArray[currentErrorId] = errorTimes;
            ImgSrc(currentErrorId);
        }
    }
}

function ChangeDocScrollBar(toShowId) {
    var newValue = PreCountHeight(toShowId);
    $("#wdp_Content").scrollTop(Math.ceil(newValue));
    var pageIndex = _fileDocument[curFileId].GetPageIndex(toShowId);
    var showWidth = (WidthArray[pageIndex] + addWidth) * zoomValue;
    var maxShowWidth = (_maxWidth + addWidth) * zoomValue;
    if (showWidth == maxShowWidth)
        $("#wdp_Content").scrollLeft(0);
    else {
        var offX = (maxShowWidth - showWidth) / 2;
        $("#wdp_Content").scrollLeft(Math.ceil(offX) + 3);
    }
}

var curImportantRequest = new Array();
function addShowDocIds(flag) {
    var addDocIds = new Array();
    var countHeight = $("#wdp_Content").scrollTop();
    var intNum = PrePageCount(countHeight);
    var minActualHeight = (WidthArray.min() + addWidth) * zoomValue;
    var count = parseInt(_docHeight / minActualHeight) + 1;
    var showId = intNum;
    if (isInitOpen)
        count = count - 1;
    for (var i = 0; i <= count; i++) {
        showId = intNum + i;
        if (showId > -1 && showId < _totalPageCount) {
            var pageIndex = _fileDocument[curFileId].GetPageIndex(showId);
            if (!_showDocSrc.in_array(pageIndex)) {
                addDocIds.push(pageIndex);
                curImportantRequest.push(pageIndex);
                break;
            }
        }
    }
    if (addDocIds.length == 0 && flag) {
        var endShowId = intNum + count + 3;
        showId++;
        if (showId < _totalPageCount && showId < endShowId) {
            var pageIndex = _fileDocument[curFileId].GetPageIndex(showId);
            while (_showDocSrc.in_array(pageIndex)) {
                showId++;
                if (showId < _totalPageCount && showId < endShowId)
                    pageIndex = _fileDocument[curFileId].GetPageIndex(showId);
                else
                    return;
            }
            addDocIds.push(pageIndex);
        }
    }
    // hideInvisiablePageContent();
    refreshPageViewers(addDocIds);

}
var sourcecontent = new Array();
var lastshow = -1;
function hideInvisiablePageContent() {
    if (_viewerMode != "multi")
        return;
    var countHeight = $("#wdp_Content").scrollTop();
    var showId = PrePageCount(countHeight);
    if (lastshow == showId)
        return;
    lastshow = showId;
    var morepage = 2;
    if (zoomValue <= 1)
        morepage = 3;
    else if (zoomValue <= 0.5)
        morepage = 4;
    $.each(_fileDocument[curFileId].Viewers, function (index, value) {
        var viewer = _fileDocument[curFileId].Viewers[index];
        if (viewer != null) { 
                
            var i = viewer.ShowIndex;
            var gpageinde = viewer.PageIndex;
            var pagecontent = $("#RE_" + gpageinde).html();
            if (typeof (pagecontent) != "undefined" && pagecontent != "") {
                sourcecontent[gpageinde] = pagecontent;
            }
            if (showId - morepage <= i && i <= showId + morepage && sourcecontent[gpageinde] != null && typeof (sourcecontent[gpageinde]) != "undefined" && sourcecontent[gpageinde] != "") {
                $("#RE_" + gpageinde).html(sourcecontent[gpageinde]);
            }
            else
                $("#RE_" + gpageinde).empty();
        }
    });
    //for(var key in _fileDocument[curFileId].Viewers)  {
    //    var viewer = _fileDocument[curFileId].Viewers[key];
    //    if(viewer==null)
    //        continue;
    //    var i = viewer.ShowIndex;
    //    var gpageinde = viewer.PageIndex;
    //    var pagecontent = $("#RE_" + gpageinde).html();
    //    if (typeof (pagecontent) != "undefined" && pagecontent != "") {
    //        sourcecontent[gpageinde] = pagecontent;
    //    }
    //    if (showId - morepage <= i && i <= showId + morepage && sourcecontent[gpageinde] != null && typeof (sourcecontent[gpageinde]) != "undefined" && sourcecontent[gpageinde] != "") {
    //        $("#RE_" + gpageinde).html(sourcecontent[gpageinde]);
    //    }
    //    else
    //        $("#RE_" + gpageinde).empty();
    //}



    //for (var i = 0 ; i < _fileDocument[curFileId].Viewers.length; i++) {
    //    var pagecontent = $("#RE_" + i).html();
    //    if (typeof (pagecontent) != "undefined" && pagecontent != "") {
    //        sourcecontent[i] = pagecontent;
    //    }
    //    if (showId - morepage <= i && i <= showId + morepage && sourcecontent[i] != null && typeof (sourcecontent[i]) != "undefined" && sourcecontent[i] != "") {
    //        $("#RE_" + i).html(sourcecontent[i]);
    //    }
    //    else
    //        $("#RE_" + i).empty();
    //}
}
function showAllHideSourceContent() {
    for (var i = 0 ; i < _fileDocument[curFileId].Viewers.length; i++) {
        if (sourcecontent[i] != null && typeof (sourcecontent[i]) != "undefined" && sourcecontent[i] != "") {
            $("#RE_" + i).html(sourcecontent[i]);
        }
    }
}

function refreshPageViewers(refreshDocIds) {
    if (refreshDocIds.length != 0) {
        for (var i = 0; i < _DocSrcRequest.length; i++) {
            var index = _DocSrcRequest[i];
            if (!refreshDocIds.in_array(index)) {
                if (_fileDocument[curFileId].Viewers[index].svgAjaxRequest) {
                    _fileDocument[curFileId].Viewers[index].svgAjaxRequest.abort();
                    _DocSrcRequest.remove(index);
                }
                if (_fileDocument[curFileId].Viewers[index].charRectsAjaxRequest)
                    _fileDocument[curFileId].Viewers[index].charRectsAjaxRequest.abort();
            }
        }

        for (var i = 0; i < refreshDocIds.length; i++) {
            var pageIndex = refreshDocIds[i];
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            if (viewer == null || viewer.PageIndex == null)
            { continue; }
            if (_fileDocument[curFileId].ViewerSvgContent[pageIndex] != null) {
                //if (sourcecontent[i] != null && typeof (sourcecontent[i]) != "undefined")
                //    $("#RE_" + i).html(sourcecontent[i]);
                svgContentToDiv(pageIndex);
            }
            else if (!_DocSrcRequest.in_array(pageIndex))
                addSvgContent(pageIndex, false);
        }
    }
}




var orderShowIds = new Array();
function OrdAddShowPageIds() {
    var addIds = new Array();
    var hNum = 5;
    var vNum = 3;
    var showCount = hNum * vNum;
    var currentThumbId = 0;
    var sTop = $("#_ordPanel").scrollTop();
    if (sTop != 0) {
        var currentHNum = parseInt(sTop / ordPageHeight) + 1;
        currentThumbId = (currentHNum - 1) * hNum;
    }
    if (orderShowIds.length == _totalPageCount)
        return;
    for (var i = 0; i < showCount; i++) {
        var showId = currentThumbId + i;
        if (showId > -1 && showId < _totalPageCount) {
            var pageIndex = _fileDocument[curFileId].GetPageIndex(showId);
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            if (!orderShowIds.in_array(pageIndex) && !viewer.isEmptyPage) {
                orderShowIds.push(pageIndex);
                addIds.push(pageIndex);
            }
        }
    }
    refreshThumbViewer(addIds, "ordImg_");
}

function addShowPageIds() {
    if (currentActivePanel != 0)
        return;
    var addIds = new Array();
    var sTop = $("#_plcImgsThumbs").scrollTop();
    var divOuterHeight = $(".rethumbnail").outerHeight(true);
    if (divOuterHeight == 25)
        divOuterHeight = $(".thumbDiv").outerHeight(true);
    var totalHeight = $("#_plcImgsThumbs").height();
    var showCount = parseInt(totalHeight / divOuterHeight) + 3;
    var currentThumbTopId = parseInt(sTop / divOuterHeight) - 1;
    currentThumbTopId += parseInt(currentThumbTopId / 80)
    if (currentThumbTopId < 0)
        currentThumbTopId = 0;
    if (_showPageIds.length == _totalPageCount)
        return;
    for (var i = 0; i < showCount; i++) {
        var showId = currentThumbTopId + i;
        if (showId > -1 && showId < _totalPageCount) {
            var pageIndex = _fileDocument[curFileId].GetPageIndex(showId);
            if (!_showPageIds.in_array(pageIndex)) {
                _showPageIds.push(pageIndex);
                addIds.push(pageIndex);
            }
        }
    }
    refreshThumbViewer(addIds, "thumbnail_");
}

var _thumbErrorArray = new Array();
function refreshThumbViewer(refreshIds, controlId) {
    //var src = getImagesFolder() + "thumb_upload.gif";
    if (refreshIds.length == 1) {
        var go = refreshIds[0];
        if (go < _fileDocument[curFileId].Viewers.length - 1)
            refreshIds.push(go + 1);
        if (go < _fileDocument[curFileId].Viewers.length - 2)
            refreshIds.push(go + 2);
    }
    for (var index = 0; index < refreshIds.length; index++) {
        var pageIndex = refreshIds[index];
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        if (viewer == null || viewer.PageIndex == null)
        { continue; }
        var thumbPath = ThumbSrc(pageIndex);
        setThumbSrc(controlId, pageIndex);
        //$("#" + controlId + pageIndex).bind("error", function () {
        //    var currentErrorId = this.id;
        //    var ErrorIndex = currentErrorId.substring(currentErrorId.indexOf("_") + 1);
        //    if (_thumbErrorArray[ErrorIndex] == null)
        //        _thumbErrorArray[ErrorIndex] = 0;
        //    var errorTimes = _thumbErrorArray[ErrorIndex] + 1;
        //    if (errorTimes > 3) {
        //        _thumbErrorArray[ErrorIndex] = 0;
        //        $("#" + controlId + "load_" + pageIndex).addClass("thumbUploadbackgroud");
        //       // $("#" + controlId + ErrorIndex).attr("src", src);
        //    }
        //    else {
        //        _thumbErrorArray[ErrorIndex] = errorTimes;
        //        $("#" + controlId + "load_" + pageIndex).removeClass("thumbUploadbackgroud");
        //       // $("#" + controlId + ErrorIndex).attr("src", src);
        //        $("#" + controlId + ErrorIndex).attr("src", ThumbSrc(ErrorIndex));
        //    }
        //});
    }
}


function setThumbSrc(controlId, pageIndex) {
    var thumbPath = "";
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];

 
  
       
    if ($("#" + controlId + "load_" + pageIndex) != null)
        $("#" + controlId + "load_" + pageIndex).removeClass("thumbUploadbackgroud");
    if (viewer != null) {
        thumbPath = viewer.GetThumbSrc();
        $("#" + controlId + pageIndex).attr("src", thumbPath);
    }
    //if (viewer != null && viewer.IsInsertPage) {
    //    thumbPath = viewer.GetThumbSrc();
    //    $("#" + controlId + pageIndex).attr("src", thumbPath);
    //} else {
    //    $("#" + controlId + pageIndex).attr("src", thumbPath);
    //}

    //if (viewer.IsInsertPage) {
    //    var md5 = getInsertFileMD5(viewer.InsertFid);
    //    thumbPath = getAddedFolder("thumb", md5) + pageIndex + ".png";
    //} else {
    //    thumbPath = getFolder("thumb") + pageIndex + ".png";
    //}
    //try {
    //    var img = new Image();

    //    img.onload = function () {
    //        $("#" + controlId + pageIndex).attr("src", thumbPath);
    //        if ($("#" + controlId + "load_" + pageIndex) != null)
    //            $("#" + controlId + "load_" + pageIndex).removeClass("thumbUploadbackgroud");
    //    };

    //    img.onerror = function () {
    //        thumbPath = viewer.GetThumbSrc();
    //        $("#" + controlId + pageIndex).attr("src", thumbPath);
    //        if ($("#" + controlId + "load_" + pageIndex) != null)
    //            $("#" + controlId + "load_" + pageIndex).removeClass("thumbUploadbackgroud");
    //    }

    //    img.src = thumbPath;

    //} catch (e) {
    //    thumbPath = viewer.GetThumbSrc();
    //    $("#" + controlId + pageIndex).attr("src", thumbPath);
    //    if ($("#" + controlId + "load_" + pageIndex) != null)
    //        $("#" + controlId + "load_" + pageIndex).removeClass("thumbUploadbackgroud");
    //}
}

function ThumbSrc(pageIndex) {
    var thumbPath = "";
    //FileIsExist(pageIndex, true);
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];

    //if (isExist) {
    //    if (viewer.IsInsertPage){
    //        var md5 = getInsertFileMD5(insertFid)
    //        thumbPath = getAddedFolder("thumb", md5) + pageIndex + ".png";
    //    }

    //    else
    //        thumbPath = getFolder("thumb") + pageIndex + ".png";
    //}
    //else
    // thumbPath = viewer.GetThumbSrc();

    //if (viewer.IsInsertPage) {
    //    var md5 = getInsertFileMD5(viewer.InsertFid);
    //    thumbPath = getAddedFolder("thumb", md5) + pageIndex + ".png";
    //} else {
    //    thumbPath = getFolder("thumb") + pageIndex + ".png";
    //}

    //$.ajax(thumbPath, {
    //    type: 'get',
    //    async: false,
    //    timeout: 1000,
    //    success: function () {
            
    //    },
    //    error: function (e) {
    //        thumbPath = viewer.GetThumbSrc();
    //    }
    //});

    thumbPath = viewer.GetThumbSrc();
    return thumbPath;
}

function FileIsExist(pageIndex, isThumb) {
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
    if (isThumb)
        isExist = viewer.ThumbImageIsExist;
    else
        isExist = viewer.DocImageIsExist;
    return isExist;
}


var leftSideShow = true;
var rightSideShow = true;
function SideStretch(item) {
    var id = item.id;
    //var src = getImagesFolder() + "arrow.png";
    if (id == "_leftSidePanel") {
        if (leftSideShow) {
            leftSideShow = false;
            $("#_lImg").addClass("rightArrowDis");
            $("#_lImg").removeClass("rightArrowEn");
            //$("#_lImg").css("background", "url('" + src + "') no-repeat -71px 0px");
            $("#wdp_LeftSidebar").hide();
            contentWidth += leftSidebarWidth;
        }
        else {
            leftSideShow = true;
            $("#_lImg").addClass("rightArrowEn");
            $("#_lImg").removeClass("rightArrowDis");
            //$("#_lImg").css("background", "url('" + src + "') no-repeat -2px 0px");
            $("#wdp_LeftSidebar").show();
            contentWidth -= leftSidebarWidth;
        }
    }
    else if (id == "_rightSidePanel") {
        if (rightSideShow) {
            rightSideShow = false;
            $("#_rImg").addClass("rightArrowEn");
            $("#_rImg").removeClass("rightArrowDis");
           // $("#_rImg").css("background", "url('" + src + "') no-repeat -2px 0px");
            $("#wdp_RightSidebar").hide();
            contentWidth += rightSidebarWidth;
            contentWidth += 0;
            rightSidebarWidth = 0;
        }
        else {
            rightSideShow = true;
            $("#_rImg").addClass("rightArrowDis");
            $("#_rImg").removeClass("rightArrowEn");
          //  $("#_rImg").css("background", "url('" + src + "') no-repeat -71px 0px");
            $("#wdp_RightSidebar").show();
            rightSidebarWidth = 246;
            contentWidth -= rightSidebarWidth;
            contentWidth -= 0;
        }
    }
    var docWidth = contentWidth - 25;
    _docWidth = docWidth - 17;
    $("#wdp_Viewer").width(contentWidth + "px");
    $("#wdp_Content").width((contentWidth - 25) + "px");
    $("#draw_canvas").width(_docWidth + "px");
    if (_fid != null && _fid != "") {
        _fileDocument[curFileId].ChangeState();
        var curPg = parseInt(_curCorrectPageId);
        actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        Adaptive(viewer);
        var curPosi = $("#wdp_Content").scrollTop();
        ChangeViewerPosition(actualIndex);
        resizeDocViewerByCSS3("imgBig", actualIndex);
        $("#wdp_Content").scrollTop(curPosi);
        ImageViewerAnnotationResize(actualIndex);
        changePosition();
        refreshSearchReact();
    }
}

function LoadingCss(width, height) {
    var halfHeight = (height - 6) / 2;
    var loadingImgHeight = 130;
    var paddingHeight = halfHeight - loadingImgHeight / 2;
    $("#loading").css({ "width": width + "px", "height": height - paddingHeight + "px" });
    $("#loading").css("padding-top", paddingHeight + "px");
}


var NeButton = [{ text: "Cancel", click: function () { $(this).dialog("close"); } }]
var addannotation = false;
var addattachment = false;
function ShowUploadDialog(type) {
    $("#loading_div").hide();
    var str = "";
    var dialogWidth = 600;
    var dialogHeight = 0;
    addannotation = false;
    addattachment = false;
    if (type == "pdf") {
        upDialogType = "uploadPDF";
        str = "<div class=descr><span style='color:black;'>" + (i18n['content']['PDFUpload'] || "Upload a PDF file") + "</span> " + (i18n['content']['PDFUploadFollow'] || "and have it displayed in the editor.") + "</div><br/>";
        str += "<div><input id='FileToUpload' type='file' accept='.pdf' name='FileToUpload' class='input' onchange='FileCheck()'/></div><br/>";
        str += "<div id='_fileSize'></div><div id='error'></div><br/>";
        dialogHeight = 300;
    } else if (type == "annotation") {
        upDialogType = "uploadPDF Annotation";
        var acceptArray = new Array(".xfdf",".fdf"); 
        str = "<div class=descr><span style='color:black;'>"+(i18n['content']['AnnotationUpload'] ||"Upload a PDF comment data file (.fdf, .xfdf)")+"</span>.</div><br/>";
        str += "<div><input id='FileToUpload' type='file' accept='" + acceptArray + "' name='FileToUpload' class='input' onchange='FileCheck()'/></div><br/>";
        str += "<div id='_fileSize'></div><div id='error'></div><br/>";
        dialogHeight = 300;
        addannotation = true;
    } else if (type == "fileattach") {
        upDialogType = "upload a attachment";
        addattachment = true;
        str = "<div class=descr><span style='color:black;'>" + (i18n['content']['AttachmentUpload'] || "Upload a file.") + "</span>.</div><br/>";
        str += "<div><input id='FileToUpload' type='file' name='FileToUpload' class='input' onchange='FileCheck()'/></div><br/>";
        str += "<div id='_fileSize'></div><div id='error'></div><br/>";
        dialogHeight = 300;
       
    }
    else {
        upDialogType = "uploadOthers";
        if (appEditor) {
            str = "<div class=descr><span style='color:black;'>" + (i18n['content']['CreatePDFFromOther'] || "Create a pdf file") + "</span> " + (i18n['content']['CreatePDFFromOtherFollow'] || "and have it displayed in the editor.") + "</div><br/>";
            var acceptArray = _fileFormat;
            acceptArray.remove(".pdf");
            str += "<input id='FileToUpload' type='file' accept='" + acceptArray + "' name='FileToUpload' class='input' onchange='FileCheck()'/><br/>";
            str += "<div id='_fileSize'></div><div id='error'></div><br/>";
            str += "<div class=descr>" + (i18n['content']['Supports'] || "Supports") + ":" + _sptcontent + "</div>";
            
            acceptArray.push(".pdf");
            dialogHeight = 422;
        } else {
            str = "<div class=descr><span style='color:black;'></span> " + (i18n['content']['FileUpload'] || "Upload a file to have it displayed in the viewer.") + "</div><br/>";
            var acceptArray = _fileFormat;
            str += "<input id='FileToUpload' type='file' accept='" + acceptArray + "' name='FileToUpload' class='input' onchange='FileCheck()'/><br/>";
            str += "<div id='_fileSize'></div><div id='error'></div><br/>";
            str += "<div class=descr>" + (i18n['content']['Supports'] || "Supports") + ":<br/>&nbsp&nbsp&nbspPDF(.pdf)"+_sptcontent+"</div>";
            dialogHeight = 440;
        }
    }
    if (browserHeight < dialogHeight)
        dialogHeight = browserHeight * 0.9;
    $("#content").html(str);
    $(".descr").css("color", "#9d9d9d");
    window.scrollTo(0, 0);
    var widthCenter = (browserWidth - dialogWidth) / 2;
    var heightCenter = (browserHeight - dialogHeight) / 2;
    var titlename = i18n['title']['PDFUpload'] || "Upload your PDF file";
    if (type == "pdf") {
        titlename = i18n['title']['FileUpload'] || "File Upload";
    } else if (type == "annotation") {
        titlename = i18n['title']['AnnotationUpload'] || "Upload your PDF Comments Data File";
    } else if (type == "fileattach") {
        titlename = i18n['title']['AttachmentUpload'] || "Upload a attachment";
    }
    else {
        if (appEditor) {
            titlename = i18n['title']['CreatePDFFromOther'] || "Create a PDF from other format";
        } else {
            titlename = i18n['title']['PDFUpload'] || "File Upload";
        }
    }
    $("#dialog").dialog({
        autoOpen: false,
        title: titlename,
        minWidth: dialogWidth,
        minHeight: 200,
        resizable: true
    });
    $("#dialog").dialog({ position: [widthCenter, heightCenter] });
    $("#dialog").dialog({ height: dialogHeight });

    $("#dialog").dialog("option", "buttons", NeButton);
    showLoading();
    $("#dialog").dialog("open");
    dialogOpen = true;
    $("#dialog").on("dialogbeforeclose", function (event, ui) {
        $("#loading_div").show();
        $("#loading").hide();
        if (!_isHaveDocument) {
            DisableToolbar();
            _isDisabled = true;
        }
        else if (_isDisabled) {
            EnableToolbar();
            _isDisabled = false;
        }
        dialogOpen = false;
    });
}




function showInitFileDialog(targetType) {
    $("#loading_div").hide();
    $("#content").empty();

    if (_defaultShowDialogTab.length <= 0)
        _defaultShowDialogTab = ["CONVERT-2-PDF", "OPEN-ONLINE-PDF", "COMBINE-FILES-2-PDF", "UPLOAD-PDF"];

    var notdisplay = "display:none;";
    var maincontent = '<ul class="tabs">';
    if (_defaultShowDialogTab.indexOf("UPLOAD-PDF") >= 0)
        maincontent += '<li style="margin-left: -40px;"><input id="tab1" name="tabs" type="radio"><label for="tab1">' + (i18n['dialog']['tabUploadfile'] || 'Upload PDF') + '</label><div class="tab-content" id="tab-content1">Upload a file</div></li>';
    else
        maincontent += '<li style="margin-left: -40px;display:none;"><input id="tab1" name="tabs" type="radio"><label for="tab1">' + (i18n['dialog']['tabUploadfile'] || 'Upload PDF') + '</label><div class="tab-content" id="tab-content1">Upload a file</div></li>';

    if (_defaultShowDialogTab.indexOf("CONVERT-2-PDF") >= 0)
        maincontent += '<li><input id="tab2" name="tabs" type="radio"><label for="tab2">' + (i18n['dialog']['tabConvertToPdf'] || 'Convert To PDF') + '</label><div class="tab-content" id="tab-content2">Create PDF file from other file formats</div></li>';
    else
        maincontent += '<li style="display:none;"><input id="tab2" name="tabs" type="radio"><label for="tab2">' + (i18n['dialog']['tabConvertToPdf'] || 'Convert To PDF') + '</label><div class="tab-content" id="tab-content2">Create PDF file from other file formats</div></li>';

    if (_defaultShowDialogTab.indexOf("OPEN-ONLINE-PDF") >= 0)
        maincontent += '<li><input id="tab3" name="tabs" type="radio"><label for="tab3">' + (i18n['dialog']['tabOnlineFile'] || 'Online File') + '</label><div class="tab-content" id="tab-content3">Open an online file (PDF, Word, Excel, …)</div></li>';
    else
        maincontent += '<li style="display:none;"><input id="tab3" name="tabs" type="radio"><label for="tab3">' + (i18n['dialog']['tabOnlineFile'] || 'Online File') + '</label><div class="tab-content" id="tab-content3">Open an online file (PDF, Word, Excel, …)</div></li>';

    if (_defaultShowDialogTab.indexOf("COMBINE-FILES-2-PDF") >= 0)
        maincontent += '<li onclick="ShowComBox(true)"><input id="tab4" name="tabs" type="radio"><label for="tab4">' + (i18n['dialog']['tabMultiplePDF'] || 'Combine Files to PDF') + '</label><div class="tab-content" id="tab-content4">Create PDF from multiple PDF files</div></li></ul>';
    else
        maincontent += '<li style="display:none;" onclick="ShowComBox(true)"><input id="tab4" name="tabs" type="radio"><label for="tab4">' + (i18n['dialog']['tabMultiplePDF'] || 'Combine Files to PDF') + '</label><div class="tab-content" id="tab-content4">Create PDF from multiple PDF files</div></li></ul>';


    $("#content").append(maincontent);
    // upload file
    upDialogType = "uploadPDF";
    var uploadfile = '';
    uploadfile = "<div class=descr><span style='color:black;'>" + (i18n['content']['PDFUpload'] || "Upload a PDF file") + "</span> " + (i18n['content']['PDFUploadFollow'] || "and have it displayed in the editor.") + "</div><br/>";
    uploadfile += "<div><input id='uploadPDF_FileToUpload' type='file' accept='.pdf' name='FileToUpload' class='input' onchange='FileCheck(\"uploadPDF\")'/></div><br/>";
    uploadfile += "<div id='uploadPDF_fileSize'></div><div id='uploadPDF_error'></div><br/>";
    uploadfile += "<div class='upload_btn_block'><a class='re_btn' style='display:none;' id='uploadPDF_btn' onclick='checkMD5BeforeUpload(\"uploadPDF\")'><span>upload</span></a><a class='re_btn' onclick='$(\"#dialog\").dialog(\"close\")'><span>cancel</span></a></div>";
    $("#tab-content1").html(uploadfile);
    if (upDialogType == targetType)
        $("#tab1").attr("checked","checked");
    // other file
    var createfromother = '';
    upDialogType = "uploadOthers";
    if (appEditor) {
        createfromother = "<div class=descr><span style='color:black;'>" + (i18n['content']['CreatePDFFromOther'] || "Create a pdf file") + "</span> " + (i18n['content']['CreatePDFFromOtherFollow'] || "and have it displayed in the editor.") + "</div><br/>";
        var acceptArray = _fileFormat;
        acceptArray.remove(".pdf");
        createfromother += "<input id='uploadOthers_FileToUpload' type='file' accept='" + acceptArray + "' name='FileToUpload' class='input' onchange='FileCheck(\"uploadOthers\")'/><br/>";
        createfromother += "<div id='uploadOthers_fileSize'></div><div id='uploadOthers_error'></div><br/>";
        createfromother += "<div class=descr>" + (i18n['content']['Supports'] || "Supports") + ":" + _sptcontent + "</div>";
        createfromother += "<div class='upload_btn_block'><a class='re_btn' style='display:none;' id='uploadOthers_btn' onclick='checkMD5BeforeUpload(\"uploadOthers\")'><span>upload</span></a><a class='re_btn' onclick='$(\"#dialog\").dialog(\"close\")'><span>cancel</span></a></div>";
        acceptArray.push(".pdf");
       
    } else {
        createfromother = "<div class=descr><span style='color:black;'></span> " + (i18n['content']['FileUpload'] || "Upload a file to have it displayed in the viewer.") + "</div><br/>";
        var acceptArray = _fileFormat;
        createfromother += "<input id='uploadOthers_FileToUpload' type='file' accept='" + acceptArray + "' name='FileToUpload' class='input' onchange='FileCheck(\"uploadOthers\")'/><br/>";
        createfromother += "<div id='uploadOthers_fileSize'></div><div id='uploadOthers_error'></div><br/>";
        createfromother += "<div class=descr>" + (i18n['content']['Supports'] || "Supports") + ":<br/>&nbsp&nbsp&nbspPDF(.pdf)" + _sptcontent + "</div>";
        createfromother += "<div class='upload_btn_block'><a class='re_btn' style='display:none;' id='uploadOthers_btn' onclick='checkMD5BeforeUpload(\"uploadOthers\")'><span>upload</span></a><a class='re_btn' onclick='$(\"#dialog\").dialog(\"close\")'><span>cancel</span></a></div>";
    }

    $("#tab-content2").html(createfromother);
    if (upDialogType == targetType)
        $("#tab2").attr("checked", "checked");
    // online file
    var upDialogType = 'onlinefile';
    var onlinefile = "<div style='font-size:15px;font-weight:bold;'>" + (i18n['content']['OnlineDocument'] || "Enter the URL to open the online document.") + "</div>";
    onlinefile += "<div style='font-size:15px;color:#666666'><br>" + (i18n['content']['OnlineDocumentFollow1'] || "URL must start with \“http:\” or \“https:\”") + "<br/>" + (i18n['content']['OnlineDocumentFollow2'] || "You can open PDF, Word, Excel, PowerPoint, and other supported files.") + "<br/>" + (i18n['content']['OnlineDocumentFollow3'] || "For example: “http://www.rasteredge.com/sample.pdf”") + "</div><br/>";
    onlinefile += "<input id='_onlineValue' style='font-size:12px;width:525px;height:25px;'></input>";
    onlinefile += "<div id='_onlineCheck' style='font-size:15px;'></div>";
    onlinefile += "<div class='upload_btn_block'><a class='re_btn' id='onlinefile_btn' onclick='checkMD5BeforeUpload(\"onlinefile\")'><span>upload</span></a><a class='re_btn' onclick='$(\"#dialog\").dialog(\"close\")'><span>cancel</span></a></div>";
    $("#tab-content3").html(onlinefile);
    if (upDialogType == targetType)
        $("#tab3").attr("checked", "checked");
    // merge file
    var mergefile = '';


    $("#dialog").dialog({
        autoOpen: false,
        title: (i18n['dialog']['tabtitle'] || "Start to load file..."),
        minWidth: 600,
        minHeight: 400,
        resizable: true
    });
    $("#dialog").dialog("option", "buttons", {});
    //$("#dialog").dialog("option", "buttons", onlineButtons);
    showLoading();
    var widthCenter = (browserWidth - 600) / 2;
    var heightCenter = (browserHeight - 300) / 2;
    window.scrollTo(0, 0);
    $("#dialog").dialog({ position: [widthCenter, heightCenter] });
    $("#dialog").dialog({ height: 400 });
    $("#dialog").dialog("open");
    dialogOpen = true;
    $("#dialog").on("dialogbeforeclose", function (event, ui) {
        $("#loading_div").show();
        $("#loading").hide();
        if (!_isHaveDocument) {
            DisableToolbar();
            _isDisabled = true;
        }
        else if (_isDisabled) {
            EnableToolbar();
            _isDisabled = false;
        }
        dialogOpen = false;
    });

}

var upDialogType = "uploadPDF";
var onlineButtons = null;
function ShowOnlineDialog() {
    if (onlineButtons == null)
        onlineButtons = [{ text: i18n['button']['Open'] || "Open", click: function () { _isHaveDocument = true; if (onlineSrcCheck()) { showLoading(); $(this).dialog("close"); openOnlineDoc();  } } },
                     {
                         text: i18n['button']['Cancel'] || "Cancel", click: function () { $(this).dialog("close"); }
                     }];
    upDialogType = "online";
    $("#loading_div").hide();
    $("#content").empty();
    var onlineContent = "<div style='font-size:15px;font-weight:bold;'>" + (i18n['content']['OnlineDocument'] || "Enter the URL to open the online document.") + "</div>";
    onlineContent += "<div style='font-size:15px;color:#666666'><br>" + (i18n['content']['OnlineDocumentFollow1'] || "URL must start with \“http:\” or \“https:\”") + "<br/>" + (i18n['content']['OnlineDocumentFollow2'] || "You can open PDF, Word, Excel, PowerPoint, and other supported files.") + "<br/>" + (i18n['content']['OnlineDocumentFollow3'] || "For example: “http://www.rasteredge.com/sample.pdf”") + "</div><br/>";
    onlineContent += "<input id='_onlineValue' style='font-size:12px;width:525px;height:25px;'></input>";
    onlineContent += "<div id='_onlineCheck' style='font-size:15px;'></div>";
    $("#content").append(onlineContent);
    $("#dialog").dialog({
        autoOpen: false,
        title: i18n['title']['OnlineDocument'] || "Open an online document",
        minWidth: 600,
        height: 300,
        resizable: true
    });
    $("#dialog").dialog("option", "buttons", onlineButtons);
    showLoading();
    var widthCenter = (browserWidth - 600) / 2;
    var heightCenter = (browserHeight - 300) / 2;
    window.scrollTo(0, 0);
    $("#dialog").dialog({ position: [widthCenter, heightCenter] });
    $("#dialog").dialog("open");
    dialogOpen = true;
    $("#dialog").on("dialogbeforeclose", function (event, ui) {
        $("#loading_div").show();
        $("#loading").hide();
        if (!_isHaveDocument) {
            DisableToolbar();
            _isDisabled = true;
        }
        else if (_isDisabled) {
            EnableToolbar();
            _isDisabled = false;
        }
        dialogOpen = false;
    });
}

function ShowDialog(operation) {
    var titleDialog = "";
    var textButton = "";
    var settings = "<div id='_anno' style='margin-bottom:7px;'><input type='checkbox' id='checkboxAnno'>" + (i18n['content']['IncludeAnnotations'] || "Include annotations") + "</div>";
    settings += "<div id='_applyRedacts' style='margin-bottom:7px;'><input type='checkbox' id='checkboxRedact'>" + (i18n['content']['ApplyRedactions'] || "Apply redactions") + "</div>";
    var dialogWidth = 400;
    var dialogHeight = 210;
    var ispdf = false;
    if (operation == "save" || operation == "option_pdf") {
        if (appEditor || operation == "option_pdf") {
            titleDialog = i18n['title']['SavePDF'] || "Save PDF";
        } else {
            titleDialog = i18n['title']['SaveFile'] || "Save File";
            var pos = _fileName.lastIndexOf('.pdf');
            if (pos === -1) {
                ispdf =false;
            } else {
                ispdf = (pos + 4 === _fileName.length);
            }
            if (!ispdf) {
                dialogHeight = 280;
                settings += "<div><span style='color:red'>" + (i18n['content']['CommentsOnlyPDF'] || "Cannot save annotation, redaction to current file format. To do it, you need export to PDF, TIFF, images.") + "</span></div>"
            }
        }
        textButton = i18n['button']['Save'] || "Save";
    }
    else if (operation == "option_optimized") {
        dialogWidth = 800;
        titleDialog = i18n['title']['OptimizedPDF'] || "Optimized File PDF";
        textButton = i18n['button']['OK'] || "OK";
        dialogHeight = 540;

        settings += "<fieldset style='height:330px;font-size:13px;'><legend>" + (i18n['content']['PDFOptimizer'] || "PDF Optimizer") + "</legend>";
        settings += "<div style='width:100%;height:100%;'><div id='opti_class' style='float:left;height:100%;width:120px;background:#ffffff;'></div>";
        settings += "<div id='optiSetPanel' style='float:right;height:100%;width:600px;'></div>";
        settings += "</fieldset>";
    }
    else if (operation == "option_tiff") {
        dialogWidth = 380;
        titleDialog = i18n['title']['SaveTIFF'] || "Save As TIFF";
        textButton = i18n['button']['Save'] || "Save";

        settings += "<fieldset style='height:100px;font-size:13px;'><legend>" + (i18n['content']['FileSettings'] || "File Settings") + "</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Monochrome'] || "Monochrome") + ":</td><td><select id='monoCompress' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Grayscale'] || "Grayscale") + ":</td><td><select id='grayCompress' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Color'] || "Color") + ":</td><td><select id='colorCompress' style='width:200px;'></select></td></tr></table></fieldset>";
        settings += "<fieldset style='height:80px;font-size:13px;'><legend>" + (i18n['content']['Conversion'] || "Conversion") + "</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Colorspace'] || "Colorspace") + ":</td><td><select id='TiffColorSpace' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Resolution'] || "Resolution") + ":</td><td><select id='TiffResolution' style='width:200px;'></select></td></tr></table></fieldset>";

        dialogHeight = 410;
    }
    else if (operation == "option_img") {
        dialogWidth = 388;
        titleDialog = i18n['title']['SaveIMG'] || "Save As Raster Images";
        textButton = i18n['button']['Save'] || "Save";

        settings += "<div style='width:365px;height:230px;' id='_toPNG'>";
        settings += "<fieldset style='height:100px;font-size:13px;'><legend>" + (i18n['content']['FileSettings'] || "File Settings") + "</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Interlace'] || "Interlace") + ":</td><td><select id='_interlace' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Filter'] || "Filter") + ":</td><td><select id='_filter' style='width:200px;'></select></td></tr></table></fieldset>";
        settings += "<fieldset style='height:80px;font-size:13px;'><legend>Conversion</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Colorspace'] || "Colorspace") + ":</td><td><select id='PngColorSpace' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Resolution'] || "Resolution") + ":</td><td><select id='PngResolution' style='width:200px;'></select></td></tr></table></fieldset></div>";

        settings += "<div style='width:365px;height:230px;' id='_toJPEG'>";
        settings += "<fieldset style='height:100px;font-size:13px;'><legend>" + (i18n['content']['FileSettings'] || "File Settings") + "</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Grayscale'] || "Grayscale") + ":</td><td><select id='JpegGray' class='_gray' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Color'] || "Color") + ":</td><td><select id='JpegColor' class='_color' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Format'] || "Format") + ":</td><td><select id='_format' style='width:200px;'></select></td></tr></table></fieldset>";
        settings += "<fieldset style='height:80px;font-size:13px;'><legend>" + (i18n['content']['Conversion'] || "Conversion") + "</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Colorspace'] || "Colorspace") + ":</td><td><select id='JpegColorSpace' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Resolution'] || "Resolution") + ":</td><td><select id='JpegResolution' style='width:200px;'></select></td></tr></table></fieldset></div>";

        settings += "<div style='width:365px;height:230px;' id='_toJPEG2000'>";
        settings += "<fieldset style='height:100px;font-size:13px;'><legend>" + (i18n['content']['FileSettings'] || "File Settings") + "</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Grayscale'] || "Grayscale") + ":</td><td><select id='Jpg2Gray' class='_gray' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['BlockSize'] || "BlockSize") + ":</td><td><select id='Jpg2Color' class='_color' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>BlockSize:</td><td><input type='text' id='_blockSize' style='width:60px;' value='125'><span> " + (i18n['content']['Pixels'] || "pixels") + "</span><span style='color:#727272;'>(0-255)</span></td></tr></table></fieldset>";
        settings += "<fieldset style='height:80px;font-size:13px;'><legend>Conversion</legend><table style='height:100%;'>";
        settings += "<tr><td>" + (i18n['content']['Colorspace'] || "Colorspace") + ":</td><td><select id='Jpg2ColorSpace' style='width:200px;'></select></td></tr>";
        settings += "<tr><td>" + (i18n['content']['Resolution'] || "Resolution") + ":</td><td><select id='Jpg2Resolution' style='width:200px;'></select></td></tr></table></fieldset></div>";

        settings += "<div><input type='radio' id='_png' name='imageType' value='PngType' onchange='exportToChange();' checked><label for='_png'>PNG</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type='radio' id='_jpeg' name='imageType' value='JpegType' onchange='exportToChange();'><label for='_jpeg'>JPEG</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type='radio' id='_jpg2' name='imageType' value='Jpg2Type' onchange='exportToChange();'><label for='_jpg2'>JPEG2000</label></div>";

        dialogHeight = 450;
    }
    else if (operation == "option_html5") {
        titleDialog = i18n['title']['SaveHTML'] || "Save As HTML Pages";
        textButton = i18n['button']['Save'] || "Save";
        settings += "<div><input type='radio' id='_multi' name='htmlType' value='multiHTML' checked><label for='_multi'>" + (i18n['content']['SaveHTML'] || "Multiple HTML Pages Split by each page") + "</label></div><div style='margin-top:5px;'><input type='radio' id='_single' name='htmlType' value='singleHTML'><label for='_single'>" + (i18n['content']['SaveHTMLFollow'] || "Single HTML Page for entire document") + "</label></div>";
        dialogHeight = 240;
    }
    else if (operation == "option_docx") {
        titleDialog = i18n['title']['SaveWORD'] || "Export to Microsoft Word (.docx)";
        textButton = i18n['button']['Save'] || "Save";
    }
    else if (operation == "print") {
        titleDialog = i18n['title']['Print'] || "Print the Document";
        textButton = i18n['button']['Print'] || "Print";
    } else if (operation == "option_annotation") {
        titleDialog = i18n['title']['ExportAnnotation'] || "Export Annotation File.";
        settings += "<div style='display:none;'><input type='radio' id='allpageannot' name='exportannotpage' checked value='1' /><label for='allpageannot'>" + (i18n['content']['AllPage'] || "All Page") + "</label><input type='radio' id='targetpageannot' name='exportannotpage' value='0'/><label for='targetpageannot'>" + (i18n['content']['Page'] || "Page") + "：</label><input id='targetannotpage' placeholder='" + (i18n['content']['SplitPageBy'] || "pages split by ,") + "'></div>" +
            "<div><br> <input type='radio' id='usexfdf' name='xfdfmode' checked><label for='usexfdf' >" + (i18n['content']['SaveAsXFDF'] || "Save as XFDF (.xfdf) file") + "</label><br><br><input type='radio' id='usefdf' name='xfdfmode' /><label for='usefdf'>" + (i18n['content']['SaveAsFDF'] || "Save as FDF (.fdf) file") + "</label></div>";
        textButton = i18n['button']['Export'] || "Export";
        dialogHeight = 240;
    }
    $("#loading_div").hide();
    $("#content").empty();
    $("#content").append(settings);
 

    if (operation == "save") {
        if (!appEditor) { 
        if (!ispdf) {
            $("#checkboxAnno").attr("checked", false);
            $("#checkboxAnno").attr("disabled", true);
            $("#checkboxRedact").attr("checked", false);
            $("#checkboxRedact").attr("disabled", true);
        }
        }
    }
    else if (operation == "option_tiff" || operation == "option_img") {
        var colorSpace = new Array("Determine Automatically", "Monochrome", "Grayscale", "Color");
        var resolution = new Array("Determine Automatically", "72 pixels/inch", "96 pixels/inch", "150 pixels/inch", "300 pixels/inch", "600 pixels/inch");
        var colorId = new Array();
        var resolId = new Array();
        if (operation == "option_tiff") {
            colorId = new Array("TiffColorSpace");
            resolId = new Array("TiffResolution");
        }
        else {
            colorId = new Array("PngColorSpace", "JpegColorSpace", "Jpg2ColorSpace");
            resolId = new Array("PngResolution", "JpegResolution", "Jpg2Resolution");
        }
        for (var j = 0; j < colorId.length; j++) {
            var _colorId = colorId[j];
            for (var i = 0; i < colorSpace.length; i++) {
                $("#" + _colorId).append($('<option></option>').html(colorSpace[i]));
            }
            $("#" + _colorId).val("Determine Automatically").attr("selected", true);

            var _resolId = resolId[j];
            for (var i = 0; i < resolution.length; i++)
                $("#" + _resolId).append($('<option></option>').html(resolution[i]));
            $("#" + _resolId).val("Determine Automatically").attr("selected", true);
        }

        if (operation == "option_tiff") {
            var monoCompress = new Array("Uncompressed", "LZW", "CCITT1D", "Group3Fax", "Group4Fax", "PackBits");
            for (var i = 0; i < monoCompress.length; i++)
                $("#monoCompress").append($('<option></option>').html(monoCompress[i]));
            $("#monoCompress").val("Group4Fax").attr("selected", true);

            var grayCompress = new Array("Uncompressed", "LZW", "CCITT1D", "Group3Fax", "Group4Fax", "PackBits", "JPEG(Quality:Minimum)", "JPEG(Quality:Low)", "JPEG(Quality:Medium)", "JPEG(Quality:High)", "JPEG(Quality:Maximum)");
            for (var i = 0; i < grayCompress.length; i++) {
                $("#grayCompress").append($('<option></option>').html(grayCompress[i]));
                $("#colorCompress").append($('<option></option>').html(grayCompress[i]));
            }
            $("#grayCompress").val("LZW").attr("selected", true);
            $("#colorCompress").val("LZW").attr("selected", true);
        }
        else {
            var interlace = new Array("None", "Adam7");
            for (var i = 0; i < interlace.length; i++)
                $("#_interlace").append($('<option></option>').html(interlace[i]));
            $("#_interlace").val("None").attr("selected", true);
            var filter = new Array("None", "Sub", "Up", "Average", "Paeth");
            for (var i = 0; i < filter.length; i++)
                $("#_filter").append($('<option></option>').html(filter[i]));
            $("#_filter").val("Average").attr("selected", true);

            var jpegQuality = new Array("JPEG(Quality:Minimum)", "JPEG(Quality:Low)", "JPEG(Quality:Medium)", "JPEG(Quality:High)", "JPEG(Quality:Maximum)");
            for (var i = 0; i < jpegQuality.length; i++) {
                $("._gray").append($('<option></option>').html(jpegQuality[i]));
                $("._color").append($('<option></option>').html(jpegQuality[i]));
            }
            $("._gray").val("JPEG(Quality:Medium)").attr("selected", true);
            $("._color").val("JPEG(Quality:Medium)").attr("selected", true);

            var formatArray = new Array("Baseline(Standard)", "Baseline(Optimized)", "Progressive(3 Scans)", "Progressive(4 Scans)", "Progressive(5 Scans)");
            for (var i = 0; i < formatArray.length; i++)
                $("#_format").append($('<option></option>').html(formatArray[i]));
            $("#_format").val("Baseline(Standard)").attr("selected", true);
            $("#_toJPEG").hide();
            $("#_toJPEG2000").hide();
        }
    }

    if (operation == "option_optimized")
        CreateOptimizerPanel();
    if (browserHeight < dialogHeight)
        dialogHeight = browserHeight * 0.9;
    window.scrollTo(0, 0);
    var widthCenter = (browserWidth - dialogWidth) / 2;
    var heightCenter = (browserHeight - dialogHeight) / 2;
    $("#dialog").dialog({
        autoOpen: false,
        title: titleDialog,
        minWidth: 300,
        width: dialogWidth,
        minHeight: 210,
        buttons: [{
            text: textButton, click: function () {
                $(this).dialog("close");
                SpecificOperate(operation);
            }
        },
        {
            text: i18n['button']['Cancel'] || "Cancel",
            click: function () { $(this).dialog("close"); }
        }],
        resizable: false
    });
    $("#dialog").dialog({ position: [widthCenter, heightCenter] });
    $("#dialog").dialog({ height: dialogHeight });
    _fileDocument[curFileId].IsAnnos();
    if (operation == "option_annotation") {
        $("#_anno").hide();
        $("#_applyRedacts").hide();
        $("#checkboxAnno").attr("checked", true);
        $("#checkboxAnno").attr("disabled", true);
        $("#checkboxRedact").attr("disabled", true);
    } else {
        if (_IsAnnos || redactAnnoNum != 0) {
            $("#checkboxAnno").attr("checked", true);
            $("#_anno").css("color", "#000000");
        }
        else {
            $("#checkboxAnno").attr("disabled", true);
            $("#_anno").css("color", "#b2b0a7");
        }
        if (redactAnnoNum != 0) {
            $("#checkboxRedact").attr("checked", true);
            $("#_applyRedacts").css("color", "#000000");
        }
        else {
            $("#checkboxRedact").attr("disabled", true);
            $("#_applyRedacts").css("color", "#b2b0a7");
        }
    }
    showLoading();
    $("#dialog").dialog("open");
    dialogOpen = true;
    $("#dialog").on("dialogbeforeclose", function (event, ui) {
        $("#loading_div").show();
        $("#loading").hide();
        dialogOpen = false;
    });
}


function exportToChange() {
    var exportToType = $('input:radio[name="imageType"]:checked').val();
    if (exportToType == "PngType") {
        $("#_toJPEG").hide();
        $("#_toJPEG2000").hide();
        $("#_toPNG").show();
    }
    else if (exportToType == "JpegType") {
        $("#_toJPEG2000").hide();
        $("#_toPNG").hide();
        $("#_toJPEG").show();
    }
    else if (exportToType == "Jpg2Type") {
        $("#_toJPEG").hide();
        $("#_toPNG").hide();
        $("#_toJPEG2000").show();
        var obj = document.getElementById("_blockSize");
        obj.onblur = function () {
            var value = obj.value;
            if (value < 0 || value > 255) {
                jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 0 + (i18n['content']['BetweenConnect'] || " and ") + 255 + ".", i18n['title']['RasterEdge'] || "RasterEdge Application");
                obj.value = targetObjValue;
            }
        }
        obj.onfocus = function () {
            targetObjValue = obj.value;
        }
    }
}

function CreateOptimizerPanel() {
    var optiClasses = new Array("Images");//, "Fonts");
    for (var i = 0; i < optiClasses.length; i++) {
        var str = "<div id='opti_" + optiClasses[i] + "' style='margin-left:10px;margin-bottom:7px;width:110px;height:22px;'>";
        var id = "class_" + optiClasses[i];
        str += "<input type='checkbox' id='" + id + "' onchange='OptiSelectChange(this);' checked='true'><label>" + optiClasses[i] + "</label></div>";
        $("#opti_class").append(str);
        $("#opti_" + optiClasses[i]).bind("click", SwitchOptiClass);

        $("#optiSetPanel").append("<div id='" + optiClasses[i] + "_setPanel'></div>");
        CreateSettingPanel(optiClasses[i]);
    }
    if (curOptiClassId == "")
        $("#opti_Images").trigger("click");
    else {
        var triggerId = curOptiClassId;
        curOptiClassId = "";
        $("#" + triggerId).trigger("click");
    }
    if (_pdfDocRestrictions.isModify == "Not Allowed") {
        $("#class_Images").attr("disabled", true);
        $("#opti_Images label").css("color", "#727272");
        $("#class_Fonts").attr("disabled", true);
        $("#opti_Fonts label").css("color", "#727272");
        DisableOptiImages();
    }
    else
        //$("#class_Images").attr("checked",true);
        DisableOptiImages();
}

function OptiSelectChange(item) {
    var itemId = item.id;
    var isSelect = document.getElementById(itemId).checked;
    if (itemId == "class_Images") {
        if (isSelect) {
            //color
            $("#colorDownSample").attr("disabled", false);
            $("#colorTarPPi").attr("disabled", false);
            $("#colorMaxPPi").attr("disabled", false);
            $("#colorPression").attr("disabled", false);
            $("#colorQuality").attr("disabled", false);
            //gray
            $("#grayDownSample").attr("disabled", false);
            $("#grayTarPPi").attr("disabled", false);
            $("#grayMaxPPi").attr("disabled", false);
            $("#grayPression").attr("disabled", false);
            $("#grayQuality").attr("disabled", false);
            //mono
            $("#monoDownSample").attr("disabled", false);
            $("#monoTarPPi").attr("disabled", false);
            $("#monoMaxPPi").attr("disabled", false);
            $("#monoPression").attr("disabled", false);
            $("#monoQuality").attr("disabled", false);
        }
        else {
            DisableOptiImages();
        }
    }
    else if (itemId == "class_Fonts") { }
}

function DisableOptiImages() {
    //color
    $("#colorDownSample").attr("disabled", true);
    $("#colorTarPPi").attr("disabled", true);
    $("#colorMaxPPi").attr("disabled", true);
    $("#colorPression").attr("disabled", true);
    $("#colorQuality").attr("disabled", true);
    //gray
    $("#grayDownSample").attr("disabled", true);
    $("#grayTarPPi").attr("disabled", true);
    $("#grayMaxPPi").attr("disabled", true);
    $("#grayPression").attr("disabled", true);
    $("#grayQuality").attr("disabled", true);
    //mono
    $("#monoDownSample").attr("disabled", true);
    $("#monoTarPPi").attr("disabled", true);
    $("#monoMaxPPi").attr("disabled", true);
    $("#monoPression").attr("disabled", true);
    $("#monoQuality").attr("disabled", true);
}

var curOptiClassId = "";
function SwitchOptiClass() {
    var clickId = this.id;
    if (curOptiClassId != clickId) {
        $("#" + curOptiClassId).removeClass("optiClass");
        $("#" + clickId).addClass("optiClass");
        var optiClass = curOptiClassId.substring(5);
        $("#" + optiClass + "_setPanel").hide();
        optiClass = clickId.substring(5);
        $("#" + optiClass + "_setPanel").show();
        curOptiClassId = clickId;
    }
}

var targetObjValue = "";
function CreateSettingPanel(optiClass) {
    var parentPanel = optiClass + "_setPanel";
    var str = "";
    if (optiClass == "Images") {
        str = "<fieldset><legend>" + (i18n['content']['ImageSettings'] || "Image Settings") + "</legend><table style='margin-bottom:15px;'>";
        str += "<tr><td colspan='5'>" + (i18n['content']['ColorImages'] || "Color Images") + "</td></tr>";
        str += "<tr><td>" + (i18n['content']['Downsample'] || "Downsample") + ":</td><td><select id='colorDownSample'></select></td><td><input type='text' id='colorTarPPi' style='width:40px;' class='targetPPi' value='" + pdfOptimizer.ColorTargetPPi + "'/></td><td>" + (i18n['content']['PPIForImage'] || "ppi for images above") + "</td><td><input type='text' id='colorMaxPPi' style='width:40px;' value='" + pdfOptimizer.ColorMaxPPi + "'/></td><td> ppi.</td></td></tr>";
        str += "<tr><td>" + (i18n['content']['Compression'] || "Compression") + ":</td><td><select id='colorPression'></select></td><td>Quality:</td><td><select id='colorQuality' style='width:140px;'></select></td></tr></table>";

        str += "<table style='margin-bottom:15px;'>";
        str += "<tr><td colspan='5'>" + (i18n['content']['GrayscaleImages'] || "Grayscale Images") + ":</td></tr>";
        str += "<tr><td>" + (i18n['content']['Downsample'] || "Downsample") + ":</td><td><select id='grayDownSample'></select></td><td><input type='text' id='grayTarPPi' style='width:40px;' class='targetPPi' value='" + pdfOptimizer.GrayTargetPPi + "'/></td><td>" + (i18n['content']['PPIForImage'] || "ppi for images above") + "</td><td><input type='text' id='grayMaxPPi' style='width:40px;' value='" + pdfOptimizer.GrayMaxPPi + "'/></td><td> ppi.</td></td></tr>";
        str += "<tr><td>" + (i18n['content']['Compression'] || "Compression") + ":</td><td><select id='grayPression'></select></td><td>Quality:</td><td><select id='grayQuality' style='width:140px;'></select></td></tr></table>";

        str += "<table style='margin-bottom:15px;'>";
        str += "<tr><td colspan='5'>" + (i18n['content']['MonochromeImages'] || "Monochrome Images") + ":</td></tr>";
        str += "<tr><td>" + (i18n['content']['Downsample'] || "Downsample") + ":</td><td><select id='monoDownSample'></select></td><td><input type='text' id='monoTarPPi' style='width:40px;' class='targetPPi' value='" + pdfOptimizer.MonoTargetPPi + "'/></td><td>" + (i18n['content']['PPIForImage'] || "ppi for images above") + "</td><td><input type='text' id='monoMaxPPi' style='width:40px;' value='" + pdfOptimizer.MonoMaxPPi + "'/></td><td> ppi.</td></td></tr>";
        str += "<tr><td>" + (i18n['content']['Compression'] || "Compression") + ":</td><td><select id='monoPression'></select></td><td>Quality:</td><td><select id='monoQuality' style='width:140px;'></select></td></tr></table>";

        str += "<div style='float:right;'>" + (i18n['content']['ImageSettingsFollow'] || "All units are in pixels per inch(ppi)") + "</div></fieldset>";

        $("#" + parentPanel).append(str);

        AddDownSampleOptions("colorDownSample");
        AddDownSampleOptions("grayDownSample");
        AddDownSampleOptions("monoDownSample");
        AddCompressionOptions("colorPression");
        AddCompressionOptions("grayPression");
        AddCompressionOptions("monoPression");
        AddQualityOptions("colorQuality");
        AddQualityOptions("grayQuality");
        AddQualityOptions("monoQuality");
        var colorObj = document.getElementById("colorTarPPi");
        BindTargetPPiEvent(colorObj, "colorMaxPPi");
        var grayObj = document.getElementById("grayTarPPi");
        BindTargetPPiEvent(grayObj, "grayMaxPPi");
        var monoObj = document.getElementById("monoTarPPi");
        BindTargetPPiEvent(monoObj, "monoMaxPPi");
        var colorMaxObj = document.getElementById("colorMaxPPi");
        BindMaxPPiEvent(colorMaxObj, "colorTarPPi");
        var grayMaxObj = document.getElementById("grayMaxPPi");
        BindMaxPPiEvent(grayMaxObj, "grayTarPPi");
        var monoMaxObj = document.getElementById("monoMaxPPi");
        BindMaxPPiEvent(monoMaxObj, "monoTarPPi");
    }
    else if (optiClass == "Fonts") {
        str = "<fieldset><legend>" + (i18n['content']['FontSettings'] || "Font Unembedding Settings") + "</legend><table>";
        str += "</table></fieldset>";
        $("#" + parentPanel).append(str);
    }
    $("#" + parentPanel).hide();
}

function BindTargetPPiEvent(obj, maxPPiId) {
    obj.onblur = function () {
        var value = obj.value;
        if (value < 9 || value > 2400) {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 0 + (i18n['content']['BetweenConnect'] || " and ") + 2400 + ".", i18n['title']['RasterEdge'] || "RasterEdge Application");
            obj.value = targetObjValue;
        }
        else
            $("#" + maxPPiId).val(1.5 * value);
    }
    obj.onfocus = function () {
        targetObjValue = obj.value;
    }
}

function BindMaxPPiEvent(obj, targetPPiId) {
    obj.onblur = function () {
        var value = obj.value;
        var targetValue = $("#" + targetPPiId).val();
        if (value < targetValue) {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + targetValue + (i18n['content']['BetweenConnect'] || " and ") + targetValue * 10 + ".", i18n['title']['RasterEdge'] || "RasterEdge Application");
            obj.value = targetObjValue;
        }
    }
    obj.onfocus = function () {
        targetObjValue = obj.value;
    }
}

function AddDownSampleOptions(parentId) {
    var downSampleArray = new Array("Off", "Average DownSampling to", "Subsampling to", "Bicubic Downsampling to");
    for (var i = 0; i < downSampleArray.length; i++) {
        $("#" + parentId).append($('<option></option>').html(downSampleArray[i]));
    }
    if (parentId.indexOf("color") != -1)
        $("#" + parentId).val(pdfOptimizer.ColorDownSample).attr("selected", true);
    else if (parentId.indexOf("gray") != -1)
        $("#" + parentId).val(pdfOptimizer.GrayDownSample).attr("selected", true);
    else if (parentId.indexOf("mono") != -1)
        $("#" + parentId).val(pdfOptimizer.MonoDownSample).attr("selected", true);
}

function AddCompressionOptions(parentId) {
    var compressionArray = new Array("ASCII85", "ASCIIHex", "CCITTFax", "DCT", "Flate", "JBIG2", "JPX", "LZW", "NoFilter", "RunLength");
    for (var i = 0; i < compressionArray.length; i++) {
        $("#" + parentId).append($('<option></option>').html(compressionArray[i]));
    }
    if (parentId.indexOf("color") != -1)
        $("#" + parentId).val(pdfOptimizer.ColorCompression).attr("selected", true);
    else if (parentId.indexOf("gray") != -1)
        $("#" + parentId).val(pdfOptimizer.GrayCompression).attr("selected", true);
    else if (parentId.indexOf("mono") != -1)
        $("#" + parentId).val(pdfOptimizer.MonoCompression).attr("selected", true);
}

function AddQualityOptions(parentId) {
    var qualityArray = new Array("Minimum", "Low", "Medium", "High", "Maximum");
    for (var i = 0; i < qualityArray.length; i++) {
        $("#" + parentId).append($('<option></option>').html(qualityArray[i]));
    }
    if (parentId.indexOf("color") != -1)
        $("#" + parentId).val(pdfOptimizer.ColorQuality).attr("selected", true);
    else if (parentId.indexOf("gray") != -1)
        $("#" + parentId).val(pdfOptimizer.GrayQuality).attr("selected", true);
    else if (parentId.indexOf("mono") != -1)
        $("#" + parentId).val(pdfOptimizer.MonoQuality).attr("selected", true);
}

function SpecificOperate(operation) {
    var addIndex = "";
    var extractIndex = "";

    //var max = _fileDocument[curFileId].ViewerPageIndex.max();
    //var tmpLength = _fileDocument[curFileId].ViewerPageIndex.length;
    //var countFlag = initialPageCount;
    //if (max >= initialPageCount) {
    //    addIndex = max;
    //    countFlag = addIndex + 1;
    //}
    //if (tmpLength < countFlag) {
    //    for (var i = 0; i < _fileDocument[curFileId].ViewerPageIndex.length; i++)
    //        extractIndex += _fileDocument[curFileId].ViewerPageIndex[i] + ";";
    //}
    //else {
    //    var flag = false;
    //    for (var i = 0; i < _fileDocument[curFileId].ViewerPageIndex.length; i++) {
    //        extractIndex += _fileDocument[curFileId].ViewerPageIndex[i] + ";";
    //        if (_fileDocument[curFileId].ViewerPageIndex[i] != i)
    //            flag = true;
    //    }
    //    if (!flag)
    //        extractIndex = "";
    //}
    if (operation == "print") {
        PrintFile(addIndex, extractIndex);
    }
    else if (operation == "save") {
        SaveFile(addIndex, extractIndex, "");
    }
    else if (operation == "option_optimized") {
        var optimizer = "";
        if (document.getElementById("class_Images").checked) {
            pdfOptimizer.ColorDownSample = $("#colorDownSample").find("option:selected").text();
            pdfOptimizer.ColorTargetPPi = $("#colorTarPPi").val();
            pdfOptimizer.ColorMaxPPi = $("#colorMaxPPi").val();
            pdfOptimizer.ColorCompression = $("#colorPression").find("option:selected").text();
            pdfOptimizer.ColorQuality = $("#colorQuality").find("option:selected").text();
            pdfOptimizer.GrayDownSample = $("#grayDownSample").find("option:selected").text();
            pdfOptimizer.GrayTargetPPi = $("#grayTarPPi").val();
            pdfOptimizer.GrayMaxPPi = $("#grayMaxPPi").val();
            pdfOptimizer.GrayCompression = $("#grayPression").find("option:selected").text();
            pdfOptimizer.GrayQuality = $("#grayQuality").find("option:selected").text();
            pdfOptimizer.MonoDownSample = $("#monoDownSample").find("option:selected").text();
            pdfOptimizer.MonoTargetPPi = $("#monoTarPPi").val();
            pdfOptimizer.MonoMaxPPi = $("#monoMaxPPi").val();
            pdfOptimizer.MonoCompression = $("#monoPression").find("option:selected").text();
            pdfOptimizer.MonoQuality = $("#monoQuality").find("option:selected").text();
            optimizer = pdfOptimizer;
        }
        SaveFile(addIndex, extractIndex, optimizer);
    }
    else if (operation.indexOf("option") != -1) {
        var imgOptions = "";
        if (operation == "option_tiff") {
            imgOptions = new ImageOutOptions();
            imgOptions.colorSpace = $("#TiffColorSpace").val();
            if (imgOptions.colorSpace == "Color")
                imgOptions.compressMode = $("#monoCompress").val();
            else if (imgOptions.colorSpace == "Grayscale")
                imgOptions.compressMode = $("#grayCompress").val();
            else if (imgOptions.colorSpace == "Monochrome")
                imgOptions.compressMode = $("#colorCompress").val();
            imgOptions.resolution = $("#TiffResolution").val();
            var resolution = imgOptions.resolution;
            if (resolution == "Determine Automatically")
                imgOptions.resolution = 96;
            else
                imgOptions.resolution = resolution.substring(0, resolution.indexOf(" "));
        }
        else if (operation == "option_img") {
            imgOptions = new ImageOutOptions();
            var exportType = $('input:radio[name="imageType"]:checked').val();
            if (exportType == "PngType") {
                imgOptions.imgType = "PNG";
                imgOptions.interlace = $("#_interlace").val();
                imgOptions.filter = $("#_filter").val();
                imgOptions.colorSpace = $("#PngColorSpace").val();
                imgOptions.resolution = $("#PngResolution").val();
            }
            else if (exportType == "JpegType") {
                imgOptions.imgType = "JPEG";
                imgOptions.colorSpace = $("#JpegColorSpace").val();
                if (imgOptions.colorSpace == "Color")
                    imgOptions.compressMode = $("#JpegColor").val();
                else if (imgOptions.colorSpace == "GrayScale")
                    imgOptions.compressMode = $("#JpegGray").val();
                imgOptions.resolution = $("#JpegResolution").val();
            }
            else if (exportType == "Jpg2Type") {
                imgOptions.imgType = "JPEG2000";
                imgOptions.colorSpace = $("#Jpg2ColorSpace").val();
                if (imgOptions.colorSpace == "Color")
                    imgOptions.compressMode = $("#Jpg2Color").val();
                else if (imgOptions.colorSpace == "GrayScale")
                    imgOptions.compressMode = $("#Jpg2Gray").val();
                imgOptions.blockSize = $("#_blockSize").val();
                imgOptions.resolution = $("#Jpg2Resolution").val();
            }
            var resolution = imgOptions.resolution;
            if (resolution == "Determine Automatically")
                imgOptions.resolution = 96;
            else
                imgOptions.resolution = resolution.substring(0, resolution.indexOf(" "));
        } else if (operation == "option_annotation") {
            if ($("#targetpageannot")[0].checked) {
                extractIndex = $("#targetannotpage").val().replace(/\ +/g, "").replace(/\,+/g, ";");
            }
        }
        ExportTo(operation, addIndex, extractIndex, imgOptions);
    }
}

function onlineSrcCheck() {
    upDialogType = "onlinefile";
    var src = $("#_onlineValue").val().trim();
    if (src.lastIndexOf("?") >= 0) {
        src = src.substring(0,src.lastIndexOf("?"));
    }

    if (src == null || src == "") {
        $("#_onlineCheck").html(i18n['content']['URLEmpty'] || "(URL can not be empty!)");
        $("#_onlineCheck").css("color", "#ff0000");
        return false;
    }
    else {
        if (src.indexOf("http://") != 0 && src.indexOf("https://") != 0) {
            $("#_onlineCheck").html(i18n['content']['URLInvalid'] || "(Invalid URL,Please re-enter!)");
            $("#_onlineCheck").css("color", "#ff0000");
            return false;
        }
        else {
            return true;
            var suffix = src.substring(src.lastIndexOf("."));
            suffix = suffix.toLowerCase();
            if (!_fileFormat.in_array(suffix)) {
                $("#_onlineCheck").html(i18n['content']['URLNotSupportFormat'] || "(Temporarily does not support this file format!)");
                $("#_onlineCheck").css("color", "#ff0000");
                return false;
            }
        }
    }
    return true;
}

function openOnlineDoc() {
    $("#loading").show();
    var hosttarget = window.location.href.split('?');
    setTimeout(function () {
        window.location.href = hosttarget[0] + "?src=" + $("#_onlineValue").val().replace(/&/g, '%26');
    }, 500);
}

function FileCheck(type) {
   
    var newFileName = "";
    if (type != null) {
        newFileName = $("#" + type + "_FileToUpload").val();
        upDialogType = type;
    } else {
        newFileName = $("#FileToUpload").val();
    }
    var suffix = getSuffix(newFileName);
    suffix = suffix.toLowerCase();
    if (type != null) {
        $("#" + type + "_fileSize").html("");
    } else { 
        $("#_fileSize").html("");
    }

    if (!_fileFormat.in_array(".pdf"))
        _fileFormat.push(".pdf");
    if (!addattachment && !_fileFormat.in_array(suffix)) {
        if (type != null) {
            $("#" + type + "_error").html(i18n['content']['FormatNotSupportToPDF'] || "It does not support this format into pdf");
            $("#" + type + "_error").css("color", "#ff0000");
        } else {
            $("#error").html(i18n['content']['FormatNotSupportToPDF'] || "It does not support this format into pdf");
            $("#error").css("color", "#ff0000");
        }

        if (type != null) {
            $("#" + type + "_btn").hide();
            return;
        } else {
            var buttonNum = $("#dialog").dialog("option", "buttons").length;
            if (buttonNum == 2)
                $("#dialog").dialog("option", "buttons", NeButton);
            return;
        }
    }
    else {
        if (type != null) {
            $("#" + type + "_error").html("");
            $("#" + type + "_btn").show();
        } else {
            $("#error").html("");
            var buttonNum = $("#dialog").dialog("option", "buttons").length;
            if (buttonNum == 1) {
                var checkname = "Submit";
                if (suffix == ".pdf")
                    checkname = "Upload";
                else
                    checkname = "Open"

                var TwoButtons = [{ text: i18n['button']['Upload'] || "Upload", click: function () { $(this).dialog("close"); TestFileMD5(); } },
                     { text: "Cancel", click: function () { $(this).dialog("close"); } }];

                $("#dialog").dialog("option", "buttons", TwoButtons);

            }
        }
    }
    
    var file = null;
    if (type != null) {
        file = document.getElementById(type + '_FileToUpload').files[0];
    } else {
        file=  document.getElementById('FileToUpload').files[0];
    }
    if (file) {
        var fileSize = (i18n['content']['FileSize'] || "File Size") + ":&nbsp;&nbsp;&nbsp;&nbsp;";
        if (file.size > 1024 * 1024)
            fileSize += (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
        else
            fileSize += (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';
    }
    if (type != null) {
        $("#" + type + "_fileSize").html(fileSize);
    } else {
        $("#_fileSize").html(fileSize);
    }

}
function checkMD5BeforeUpload(type) {
    if (type == null || type.length<=0) {
        return;
    }
    if (type == "onlinefile") {
        if (onlineSrcCheck()) {
            $("#dialog").dialog("close");
            openOnlineDoc();
            return;
        }
    } else {
        if (document.getElementById(type + "_FileToUpload").files.length < 0) {
            $("#" + type + "_error").html("No File To Upload")
            return;
        }
    }
    $("#dialog").dialog("close");
    TestFileMD5(type);
}
var curFileMD5 = "";
var flag = 0;
function TestFileMD5(type) {
    showLoading();
    if (addannotation || addattachment) {
        ajaxFileUpload();
        return;
    }
    var fileReader = new FileReader();
    blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;
    if (type != null) {
        file = document.getElementById(type + "_FileToUpload").files[0];
    } else { 
        file = document.getElementById("FileToUpload").files[0];
    }
    chunkSize = 2097152;
    chunks = Math.ceil(file.size / chunkSize);
    currentChunk = 0;
    spark = new SparkMD5.ArrayBuffer();
    fileReader.onload = function (e) {
        var arrayBuffer = e.target.result;
        spark.append(arrayBuffer);
        currentChunk++;
        if (currentChunk < chunks)
            loadNext();
        else {
            curFileMD5 = spark.end();
            var result = IsExistSameFile();
            if (result != "") {
                ParameterDocumentLoad(result);
                return;
            }
            else
                ajaxFileUpload();
        }
    };
    function loadNext() {
        var start = currentChunk * chunkSize;
        var end = start + chunkSize >= file.size ? file.size : start + chunkSize;
        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));
    };
    loadNext();
}

function IsExistSameFile() {
    var str = { action: "IsExistFileMD5", fileMD5: curFileMD5 };
    var response = "";
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: false,
        data: str,
        success: function (result) {
            result = eval('(' + result + ')');
            if (result.state == "success") {
                response = result.msg;
            }
        },
        error: function (err) { }
    }
    $.ajax(options);
    return response;
}

var tempFilename = "";
var tempFilepath = "";
function ajaxFileUpload() {
    var adddata = "";
    var targetFileName = "FileToUpload";
    if (addannotation) {
        adddata = { add: "annotation" ,fid:_fid};
    } else if (addattachment) {
        adddata = { add: "fileattach", fid: _fid };
    } else {
        if ($("#FileToUpload") == null || $("#FileToUpload").length <= 0) {
            targetFileName = upDialogType + "_" + targetFileName;
        }
    }

    $.ajaxFileUpload
	(
	    {
	        url: getCurrentAspx(),
	        secureuri: false,
	        fileElementId: targetFileName,
            data:adddata,
	        dataType: 'text',
	        success: function (rtdata, status) {
	            rtdata = rtdata.replace(/<[^>]+>/g, "")
	            if (addannotation) {
	                if (rtdata.indexOf("error:") != -1) {
	                    alert(rtdata);
	                    hideLoading();
	                }
	                else {
	                    var path=rtdata;
	                    if (rtdata.indexOf(" ") == 0)
	                        path = rtdata.substring(1);
	                    loadAddedAnnotation(path);
	                }
	            } else if (addattachment) {
	                if (rtdata.indexOf("error:") != -1) {
	                    alert(rtdata);
	                    hideLoading();
	                }
	                else {
	                    var data = rtdata;
	                    if (data.indexOf(" ") == 0)
	                        data = data.substring(1);
	                    var currentanme = data.split(";");
	                    if (currentanme.length < 2 || currentanme[0] == "" || currentanme[1] == "") {
	                        alert(i18n['content']['FailGetAttachement'] || "fail to get the attachment information.");
	                    } else {
	                        tempFilename = currentanme[0];
	                        tempFilepath = currentanme[1];
	                        draw_annotation("fileattach");
	                    }
	                    hideLoading();
	                }
	            } else {
	                if (isJsonString(rtdata)) {
	                    var data = JSON.parse(rtdata);
	                    if (typeof (data.state) != 'undefined' && data.state=="error") {
	                        alert(data.msg);
	                        LoadErrorHandle();
	                    }
	                } else {
	                    if (rtdata == "  ") {
	                        LoadErrorHandle();
	                    }
	                    else if (rtdata.indexOf("error:") ==0) {
	                        alert(rtdata);
	                        LoadErrorHandle();
	                    }
	                    else
	                    {
	                        ParameterDocumentLoad(rtdata)
	                    }
	                }
	            }
	        },
	        error: function (data, status, e) {
	            
	            //alert(e + " " + JSON.parse(data));
	            ParameterDocumentLoad("error:"+(i18n['content']['ErrorLoad'] || "error to load the file."));
	        }
	    }
	)
    return false;
}
function isJsonString(str) {
    try {
        if (typeof JSON.parse(str) == "object") {
            return true;
        }
    } catch (e) {
    }
    return false;
}

function loadAddedAnnotation(xmlfilepath) {
    var xmlFile = getFolder("insert")  + xmlfilepath;;//getFolder("page") + "insert/" + xmlfilepath;
    $.ajax({
        url: xmlFile,
        dataType: 'xml',
        type: 'GET',
        timeout: 2000,
        asyn: false,
        success: function (xml) {
            xmlToDrawInsertAddedAnnos(xml);
            hideLoading();
        },
        error: function () {
            alert(i18n['content']['AnnotationFileError'] || "Annotation file failed to load");
            hideLoading();
        }
    });
}


var passWordButtons = [{ text: "Submit", click: function () { ParseDocumentWithPassWord(); } },
                       { text: "Cancel", click: function () { $(this).dialog("close"); } }];
function ParameterDocumentLoad(_relativeInfo) {
    _relativeInfo = _relativeInfo.trim();
    var position = _relativeInfo.indexOf("error:");
    if (position != -1) {
        alert(_relativeInfo);
        LoadErrorHandle();
    }
    else {
        var FileMsg = _relativeInfo.split(";");
        _fileIdName = FileMsg[0];
        _isHasPassword = FileMsg[1];
        _isHasUserPassword = FileMsg[2];
        _isHasAnnos = FileMsg[3];
        _isHasDesign = FileMsg[4];
        _filemd5 = FileMsg[5];
        addmappingmd5 = [];
        isaddFile = false;
        if (_fileIdName == "") {
            LoadErrorHandle();
        }
        else {
            var position = _fileIdName.lastIndexOf("|");
            newFileName = _fileIdName.substring(0, position);
            newFid = _fileIdName.substring(position + 1);
            curDocPassWord = "";
            if (_isHasUserPassword == "True") {

                $("#loading_div").hide();
                $("#content").empty();
                $("#dialog").dialog("open");
                var passWordContent = "<div style='font-size:13px;font-weight:bold;'> '" + newFileName + "' " + (i18n['content']['NeedPassword'] || "Document protected, enter 'Document Open Password'") + "</div><br/>";
                passWordContent += "<div>" + (i18n['content']['Enterpassword'] || "Enter password") + ":&nbsp;&nbsp;<input id='_passWord' type='password' style='font-size:12px;width:300px;height:25px;' onkeydown='return InputPassword(event)'></input></div>";
                $("#content").html(passWordContent);
                $("#dialog").dialog({
                    autoOpen: false,
                    title: i18n['title']['Password'] || "Password",
                    minWidth: 500,
                    height: 230,
                    resizable: true
                });
                $("#dialog").dialog("option", "buttons", passWordButtons);
                var widthCenter = (browserWidth - 500) / 2;
                var heightCenter = (browserHeight - 230) / 2;
                window.scrollTo(0, 0);
                $("#dialog").dialog({ position: [widthCenter, heightCenter] });
             
                dialogOpen = true;
                $("#dialog").on("dialogbeforeclose", function (event, ui) {
                    $("#loading_div").show();
                    $("#loading").hide();
                    if (!_isHaveDocument) {
                        DisableToolbar();
                        _isDisable = true;
                    }
                    else {
                        EnableToolbar();
                        _isDisable = false;
                    }
                });
               
            }
            else
                DocumentLoad();
        }
    }
}

function InputPassword(e) {
    if (e.keyCode == 13) {
        ParseDocumentWithPassWord();
        return false;
    }
}

var curDocPassWord = "";
function ParseDocumentWithPassWord() {
    var _passWord = $("#_passWord").val();
    var str = { action: "DecryptionPDFDocument", fid: newFid, fileName: newFileName, passWord: _passWord };
    var response = "";
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: false,
        data: str,
        success: function (result) {
            result = eval('(' + result + ')');
            if (result.state == "success") {
                curDocPassWord = _passWord;
                var FileMsg = result.msg.split(";");
                _isHasAnnos = FileMsg[0];
                _isHasDesign = FileMsg[1];
                $("#dialog").dialog("close");
                DocumentLoad();
            }
            else if (result.state == "error") {
                alert(i18n['content']['ErrorPassword'] || "Incorrect password, make sure Caps Lock key is not pressed, and then try again!!");
            }
        },
        error: function (err) {
        }
    }
    $.ajax(options);
    return response;
}

function InsertPassword(e) {
    if (e.keyCode == 13) {
        ParseInsertDocWithPassWord();
        return false;
    }
}

var insertPassword = "";
function ParseInsertDocWithPassWord() {
    var _passWord = $("#_insertPsword").val();
    if (InsertType.indexOf("pageDesign") != -1)
        _passWord = $("#_designPas").val();
    var str = { action: "DecryptionInsertDoc", fid: _fid, fileName: insertName, passWord: _passWord, type: InsertType };
    var response = "";
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: false,
        data: str,
        success: function (result) {
            result = eval('(' + result + ')');
            if (result.state == "success") {
                insertPassword = _passWord;
                $("#dialog").dialog("close");
                if (InsertType.indexOf("pageDesign") != -1) {
                    if (InsertType.indexOf("BG") != -1)
                        $("#BGFileText").val(insertName);
                    else
                        $("#WMFileText").val(insertName);
                    var info = result.msg.split(";");
                    pageDesignFile = new SourceFromFile();
                    pageDesignFile.Path = insertName;
                    pageDesignFile.FileMD5 = pageDesignFileMD5;
                    pageDesignFile.PageCount = info[0];
                    pageDesignFile.PageSize = info[1];
                    pageDesignListFile.push(pageDesignFile);
                    if (InsertType.indexOf("BG") != -1)
                        SetFileNumber(pageDesignFile.PageCount, "BGFileNumber");
                    else
                        SetFileNumber(pageDesignFile.PageCount, "WMFileNumber");
                    hideEnterPasswordPanel();
                }
                else {
                    var info = result.msg.split(";");
                    var isHasAnnos = info[0].trim();
                    var insertFileCount = info[1];
                    var pageSize = info[2];
                    var afid = info[3];
                    var amd5 = info[4];
                    var pageRotate = info[5];

                    if (InsertType == "insert")
                        ShowInsertPopBox(insertName, isHasAnnos, insertFileCount, pageSize,pageRotate, afid );
                    else if (InsertType == "replace")
                        ShowReplaceBox(insertName, isHasAnnos, insertFileCount, pageSize,pageRotate,amd5, afid);
                }
            }
            else if (result.state == "error") {
                alert(i18n['content']['ErrorPassword'] || "Incorrect password, make sure Caps Lock key is not pressed, and then try again!!");
            }
        },
        error: function (err) {
        }
    }
    $.ajax(options);
    return response;
}

var _isDisabled = false;
function DocumentLoad() {
    _isHaveDocument = true;
    if (_isDisabled) {
        EnableToolbar();
        _isDisabled = false;
    }
    if (autoSetWebTitleAsFileName)
    window.document.title = newFileName;
    _DocSrcRequest = new Array();
    currentCreateIndex = 0;
    thumbCreateIndex = 0;
    OnLoadReady();
    hideNoFile();
}

function LoadErrorHandle() {
    if (autoSetWebTitleAsFileName)
    window.document.title = webtitle;
    hideLoading();
    if (_fid == null || _fid == "") {
        _isHaveDocument = false;
        thumbHidden();
    }
    
    
    
    if (defaultDialog == "NOFILE") {
        showNoFile();
    } else {
        if (appEditor) {
            if (upDialogType == "combinePDF")
                ShowComBox(true);
            else
                showInitFileDialog(upDialogType);
        } else {
            if (upDialogType == "uploadPDF")
                ShowUploadDialog("uploadPDF");
            else if (upDialogType == "uploadOthers")
                ShowUploadDialog("uploadOthers");
            else if (upDialogType == "online")
                ShowOnlineDialog("online");      
           
        }
    }
}

function thumbHidden() {
    $("#thumbPanel").hide();
    $("#tabs").tabs("option", "active", false);
    ThumbShrink();
}

function getSuffix(fileName) {
    var suffixPosition = fileName.lastIndexOf(".");
    var suffix = fileName.substring(suffixPosition);
    return suffix;
}

function ThumbShrink() {
    if (isStretch) {
        leftSidebarWidth -= thumbPanelW;
        $("#wdp_LeftSidebar").css({ "width": (leftSidebarWidth - 1) + "px" });
        $("#thumbPanel").hide();
        contentWidth += thumbPanelW;
        var docWidth = contentWidth - 25;
        _docWidth = docWidth - 17;
        $("#wdp_Viewer").width(contentWidth + "px");
        $("#wdp_Content").width(docWidth + "px");
        $("#draw_canvas").width(_docWidth + "px");
        if (_fid != null && _fid != "") {
            _fileDocument[curFileId].ChangeState();
            var curPg = parseInt(_curCorrectPageId);
            actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
            var viewer = _fileDocument[curFileId].Viewers[actualIndex];
            Adaptive(viewer);
            ChangeViewerPosition(actualIndex);
            resizeDocViewerByCSS3("imgBig", actualIndex);
            ImageViewerAnnotationResize(actualIndex);
            changePosition();
            ChangeThumbScrollBar(parseInt(actualIndex), true, true);
            window.onresize();
        }
        isStretch = false;
    }
}

var isStretch = true;
function ThumbExpansion() {
    if (!isStretch) {
        leftSidebarWidth += thumbPanelW;
        $("#wdp_LeftSidebar").css({ "width": (leftSidebarWidth - 1) + "px" });
        $("#thumbPanel").show();
        contentWidth = contentWidth - thumbPanelW - 19;
        var docWidth = contentWidth - 25;
        _docWidth = docWidth - 17;
        $("#wdp_Viewer").width(contentWidth + "px");
        $("#wdp_Content").width(docWidth + "px");
        $("#draw_canvas").width(_docWidth + "px");
        if (_fid != null && _fid != "") {
            _fileDocument[curFileId].ChangeState();
            var curPg = parseInt(_curCorrectPageId);
            actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
            var viewer = _fileDocument[curFileId].Viewers[actualIndex];
            Adaptive(viewer);
            ChangeViewerPosition(actualIndex);
            resizeDocViewerByCSS3("imgBig", actualIndex);
            ImageViewerAnnotationResize(actualIndex);
            changePosition();
            ChangeThumbScrollBar(parseInt(actualIndex), true, true);
            window.onresize();
        }
        isStretch = true;
    }
}

function showLoading() {
    $("#loading").show();
    if (_fileDocument[curFileId] == null)
        return;
    var pageIndex = _fileDocument[curFileId].GetPageIndex(_curCorrectPageId);
    $("#pageImg" + pageIndex).remove();
}

function hideLoading() {
    $("#loading").hide();
    isInitOpen = false;
}

function DisableToolbar() {
   // var icoUrl1 = getImagesFolder() + "IconB.png";



    TargetHover("#re_func_annotationup", false);
    $("#re_func_annotationup").removeAttr("onclick");
    $("#re_func_annotationup").removeClass("toolAnnotationupIconEn");
    $("#re_func_annotationup").addClass("toolAnnotationupIconDis");
   // $("#re_func_annotationup").css("background", "url('" + icoUrl1 + "') no-repeat -87px -13px");
    $("#re_func_annotationup").unbind("click");


    TargetHover("#re_func_save", false);
    $("#re_func_save").removeAttr("onclick");
    $("#re_func_save").removeClass("toolSaveIconEn");
    $("#re_func_save").addClass("toolSaveIconDis");
   // $("#re_func_save").css("background", "url('" + icoUrl1 + "') no-repeat -123px -13px");
    $("#re_func_save").unbind("click");

    TargetHover("#re_func_export", false);
    $("#re_func_export").removeAttr("onclick");
    $("#re_func_export").removeClass("toolExportIconEn");
    $("#re_func_export").addClass("toolExportIconDis");
    //$("#re_func_export").css("background", "url('" + icoUrl1 + "') no-repeat -160px -13px");
    $("#re_func_export").unbind("click");

    TargetHover("#re_func_print", false);
    $("#re_func_print").removeAttr("onclick");
    $("#re_func_print").removeClass("toolPrintIconEn");
    $("#re_func_print").addClass("toolPrintIconDis");
    //$("#re_func_print").css("background", "url('" + icoUrl1 + "') no-repeat -2409px -13px");
    $("#re_func_print").unbind("click");

    TargetHover("#re_func_properties", false);
    $("#re_func_properties").removeAttr("onclick");
    $("#re_func_properties").removeClass("toolPropertiesIconEn");
    $("#re_func_properties").addClass("toolPropertiesIconDis");
   // $("#re_func_properties").css("background", "url('" + icoUrl1 + "') no-repeat -196px -13px");
    $("#re_func_properties").unbind("click");

    //$(".navi_first").css("background", "url('" + icoUrl1 + "') no-repeat -304px -13px");
    $(".navi_first").removeClass("toolNavFirstIconEn");
    $(".navi_first").addClass("toolNavFirstIconDis");
    TargetHover(".navi_first", false);

    // $(".navi_pre").css("background", "url('" + icoUrl1 + "') no-repeat -339px -13px");
    $(".navi_pre").removeClass("toolNavPreIconEn");
    $(".navi_pre").addClass("toolNavPreIconDis");
    TargetHover(".navi_pre", false);

    //$(".navi_ne").css("background", "url('" + icoUrl1 + "') no-repeat -376px -13px");
    $(".navi_ne").removeClass("toolNavNeIconEn");
    $(".navi_ne").addClass("toolNavNeIconDis");
    TargetHover(".navi_ne", false);

    //$(".navi_last").css("background", "url('" + icoUrl1 + "') no-repeat -412px -13px");
    $(".navi_last").removeClass("toolNavLastIconEn");
    $(".navi_last").addClass("toolNavLastIconDis");
    TargetHover(".navi_last", false);

    // $(".navi_single").css("background", "url('" + icoUrl1 + "') no-repeat -449px -13px");
    $(".navi_single").removeClass("toolNavSingleIconEn");
    $(".navi_single").addClass("toolNavSingleIconDis");
    TargetHover(".navi_single", false);
    $(".navi_single").removeAttr("onclick");

   // $(".navi_multi").css("background", "url('" + icoUrl1 + "') no-repeat -485px -13px");
    $(".navi_multi").removeClass("toolNavMultiIconEn");
    $(".navi_multi").addClass("toolNavMultiIconDis");
    TargetHover(".navi_multi", false);
    $(".navi_multi").removeAttr("onclick");

   // $(".navi_zoomIn").css("background", "url('" + icoUrl1 + "') no-repeat -522px -13px");
    $(".navi_zoomIn").removeClass("toolNavZoomInIconEn");
    $(".navi_zoomIn").addClass("toolNavZoomInIconDis");
    TargetHover(".navi_zoomIn", false);
    $(".navi_zoomIn").removeAttr("onclick");

    //$(".navi_zoomOut").css("background", "url('" + icoUrl1 + "') no-repeat -557px -13px");
    $(".navi_zoomOut").removeClass("toolNavZoomOutIconEn");
    $(".navi_zoomOut").addClass("toolNavZoomOutIconDis");
    TargetHover(".navi_zoomOut", false);
    $(".navi_zoomOut").removeAttr("onclick");

    $(".navi_filerotate").removeClass("toolRotateIconEn");
    $(".navi_filerotate").addClass("toolRotateIconDis");


    $(".zoomList").attr("disabled", true);
    $(".pageIdList").attr("disabled", true);
    $("#wdp_LeftSidebar").tabs("disable");

   // $("#_thumbTab").css("background", "url('" + icoUrl1 + "') no-repeat -2264px -13px");
   // $("#_outlineTab").css("background", "url('" + icoUrl1 + "') no-repeat -2300px -13px");
    // $("#_searchTab").css("background", "url('" + icoUrl1 + "') no-repeat -2336px -13px");
    $("#_thumbTab").removeClass("leftsideThumbTabEn");
    $("#_thumbTab").addClass("leftsideThumbTabDis");
    $("#_outlineTab").removeClass("leftsideOutlineTabEn");
    $("#_outlineTab").addClass("leftsideOutlineTabDis");
    $("#_searchTab").removeClass("leftsideSearchTabEn");
    $("#_searchTab").addClass("leftsideSearchTabDis");
    $("#wdp_Toolbar").tabs("option", "disabled", [1, 2, 3, 4, 5]);

    disableCust();
}
function disableCust() {
    if (c_toolbartabs != null) {
        for (var ind = 0; ind < c_toolbartabs.length; ind++) {
            var obj = c_toolbartabs[ind];
            var groups = obj.iconGroups;
            for (var i = 0; i < groups.length; i++) {
                var openTab = "<table style='height:100%;float:left;'>";
                if (groups[i].icons.length <= 0)
                    continue;
                for (var j = 0; j < groups[i].icons.length; j++) {
                    var icon = groups[i].icons[j];
                    if (icon.reqDoc) {

                        TargetHover("#" + icon.id, false);
                        $("#" + icon.id).removeAttr("onclick");
                        if (icon.iconImageID != null && icon.iconImageID != "")
                            $("#" + icon.id).css("background", "url('icon_" + icon.iconImageID + "_dis.png') no-repeat");
                      else  if (icon.disabledImagePath != null && icon.disabledImagePath != "")
                            $("#" + icon.id).css("background", "url('" + icon.disabledImagePath + "') no-repeat");
                        $("#" + icon.id).unbind("click");
                    }
                }
            }
        }
    }
}
function enableCust() {
    if (c_toolbartabs != null) {
        for (var ind = 0; ind < c_toolbartabs.length; ind++) {
            var obj = c_toolbartabs[ind];
            var groups = obj.iconGroups;
            for (var i = 0; i < groups.length; i++) {
                var openTab = "<table style='height:100%;float:left;'>";
                if (groups[i].icons.length <= 0)
                    continue;
                for (var j = 0; j < groups[i].icons.length; j++) {
                    var icon = groups[i].icons[j];
                    if (icon.reqDoc) {
                        TargetHover("#" + icon.id, true);
                        //var func= eval();
                        
                        $("#" + icon.id).attr("onclick", icon.event);
                        //$("#" + icon.id).bind("click", function (e) {  });
                        if (icon.iconImageID != null && icon.iconImageID != "")
                            $("#" + icon.id).css("background", "url('icon_" + icon.iconImageID + "_en.png') no-repeat");
                        else if (icon.enabledImagePath != null && icon.enabledImagePath != "")
                            $("#" + icon.id).css("background", "url('" + icon.enabledImagePath + "') no-repeat");
                    }
                }
            }
        }
    }
}
function EnableToolbar() {
    
   // var icoUrl1 = getImagesFolder() + "IconA.png";

    TargetHover("#re_func_annotationup", true);
    $("#re_func_annotationup").bind("click", function (e) { ShowUploadDialog("annotation"); });
    // $("#re_func_annotationup").css("background", "url('" + icoUrl1 + "') no-repeat -87px -15px");
    $("#re_func_annotationup").addClass("toolAnnotationupIconEn");
    $("#re_func_annotationup").removeClass("toolAnnotationupIconDis");

    TargetHover("#re_func_save", true);
    $("#re_func_save").bind("click", function (e) { ShowDialog("save"); });
    // $("#re_func_save").css("background", "url('" + icoUrl1 + "') no-repeat -123px -15px");
    $("#re_func_save").addClass("toolSaveIconEn");
    $("#re_func_save").removeClass("toolSaveIconDis");

    TargetHover("#re_func_export", true);
    $("#re_func_export").bind("click", function (e) { ShowOptionsPanel(e); });
    // $("#re_func_export").css("background", "url('" + icoUrl1 + "') no-repeat -160px -15px");
    $("#re_func_export").addClass("toolExportIconEn");
    $("#re_func_export").removeClass("toolExportIconDis");

    TargetHover("#re_func_print", true);
    $("#re_func_print").bind("click", function (e) { ShowDialog("print"); });
    //$("#re_func_print").css("background", "url('" + icoUrl1 + "') no-repeat -2409px -15px");
    $("#re_func_print").addClass("toolPrintIconEn");
    $("#re_func_print").removeClass("toolPrintIconDis");

    TargetHover("#re_func_properties", true);
    $("#re_func_properties").bind("click", ShowProperties);
    //$("#re_func_properties").css("background", "url('" + icoUrl1 + "') no-repeat -196px -15px");
    $("#re_func_properties").addClass("toolPropertiesIconEn");
    $("#re_func_properties").removeClass("toolPropertiesIconDis");

    //$(".navi_single").css("background", "url('" + icoUrl1 + "') no-repeat -449px -15px");
    $(".navi_single").addClass("toolNavSingleIconEn");
    $(".navi_single").removeClass("toolNavSingleIconDis");
    TargetHover(".navi_single", true);
    $(".navi_single").bind("click", btnSinglePage);

    //$(".navi_multi").css("background", "url('" + icoUrl1 + "') no-repeat -485px -15px");
    $(".navi_multi").addClass("toolNavMultiIconEn");
    $(".navi_multi").removeClass("toolNavMultiIconDis");
    TargetHover(".navi_multi", true);
    $(".navi_multi").bind("click", btnContinuesPage);

    //$(".navi_zoomIn").css("background", "url('" + icoUrl1 + "') no-repeat -522px -15px");
    $(".navi_zoomIn").addClass("toolNavZoomInIconEn");
    $(".navi_zoomIn").removeClass("toolNavZoomInIconDis");
    TargetHover(".navi_zoomIn", true);
    $(".navi_zoomIn").bind("click", btnZoomIn);

    //$(".navi_zoomOut").css("background", "url('" + icoUrl1 + "') no-repeat -557px -15px");
    $(".navi_zoomOut").addClass("toolNavZoomOutIconEn");
    $(".navi_zoomOut").removeClass("toolNavZoomOutIconDis");
    TargetHover(".navi_zoomOut", true);
    $(".navi_zoomOut").bind("click", btnZoomOut);

    $(".navi_filerotate").removeClass("toolRotateIconDis");
    $(".navi_filerotate").addClass("toolRotateIconEn");

    $(".zoomList").attr("disabled", false);
    $(".pageIdList").attr("disabled", false);
    $("#wdp_LeftSidebar").tabs("enable");
    //$("#_thumbTab").css("background", "url('" + icoUrl1 + "') no-repeat -2264px -15px");
    //$("#_outlineTab").css("background", "url('" + icoUrl1 + "') no-repeat -2300px -15px");
    //$("#_searchTab").css("background", "url('" + icoUrl1 + "') no-repeat -2336px -15px");
    $("#_thumbTab").addClass("leftsideThumbTabEn");
    $("#_thumbTab").removeClass("leftsideThumbTabDis");
    $("#_outlineTab").addClass("leftsideOutlineTabEn");
    $("#_outlineTab").removeClass("leftsideOutlineTabDis");
    $("#_searchTab").addClass("leftsideSearchTabEn");
    $("#_searchTab").removeClass("leftsideSearchTabDis");
    $("#wdp_Toolbar").tabs("option", "disabled", []);
    enableCust();
}

function FirstPage() {
    var curPage = _fileDocument[curFileId].GetPageIndex(0);
    var isUp = true;
    if (0 > parseInt(_curCorrectPageId))
        isUp = false;
    ChangeThumbScrollBar(0, isUp);
    ChangePg(curPage);
}

function UpPage() {
    var currentPg = parseInt(_curCorrectPageId);
    if (currentPg > 0) {
        to_page = currentPg - 1;
        ChangeThumbScrollBar(to_page, true);
        to_page = _fileDocument[curFileId].GetPageIndex(to_page);
        ChangePg(to_page);
    }
    return false;
}

function DownPage() {
    var currentPg = parseInt(_curCorrectPageId);
    totalPages = _totalPageCount - 1;
    if (currentPg < totalPages) {
        to_page = currentPg + 1;
        ChangeThumbScrollBar(to_page, false);
        to_page = _fileDocument[curFileId].GetPageIndex(to_page);
        ChangePg(to_page);
    }
    return false;
}

function LastPage() {
    var curPg = _fileDocument[curFileId].GetPageIndex(_totalPageCount - 1);
    var isUp = true;
    if (_totalPageCount - 1 > parseInt(_curCorrectPageId))
        isUp = false;

    ChangeThumbScrollBar(_totalPageCount - 1, isUp);
    ChangePg(curPg);
}

function btnZoomIn() {
    var posiH = $("#wdp_Content").scrollTop() / zoomValue;
    var posiW = $("#wdp_Content").scrollLeft() / zoomValue;
    pageIndex = parseInt(_curCorrectPageId);
    var actualIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    _pageSizeType = 2;
    ChangeZoomIndex("1");

    ChangeViewerPosition(actualIndex);
    resizeDocViewerByCSS3("imgBig", actualIndex);
    $("#wdp_Content").scrollTop(posiH * zoomValue);
    $("#wdp_Content").scrollLeft(posiW * zoomValue);
    ImageViewerAnnotationResize(actualIndex);
    CSSZoomInOrOut();
}

function btnZoomOut() {
    var posiH = $("#wdp_Content").scrollTop() / zoomValue;
    var posiW = $("#wdp_Content").scrollLeft() / zoomValue;
    pageIndex = parseInt(_curCorrectPageId);
    actualIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
    _pageSizeType = 2;
    ChangeZoomIndex("-1");

    ChangeViewerPosition(actualIndex);
    resizeDocViewerByCSS3("imgBig", actualIndex);
    $("#wdp_Content").scrollTop(posiH * zoomValue);
    $("#wdp_Content").scrollLeft(posiW * zoomValue);
    ImageViewerAnnotationResize(actualIndex);
    CSSZoomInOrOut();
}

function ChangeZoomIndex(changeValue) {
    if (_zoomListIndex == 16) {
        _zoomListIndex = 8;
    } else {
    if (changeValue == "-1") {
        _zoomListIndex++;
        if (_zoomListIndex > (_zoomItems.length - 5))
            _zoomListIndex = _zoomItems.length - 5;
    }
    else if (changeValue == "1") {
        _zoomListIndex--;
        if (_zoomListIndex < 0)
            _zoomListIndex = 0;
    }
    }
    $(".zoomList").val(_zoomItems[_zoomListIndex]);
    var length = _zoomItems[_zoomListIndex].length;
    var multiple = _zoomItems[_zoomListIndex].substring(0, length - 1);
    zoomValue = parseFloat(multiple) / 100;
}

function btnOneToOne() {
    var posiH = $("#wdp_Content").scrollTop() / zoomValue;
    var posiW = $("#wdp_Content").scrollLeft() / zoomValue;

    pageIndex = parseInt(_curCorrectPageId);
    actualIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
    _pageSizeType = 2;
    zoomValue = 1;

    ChangeViewerPosition(actualIndex);
    resizeDocViewerByCSS3("imgBig", actualIndex);
    $("#wdp_Content").scrollTop(posiH * zoomValue);
    $("#wdp_Content").scrollLeft(posiW * zoomValue);
    ImageViewerAnnotationResize(actualIndex);
}

function btnBestFit(percent) {
    var posiH = $("#wdp_Content").scrollTop() / zoomValue;
    var posiW = $("#wdp_Content").scrollLeft() / zoomValue;

    pageIndex = parseInt(_curCorrectPageId);
    actualIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    zoomValue = percent / 100;
    _pageSizeType = 2;

    ChangeViewerPosition(actualIndex);
    resizeDocViewerByCSS3("imgBig", actualIndex);
    $("#wdp_Content").scrollTop(posiH * zoomValue);
    $("#wdp_Content").scrollLeft(posiW * zoomValue);
    ImageViewerAnnotationResize(actualIndex);
}

function btnFitWidth(percent) {
    var posiH = $("#wdp_Content").scrollTop() / zoomValue;
    var posiW = $("#wdp_Content").scrollLeft() / zoomValue;

    pageIndex = parseInt(_curCorrectPageId);
    actualIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    zoomValue = percent / 100;
    _pageSizeType = 2;

    ChangeViewerPosition(actualIndex);
    resizeDocViewerByCSS3("imgBig", actualIndex);
    $("#wdp_Content").scrollTop(posiH * zoomValue);
    $("#wdp_Content").scrollLeft(posiW * zoomValue);
    ImageViewerAnnotationResize(actualIndex);
}

function btnSinglePage() {
    var posi = $("#wdp_Content").scrollTop();
    $(".navi_multi").removeClass("iconBorder");
    $(".navi_single").addClass("iconBorder");

    $(".navi_pagerotate").removeClass("toolRotateIconDis");
    $(".navi_pagerotate").addClass("toolRotateIconEn");
    TargetHover(".navi_pagerotate", true);



    var currentPg = parseInt(_curCorrectPageId);
    var singlePosi = posi - PreCountHeight(_curCorrectPageId);
    thisPg = _fileDocument[curFileId].GetPageIndex(currentPg);
    _viewerMode = "single";
    var fileDoc = _fileDocument[curFileId];
    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
        var pageId = fileDoc.ViewerPageIndex[i];
        if (pageId != thisPg) {
            $("#page_" + pageId).hide();
            $("#pageImg" + pageId).hide();
            
        }
    }
    $(".docannotations").hide();
    $("#docannotation_" + thisPg).show();
    ChangeViewerPosition(thisPg);
    resizeDocViewerByCSS3("imgBig", thisPg);
    if (!_showDocSrc.in_array(thisPg)) {
        if (_fileDocument[curFileId].ViewerSvgContent[thisPg] != null)
            svgContentToDiv(thisPg);
        else if (!_DocSrcRequest.in_array(thisPg))
            addSvgContent(thisPg, true);
    }
    $("#wdp_Content").scrollTop(singlePosi);
    ImageViewerAnnotationResize(thisPg);
    showAllHideSourceContent();
}
var signRotate = 0;

function btnRotatePage() {
    if (_viewerMode != "single")
        return;
    var posi = $("#wdp_Content").scrollTop();


    var currentPg = parseInt(_curCorrectPageId);
    var singlePosi = posi - PreCountHeight(_curCorrectPageId);
    thisPg = _fileDocument[curFileId].GetPageIndex(currentPg);
    var fileDoc = _fileDocument[curFileId];
    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
        var pageId = fileDoc.ViewerPageIndex[i];
        if (pageId != thisPg) {
            $("#page_" + pageId).hide();
            $("#pageImg" + pageId).hide();
        }
    }
    _fileDocument[curFileId].Viewers[thisPg].ChangeRotate("1");
    if (signRotate == 0)
        signRotate = 1;
    else {
        if ( _fileDocument[curFileId].Viewers[thisPg].Rotate == 0) {
            signRotate = 0;
        }
    }
    ChangeViewerPosition(thisPg);
    resizeDocViewerByCSS3("imgBig", thisPg);
    ImageViewerAnnotationResize(thisPg);
    //rotateAnnotations(thisPg, _fileDocument[curFileId].Viewers[thisPg].Rotate);


    if (!_showDocSrc.in_array(thisPg)) {
        if (_fileDocument[curFileId].ViewerSvgContent[thisPg] != null)
            svgContentToDiv(thisPg);
        else if (!_DocSrcRequest.in_array(thisPg))
            addSvgContent(thisPg, true);
    }
    $("#wdp_Content").scrollTop(singlePosi);


    showAllHideSourceContent();

}

function btnContinuesPage() {
    var posi = $("#wdp_Content").scrollTop();
    $(".navi_single").removeClass("iconBorder");
    $(".navi_multi").addClass("iconBorder");
    _viewerMode = "multi";
 
    $(".navi_pagerotate").removeClass("toolRotateIconEn");
    $(".navi_pagerotate").addClass("toolRotateIconDis");
    TargetHover(".navi_pagerotate", false);

    var currentPg = parseInt(_curCorrectPageId);
    actualIndex = _fileDocument[curFileId].GetPageIndex(currentPg);
    var fileDoc = _fileDocument[curFileId];

        signRotate = 0;
        _fileDocument[curFileId].Viewers[currentPg].ChangeRotate("reset");
    $(".docannotations").show();
    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
        $("#page_" + fileDoc.ViewerPageIndex[i]).show();
        $("#pageImg" + fileDoc.ViewerPageIndex[i]).show();
    }
    ChangeViewerPosition(actualIndex);
    resizeDocViewerByCSS3("imgBig", actualIndex);
    ImageViewerAnnotationResize(actualIndex);
    $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + posi);

}


function PreCountHeight(showIndex) {
    var countHeight = 0;
    for (var i = 0; i < showIndex; i++) {
        var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
        countHeight += (HeightArray[pageIndex] + addHeight) * zoomValue;
    }
    return countHeight;
}

function RotatePage() {
    var target = document.getElementById("page_0");
    var degree = 90;
    var translateX = 0;
    var translateY = 0;
    var parentTarget = document.getElementById("imgBig");
    if (target.style.msTransform !== undefined) { // IE
        target.style.msTransform = 'rotate(' + degree + 'deg)';
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = 'rotate(' + degree + 'deg)';
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = 'rotate(' + degree + 'deg)';
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = 'rotate(' + degree + 'deg)';
    } else {
        target.style.transform = 'rotate(' + degree + 'deg)';
    }
    var viewer = _fileDocument[curFileId].Viewers[0];
    viewer.Rotate = 1;
}

var combineToCreate = false;
function ShowComBox(createNew) {
    newcombinetokane = "";
    if (createNew != null && createNew == true) {
        combineToCreate = true;
        if ($("#dialog").length > 0) {
            
            if ($("#dialog").parent().length > 0 && $("#dialog").parent().hasClass("loadingImg")) {
                
            } else {
                $("#dialog").dialog("close");
            }
        }
        $("#addcombinebtn").hide();
    
    } else {
        $("#addcombinebtn").show();
        combineToCreate = false;
    }
    $("#_comPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    $("._instancePanel").remove();
    SignPanelPosition("#_comPopbox");
}

var sortPgsCreate = false;
var ordPageHeight = 0;
function ShowReOrdBox() {
    $("#_ordPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");

    SignPanelPosition("#_ordPopbox");
    CreateThumbSortNails();
    OrdAddShowPageIds();
}




function CreateThumbSortNail(i, sshowIndex, isEmptyPage, viewerThumbW, viewerThumbH) {
    var showIndex = parseInt(sshowIndex);
    var width = viewerThumbW;
    if (width < viewerThumbH)
        width = viewerThumbH;
    width = 175;
    var str = "<div class='ordThumbnail' id='sortNail_" + i + "' style='width:" + width + "px;height:" + (width + 15) + "px;position:relative;border:1px solid #000000;padding:5px;margin:5px;float:left;'>";
    if (isEmptyPage)
        str += "<div style='width:100%;width:" + viewerThumbW + "px;height:" + viewerThumbH + "px;position:relative;background:#ffffff;margin:auto;'></div>";
    else
        str += "<div style='width:100%;width:" + viewerThumbW + "px;height:" + viewerThumbH + "px;position:relative;background:#ffffff;margin:auto;'><img id='ordImg_" + i + "'  src=''/></div>";
    str += "<div style='width:100%;position:absolute;text-align:center;margin-top:5px;bottom:16px;'>" + (showIndex + 1) + "</div>";
    $("#_ordPanel").append(str);
    ordPageHeight = viewerThumbH + 20;
}


function hideOrdPopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_ordPopbox").hide();
    window.onresize();
}

function ShowExtractBox() {
    $("#_extPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_extPopbox");
    $("#_extPgCount").html(_totalPageCount);
}

function hideExtPopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_extPopbox").hide();
    window.onresize();
}

function hideComPopBox() {
    if (_showCombinePsBox)
        return;
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_comPopbox").hide();
    window.onresize();
}

function TestReplaceData(curItem) {
    var inputId = curItem.id;
    var regEx = new RegExp(/^[0-9]*$/);
    var inputValue = $("#" + inputId).val();
    var origCount_s = $("#_origCount").html();
    var replCount_s = $("#_replCount").html();
    if (regEx.exec(inputValue) == null) {
        $("#_replTo").html("????");
        return;
    }
    
    var sourceStart_s = $("#_origFrom").val();
    var sourceEnd_s = $("#_origTo").val();
    var targetStart_s = $("#_replFrom").val();
    if (regEx.exec(sourceStart_s) == null || regEx.exec(sourceEnd_s) == null || regEx.exec(targetStart_s) == null) {
        $("#_replTo").html("????");
        return;
    }
    origCount = parseInt(origCount_s);
    replCount = parseInt(replCount_s);
    sourceStart = parseInt(sourceStart_s);
    sourceEnd = parseInt(sourceEnd_s);
    targetStart = parseInt(targetStart_s);
    if (sourceStart<1||sourceEnd<1||sourceEnd - sourceStart < 0 || sourceEnd > origCount) {
        $("#_replTo").html("????");
        return;
    }
  
    if (targetStart < 1 || targetStart > replCount || targetStart + sourceEnd - sourceStart > replCount) {
         $("#_replTo").html("????");
        return;
    }
    $("#_replTo").html(targetStart + sourceEnd - sourceStart);
    //inputValue = parseInt(inputValue);
    //if (inputId == "_origFrom") {
    //    var origToVal = parseInt($("#_origTo").val());
    //    if (inputValue > origCount)
    //        $("#_replTo").html("????");
    //    else if (inputValue > origToVal)
    //        $("#_replTo").html("????");
    //    else if ((origToVal - inputValue + 1) > origCount)
    //        $("#_replTo").html("????");
    //    else if ((origToVal - inputValue + 1) > replCount)
    //        $("#_replTo").html("????");
    //    else {
    //        var replFromVal = parseInt($("#_replFrom").val());
    //        var replToVal = origToVal - inputValue + replFromVal;
    //        $("#_replTo").html(replToVal);
    //    }
    //}
    //else if (inputId == "_origTo") {
    //    var origFromVal = parseInt($("#_origFrom").val());
    //    if (inputValue > origCount)
    //        $("#_replTo").html("????");
    //    else if (inputValue < origFromVal)
    //        $("#_replTo").html("????");
    //    else if ((inputValue - origFromVal + 1) > replCount)
    //        $("#_replTo").html("????");
    //    else {
    //        var replFromVal = parseInt($("#_replFrom").val());
    //        var replToVal = inputValue - origFromVal + replFromVal;
    //        $("#_replTo").html(replToVal);
    //    }
    //}
    //else if (inputId == "_replFrom") {
    //    if (inputValue > replCount)
    //        $("#_replTo").html("????");
    //    else {
    //        var origFromVal = parseInt($("#_origFrom").val());
    //        var origToVal = parseInt($("#_origTo").val());
    //        var replToVal = origToVal - origFromVal + inputValue;
    //        $("#_replTo").html(replToVal);
    //    }
    //}
}

function ReplaceAct() {
    var replToVal = $("#_replTo").html();
    if (replToVal == "????")
        alert(i18n['content']['ErrorReplaceData'] || "The data is not in conformity with the requirements!!!");
    else {
        hideReplacePopBox();
        showLoading();
        addFileName = true;

        AppendReplaceFile()
        //var replaceFileName = $("#_replName").html();
        //if ($("#_isHasAnno").html() == "yes")
        //    replaceFileName = "Temp_" + replaceFileName;
        //var origFromVal = parseInt($("#_origFrom").val());
        //var origToVal = parseInt($("#_origTo").val());
        //var pageIndexs = "";
        //var thumbScales = "";
        //for (var i = origFromVal - 1; i < origToVal; i++) {
        //    var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
        //    pageIndexs += pageIndex + ";";
        //    thumbScales += _fileDocument[curFileId].Viewers[pageIndex].ThumbScaleX.toFixed(2) + ";";
        //}
        //var replFromVal = parseInt($("#_replFrom").val());
        //var replToVal = parseInt($("#_replTo").html());
        //var str = { action: "ReplaceDocument", fid: _fid, fileName: _fileName, password: "", replfileName: replaceFileName, replPsword: insertPassword, indexs: pageIndexs, startIndex: replFromVal, endIndex: replToVal, scales: thumbScales, fileMD5: curFileMD5 };
        //var options = {
        //    type: "POST",
        //    url: getServerHandlerUrl(),
        //    async: true,
        //    data: str,
        //    success: function (response) {
        //        $("#loading").hide();
        //        var pageSizes = $("#_pageSizes").html().split("|");
        //        var newSizes = new Array();
        //        var replFrom = parseInt($("#_replFrom").val());
        //        var replTo = parseInt($("#_replTo").html());
        //        for (var i = 0; i < (replTo - replFrom) + 1; i++) {
        //            var tempIndex = replFrom - 1 + i;
        //            newSizes[i] = pageSizes[tempIndex];
        //        }
        //        var replaceIndex = 0;
        //        for (var i = 0; i < (origToVal - origFromVal) + 1; i++) {
        //            var index = origFromVal - 1 + i;
        //            var pageIndex = _fileDocument[curFileId].GetPageIndex(index);
        //            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        //            if (i == 0)
        //                replaceIndex = pageIndex;
        //            $("#page_" + pageIndex).empty();
        //            var tempWH = newSizes[i].split(",");
        //            WidthArray[pageIndex] = parseInt(tempWH[0]);
        //            HeightArray[pageIndex] = parseInt(tempWH[1]);
        //            $("#page_" + pageIndex).css({ "width": tempWH[0] + "px", "height": tempWH[1] + "px" });
        //            viewer.GetInitialSize();
        //            _DocSrcRequest.remove(pageIndex);
        //            _fileDocument[curFileId].ViewerChars[pageIndex] = null;
        //            addSvgContent(pageIndex, true);
        //            ChangeThumbnailSize(pageIndex);
        //            $("#thumbDiv_" + pageIndex).css({ "width": viewer.ThumbWidth + "px", "height": viewer.ThumbHeight + "px" });
        //            $("#ordImg_" + pageIndex).css({ "width": viewer.ThumbWidth + "px", "height": viewer.ThumbHeight + "px" });
        //            if (orderShowIds.in_array(pageIndex)) {
        //                var thumbPath = ThumbSrc(pageIndex);

        //                //$("#ordImg_" + pageIndex).attr("src", thumbPath);
        //                setThumbSrc("ordImg_", pageIndex);
        //            }
        //            if (_showPageIds.in_array(pageIndex)) {
        //                setThumbSrc("thumbnail_", pageIndex);

        //                //var thumbPath = ThumbSrc(pageIndex);
        //                //$("#thumbnail_load_" + pageIndex).removeClass("thumbUploadbackgroud");
        //                //$("#thumbnail_" + pageIndex).attr("src", thumbPath);
        //            }
        //        }
        //        _maxWidth = WidthArray.max();
        //        _maxHeight = HeightArray.max();
        //        RefreshCacheSearchFile();
        //        ChangeViewerPosition(replaceIndex);
        //        resizeDocViewerByCSS3("imgBig", replaceIndex);
        //    },
        //    error: function (err) { $("#loading").hide(); }
        //}
        //$.ajax(options);
    }
}

function sortNumber(a, b) {
    return a - b
}

function InspectNums() {
    var splitNums = $("#_splitNums").val();
    var regEx = new RegExp(/^[0-9]*$/);
    var splitIndexs = new Array();
    if (splitNums == "") {
        $("#_inspectResult").css("color", "#ff0000");
        $("#_inspectResult").html("Please enter at least one page index!!!");
        return splitIndexs;
    }
    else if (splitNums.indexOf(",") == -1) {
        if (regEx.exec(splitNums) == null || parseInt(splitNums) >= _totalPageCount) {
            $("#_inspectResult").css("color", "#ff0000");
            $("#_inspectResult").html("There is no page numbered '" + splitNums + "' in this document!!!");
            return splitIndexs;
        }
        else
            splitIndexs.push(parseInt(splitNums));
    }
    else {
        var tempIndexs = splitNums.split(",");
        for (var i = 0; i < tempIndexs.length; i++) {
            var tempIndex = tempIndexs[i];
            if (tempIndex == "" || regEx.exec(tempIndex) == null)
                continue;
            else {
                if (parseInt(tempIndex) >= _totalPageCount)
                    continue;
                else
                    splitIndexs.push(parseInt(tempIndex));
            }
        }
        if (splitIndexs.length == 0) {
            $("#_inspectResult").css("color", "#ff0000");
            $("#_inspectResult").html("The data you entered is not in conformity with the requirements, please enter again!!!");
            return splitIndexs;
        }
    }
    $("#_inspectResult").css("color", "#00CC33");
    $("#_inspectResult").html("Your effective split page index:" + splitIndexs.sort(sortNumber));
    return splitIndexs;
}

function SplitAct() {
    var splitIndexs = InspectNums();
    if (splitIndexs.length != 0) {
        var splitPageIndexs = "";
        for (var i = 0; i < splitIndexs.length; i++)
            splitPageIndexs += splitIndexs[i] + ";";
        var namePart = $("#_splitPart").val();
        var posi = $('input:radio[name="nameLabel"]:checked').val();
        hideSplitPopBox();
        showLoading();

        var addIndex = "";
        var max = _fileDocument[curFileId].ViewerPageIndex.max();
        if (max > initialPageCount - 1) {
            addIndex = max;
        }
        var extractIndex = "";
        var flag = false;
        for (var i = 0; i < _fileDocument[curFileId].ViewerPageIndex.length; i++) {
            if (i != _fileDocument[curFileId].ViewerPageIndex[i])
                flag = true;
            extractIndex += _fileDocument[curFileId].ViewerPageIndex[i] + ";";
        }
        if (!flag)
            extractIndex = "";
        var isChangeHTML = sendToChangeHTML();
        var designMes = $.toJSON(_pdfPageDesign);
        var str = { action: "SplitDocument", _isChangeHTML: isChangeHTML, fid: _fid, fileName: _fileName, password: curDocPassWord, actualName: _actualName, _addIndex: addIndex, splitNums: splitPageIndexs, _extract: extractIndex, part: namePart, location: posi, nameChange: _NameChange, jsonDoc: GetJsonDoc(true, false), pageDesign: designMes };
        var options = {
            type: "POST",
            url: getServerHandlerUrl(),
            async: true,
            data: str,
            success: function (response) {
                $("#loading").hide();
                var arr = eval('(' + response + ')');
                if (arr.state == "success") {
                    saveFile = arr.msg;
                    if (isSharePoint)
                        alert(i18n['content']['SplitSaveOK'] || "Have been saved successfully!");
                    else
                        window.open(getCacheFileFolder(_fid) + "output/" + saveFile);
                }
                else {
                    $("#loading").hide();
                    alert(arr.msg);
                }
            },
            error: function (err) { $("#loading").hide(); }
        }
        $.ajax(options);
    }
}

function ExtractAct() {
    var regEx = new RegExp(/^[0-9]*$/);
    var deleteCheck = document.getElementById("_DelAfterExt").checked;
    var fromPg = $("#_extFrPg").val();
    if (regEx.exec(fromPg) == null) {
        alert((i18n['content']['ErrorNumberInPage'] || "There is no page in this document numbered ") + fromPg );
        return;
    }
    var toPg = $("#_extToPg").val();
    if (regEx.exec(toPg) == null) {
        alert((i18n['content']['ErrorNumberInPage'] || "There is no page in this document numbered ") + toPg);
        return;
    }
    if (parseInt(fromPg) > parseInt(toPg)) {
        alert(i18n['content']['ErrorStartAndEndExtract'] || "The starting page number must be less than or the same as the ending page number!!");
        return;
    }
    else if (parseInt(fromPg) == 1 && parseInt(toPg) == _totalPageCount) {
        if (deleteCheck)
            alert(i18n['content']['ErrorExtractNoPage'] || "You cannot delete all pages. At least one page must remain");
        else
            alert(i18n['content']['SameDocumentPages'] || "The current document is the result of extracting");
        return;
    }
    var deleteBox = false;
    if (deleteCheck) {
        //if (parseInt(fromPg) == parseInt(toPg))
        //    deleteBox = window.confirm("Are you sure you want to delete page " + fromPg + " ~ " + toPg + "");
        //else
        deleteBox = window.confirm((i18n['content']['ExtractDeletePrompt'] || "Are you sure you want to delete page " )+ fromPg + " ~ " + toPg + "");
        if (!deleteBox)
            return;
    }
    hideExtPopBox();
    ExtractPages(fromPg, toPg);
    if (deleteBox)
        DeletePages(fromPg, toPg);
}

var extractFlag = 0;
function ExtractPages(fromPg, toPg) {
    fromPg = fromPg - 1;
    toPg = toPg - 1;
    var pageIndexArray = "";
    for (var i = fromPg; i <= toPg; i++) {
        var showIndex = i;
        // var pageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
        pageIndexArray += showIndex + ";";
       // pageIndexArray += pageIndex + ";";
    }
    showLoading();
    var addIndex = "";
    var max = _fileDocument[curFileId].ViewerPageIndex.max();
    if (max > initialPageCount - 1) {
        addIndex = max;
    }
    var isChangeHTML = sendToChangeHTML();
    var designMes = $.toJSON(_pdfPageDesign);
    var str = { action: "ExtractPages", _isChangeHTML: isChangeHTML, fid: _fid, fileName: _fileName, password: curDocPassWord, actualName: _actualName, _addIndex: addIndex, flag: extractFlag++, extractIndex: pageIndexArray, nameChange: _NameChange, jsonDoc: GetJsonDoc(true, false), pageDesign: designMes };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) {
            $("#loading").hide();
            var arr = eval('(' + response + ')');
            if (arr.state == "success") {
                saveFile = arr.msg;
                if (isSharePoint)
                    alert(i18n['ExtractSaveOK']||"Have been saved successfully!");
                else
                    window.open(getCacheFileFolder(_fid) + "" + saveFile);
            }
            else {
                $("#loading").hide();
                alert(arr.msg);
            }
        },
        error: function (err) { $("#loading").hide(); }
    }
    $.ajax(options);
}

var itemRemove = {
    text: "Remove",
    func: function () {
        var itemId = this.id;
        var posi = itemId.indexOf("_");
        var num = itemId.substring(posi + 1);
        $("#combine_" + num).remove();
    },
};

var itemMoveDown = {
    text: "MoveDown",
    func: function () {
        var itemId = this.id;
        var posi = itemId.indexOf("_");
        var num = itemId.substring(posi + 1);
        var nextId = $("#combine_" + num).next().attr("id");
        var cloneItem = $("#combine_" + num).clone();
        $("#combine_" + num).remove();
        $("#" + nextId).after(cloneItem);
        $("#info_" + num).bind("mousedown", function () { InstanceSelect(this); });
    },
};

var itemMoveUp = {
    text: "MoveUp",
    func: function () {
        var itemId = this.id;
        var posi = itemId.indexOf("_");
        var num = itemId.substring(posi + 1);
        var preId = $("#combine_" + num).prev().attr("id");
        var cloneItem = $("#combine_" + num).clone();
        $("#combine_" + num).remove();
        $("#" + preId).before(cloneItem);
        $("#info_" + num).bind("mousedown", function () { InstanceSelect(this); });
    },
};
var FirInstanceAct = [[itemRemove, itemMoveDown]];
var instanceAct = [[itemRemove, itemMoveDown, itemMoveUp]];
var LasInstanceAct = [[itemRemove, itemMoveUp]];

var curSelectInstance = "";
var curFileInfo = "";
var curFileIndex = "";
var newcombinetokane = "";
function UploadCombineFiles() {
    $("#comLoad").show();
    var files = document.getElementById("fileToCombine").files;
    $.ajaxFileUpload
	(
	    {
	        url: getCurrentAspx(),
	        secureuri: false,
	        fileElementId: 'fileToCombine',
	        dataType: 'json',
	        data: { add: "combine", fid: _fid, newfile: combineToCreate, ctoken: newcombinetokane },
	        success: function (data, status) {
	            $("#comLoad").hide();
	            if (typeof (data.error) != 'undefined') { }
	            else
	            {
	                var pt = data.trim().split("|");
	                if (pt.length >= 2) {
	                    newcombinetokane = pt[0];
	                }

	                if (pt[1] == "NoEncrypt") {
	                    var childNum = $("#_combinesPanel").children().length - 1;
	                    for (var i = 0; i < files.length; i++) {
	                        CreateContentInstanceItem("_combinesPanel", files[i], childNum + i);
	                        $("#info_" + (childNum + i)).bind("mousedown", function () { InstanceSelect(this); });
	                    }
	                }
	                else {
	                    pt[1] = pt[1].substring(0, pt[1].length - 2);
	                    var namesArray = pt[1].split(";");
	                    for (var i = 0; i < namesArray.length; i++)
	                        namesArray[i] = namesArray[i].trim();
	                    var childNum = $("#_combinesPanel").children().length - 1;
	                    for (var i = 0; i < files.length; i++) {
	                        if (namesArray.in_array(files[i].name)) {
	                            curFileInfo = files[i];
	                            curFileIndex = childNum + i;
	                            insertName = files[i].name;
	                            $("#_combinePswordPopbox").show();
	                            _showCombinePsBox = true;
	                            $("#_insertPsword").val("");
	                            $("#comPswordName").html(insertName);
	                            SignPanelPosition("#_combinePswordPopbox");
	                        }
	                        else {
	                            CreateContentInstanceItem("_combinesPanel", files[i], childNum + i);
	                            $("#info_" + (childNum + i)).bind("mousedown", function () { InstanceSelect(this); });
	                        }
	                    }
	                }
	            }
	        },
	        error: function (data, status, e) {
	            $("#comLoad").hide();
	            alert(e);
	        }
	    }
	)
}

var CombinePswordButtons = [{ text: "Submit", click: function () { ParseCombineDocWidthPassWord(); } },
                           { text: "Cancel", click: function () { $(this).dialog("close"); } }];

function CombinePassword(e) {
    if (e.keyCode == 13) {
        ParseCombineDocWidthPassWord();
        return false;
    }
}

function ParseCombineDocWidthPassWord() {
    var _passWord = $("#_insertPsword").val();
    var str = { action: "DecryptionCombineDoc", fid: _fid, newfile: combineToCreate, fileName: insertName, passWord: _passWord };
    var response = "";
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: false,
        data: str,
        success: function (result) {
            result = eval('(' + result + ')');
            if (result.state == "success") {
                hideCombinePswordPopBox();
                CreateContentInstanceItem("_combinesPanel", curFileInfo, curFileIndex);
                $("#info_" + (curFileIndex)).bind("mousedown", function () { InstanceSelect(this); });
            }
            else if (result.state == "error") {
                alert(i18n['content']['ErrorPassword'] || "Incorrect password, make sure Caps Lock key is not pressed, and then try again!!");
            }
        },
        error: function (err) {
        }
    }
    $.ajax(options);
    return response;
}


function InstanceSelect(item) {
    if (curSelectInstance != "")
        $("#" + curSelectInstance).removeClass("instance_select");
    $("#" + item.id).addClass("instance_select");
    curSelectInstance = item.id;

    var num = curSelectInstance.substring(curSelectInstance.indexOf("_") + 1);
    var LasId = $("#combine_" + num).next().attr("id");
    var FirId = $("#combine_" + num).prev().attr("id");
    if (typeof (LasId) == "undefined")
        $("#" + item.id).smartMenu(LasInstanceAct);
    else if (typeof (FirId) == "undefined" || FirId == "_titlePanel")
        $("#" + item.id).smartMenu(FirInstanceAct);
    else
        $("#" + item.id).smartMenu(instanceAct);
}

var _instanceHeight = 20;
function CreateContentInstanceItem(panelId, file, num) {
    var InstancePanel = "<div class='_instancePanel' id='combine_" + num + "' style='width:" + (panelWidth - 17) + "px;height:" + _instanceHeight + "px;'></div>";
    $("#" + panelId).append(InstancePanel);

    var InstanceItem = "<div class='instance_info' id='info_" + num + "' style='width:" + _items_totalWidth + "px;height:" + _instanceHeight + "px;'></div>";
    $("#combine_" + num).append(InstanceItem);

    var _tempWidth = $("#_name_").width();
    var instanceNameItem = "<div class='_name_instance' id='name_" + num + "' style='width:" + _tempWidth + "px;line-height:" + _instanceHeight + "px;float:left;'>" + file.name + "</div>";
    $("#info_" + num).append(instanceNameItem);

    _tempWidth = $("#_modify_").width();
    var localDate = null;
    var localTime = null;
    var date = file.lastModifiedDate;
    if (date == null || date == "undefined") {
        date =new Date( file.lastModified);
    } 

        localDate= date.toLocaleDateString();
        localTime= date.toTimeString();
    
    localTime = localTime.substring(0, localTime.indexOf(" "));
    var instanceModiItem = "<div class='_modify_instance' id='modi_" + num + "' style='width:" + _tempWidth + "px;line-height:" + _instanceHeight + "px;float:left;'>" + localDate + " " + localTime + "</div>";
    $("#info_" + num).append(instanceModiItem);

    _tempWidth = $("#_type_").width();
    var type = file.type;
    if (type == "") {
        var _tempname = file.name;
        var suffix = _tempname.substring(_tempname.lastIndexOf(".") + 1);
        type = suffix.toLowerCase() + " file";
    }
    var instanceTypeItem = "<div class='_type_instance' id='type_" + num + "' style='width:" + _tempWidth + "px;line-height:" + _instanceHeight + "px;float:left;'>" + type + "</div>";
    $("#info_" + num).append(instanceTypeItem);

    _tempWidth = $("#_size_").width();
    var size = (file.size / 1024.0).toFixed(2);
    var posi = size.indexOf(".");
    var sizePre = "";
    var sizeLas = "";
    if (posi == -1)
        sizePre = size;
    else {
        sizePre = size.substring(0, posi);
        sizeLas = size.substring(posi);
    }
    var instanceSizeItem = "<div class='_size_instance' id='size_" + num + "' style='width:" + _tempWidth + "px;line-height:" + _instanceHeight + "px;float:left;'>" + SizeHandle(sizePre) + sizeLas + " KB</div>";
    $("#info_" + num).append(instanceSizeItem);
}

function SizeHandle(size) {
    var result = "";
    var len = size.length;
    if (len == 0)
        result = "";
    else if (len <= 3)
        result = size;
    else {
        var r = len % 3;
        if (r > 0)
            result = size.slice(0, r) + "," + size.slice(r, len).match(/\d{3}/g).join(",");
        else
            result = size.slice(r, len).match(/\d{3}/g).join(",");
    }
    return result;
}

function CombineFiles(openineditor) {
    if (_showCombinePsBox)
        return;
    var childrens = $("#_combinesPanel").children();
    if (childrens.length <= 2) {
        alert("At least two documents.");
        return;
    }
    var combineFileNames = "";
    for (var i = 1; i < childrens.length; i++) {
        var itemId = childrens[i].id;
        var posi = itemId.indexOf("_");
        var num = itemId.substring(posi + 1);
        var nameItemId = "name_" + num;
        var fileName = $("#" + nameItemId).html();
        combineFileNames += fileName + "|";
    }
    hideComPopBox();
    showLoading();
    var str = { action: "CombineFiles", fid: _fid, names: combineFileNames, newfile: combineToCreate, ctoken: newcombinetokane };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) {
            hideLoading();
            result = eval('(' + response + ')');
            if (result.state == "success") {
                if (isSharePoint)
                    alert(i18n['CombineSaveOK']+"Have been saved successfully!");
                else { 
                if (openineditor) {
                    var path = getRootPath();
                    if (path.indexOf("/") == 0)
                        path = window.location.host + path;
                    if (path.indexOf("http") != 0)
                        path = window.location.protocol + "//" + path;
                    if (path.lastIndexOf("/") == path.length - 1)
                        path = path.substr(0, path.length - 1);
           
                        if (combineToCreate&&newcombinetokane != null) {
                            location.href=path + "/?src=" + path + getCacheCombineFolder(newcombinetokane) + result.msg;
                        } else { 
                            location.href=path + "/?src=" + path + getCacheFileFolder(_fid) + "output/" + result.msg;
                        }
                    
                }
                else
                    window.open(getCacheFileFolder(_fid) + "output/" + result.msg);
                }
            }
            else {
                alert(result.msg);
            }
        },
        error: function (data, status, e) {
            hideLoading();
            alert(e);
        }
    }
    $.ajax(options);
}


function InsertBKPage() {
    $("#_insertPopbox").show();
    $("#insertOkButton").unbind("click");
    $("#insertOkButton").bind("click", AddEmptyPage);
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_insertPopbox");
    $("#_insertTitle").html("Blank Page");
    $("#_insertPg").val(_curCorrectPageId + 1);
    $("#_insertPgCount").html(_totalPageCount);
}

var InsertType = "";
function UploadReplaceFile() {
    showLoading();
    var current = $("#FileToReplace").val();
    if (current == "")
        return;
    $.ajaxFileUpload
	(
	    {
	        url: getCurrentAspx(),
	        secureuri: false,
	        fileElementId: 'FileToReplace',
	        dataType: 'json',
	        data: { add: "replace", fid: _fid },
	        success: function (data, status) {
	            if (typeof (data.error) != 'undefined') { }
	            else
	            {
	                if (data.indexOf("hasPassword") != -1) {
	                    InsertType = "replace";
	                    insertName = data.split(";")[0].trim();
	                    $("#loading_div").hide();
	                    $("#content").empty();
	                    var passWordContent = "<div style='font-size:13px;font-weight:bold;'>Document '" + insertName + "' protected, enter 'Document Open Password'</div><br/>";
	                    passWordContent += "<div>Enter password:&nbsp;&nbsp;<input id='_insertPsword' type='password' style='font-size:12px;width:300px;height:25px;' onkeydown='return InsertPassword(event)'></input></div>";
	                    $("#content").append(passWordContent);
	                    $("#dialog").dialog({
	                        autoOpen: false,
	                        title: "Password",
	                        minWidth: 500,
	                        height: 230,
	                        resizable: true
	                    });
	                    $("#dialog").dialog("option", "buttons", InsertPswordButtons);
	                    var widthCenter = (browserWidth - 500) / 2;
	                    var heightCenter = (browserHeight - 230) / 2;
	                    window.scrollTo(0, 0);
	                    $("#dialog").dialog({ position: [widthCenter, heightCenter] });
	                    $("#dialog").dialog("open");
	                    dialogOpen = true;
	                }
	                else if (data.indexOf("hasOwnerPsword") != -1) {
	                    jAlert((i18n['content']['FileProtected'] || ("The file " + data.split(";")[0].trim() + " is protected.It cannot be used for this command.")), i18n['title']['RasterEdge'] || "RasterEdge Application", function () {
	                        $("#re_func_replPages").trigger("click");
	                    });
	                }
	                else {
	                    var info = data.split(";");
	                    var name = info[0].trim();
	                    var isHasAnnos = info[1].trim();
	                    var replaceFileCount = info[2];
	                    var pageSize = info[3];
	                    var insertMD5 = info[4].trim();
	                    var insertFid = info[5].trim();
	                    var pageRotate = info[6].trim();
	                    addmappingmd5[insertFid] = insertMD5;
	                    isaddFile = true;
	                    ShowReplaceBox(name, isHasAnnos, replaceFileCount, pageSize,pageRotate, insertMD5, insertFid);
	                    
	                }
	            }
	            hideLoading();
	        },
	        error: function (data, status, e) {
	            alert(e);
	        }
	    }
	)
    return false;
}



function RefreshCacheSearchFile() {
    var str = { action: "RefreshCacheSearchFile", fid: _fid, fileName: _fileName, password: "" };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) { },
        error: function (err) { }
    }
    $.ajax(options);
}


function DeleteOpt() {
    $("#_deletePopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_deletePopbox");
    $("#_fromPg").val(_curCorrectPageId + 1);
    $("#_toPg").val(_curCorrectPageId + 1);
    $("#_deletePgCount").html(_totalPageCount);
}

function hideInsertPopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_insertPopbox").hide();
}

function hideDelPopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_deletePopbox").hide();
}

function ShowSplitBox() {
    $("#_splitPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_splitPopbox");
    $("#_splitNums").val("");
    $("#_inspectResult").html("");
}

function hideSplitPopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_splitPopbox").hide();
}

function ShowReplaceBox(replaceName, isHasAnnos, replaceFileCount, pageSize, pageRotate,md5, afid) {
    $("#_replacePopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_replacePopbox");
    $("#_origFrom").val(_curCorrectPageId + 1);
    $("#_origTo").val(_curCorrectPageId + 1);
    $("#_origCount").html(_totalPageCount);
    $("#_origName").html(_actualName);
    $("#_replaceafid").html(afid);
    $("#_replFrom").val(1);
    $("#_replTo").html(1);
    $("#_replCount").html(replaceFileCount);
    $("#_replName").html(replaceName);
    $("#_repisHasAnno").html(isHasAnnos);
    $("#_pageSizes").html(pageSize);
    $("#_pageRotates").html(pageRotate);
}

function hideReplacePopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_replacePopbox").hide();
}


function DeleteAct() {
    var regEx = new RegExp(/^[0-9]*$/);
    var fromPg = $("#_fromPg").val();
    if (regEx.exec(fromPg) == null) {
        alert((i18n['content']['ErrorNumberInPage'] || "There is no page in this document numbered ") + fromPg);
        return;
    }
    var toPg = $("#_toPg").val();
    if (regEx.exec(toPg) == null) {
        alert((i18n['content']['ErrorNumberInPage'] || "There is no page in this document numbered ") + toPg);
        return;
    }
    if (parseInt(fromPg) > parseInt(toPg)) {
        alert(i18n['content']['ErrorStartAndEndDelete']||"The starting page number must be less than or the same as the ending page number!!");
        return;
    }
    else if (parseInt(fromPg) == 1 && parseInt(toPg) == _totalPageCount) {
        alert(i18n['content']['ErrorDeleteAll'] || "You cannot delete all pages. At least one page must remain");
        return;
    }
    var deleteBox = false;
    //if (parseInt(fromPg) == parseInt(toPg))
    //    deleteBox = window.confirm("Are you sure you want to delete page " + fromPg + " to " + toPg + "");
    //else
    deleteBox = window.confirm((i18n['content']['PageDeletePrompt'] || "Are you sure you want to delete pages ") + fromPg + " ~" + toPg + "");
    if (!deleteBox)
        return;
    hideDelPopBox();
    DeletePages(fromPg, toPg);
}

function DeletePages(fromPg, toPg) {
    fromPg = fromPg - 1;
    toPg = toPg - 1;
    var oldCurIndex = _fileDocument[curFileId].GetPageIndex(_curCorrectPageId);
    var newCurIndex = oldCurIndex;
    var pageIndexArray = new Array();
   
    for (var i = fromPg; i <= toPg; i++) {
        var showIndex = i;
        var pageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
        pageIndexArray.push(pageIndex);
        $("#lbl_" + pageIndex).remove();
        $("#page_" + pageIndex).remove();
        $("#sortNail_" + pageIndex).remove();
        $("#docannotation_" + pageIndex).remove();
        _fileDocument[curFileId].DeletePage(showIndex);
        if (pageIndex == oldCurIndex) {
            if (showIndex == 0)
                newCurIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
            else
                newCurIndex = _fileDocument[curFileId].GetPageIndex(showIndex - 1);
            oldCurIndex = newCurIndex;
        }
        _totalPageCount--;
        isaddFile = true;
    }
    RefreshDeleteMsg(pageIndexArray);

    _maxWidth = WidthArray.max();
    _maxHeight = HeightArray.max();
    $("#totalPageIndex").text(_totalPageCount);
    $(".pageIdList").empty();
    for (var i = 1; i <= _totalPageCount; i++) {
        var text = i + " / " + _totalPageCount;
        var value = i;
        $(".pageIdList").append($('<option></option>').val(value).html(text));
    }
    ImageViewerAnnotationResize(newCurIndex);
    ChangePg(newCurIndex);
    resizeDocViewerByCSS3("imgBig", newCurIndex);
    SortPage();
    if (!sortPgsCreate)
        CreateThumbSortNails();
}

function RefreshDeleteMsg(pageIndexArray) {
    for (var i = 0; i < pageIndexArray.length; i++) {
        var pageIndex = pageIndexArray[i];
        _showPageIds.remove(pageIndex);
        _showDocSrc.remove(pageIndex);
        _fileDocument[curFileId].ViewerPageIndex.remove(pageIndex);
        WidthArray[pageIndex] = 0;
        HeightArray[pageIndex] = 0;
    }
    resetCommentShowPage();
}

function PrePageCount(countHeight) {
    var tempHeight = 0;
    for (var i = 0; i < _totalPageCount; i++) {
        var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
        tempHeight += (HeightArray[pageIndex] + addHeight) * zoomValue;

        if (tempHeight >= countHeight)
            return i;
    }
    return 0;
    //var tempHeight = 0;
    //var maxActualHeight = (_maxHeight + addHeight) * zoomValue;
    //var minNum = parseInt(countHeight / maxActualHeight);
    //for (var i = 0; i <= minNum; i++) {
    //    var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
    //    tempHeight += (HeightArray[pageIndex] + addHeight) * zoomValue;
    //}
    //if (parseFloat(tempHeight) >= parseFloat(countHeight))
    //    return minNum;
    //else {
    //    for (var i = minNum; i < _totalPageCount; i++) {
    //        var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
    //        tempHeight += (HeightArray[pageIndex] + addHeight) * zoomValue;
    //        minNum++;
    //        if (tempHeight >= countHeight)
    //            return minNum;
    //    }
    //}
}

function isReadOnly() {
    if (_viewerMode == "single" && signRotate == 1) {
        noSelectLink();
        noSelectAnno();
        return true;
    }
    return false;
}

function markZoom() {
    SelectAreaEvent("zoom", false);
    AddIconBorder("#re_func_markzoom");
}
var zoomRectRate = 1;

function changeZoomByArea(sx, sy, ex, ey, pageindex) {

    if (_viewerMode == "multi")
        pageindex = PrePageCount(sy);
    else
        pageindex = parseInt(pageindex);
    var width = Math.abs(sx - ex);
    var height = Math.abs(sy - ey);
    var viewer = _fileDocument[curFileId].Viewers[pageindex];
    var blkl = viewer.GetRefreshBlankLeft();
    var blkt = PreCountHeight(pageindex);
    var martop = $("#docannotation_" + pageindex).offset().top-100;
    var ratex = _docWidth / width;
    var ratey = _docHeight / height;
    if (ratex < 1)
        ratex = 1;
    if (ratey < 1)
        ratey = 1;
    var rate = (ratex > ratey) ? ratey : ratex;
    zoomRectRate = rate * zoomValue;
    if (zoomRectRate > 12) {
        zoomRectRate = 12;
        rate = zoomRectRate / zoomValue;
        $(".zoomList").val(_zoomItems[0]);
    } else {
        $(".zoomList").val(_zoomItems[16]);
    }

    var locationx = (sx > ex) ? ex : sx;
    var locationy = (sy > ey) ? ey : sy;

    if (blkl > 0)
        locationx = locationx - blkl;
    if (_viewerMode == "multi")
        locationy = locationy - blkt;
    else {
        locationy = locationy - martop;
    }

    $(".zoomList").trigger("change");
    locationx = locationx * rate;
    locationy = locationy * rate;

    viewer = _fileDocument[curFileId].Viewers[pageindex];
    blkl = viewer.GetRefreshBlankLeft();
    blkt = PreCountHeight(pageindex);
    if (blkl > 0)
        locationx = locationx + blkl;
    if (_viewerMode == "multi")
        locationy = locationy + blkt;

    $("#wdp_Content").animate({ scrollTop: locationy  }, 10);
    $("#wdp_Content").animate({ scrollLeft: locationx }, 10);
}


function getClickLocation(x, y, pageindex) {
    if (_viewerMode == "multi") {
        var showindex = PrePageCount(y);
        pageindex = _fileDocument[curFileId].GetPageIndex(showindex);
    }
    else
        pageindex = parseInt(pageindex);
   
    var viewer = _fileDocument[curFileId].Viewers[pageindex];
    var locationx = x;
    var locationy = y;
    var blkl = viewer.GetRefreshBlankLeft();
    var blkt = PreCountHeight(pageindex);
    if (blkl > 0)
        locationx = locationx - blkl;//+ 53;
    if (_viewerMode == "multi")
        locationy = locationy - blkt;//+ 99;
    else
        locationy = locationy;//- $("#docannotation_" + actualIndex).offset().top;
    currentClickLocation = new Object();
    currentClickLocation.x = locationx;
    currentClickLocation.y = locationy;
    currentClickLocation.pageIndex = pageindex;
    if (getCoordinates != null) {
        getCoordinates(currentClickLocation);
    }
}

function getMarkSize(sx, sy, ex, ey, pageindex) {
    if (_viewerMode == "multi"){
        var showindex = PrePageCount(sy);
        pageindex = _fileDocument[curFileId].GetPageIndex(showindex);
    }
    else
        pageindex = parseInt(pageindex);
    var width = Math.abs(sx - ex);
    var height = Math.abs(sy - ey);
    var viewer = _fileDocument[curFileId].Viewers[pageindex];
    var locationx = (sx > ex) ? ex : sx;
    var locationy = (sy > ey) ? ey : sy;
    var blkl = viewer.GetRefreshBlankLeft();
    var blkt = PreCountHeight(pageindex);
    if (blkl > 0)
    locationx = locationx - blkl ;//+ 53;
    if (_viewerMode == "multi")
        locationy = locationy - blkt ;//+ 99;
    else
    locationy = locationy;//- $("#docannotation_" + actualIndex).offset().top;

    var size = new Object();
    size.w = width / zoomValue;
    size.h = height / zoomValue;
    size.x = locationx / zoomValue;
    size.y = locationy / zoomValue;
    size.pageIndex = pageindex;
    size.fid = _fid;
    size.filename = _fileName;
    if (getAreaLocation != null) {
        try {
            getAreaLocation(size);
        } catch (e) {

        }
    }

}


function btnRotateFile() {
    $("#_rotatePopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_rotatePopbox");
    if (_fileDocument[curFileId].Viewers.length > 0) {
        for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
            var viewer = _fileDocument[curFileId].Viewers[i];
            if (viewer == null)
                continue;
            viewer.Rotate = 0;
        }
    }
    CreateThumbRotateNails();
    RotateThumbnailsShowPageIds();
}

function hiderotatePopBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_rotatePopbox").hide();
    if(_fileDocument[curFileId].Viewers.length>0){
        for(var i =0;i<_fileDocument[curFileId].Viewers.length;i++){
            var viewer = _fileDocument[curFileId].Viewers[i];
            if(viewer==null)
                continue;
            viewer.Rotate=0;
        }
    }
}

function checkRotatePages() {
    var gosubmit = false;
    if (_fileDocument[curFileId].Viewers.length > 0) {
        for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
            var viewer = _fileDocument[curFileId].Viewers[i];
            if (viewer == null)
                continue;
            if (viewer.Rotate != 0) {
                gosubmit = true;
                break;
            }
        }
    }
    if (gosubmit) {
        $("#loading_div").show();
        RotateSave();
    } else { 
        hiderotatePopBox();
    }
}

function CreateThumbRotateNails() {
    $("#_rotatePanel").empty();
    var fileDoc = _fileDocument[curFileId];
    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
        var pageIndex = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        if (viewer == null)
            continue;
        var isEmptyPage = viewer.isEmptyPage;
        CreateThumbRotateNail(pageIndex, viewer.ShowIndex, isEmptyPage, viewer.ThumbWidth, viewer.ThumbHeight);
    }
    rotateThumbnailShowIds = new Array();
    $("#_rotatePanel").addClass("select");
   // $("#_rotatePanel").sortable({ stop: function (event, ui) { SortPage(ui.item); } });
    var showRotatenail = null;
    $("#_rotatePanel").scroll(function () {
        if (showRotatenail)
        { clearTimeout(showRotatenail); }
        showRotatenail = setTimeout(function () {
            RotateThumbnailsShowPageIds();
        }, 1000);
    });
}

function CreateThumbRotateNail(i, sshowIndex, isEmptyPage, viewerThumbW, viewerThumbH) {
    var showIndex = parseInt(sshowIndex);
    var width=viewerThumbW;
    if (width < viewerThumbH)
        width = viewerThumbH;
    width = 175;
    var margintop = 0;
    if (viewerThumbH < viewerThumbW) {
        margintop = (width - viewerThumbH) / 2;
    }


    var str = "<div class='rotateThumbnail' id='rotateNail_" + i + "' style='width:" + width + "px;height:" + (width + 15) + "px;position:relative; border:1px solid #000000;padding:5px;margin:5px;float:left;'>";
    if (isEmptyPage)
        str += "<div class='one-page-rotate-container'  id='rtimgcontainer_" + i + "' style='width:" + viewerThumbW + "px;height:" + viewerThumbH + "px;margin-top:" + margintop + "px'></div>";
    else
        str += "<div class='one-page-rotate-container'  id='rtimgcontainer_" + i + "' style='width:" + viewerThumbW + "px;height:" + viewerThumbH + "px;margin-top:" + margintop + "px'><div><img width='" + viewerThumbW + "' height='" + (viewerThumbH) + "' id='rotateImg_" + i + "'  src=''/></div></div>";
    str += "<div class='rotate-label'>" + (showIndex + 1) + "<span id='rotatetitle_"+i+"'></span></div>";
    $("#_rotatePanel").append(str);
    $("#rotateNail_" + i).smartMenu(ThumbRotateMenu);
    //ordPageHeight = viewerThumbH + 20;
}

var rotate90 = {
    text: "Rotate clockwise",
    func: function () {
        var pageId = this.id;
        index = pageId.substring(pageId.indexOf("_") + 1);
        var viewer = _fileDocument[curFileId].Viewers[index];
        if (viewer != null) {
            if (viewer.Rotate == null)
                viewer.Rotate = 0;
            viewer.Rotate = (viewer.Rotate + 90) % 360;

            $("#rtimgcontainer_" + index).removeClass('rotate_0 rotate_90 rotate_180 rotate_270');

            $("#rtimgcontainer_" + index).addClass("rotate_" + (viewer.Rotate < 0 ? (viewer.Rotate + 360) : viewer.Rotate));
            if (viewer.Rotate == 0)
                $("#rotatetitle_" + index).text("");
            else
                $("#rotatetitle_" + index).text("   (Rot. " + viewer.Rotate + "°)");
        }
    }
};
var rotatem90 = {
    text: "Rotate counterclockwise",
    func: function () {
        var pageId = this.id;
        index = pageId.substring(pageId.indexOf("_") + 1);
        var viewer = _fileDocument[curFileId].Viewers[index];
        if (viewer != null) {
            if (viewer.Rotate == null)
                viewer.Rotate = 0;
            viewer.Rotate = (viewer.Rotate - 90) % 360;
         
            $("#rtimgcontainer_" + index).removeClass('rotate_0 rotate_90 rotate_180 rotate_270');

            $("#rtimgcontainer_" + index).addClass("rotate_" + (viewer.Rotate < 0 ? (viewer.Rotate+360) : viewer.Rotate));
            if (viewer.Rotate == 0)
                $("#rotatetitle_" + index).text("");
            else
                $("#rotatetitle_" + index).text("   (Rot. "+viewer.Rotate + "°)");
        }
    }
};
var ThumbRotateMenu = [
	[rotate90,rotatem90]
];


var rotateThumbnailShowIds = [];
function RotateThumbnailsShowPageIds() {
    var addIds = new Array();
    var hNum = 5;
    var vNum = 3;
    var showCount = hNum * vNum;
    var currentThumbId = 0;
    var sTop = $("#_rotatePanel").scrollTop();
    if (sTop != 0) {
        var currentHNum = parseInt(sTop / ordPageHeight) + 1;
        currentThumbId = (currentHNum - 1) * hNum;
    }
    if (rotateThumbnailShowIds.length == _totalPageCount)
        return;
    for (var i = 0; i < showCount; i++) {
        var showId = currentThumbId + i;
        if (showId > -1 && showId < _totalPageCount) {
            var pageIndex = _fileDocument[curFileId].GetPageIndex(showId);
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            if (!rotateThumbnailShowIds.in_array(pageIndex) && !viewer.isEmptyPage) {
                rotateThumbnailShowIds.push(pageIndex);
                addIds.push(pageIndex);
            }
        }
    }
    refreshThumbViewer(addIds, "rotateImg_");
}

function flattenAllAnnotation() {
    jConfirm(i18n['content']['flatten'] || "Do you want to flatten all annotations?", i18n['title']['RasterEdge'] || "RasterEdge Application", function (r) {
        if (r) {
            //to flatten all the annotation
            for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
                var viewer = _fileDocument[curFileId].Viewers[i];
                if (viewer == null)
                { continue; }
                $.each(_fileDocument[curFileId].Viewers[i].Annotations, function (key, val) {
                    if (val!=null)
                        val.IsFlatten = true;
                  
                });

            }
            $("#_commentsPanel").empty();
            $("#_commentList").html("<span style='padding-left:15px;'>Comments  List </span>");
            window.onresize();
        }
    });
};
///<jscompress sourcefile="Annotation.js" />
var defaultauthor = "RasterEdge";

Date.prototype.format = function (format) {
    var o = {
        "M+": this.getMonth() + 1, //month
        "d+": this.getDate(),    //day
        "h+": this.getHours(),   //hour
        "m+": this.getMinutes(), //minute
        "s+": this.getSeconds(), //second
        "q+": Math.floor((this.getMonth() + 3) / 3),  //quarter
        "S": this.getMilliseconds() //millisecond
    }
    if (/(y+)/.test(format)) format = format.replace(RegExp.$1,
    (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o) if (new RegExp("(" + k + ")").test(format))
        format = format.replace(RegExp.$1,
        RegExp.$1.length == 1 ? o[k] :
        ("00" + o[k]).substr(("" + o[k]).length));
    return format;
}

var ZERO = 0;
var LinkAction = Class.create();
LinkAction.prototype = 
{
    initialize:function(options)
    {
        this.SetOptions(options);
        this.ActionType = this.options.ActionType;
        this.Action = this.options.Action; 
    },
    SetOptions:function(options)
    {
        this.options = 
		{
			ActionType:       "",
			Action:           ""
		};
		Extend(this.options, options || {});  
    },
}

var LinkSetting = Class.create();
LinkSetting.prototype = 
{
    initialize:function(options)
    {
        this.SetOptions(options);
        this.Left = this.options.Left;
        this.Top = this.options.Top;
        this.Width = this.options.Width;
        this.Height = this.options.Height;
        this.HighlightStyle = this.options.HighlightStyle;
        this.BorderStyle = this.options.BorderStyle;
        this.BorderColor = this.options.BorderColor;
        this.BorderWidth = this.options.BorderWidth;
        this.IsLock = this.options.IsLock;
        this.Actions = this.options.Actions;
    },
    SetOptions:function(options)
    {
        this.options = 
		{
			Left:             0,
			Top:              0,
			Width:            0,
			Height:           0,			
			HighlightStyle:	  "",
			BorderStyle:      "",
			BorderColor:      "",
			BorderWidth:      "",
			IsLock:           false,
			Actions:         new Array()
		};
		Extend(this.options, options || {});  
    },
}

var AnnoStyle = Class.create();
AnnoStyle.prototype = 
{
    initialize: function(options) 
	{
		this.SetOptions(options);

		this.OutLineColor = this.options.OutLineColor;
		this.OutLineWidth = this.options.OutLineWidth;
		this.FillColor = this.options.FillColor;
		this.ShowedText = this.options.ShowedText;	
		this.Transparency = this.options.Transparency;
		
		this.isOverlayTxt = this.options.isOverlayTxt;
		this.TxtFontSize = this.options.TxtFontSize;
		this.TxtFontColor = this.options.TxtFontColor;
		this.TxtAlignment = this.options.TxtAlignment;
		this.TxtFont = this.options.TxtFont;
		this.MarkFillColor = this.options.MarkFillColor;
		this.MarkOutlineColor = this.options.MarkOutlineColor;
		this.IsRepeact = this.options.IsRepeact;
		
		this.LeaderLength = this.options.LeaderLength;
		this.LeaderOffset = this.options.LeaderOffset;
		this.LeaderExtend = this.options.LeaderExtend;
	
		this.IsVisible = this.options.IsVisible;
		this.LineStyle = this.options.LineStyle;
		this.HighStyle = this.options.HighStyle;
		this.IsLock = this.options.IsLock;
        this.LinkActions = this.options.LinkActions;
        this.MarkupDirection = this.options.MarkupDirection;
        this.Artist = this.options.Artist;
	},
		
	SetOptions: function(options) 
	{
		this.options = 
		{
			OutLineColor:      "",
			OutLineWidth:      0,			
			FillColor:		   "",
			ShowedText:	       "",
			Transparency:      0.4,
			
			isOverlayTxt:       false,
			TxtFontSize:       "12",
			TxtFontColor:      "red",
			TxtAlignment:       "left",
			TxtFont:            "Arial",
			MarkFillColor:      "",
			MarkOutlineColor:   "red",
            IsRepeact: false,
            
			
			LeaderLength: 25,
			LeaderOffset: 0,
			LeaderExtend: 25,

			IsVisible:          true,
			LineStyle:          "Solid",
			HighStyle: "Outline",
			Artist : defaultauthor||"RasterEdge",
            IsLock: false,

            MarkupDirection: 0,

			LinkActions:         new Array()
		};
		Extend(this.options, options || {});
    },
}
var originalAnno = new AnnoStyle();
var rectangleAnnoStyle = new AnnoStyle({ OutLineColor: "#4F81BD", OutLineWidth: 5.0, Transparency: 1.0, FillColor: "none" });
var underlineTextAnnoStyle = new AnnoStyle({OutLineColor:"#00ff00",OutLineWidth:1.0,Transparency:1.0});
var strikeTextAnnoStyle = new AnnoStyle({OutLineColor:"#ff0000",OutLineWidth:1.0,Transparency:1.0});
var replaceTextAnnoStyle = new AnnoStyle({OutLineColor:"#0000ff",OutLineWidth:1.0,Transparency:1.0});
var highTextAnnoStyle = new AnnoStyle({FillColor:"#ffff00",Transparency:0.5});
var lineAnnoStyle = new AnnoStyle({OutLineWidth:2.0,OutLineColor:"#FF0000",Transparency:1});
var dimensionAnnoStyle= new AnnoStyle({ OutLineWidth: 2.0, OutLineColor: "#FF0000", Transparency: 1 ,LeaderLength:25,LeaderExtend:25,LeaderOffset:0,TxtFontColor:"#000000",TxtFontSize:11});
var arrowAnnoStyle = new AnnoStyle({ OutLineWidth: 2.0, OutLineColor: "#FF0000", Transparency: 1 });
var polygonAnnoStyle = new AnnoStyle({ OutLineWidth: 2.0, OutLineColor: "#FF0000", FillColor: "none", Transparency: 1 });
var polygonLinesAnnoStyle = new AnnoStyle({ OutLineWidth: 2.0, OutLineColor: "#FF0000", Transparency: 1 });
var freehandAnnoStyle = new AnnoStyle({ OutLineWidth: 2.0, OutLineColor: "#FF0000", Transparency: 1 });
var circleAnnoStyle = new AnnoStyle({ OutLineWidth: 5.0, OutLineColor: "#1F497D", FillColor: "none", Transparency: 1 });
var textboxAnnoStyle = new AnnoStyle({ OutLineWidth: 2.0, OutLineColor: "#FF0000", FillColor: "#ffffff", Transparency: 1 });
var textAnnoStyle = new AnnoStyle({ Transparency: 1, TxtFontColor: "#000000" });
var notesAnnoStyle = new AnnoStyle({FillColor:"#FFFF00",Transparency:1});
var redactAnnoStyle = new AnnoStyle({ FillColor: "#000000", MarkOutlineColor: "#FF0000", MarkFillColor: "#FF0000", Transparency: 0.3 });
var TempLinkStyle = new AnnoStyle({FillColor:"#2DA2BF",Transparency:0.3});
var LinkStyle = new AnnoStyle({OutLineWidth:2.0,OutLineColor:"#000000",FillColor:"none",Transparency:1.0});
var StampStyle = new AnnoStyle({ FillColor: "none", Transparency: 1.0, OutLineWidth: 5.0, OutLineColor: "#FF0000" });
var AttachFileStyle = new AnnoStyle({ FillColor: "none", Transparency: 1.0, OutLineWidth: 5.0, OutLineColor: "#FF0000" });


var Annotation = Class.create();
Annotation.prototype = 
{
    initialize:function(options)
    {
        this.SetOptions(options);
        this.Id = this.options.Id;
        this.OnPageIndex = this.options.OnPageIndex;
        this.Type = this.options.Type;
        this.Index = this.options.Index;
        this.ModifiedDate = this.options.ModifiedDate;
        this.ShowLeft = this.options.ShowLeft;
        this.ShowTop = this.options.ShowTop;
        this.actualTop = this.options.actualTop;
        this.ShowWidth = this.options.ShowWidth;
        this.ShowHeight = this.options.ShowHeight;
        this.ThumbShowLeft = this.options.ThumbShowLeft;
        this.ThumbShowTop = this.options.ThumbShowTop;
        this.ThumbShowWidth = this.options.ThumbShowWidth;
        this.ThumbShowHeight = this.options.ThumbShowHeight;
        this.Left = this.options.Left;
        this.Top = this.options.Top;
        this.Width = this.options.Width;
        this.Height = this.options.Height;
        this.ZoomValue = this.options.ZoomValue;
        this.ViewerLeft = this.options.ViewerLeft;
        this.ViewerTop  = this.options.ViewerTop;
        this.ViewerWidth = this.options.ViewerWidth;
        this.ViewerHeight = this.options.ViewerHeight;
        this.ViewerScaleX = this.options.ViewerScaleX;
        this.ViewerScaleY = this.options.ViewerScaleY;
        this.ThumbViewerScaleX = this.options.ThumbViewerScaleX;
        this.ThumbViewerScaleY = this.options.ThumbViewerScaleY;
        this.ViewerOne2OneWidth = this.options.ViewerOne2OneWidth;
        this.ViewerOne2OneHeight = this.options.ViewerOne2OneHeight;
        this.selectTextRectangle = this.options.selectTextRectangle;
        this.ShowPoints = this.options.ShowPoints;
        this.Points = this.options.Points;
        this.RelativePoints = this.options.RelativePoints;
        this.noteLeft = this.options.noteLeft;
        this.noteTop = this.options.noteTop;
        this.ThumbPoints = this.options.ThumbPoints;
        this.ThumbRelativePoints = this.options.ThumbRelativePoints;
        this.redactPage = this.options.redactPage;
        this.redactArea = this.options.redactArea;
        this.redactText = this.options.redactText;
        //-------make
        this.IsChanged = this.options.IsChanged;
        this.Apparence = this.options.Apparence;
        this.IsRichText = this.options.IsRichText||false;
        this.RichText = this.options.RichText;
        //Stamp
        this.STID = this.options.STID;
        this.STime = this.options.STime;
        this.CStamp = this.options.CStamp;
        this.CStampid = this.options.CStampid;


        this.linestartstyle = this.options.linestartstyle;
        this.lineendstyle = this.options.lineendstyle;
        this.Rotate = this.options.Rotate;
        this.Attachpath = this.options.Attachpath;
        this.Attachname = this.options.Attachname;


        this.LeaderLength = this.options.LeaderLength;
        this.LeaderOffset = this.options.LeaderOffset;
        this.LeaderExtend = this.options.LeaderExtend;
        this.TxtFontSize = this.options.TxtFontSize;

        this.Artist = this.options.Artist;

        this.IsFlatten = this.options.IsFlatten;
        this.AddAnnoStyle(this.Type);


        if(this.ShowLeft != "")
        {
            this.GetActualPosition();
         
        }
    },
    SetOptions:function(options)
    {
        this.options = 
        {
            Id: "",
            OnPageIndex:            0,
            Type:                   "",
            Index:                  0,
            ModifiedDate:           "",
            ShowLeft:               0,
            ShowTop:                0,
            actualTop:              0,
            ShowWidth:              0,
            ShowHeight:             0,
            ThumbShowLeft:          0,
            ThumbShowTop:           0,
            ThumbShowWidth:         0,
            ThumbShowHeight: 0,
            Rotate: 0,
            Left:                   0,
            Top:                    0,
            Width:                  0,
            Height:                 0,
            ZoomValue:              0,
            ViewerLeft:             0,
            ViewerTop:              0,
            ViewerWidth:            0,
            ViewerHeight:           0,
            ViewerScaleX:           1,
            ViewerScaleY:           1,
            ThumbViewerScaleX:      1,
            ThumbViewerScaleY:      1,
            ViewerOne2OneWidth:     0,
            ViewerOne2OneHeight:    0,
            selectTextRectangle:    new Array(),
            ShowPoints:             "",
            Points:                 "",
            RelativePoints:         "",
            noteLeft:               "",
            noteTop:                "",
            ThumbPoints:            "",
            ThumbRelativePoints:    "",
            redactPage:          false,
            redactArea:          false,
            IsChanged:           false,
            Apparence: "",
            IsRichText: false,
            RichText: "",
            STID: "",
            STime: "",
            CStampid: "",
            CStamp:false,
            linestartstyle: 0,
            lineendstyle: 4,
            redactText: "",
            Attachpath: "",
            Attachname: "",
            LeaderLength: 25,
            LeaderOffset: 0,
            LeaderExtend: 25,
            IsFlatten :false,
            Artist :defaultauthor||"RasterEdge",


        };
        Extend(this.options,options||{});
    },
    
    AddAnnoStyle:function(type)
    {
        var annoStyle = "";
        if(type == "rectangle")
            annoStyle = rectangleAnnoStyle;
        else if(type == "tempLink")
            annoStyle = TempLinkStyle;
        else if(type == "link")
        {
            annoStyle = LinkStyle;
            this.IsVisible = LinkStyle.IsVisible;
            this.LineStyle = LinkStyle.LineStyle;
            this.HighStyle = LinkStyle.HighStyle;
            this.LinkActions = new Array();
        }
        else if(type == "underLine")
            annoStyle = underlineTextAnnoStyle;
        else if(type == "strike")
            annoStyle = strikeTextAnnoStyle;
        else if(type == "highText")
            annoStyle = highTextAnnoStyle;
        else if(type == "line")
            annoStyle = lineAnnoStyle;
        else if(type == "arrow")
            annoStyle = arrowAnnoStyle;
        else if (type == "dimension"){
            annoStyle = dimensionAnnoStyle;
            this.TxtFontColor = dimensionAnnoStyle.TxtFontColor || "#000000";
            this.TxtFontSize = dimensionAnnoStyle.TxtFontSize;
            this.LeaderLength = dimensionAnnoStyle.LeaderLength;
            this.LeaderOffset = dimensionAnnoStyle.LeaderOffset;
            this.LeaderExtend = dimensionAnnoStyle.LeaderExtend;
        }
        else if(type == "polygon")
            annoStyle = polygonAnnoStyle;
        else if(type == "Polygonlines")
            annoStyle = polygonLinesAnnoStyle;
        else if(type == "freehand")
            annoStyle = freehandAnnoStyle;
        else if(type == "circle")
            annoStyle = circleAnnoStyle;
        else if (type == "textbox") {
            annoStyle = textboxAnnoStyle;
            this.TxtFontSize = textboxAnnoStyle.TxtFontSize;
            this.TxtFontColor = textboxAnnoStyle.TxtFontColor || "#000000";
        }
        else if (type == "text"){
            annoStyle = textAnnoStyle;
            this.TxtFontSize = textAnnoStyle.TxtFontSize;
            this.TxtFontColor =textAnnoStyle. TxtFontColor ||"#000000";
            this.TxtFont = textAnnoStyle.TxtFont;
        }
        else if(type == "notes")
            annoStyle = notesAnnoStyle;
        else if(type == "replaceText")
            annoStyle = replaceTextAnnoStyle;
        else if(type=="stamp")
            annoStyle = StampStyle;
        else if(type=="fileattach")
            annoStyle = AttachFileStyle;
        else if(type == "redact")
        {
            annoStyle =  redactAnnoStyle;
            this.TxtFontSize = redactAnnoStyle.TxtFontSize;
		    this.TxtFontColor = redactAnnoStyle.TxtFontColor;
		    this.TxtAlignment = redactAnnoStyle.TxtAlignment;
		    this.TxtFont = redactAnnoStyle.TxtFont;
		    this.MarkFillColor = redactAnnoStyle.MarkFillColor;
		    this.MarkOutlineColor = redactAnnoStyle.MarkOutlineColor;
		    this.isOverlayTxt = redactAnnoStyle.isOverlayTxt;
		    this.IsRepeat = redactAnnoStyle.IsRepeact;
        }
        this.OutLineColor = annoStyle.OutLineColor;
		this.OutLineWidth = annoStyle.OutLineWidth;
		this.FillColor = annoStyle.FillColor;
		this.ShowedText = annoStyle.ShowedText;	
		this.Transparency = annoStyle.Transparency;
    },
    
    GetActualPosition:function()
    {
        if(this.Type == "underLine" || this.Type == "strike" || this.Type == "replaceText" || (this.Type == "redact"&&!this.redactArea))
            return;
        var scaleX = this.ViewerScaleX;
        var scaleY = this.ViewerScaleY;
        var thumbScaleX = this.ThumbViewerScaleX ||1;
        var thumbScaleY = this.ThumbViewerScaleY ||1;
        
        if(_viewerMode == "single")
        {
            this.actualTop = ZERO;//this.ShowTop;
        }
        else
        {
            this.ShowPageIndex = _fileDocument[curFileId].GetShowIndex(this.OnPageIndex);
            var countHeight = PreCountHeight(this.ShowPageIndex);
            this.actualTop = ZERO;//this.ShowTop - countHeight;
            this.ViewerTop = ZERO;//boxWidth * zoomValue;
        }

        this.RelativePoints = "";
		this.Points = "";
		this.ThumbPoints = "";
		this.ThumbRelativePoints = "";
        var pageIndex = this.OnPageIndex;
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        var borderWidth = parseFloat(this.OutLineWidth/2*zoomValue) + 3;
        
        this.Left = (this.ShowLeft - ZERO) * scaleX / zoomValue;//this.ViewerLeft
        this.Top = (this.ShowTop - ZERO) * scaleY / zoomValue;//(this.actualTop - ZERO) * scaleY / zoomValue;//this.ViewerTop
 
        this.Width = (this.ShowWidth)*scaleX/zoomValue;
        this.Height = (this.ShowHeight)*scaleY/zoomValue;
        this.ThumbShowLeft = this.Left*thumbScaleX;
        this.ThumbShowTop = this.Top*thumbScaleY;
        this.ThumbShowWidth = this.Width * thumbScaleX;
        this.ThumbShowHeight = this.Height * thumbScaleY;
       

        var pointArrList = this.ShowPoints.split("|");
        for (var op = 0; op < pointArrList.length; op++) { 
            var pointArr = pointArrList[op].split(";");
            if (op > 0) {
                this.RelativePoints += "|";
                this.ThumbRelativePoints += "|";
            }
            for (var i = 0; i < pointArr.length; i++) {
                var xys = pointArr[i].split(",");

                if (typeof (xys) != 'undefined' && (xys.length > 0 && xys[0] != "")) {
                    x_point = xys[0] - this.ShowLeft;
                    y_point = xys[1] - this.ShowTop;
                    resizeX = (x_point) * scaleX / zoomValue;
                    resizeY = (y_point) * scaleY / zoomValue;
                    thumb_x_point = resizeX * thumbScaleX;
                    thumb_y_point = resizeY * thumbScaleY;
                    this.Points += resizeX + "," + resizeY + ";";
                    this.RelativePoints += (x_point + borderWidth) + "," + (y_point + borderWidth) + " ";
                    this.ThumbPoints += thumb_x_point + "," + thumb_y_point + ";";
                    this.ThumbRelativePoints += thumb_x_point + "," + thumb_y_point + " ";
                }
            }
        }
        this.RelativePoints = this.RelativePoints.substring(0,this.RelativePoints.length-1);
        this.Points = this.Points.substring(0, this.Points.length - 1);
        if (this.Type == "dimension") {
            var go = this.Points.split(";");
            if (go.length >= 9) {
                if (this.LeaderLength >= 0)
                    this.Points = go[7] + ";" + go[9] + ";";
                else
                    this.Points = go[6] + ";" + go[8] + ";";
            }
        }
    
		this.ThumbPoints = this.ThumbPoints.substring(0,this.ThumbPoints.length-1);
		this.ThumbRelativePoints = this.ThumbRelativePoints.substring(0,this.ThumbRelativePoints.length-1);
		this.ThumbShowPoints = this.ThumbPoints;
		
    },
   
   GetShowPosition:function()
   {
        var scaleX = this.ViewerScaleX;
		var scaleY = this.ViewerScaleY;	
		var thumbScaleX = this.ThumbViewerScaleX ||1;
		var thumbScaleY = this.ThumbViewerScaleY||1;	
		
		if(_viewerMode == "single")
		{
            this.actualTop = this.ViewerTop;
		}
		else
		{
		    this.ViewerTop = boxWidth * zoomValue;
		    this.ShowPageIndex = _fileDocument[curFileId].GetShowIndex(this.OnPageIndex);
		    var countHeight = ZERO;//PreCountHeight(this.ShowPageIndex);
		    this.actualTop = countHeight + this.ViewerTop;
		}
		this.RelativePoints = "";
		this.ShowPoints = "";
		this.ThumbPoints = "";
		this.ThumbRelativePoints = "";
		var pageIndex = this.OnPageIndex;
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        var borderWidth = this.OutLineWidth/2 * zoomValue + 3;
        
        var x_points = new Array();
        var y_points = new Array();
       
        if(this.Points != "")
        {
        
           
            var pointArrList = this.Points.split("|");
            for (var op = 0; op < pointArrList.length; op++) {
                var temparr =pointArrList[op];
                if (temparr[temparr.length - 1] == ";")
                    temparr = temparr.substring(0, temparr.length - 1);
                pointArr = temparr.split(";");
                if (op > 0) {
                    this.ShowPoints += "|";
                }
                for (var i = 0; i < pointArr.length; i++) {
                    var xys = pointArr[i].split(",");
                    if (typeof (xys) != 'undefined' && xys!="") {
                        showX = xys[0] * zoomValue / scaleX + ZERO; //this.ViewerLeft;
                        showY = xys[1] * zoomValue / scaleY + ZERO;//this.actualTop;
                        x_points[i] = showX;
                        y_points[i] = showY;
                        this.ShowPoints += showX + "," + showY + ";";
                    }
                }
            }
            if(this.Type == "arrow")
            {
                var arrowPoints;
                arrowPoints = getArrowKeypoints(x_points[1], y_points[1], x_points[0], y_points[0], this.OutLineWidth, this.linestartstyle, this.lineendstyle);
	    	    x_points.push(arrowPoints[0]);
	    	    y_points.push(arrowPoints[1]);
	    	    x_points.push(arrowPoints[2]);
	    	    y_points.push(arrowPoints[3]);
                this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";    
            } else if (this.Type == "dimension") {
                var savStartX = x_points[0];
                var savStartY = y_points[0];
                var savEndX = x_points[1];
                var savEndY = y_points[1];
                var calpoints = null;
                if (this.LeaderLength < 0)
                    calpoints = getDimentsionUpStartEnd(savStartX, savStartY, savEndX, savEndY, this.OutLineWidth, (0-this.LeaderLength));
                else
                    calpoints = getDimentsionDownStartEnd(savStartX, savStartY, savEndX, savEndY, this.OutLineWidth, (this.LeaderLength));
               var dimensionpoints= getDimensionLocation(calpoints[0], calpoints[1], calpoints[2], calpoints[3], this.OutLineWidth, this.LeaderLength, this.LeaderExtend, this.LeaderOffset);
                // start end point 
               x_points[0] = dimensionpoints[1].x;
               y_points[0] = dimensionpoints[1].y;
               x_points[1] = dimensionpoints[6].x;
               y_points[1] = dimensionpoints[6].y;
                // arrow 1 top botom
               x_points[2] = dimensionpoints[3].x;
               y_points[2] = dimensionpoints[3].y;
               x_points[3] = dimensionpoints[4].x;
               y_points[3] = dimensionpoints[4].y;
                // arrow 2 top botom
               x_points[4] = dimensionpoints[8].x;
               y_points[4] = dimensionpoints[8].y;
               x_points[5] = dimensionpoints[9].x;
               y_points[5] = dimensionpoints[9].y;
                // line 1 top botom
               x_points[6] = dimensionpoints[0].x;
               y_points[6] = dimensionpoints[0].y;
               x_points[7] = dimensionpoints[2].x;
               y_points[7] = dimensionpoints[2].y;
                // line 2 top botom
               x_points[8] = dimensionpoints[5].x;
               y_points[8] = dimensionpoints[5].y;
               x_points[9] = dimensionpoints[7].x;
               y_points[9] = dimensionpoints[7].y;

               for (var go = 0; go < 10; go++) {
                   x_points[go + 10] = dimensionpoints[go].x + dimensionpoints[10].x * zoomValue;
                   y_points[go + 10] = dimensionpoints[go].y + dimensionpoints[10].y * zoomValue;
               }
               this.ShowPoints = "";
               for (var goi = 0; goi < x_points.length; goi++) {
                   this.ShowPoints += x_points[goi] + "," + y_points[goi] + ";";
               }
               

                //var arrowPoints;
                //arrowPoints = getArrowKeypoints(x_points[1], y_points[1], x_points[0], y_points[0], this.OutLineWidth, this.linestartstyle, this.lineendstyle);
                //x_points.push(arrowPoints[0]);
                //y_points.push(arrowPoints[1]);
                //x_points.push(arrowPoints[2]);
                //y_points.push(arrowPoints[3]);
                //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                //arrowPoints = getArrowKeypoints(x_points[0], y_points[0], x_points[1], y_points[1], this.OutLineWidth, this.linestartstyle, this.lineendstyle);
                //x_points.push(arrowPoints[0]);
                //y_points.push(arrowPoints[1]);
                //x_points.push(arrowPoints[2]);
                //y_points.push(arrowPoints[3]);
                //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                //arrowPoints = getDimensionLeftRight(x_points[0], y_points[0], x_points[1], y_points[1], this.OutLineWidth, this.LeaderLength, this.LeaderExtend, this.LeaderOffset);
                //x_points.push(arrowPoints[0]);
                //y_points.push(arrowPoints[1]);
                //x_points.push(arrowPoints[2]);
                //y_points.push(arrowPoints[3]);
                //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                //arrowPoints = getDimensionLeftRight(x_points[1], y_points[1], x_points[0], y_points[0], this.OutLineWidth, this.LeaderLength, this.LeaderExtend, this.LeaderOffset);
                //x_points.push(arrowPoints[0]);
                //y_points.push(arrowPoints[1]);
                //x_points.push(arrowPoints[2]);
                //y_points.push(arrowPoints[3]);
                //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";

            }
	    	var tempXMin = x_points[0];
	    	var tempXMax = x_points[0];
	    	var tempYMin = y_points[0];
	    	var tempYMax = y_points[0];
	    	for(var k=0;k<x_points.length;k++)
	    	{
	    	    if(x_points[k] < tempXMin)
	    	        tempXMin = x_points[k];
	    	    if(x_points[k] > tempXMax)
	    	        tempXMax = x_points[k];
	    	    if(y_points[k] < tempYMin)
	    	        tempYMin = y_points[k];
	    	    if(y_points[k] > tempYMax)
	    	        tempYMax = y_points[k];
	    	}
	    	this.ShowLeft = tempXMin;
            this.ShowTop = tempYMin;
            this.ShowWidth = tempXMax - tempXMin;
            this.ShowHeight = tempYMax - tempYMin;
            this.Left = (this.ShowLeft - ZERO) * scaleX / zoomValue;//this.ViewerLeft
            this.Top = (this.ShowTop - ZERO) * scaleY / zoomValue;// this.actualTop
            //this.Left = this.ViewerLeft * scaleX / zoomValue;
            //this.Top =this.ViewerTop * scaleY / zoomValue;
            this.Width = (this.ShowWidth)*scaleX/zoomValue;
            this.Height = (this.ShowHeight)*scaleY/zoomValue;
        }
        else
        {
            if (this.Type == "notes" || this.Type == "fileattach")
            {
                this.Width = noteImgWidth;
                this.Height = noteImgHeight;
            }
            this.ShowLeft = this.Left * zoomValue / scaleX + ZERO;//this.ViewerLeft;
            this.ShowTop = this.Top * zoomValue / scaleX + ZERO;//this.ViewerTop;
	        this.ShowWidth = this.Width * zoomValue/scaleX;
	        this.ShowHeight = this.Height * zoomValue/scaleX;
	        this.ThumbShowLeft = this.Left*thumbScaleX;
	        this.ThumbShowTop = this.Top*thumbScaleY;
	        this.ThumbShowWidth = this.Width*thumbScaleX;
	        this.ThumbShowHeight = this.Height*thumbScaleY;
        }  
       this.ShowPoints = this.ShowPoints.substring(0,this.ShowPoints.length-1);
       
   },
    
   ReSetRotate: function (rotate) {
       this.Rotate = rotate;
       if (this.Rotate == 0) {
           this.ShowLeft = this.ShowLeft_0;
           this.ShowTop = this.ShowTop_0;
           this.ShowWidth = this.ShowWidth_0;
           this.ShowHeight = this.ShowHeight_0;
           this.RelativePoints = this.RelativePoints_0;
           this.ShowPoints = this.ShowPoints_0;
           this.ThumbShowLeft = this.ThumbShowLeft_0;
           this.ThumbShowTop = this.ThumbShowTop_0;
           this.ThumbShowWidth = this.ThumbShowWidth_0;
           this.ThumbShowHeight = this.ThumbShowHeight_0;
           this.ThumbShowPoints = this.ThumbShowPoints_0;
           this.ThumbRelativePoints = this.ThumbRelativePoints_0;
       }
       else if (this.Rotate == 1) {
           this.ShowLeft = this.ShowLeft_90;
           this.ShowTop = this.ShowTop_90;
           this.ShowWidth = this.ShowWidth_90;
           this.ShowHeight = this.ShowHeight_90;
           this.RelativePoints = this.RelativePoints_90;
           this.ShowPoints = this.ShowPoints_90;
           this.ThumbShowLeft = this.ThumbShowLeft_90;
           this.ThumbShowTop = this.ThumbShowTop_90;
           this.ThumbShowWidth = this.ThumbShowWidth_90;
           this.ThumbShowHeight = this.ThumbShowHeight_90;
           this.ThumbShowPoints = this.ThumbShowPoints_90;
           this.ThumbRelativePoints = this.ThumbRelativePoints_90;
       }
       else if (this.Rotate == 2) {
           this.ShowLeft = this.ShowLeft_180;
           this.ShowTop = this.ShowTop_180;
           this.ShowWidth = this.ShowWidth_180;
           this.ShowHeight = this.ShowHeight_180;
           this.RelativePoints = this.RelativePoints_180;
           this.ShowPoints = this.ShowPoints_180;
           this.ThumbShowLeft = this.ThumbShowLeft_180;
           this.ThumbShowTop = this.ThumbShowTop_180;
           this.ThumbShowWidth = this.ThumbShowWidth_180;
           this.ThumbShowHeight = this.ThumbShowHeight_180;
           this.ThumbShowPoints = this.ThumbShowPoints_180;
           this.ThumbRelativePoints = this.ThumbRelativePoints_180;
       }
       else if (this.Rotate == 3) {
           this.ShowLeft = this.ShowLeft_270;
           this.ShowTop = this.ShowTop_270;
           this.ShowWidth = this.ShowWidth_270;
           this.ShowHeight = this.ShowHeight_270;
           this.RelativePoints = this.RelativePoints_270;
           this.ShowPoints = this.ShowPoints_270;
           this.ThumbShowLeft = this.ThumbShowLeft_270;
           this.ThumbShowTop = this.ThumbShowTop_270;
           this.ThumbShowWidth = this.ThumbShowWidth_270;
           this.ThumbShowHeight = this.ThumbShowHeight_270;
           this.ThumbShowPoints = this.ThumbShowPoints_270;
           this.ThumbRelativePoints = this.ThumbRelativePoints_270;
       }
   },

    ReSetSize:function(left,top,width,height)
    {
        var previousWidth = this.ShowWidth;
        var previousHeight = this.ShowHeight;


        this.resizeScaleX =( width/previousWidth) ;;
        this.resizeScaleY =( height/previousHeight) ;;

        if (this.resizeScaleX==1/0 || this.resizeScaleX==-1/0 ||isNaN( this.resizeScaleX ) )
            this.resizeScaleX = 1;
        if (this.resizeScaleY == 1 / 0 || this.resizeScaleY == -1 / 0 || isNaN(this.resizeScaleY))
            this.resizeScaleY = 1;

        this.previousLeft = this.ShowLeft;
        this.previousTop = this.ShowTop;
        
        this.ShowLeft = left;
        this.ShowTop = top;
        this.ShowWidth = width;
        this.ShowHeight = height;
        
        if (this.Type == "line" || this.Type == "arrow" || this.Type == "dimension" || this.Type == "polygon" || this.Type == "Polygonlines" || this.Type == "freehand")
            this.ReSetPoints();
        this.GetActualPosition();

    },
    
    ReSetByZoom: function()
    {
        var scaleX = this.ViewerScaleX;
        var scaleY = this.ViewerScaleY;
        if (this.Type == "underLine" || this.Type == "strike" || this.Type == "replaceText" || (this.Type == "redact" && !this.redactArea))
        {
            return;
        }
        else
        {
            var previousWidth = this.ShowWidth;
            var previousHeight = this.ShowHeight;
            this.previousLeft = this.ShowLeft;
            this.previousTop = this.ShowTop;


            this.ShowLeft = (this.Left) / scaleX * zoomValue + ZERO;//this.ViewerLeft;
            if(_viewerMode == "single")
		    {
                this.ShowTop = (this.Top) / scaleY * zoomValue + ZERO;// this.ViewerTop;
                this.actualTop = this.ShowTop;  
		    }
		    else
		    {
		        this.ViewerTop = boxWidth * zoomValue;
		        this.ShowPageIndex = _fileDocument[curFileId].GetShowIndex(this.OnPageIndex);
			    var countHeight = PreCountHeight(this.ShowPageIndex);
			    this.ShowTop = (this.Top) / scaleY * zoomValue + ZERO;// countHeight +this.ViewerTop;
			    this.actualTop = (this.Top) / scaleY * zoomValue + ZERO;//this.ViewerTop;
		    }
		    this.ShowWidth = (this.Width)/scaleX*zoomValue;
		    this.ShowHeight =(this.Height)/scaleY*zoomValue;
		    this.resizeScaleX = (this.ShowWidth/previousWidth) ||1;
		    this.resizeScaleY = (this.ShowHeight / previousHeight) || 1;

		    if (this.resizeScaleX == 1 / 0 || this.resizeScaleX == -1 / 0 || isNaN(this.resizeScaleX))
		        this.resizeScaleX = 1;
		    if (this.resizeScaleY == 1 / 0 || this.resizeScaleY == -1 / 0 || isNaN(this.resizeScaleY))
		        this.resizeScaleY = 1;
		    
		    this.ReSetPoints();
		    this.GetActualPosition();

        }
    },
    
  

    ReSetPoints:function()
    {

        var pointArrList = this.ShowPoints.split("|");
        var strPoints = "";
        for (var op = 0; op < pointArrList.length; op++) {
            if (op > 0)
                strPoints += "|";
            var pointArr = pointArrList[op].split(";");
            for (var i = 0; i < pointArr.length; i++) {
                var xys = pointArr[i].split(",");
                if (typeof (xys) != 'undefined' && xys!="") {
                    resizeX = (xys[0] - this.previousLeft) * this.resizeScaleX + this.ShowLeft;
                    resizeY = (xys[1] - this.previousTop) * this.resizeScaleY + this.ShowTop;
                    strPoints += resizeX + "," + resizeY + ";";
                }
            }
            strPoints = strPoints.substring(0, strPoints.length - 1);
        }
		this.ShowPoints = strPoints;
    },

    ReSetArrow: function () {
       

        if ((this.Type == "arrow" || this.Type == "dimension") && this.ShowPoints != "") {
            var x_points = new Array();
            var y_points = new Array();
        
            if (this.ShowPoints[this.ShowPoints.length - 1] == ";")
                this.ShowPoints = this.ShowPoints.substring(0, this.ShowPoints.length - 1);
            var pointArr = this.ShowPoints.split(";");
            this.ShowPoints = "";
                for (var i = 0; i < 2; i++) {
                    var xys = pointArr[i].split(",");
                    if (typeof (xys) != 'undefined') {
                        this.ShowPoints += xys[0] + "," + xys[1] + ";";
                        x_points[i] =parseFloat( xys[0]);
                        y_points[i] = parseFloat(xys[1]);
                    }
                }
                if (this.Type == "arrow") {
                    var arrowPoints = getArrowKeypoints(x_points[1], y_points[1], x_points[0], y_points[0], this.OutLineWidth, this.linestartstyle, this.lineendstyle);
                    x_points.push(arrowPoints[0]);
                    y_points.push(arrowPoints[1]);
                    x_points.push(arrowPoints[2]);
                    y_points.push(arrowPoints[3]);
                    this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                    this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]);
                } else if (this.Type == "dimension") {

                    //var savStartX = x_points[0];
                    //var savStartY = y_points[0];
                    //var savEndX = x_points[1];
                    //var savEndY = y_points[1];
                    //var calpoints=null;
                    //if (this.LeaderLength<0)
                    //    calpoints = getDimentsionUpStartEnd(savStartX, savStartY, savEndX, savEndY, this.OutLineWidth, (0-this.LeaderLength));
                    //else
                    //    calpoints = getDimentsionDownStartEnd(savStartX, savStartY, savEndX, savEndY, this.OutLineWidth, (this.LeaderLength));
                    // var dimensionpoints = getDimensionLocation(calpoints[0], calpoints[1], calpoints[2], calpoints[3], this.OutLineWidth, this.LeaderLength, this.LeaderExtend,this.LeaderOffset);
                    dimensionpoints = getDimensionLocation(x_points[0], y_points[0], x_points[1], y_points[1], this.OutLineWidth, this.LeaderLength, this.LeaderExtend, this.LeaderOffset);
                    // start end point 
                    x_points[0] = dimensionpoints[1].x;
                    y_points[0] = dimensionpoints[1].y;
                    x_points[1] = dimensionpoints[6].x;
                    y_points[1] = dimensionpoints[6].y;
                    // arrow 1 top botom
                    x_points[2] = dimensionpoints[3].x;
                    y_points[2] = dimensionpoints[3].y;
                    x_points[3] = dimensionpoints[4].x;
                    y_points[3] = dimensionpoints[4].y;
                    // arrow 2 top botom
                    x_points[4] = dimensionpoints[8].x;
                    y_points[4] = dimensionpoints[8].y;
                    x_points[5] = dimensionpoints[9].x;
                    y_points[5] = dimensionpoints[9].y;
                    // line 1 top botom
                    x_points[6] = dimensionpoints[0].x;
                    y_points[6] = dimensionpoints[0].y;
                    x_points[7] = dimensionpoints[2].x;
                    y_points[7] = dimensionpoints[2].y;
                    // line 2 top botom
                    x_points[8] = dimensionpoints[5].x;
                    y_points[8] = dimensionpoints[5].y;
                    x_points[9] = dimensionpoints[7].x;
                    y_points[9] = dimensionpoints[7].y;

                    for (var go = 0; go < 10; go++) {
                        x_points[go + 10] = dimensionpoints[go].x + dimensionpoints[10].x*zoomValue;
                        y_points[go + 10] = dimensionpoints[go].y + dimensionpoints[10].y* zoomValue;
                    }
                    this.ShowPoints = "";
                    for (var goi = 0; goi < x_points.length; goi++) {
                        this.ShowPoints += x_points[goi] + "," + y_points[goi] + ";";
                    }


                    //var arrowPoints;
                    //arrowPoints = getArrowKeypoints(x_points[1], y_points[1], x_points[0], y_points[0], this.OutLineWidth, this.linestartstyle, this.lineendstyle);
                    //x_points.push(arrowPoints[0]);
                    //y_points.push(arrowPoints[1]);
                    //x_points.push(arrowPoints[2]);
                    //y_points.push(arrowPoints[3]);
                    //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                    //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                    //arrowPoints = getArrowKeypoints(x_points[0], y_points[0], x_points[1], y_points[1], this.OutLineWidth, this.linestartstyle, this.lineendstyle);
                    //x_points.push(arrowPoints[0]);
                    //y_points.push(arrowPoints[1]);
                    //x_points.push(arrowPoints[2]);
                    //y_points.push(arrowPoints[3]);
                    //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                    //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                    //arrowPoints = getDimensionLeftRight(x_points[0], y_points[0], x_points[1], y_points[1], this.OutLineWidth, this.LeaderLength, this.LeaderExtend, this.LeaderOffset);
                    //x_points.push(arrowPoints[0]);
                    //y_points.push(arrowPoints[1]);
                    //x_points.push(arrowPoints[2]);
                    //y_points.push(arrowPoints[3]);
                    //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                    //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                    //arrowPoints = getDimensionLeftRight(x_points[1], y_points[1], x_points[0], y_points[0], this.OutLineWidth, this.LeaderLength, this.LeaderExtend, this.LeaderOffset);
                    //x_points.push(arrowPoints[0]);
                    //y_points.push(arrowPoints[1]);
                    //x_points.push(arrowPoints[2]);
                    //y_points.push(arrowPoints[3]);
                    //this.ShowPoints += parseFloat(arrowPoints[0]) + "," + parseFloat(arrowPoints[1]) + ";";
                    //this.ShowPoints += parseFloat(arrowPoints[2]) + "," + parseFloat(arrowPoints[3]) + ";";
                }

               
            }
        var tempXMin = x_points[0];
        var tempXMax = x_points[0];
        var tempYMin = y_points[0];
        var tempYMax = y_points[0];
        for (var k = 0; k < x_points.length; k++) {
            if (x_points[k] < tempXMin)
                tempXMin = x_points[k];
            if (x_points[k] > tempXMax)
                tempXMax = x_points[k];
            if (y_points[k] < tempYMin)
                tempYMin = y_points[k];
            if (y_points[k] > tempYMax)
                tempYMax = y_points[k];
        }
        var scaleX = this.ViewerScaleX;
        var scaleY = this.ViewerScaleY;
        this.ShowLeft = tempXMin;
        this.ShowTop = tempYMin;
        this.ShowWidth = tempXMax - tempXMin;
        this.ShowHeight = tempYMax - tempYMin;

        this.ViewerTop = boxWidth * zoomValue;
        this.ShowPageIndex = _fileDocument[curFileId].GetShowIndex(this.OnPageIndex);
        var countHeight = 0;
        if (_viewerMode != "single")
            countHeight = PreCountHeight(this.ShowPageIndex);
        this.actualTop = ZERO;//countHeight + this.ViewerTop;

        this.Left = (this.ShowLeft - ZERO) * scaleX / zoomValue;//this.ViewerLeft
        this.Top = (this.ShowTop -ZERO) * scaleY / zoomValue;// this.actualTop
        this.Width = (this.ShowWidth) * scaleX / zoomValue;
        this.Height = (this.ShowHeight) * scaleY / zoomValue;
    }
}


function ImageViewerAnnotationResize(Pg)
{        
    $(".new_rect").remove();
   // if (_fileDocument[curFileId].Viewers[Pg].Rotate != 0)
    //    return;
  
    draggableNumArray = new Array();
    maxwidth = 0;
    if (_viewerMode == "single") {
        var viewer = _fileDocument[curFileId].Viewers[Pg];
        if (viewer != null && typeof (viewer != "undefined")) {
            viewer.GetViewerLeftTop();
            viewer.ReSetAnnotationLeft();
        }
        drawPageAnnotations(Pg);

    }
    else
    {
        var fileDoc = _fileDocument[curFileId];
      
	    for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
	    {
	        var pageIndex = fileDoc.ViewerPageIndex[i];
		    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
		    viewer.GetViewerLeftTop();
		    //if (viewer.NoScrollBox)
		   // drawPageAnnotations(pageIndex);
	    }
	    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
	        var pageIndex = fileDoc.ViewerPageIndex[i];
	        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
	        //if (!viewer.NoScrollBox) {
	            viewer.ReSetAnnotationLeft();
	            drawPageAnnotations(pageIndex);
	       // }
	    }
    }
    noSelectAnno();
    $(".invisablelink").css("border", "");
    if (!isEditLink){
        noSelectLink();
    }
	else
	{
	    $(".lRightDown").css("visibility", "hidden");
	    $(".lLeftDown").css("visibility", "hidden");
	    $(".lLeftUp").css("visibility", "hidden");
	    $(".lRightUp").css("visibility", "hidden");
	    $(".lRight").css("visibility", "hidden");
	    $(".lLeft").css("visibility", "hidden");
	    $(".lUp").css("visibility", "hidden");
	    $(".lDown").css("visibility", "hidden");
	    if(onblurLinkNum != "")
		{
		    var posi = onblurLinkNum.indexOf("_");
	        var linkAnnoNum = onblurLinkNum.substring(posi+1);
		    $("#lRightDown_"+linkAnnoNum).css("visibility","visible");
		    $("#lLeftDown_"+linkAnnoNum).css("visibility","visible");
		    $("#lRightUp_"+linkAnnoNum).css("visibility","visible");
		    $("#lLeftUp_"+linkAnnoNum).css("visibility","visible");
		    $("#lRight_"+linkAnnoNum).css("visibility","visible");
		    $("#lLeft_"+linkAnnoNum).css("visibility","visible");
		    $("#lUp_"+linkAnnoNum).css("visibility","visible");
		    $("#lDown_"+linkAnnoNum).css("visibility","visible");
		}
	}
}      

function drawPageAnnotations(actualIndex)
{   
    for(var index = 0;index<_fileDocument[curFileId].Viewers[actualIndex].Annotations.length;index++)
    {
        var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[index];
		if(annotation != null && annotation.Index != null)
		{
		    drawImageViewerAnnotation(annotation);
		    if(annotation.Type == "notes" || annotation.Type == "replaceText")
            {
                var annoIndex = annotation.Index;
                var flag = annotation.isNoteFrameShow;
                CreateNoteFrame(actualIndex,annoIndex,annotation.ModifiedDate,flag);
                if(annotation.Type == "notes")
                {
                    var noteAnno = document.getElementById("div_"+annoIndex);
	                noteAnno.ondblclick = function(){showNoteFrame(noteAnno);};
	                NoteHover("#div_"+annoIndex);
                }
            }
	    }
	}	
	for(var index = 0;index<_fileDocument[curFileId].Viewers[actualIndex].Links.length;index++)
	{
	    var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[index];
		if(linkAnno != null && linkAnno.Index != null)
		    drawImageViewerLinkAnno(linkAnno);
	}
}

function drawImageViewerLinkAnno(linkAnno)
{
    if(linkAnno == null)
        return;
    ischangelinks = true;
    linkAnno.ReSetByZoom();
    drawLeft=linkAnno.ShowLeft;
	drawTop=linkAnno.ShowTop;
	drawWidth=linkAnno.ShowWidth;
	drawHeight=linkAnno.ShowHeight;
	var outlineColor = linkAnno.OutLineColor;
    if(isEditLink && onblurLinkNum != "")
    {
	    var posi = onblurLinkNum.indexOf("_");
	    var actualIndex = onblurLinkNum.substring(0,posi);
	    var linkAnnoNum = onblurLinkNum.substring(posi+1);
	    if(linkAnno.OnPageIndex == actualIndex && linkAnno.Index == linkAnnoNum)
	        outlineColor = "#0000ff";
    }
    var addinvisableclass = "";
    if (!linkAnno.IsVisible) {
        addinvisableclass = "invisablelink";
        
    }
	var append_string = "";
	if(linkAnno.LineStyle == "Underline")
    {
	    append_string = "<div class='new_rect " + addinvisableclass + "' id='link_" + linkAnno.Index + "' style='left:" + drawLeft + "px;top:" + drawTop + "px;width:" + drawWidth + "px;height:" + drawHeight + "px;border-bottom:solid " + linkAnno.OutLineWidth + "px " + outlineColor + ";opacity:" + linkAnno.Transparency + ";'>";
    }
    else 
    {
	    append_string = "<div class='new_rect " + addinvisableclass + "' id='link_" + linkAnno.Index + "' style='left:" + drawLeft + "px;top:" + drawTop + "px;width:" + drawWidth + "px;height:" + drawHeight + "px;border:" + linkAnno.LineStyle + " " + linkAnno.OutLineWidth + "px " + outlineColor + ";opacity:" + linkAnno.Transparency + ";'>";
    }
    if(!linkAnno.IsLock)
    {
	    append_string += "<div class='lRightDown' id='lRightDown_"+linkAnno.Index+"'></div><div class='lLeftDown' id='lLeftDown_"
	    +linkAnno.Index+"'></div><div class='lRightUp' id='lRightUp_"+linkAnno.Index+"'></div><div class='lLeftUp' id='lLeftUp_"
	    +linkAnno.Index+"'></div><div class='lRight' id='lRight_"+linkAnno.Index+"'></div><div class='lLeft' id='lLeft_"
	    +linkAnno.Index+"'></div><div class='lUp' id='lUp_"+linkAnno.Index+"'></div><div class='lDown' id='lDown_"+linkAnno.Index+"'></div>";
	} 
	append_string +="</div>";
	
    //$("#draw_canvas").append(append_string);
	$("#docannotation_" + linkAnno.OnPageIndex).append(append_string);
	$("#link_"+linkAnno.Index).val(linkAnno.OnPageIndex);
	
    addDragAction(linkAnno.Index,linkAnno.OnPageIndex,"link");
	BindImageViewerAnnotationClick("link",linkAnno.Index);
	BindResize(linkAnno.Index,linkAnno.Type);
	
    if(isEditLink)
    {
        addLinkHoverEvent(linkAnno.Index);
        addLinkClickEvent(linkAnno.OnPageIndex,linkAnno.Index);
        if(linkAnno.IsLock)
            $("#link_"+linkAnno.Index).draggable("disable");
        $("#link_"+linkAnno.Index).smartMenu(LinkAct);
    }
    else
    {
       $("#link_"+linkAnno.Index).draggable("disable");	
       if(!linkAnno.IsVisible)
            $("#link_"+linkAnno.Index).css("border","");
    }
}

function drawImageViewerAnnotation(annotation)
{
    if(annotation == null)
        return;
    if(annotation.Type != "underLine" && annotation.Type != "strike" && annotation.Type != "highText" && annotation.Type != "replaceText" && annotation.Type != "redact")
	{
	    annotation.ReSetByZoom();
		drawLeft=annotation.ShowLeft;
		drawTop=annotation.ShowTop;
		drawWidth=annotation.ShowWidth;
		drawHeight=annotation.ShowHeight;
		var borderWidth = (annotation.OutLineWidth / 2 * zoomValue + 3)||0;
		if (isNaN(borderWidth) )
		    borderWidth = 0;
		if (annotation.Type == "stamp" || annotation.Type == "notes" || annotation.Type == "fileattach")//&& annotation.STID != "")
		    borderWidth = 0;// 5*zoomValue ;
		append_string = "<div class='new_rect' id='div_" + annotation.Index + "'  isflatten='"+annotation.IsFlatten+"' annotype='" + annotation.Type + "' style='left:" + (drawLeft - borderWidth) + "px;top:" + (drawTop - borderWidth) + "px;" + "width:" + (drawWidth + 2 * borderWidth) + "px;height:" + (drawHeight + 2 * borderWidth) + "px'>";
		if (annotation.Type == "line" || annotation.Type == "arrow" || annotation.Type == "dimension")
	    {
	        var strPoints = annotation.ShowPoints.split(";");
	        for(var i=0;i<strPoints.length;i++)
	        {
	            var point = strPoints[i].split(",");
	            if(typeof(point) != 'undefined')
	            {
	                x_points[i] = parseInt(point[0]);
	                y_points[i] = parseInt(point[1]);
	            }
	        }
	        if (!annotation.IsFlatten) {
	            append_string += addLineOrArrowHandler(annotation.Type, x_points, y_points, annotation.Index, borderWidth);
	        }
	    }
		else if (annotation.Type == "notes" || annotation.Type == "fileattach" || annotation.Type == "text") { }
	    else
		{
		    if (!annotation.IsFlatten) {
	            append_string += "<div class='rRightDown' id='rRightDown_"+annotation.Index+"'></div><div class='rLeftDown' id='rLeftDown_"
	            +annotation.Index+"'></div><div class='rRightUp' id='rRightUp_"+annotation.Index+"'></div><div class='rLeftUp' id='rLeftUp_"
	            +annotation.Index+"'></div><div class='rRight' id='rRight_"+annotation.Index+"'></div><div class='rLeft' id='rLeft_"
	            +annotation.Index+"'></div><div class='rUp' id='rUp_"+annotation.Index+"'></div><div class='rDown' id='rDown_"+annotation.Index+"'></div>";
		    }
	    }
	    append_string += drawAnnotationWithSVG(annotation,"annotation",actualIndex,false,true);
	    append_string +="</div>";
	    //$("#draw_canvas").append(append_string);
	    $("#docannotation_" + annotation.OnPageIndex).append(append_string);
	  
	
		if(annotation.Type == "notes")
		{
		  // var src =getImagesFolder() + "Icon-small.png";
		    //  $("#annotation_"+annotation.Index).css("background","url('" + src + "') no-repeat -486px -7px");
		   // $("#annotation_" + annotation.Index).removeClass("noteimage");
		  //  $("#annotation_" + annotation.Index).addClass("noteimage");
		    target = document.getElementById("annotationnoteimg_" + annotation.Index);
		    setTransform(target, 'scale(' + zoomValue + ')');
		} else if (annotation.Type == "fileattach") {

		    var textAnno = document.getElementById("annotation_" + annotation.Index);
            
		    textAnno.ondblclick = function (event) {
		        if (isSharePoint)
		            return;
		        window.open(getCacheFolder() + annotation.Attachpath);
		    };
		}
		if(annotation.Type == "textbox")
		{
		    //(function(arg){
			//    var textAnno = document.getElementById("annotation_"+annotation.Index);
			//    textAnno.ondblclick = function(event)
			//    {
			//        EditText(textAnno);
			//        if (event.preventDefault)   
			//            event.preventDefault();
			//        if (event.returnValue)   
			//            event.returnValue = false;
			//    };   
		    //})(annotation.Index);
		    var textAnno = document.getElementById("annotation_" + annotation.Index);
		    if (!annotation.IsFlatten) { 
		        $("#div_" + annotation.Index).dblclick(function () {
		            EditText(textAnno);
		            if (event.preventDefault)
		                event.preventDefault();
		            if (event.returnValue)
		                event.returnValue = false;
		        });
		    }
		    if (!annotation.IsChanged && typeof (annotation.Apparence) != "undefined" && annotation.Apparence != "") {
		        $("#annotationtextapp_" + annotation.Index).remove();
		        $("#div_" + annotation.Index).append("<div id='annotationtextapp_" + annotation.Index + "'></div>");

		        if (annotation.IsRichText) {
		            var content = '<div id="annotationTextContent_' + annotation.Index + '" style="position:absolute;top:0;left:0;bottom:0;right:0;border: ' + (annotation.OutLineWidth > 0 ? annotation.OutLineWidth : 1) + 'px ' + (annotation.OutLineColor == 0 ? "red" : annotation.OutLineColor) + ' solid ;">' + annotation.RichText + '</div>'
		            $("#annotationtextapp_" + annotation.Index).append(content);
		        } else {
		            var img = '<img id="annotationTextImg_' + annotation.Index + '" src="' + getCacheFolder()+annotation.Apparence + '" height="100%" width="100%"  style="position:absolute;top:0;left:0;"/>';
		            $("#annotationtextapp_" + annotation.Index).append(img);
		        }
		        $("#svg_" + annotation.Index).hide();
		    } else {
		        $("#annotationtextapp_" + annotation.Index).remove();
		    }
		} else if (annotation.Type == "text") {
		    var textAnno = document.getElementById("annotation_" + annotation.Index);
		    if (!annotation.IsFlatten) {
		        $("#div_" + annotation.Index).dblclick(function () {
		            EditText(textAnno);
		            if (event.preventDefault)
		                event.preventDefault();
		            if (event.returnValue)
		                event.returnValue = false;
		        });
		    }
		}
		else if (annotation.Type == "freehand") {
		    if (!annotation.IsChanged && typeof (annotation.Apparence) != "undefined" && annotation.Apparence != "") {
		        $("#annotationtextapp_" + annotation.Index).remove();
		        $("#div_" + annotation.Index).append("<div id='annotationtextapp_" + annotation.Index + "'></div>");
		        var img = '<img id="annotationTextImg_' + annotation.Index + '" src="' + getCacheFolder() + annotation.Apparence + '"  height="100%" width="100%" style="position:absolute;top:0;left:0;"/>';
		        $("#annotationtextapp_" + annotation.Index).append(img);
		        $("#svg_" + annotation.Index).hide();
		    } else {
		        $("#annotationtextapp_" + annotation.Index).remove();
		        $("#svg_" + annotation.Index).show();
		    }
		}

		if (!annotation.IsFlatten &&(  annotation.STID==null|| annotation.STID == "")) {
		    addDragAction(annotation.Index, annotation.OnPageIndex, annotation.Type);
		        BindImageViewerAnnotationClick("annotation", annotation.Index);
		        BindResize(annotation.Index, annotation.Type);
		}
		noSelectAnno();   
	}
	else
        drawTextActSvg(annotation);

    
}  

function addDragAction(annoIndex,actualIndex,type)
{
    

   if(type == "link")
   {
       $("#link_" + annoIndex).draggable({ containment: "#page_" + actualIndex, drgZoomValue: zoomValue, scroll: false, stop: function (e) { dragRefresh("annotation",annoIndex, actualIndex); } });
        var recordValue = actualIndex + "_" + annoIndex;
        if(!linkAnnoArray.in_array(recordValue))
            linkAnnoArray.push(recordValue);
   }
   else
   {
       var dragId = "#div_"+annoIndex;
       if(type == "notes"){
           $("#div_" + annoIndex).draggable({ containment: "#page_" + actualIndex, drgZoomValue: zoomValue, scroll: false, stop: function (e) { dragRefresh("annotation", annoIndex, actualIndex); ChangeNotePosi(actualIndex, annoIndex); } });
       }
       else
           $("#div_" + annoIndex).draggable({ containment: "#page_" + actualIndex, drgZoomValue: zoomValue, scroll: false, stop: function (e) { dragRefresh("annotation", annoIndex, actualIndex);  } });
       if(!draggableNumArray.in_array(dragId))
		    draggableNumArray.push(dragId);
   }
}


function dragRefresh(type, selectid, actualIndex) {
    if (isReadOnly())
        return;
    var parent_left = $("#wdp_Content").offset().left;
    var parent_top = $("#wdp_Content").offset().top;
    var nScrollLeft = $("#wdp_Content")[0].scrollLeft;
    var nScrollTop = $("#wdp_Content")[0].scrollTop;
    var annotation = null;
    var blankLeft = 0;
    var blankTop=0;
    for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
        var viewer = _fileDocument[curFileId].Viewers[i];
        blankLeft = 0;
        if (viewer == null || viewer.ShowIndex == null)
        { continue; }
        //blankLeft = viewer.GetRefreshBlankLeft();
        blankLeft = $("#docannotation_" + actualIndex).offset().left;
        blankTop = $("#docannotation_" + actualIndex).offset().top;
        if (viewer.Annotations[selectid] != null) {
            pageId = i;
            annotation = _fileDocument[curFileId].Viewers[pageId].Annotations[selectid];
            reDrawDiv = $("#div_" + selectid);
            break;
        }
        else if (viewer.Links[selectid] != null) {
            pageId = i;
            annotation = _fileDocument[curFileId].Viewers[pageId].Links[selectid];
            reDrawDiv = $("#link_" + selectid);
            break;
        }
    
    }
    if (annotation == null || annotation.IsFlatten) { return false; }
    var borderWidth = (annotation.OutLineWidth / 2 * zoomValue + 3) || 3;
    if (annotation.Type == "stamp" || annotation.Type == "fileattach" || annotation.Type == "notes")
        borderWidth = 0;
    //if (blankLeft == 0)
    //    blankLeft = 0 - nScrollLeft;
    reDraw_left = reDrawDiv.offset().left - blankLeft + borderWidth;//- parent_left + nScrollLeft;
    reDraw_top = reDrawDiv.offset().top - blankTop + borderWidth;//- parent_top+ nScrollTop
    if (reDrawDiv.width() == 0 || reDrawDiv.height() == 0) {
        reDraw_width = 1;
        reDraw_height = 1;
    }
    else {
        reDraw_width = reDrawDiv.width() - 2 * borderWidth;
        reDraw_height = reDrawDiv.height() - 2 * borderWidth;
    }
    AnnoIsChanged(selectid, pageId);
    annotation.ReSetSize(reDraw_left, reDraw_top, reDraw_width, reDraw_height);
    resizeAnnotationWithSVG("#" + type + "_", annotation, pageId, false);
    $("#thumbImg_" + selectid).remove();
    addThumbViewerAnnotation(annotation, pageId);
    
}

function drawTextActSvg(annotation)
{
    var addedclass = "";
    if(annotation.Type == "redact" && (annotation.redactPage||annotation.redactArea))
    {
     
        var hightContent = "<div class='new_rect " + addedclass + "' id='div_" + annotation.Index + "' >";
	    var actualIndex = annotation.OnPageIndex;
	    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
	    viewer.GetViewerLeftTop();
	    var viewerLeft = ZERO;//viewer.GetRefreshBlankLeft();
	    var viewerTop = ZERO;// viewer.Top;
	    if(_viewerMode == "multi")
	    {
	        var showIndex = _fileDocument[curFileId].GetShowIndex(actualIndex);
	        viewerTop += ZERO;//PreCountHeight(showIndex);
	    }
	    annotation.ReSetByZoom();
	    var textWidth = viewer.ActualWidth - addWidth * zoomValue;
	    var textHeight = viewer.ActualHeight - addHeight * zoomValue;
	    var showWidth=annotation.ShowWidth;
	    var showHeight = annotation.ShowHeight;
	    var redacttype = "text";
	    if (annotation.redactPage) {
	        redacttype = "page";
	        showWidth = viewer.ActualWidth;
	        showHeight = viewer.ActualHeight;
	    }
	    if (annotation.redactArea) {
	        redacttype = "area";
	        hightContent += "<div class='new_rect' style='cursor:text;left:" + annotation.ShowLeft + "px;top:" + annotation.ShowTop + "px;width:" + showWidth + "px;height:" + showHeight + "px;'>";
	        hightContent += "<svg class='annotation' id='svg_" + annotation.Index + "' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
	        hightContent += "<rect class=' annotation' width='100%' height='100%' style='fill:" + annotation.MarkFillColor + ";stroke:" + annotation.MarkOutlineColor + ";stroke-width:3px;fill-opacity:" + annotation.Transparency + ";'/>";
	    } else {
           
	        hightContent += "<div class='new_rect' style='cursor:text;left:" + viewerLeft + "px;top:" + viewerTop + "px;width:" + textWidth + "px;height:" + textHeight + "px;'>";
	        hightContent += "<svg class='annotation' id='svg_" + annotation.Index + "' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
	        hightContent += "<rect class=' annotation' width='" + textWidth + "' height='" + textHeight + "' style='fill:" + annotation.MarkFillColor + ";stroke:" + annotation.MarkOutlineColor + ";stroke-width:3px;fill-opacity:" + annotation.Transparency + ";'/>";
	    }
	   
        
   
        if(annotation.isOverlayTxt)
        {   
            hightContent += "<g class='redactShow' style='display:none;'><rect redact='" + redacttype + "' class='redactannotation' id='annotation_" + annotation.Index + "'  width='" + showWidth + "' height='" + showHeight + "' style='fill:" + annotation.FillColor + ";opacity:1;'/></g>";
            //hightContent += "<text class='redactText' style='display:none;' fill='" + annotation.TxtFontColor + "' font-family='" + annotation.TxtFont + "' font-size='" + annotation.TxtFontSize * zoomValue + "'>" + GetRedactTextSpanSvg(annotation.ShowedText, textWidth, textHeight, annotation.TxtFont, annotation.TxtFontColor, annotation.TxtFontSize, annotation.TxtAlignment, annotation.IsRepeat, annotation.Index, annotation.redactPage) + "</text></svg></div>";
            if(annotation.IsRepeat)
            {
                hightContent += "<text class='redactText' style='display:none;' fill='"+annotation.TxtFontColor+"' font-family='"+annotation.TxtFont+"' font-size='"+annotation.TxtFontSize*zoomValue+"'>"+GetRedactTextSpanSvg(annotation.ShowedText,textWidth,textHeight,annotation.TxtFont,annotation.TxtFontColor,annotation.TxtFontSize,annotation.TxtAlignment,annotation.IsRepeat,annotation.Index,true)+"</text></svg></div>";
            }
            else
                hightContent += "<text class='redactText' style='display:none;' fill='"+annotation.TxtFontColor+"' font-family='"+annotation.TxtFont+"' font-size='"+annotation.TxtFontSize*zoomValue+"'>"+GetRedactTextSpanSvg(annotation.ShowedText,textWidth,textHeight,annotation.TxtFont,annotation.TxtFontColor,annotation.TxtFontSize,annotation.TxtAlignment,annotation.IsRepeat,annotation.Index,false)+"</text></svg></div>";
        }
        else
        {
            hightContent += "<g class='redactShow' style='display:none;'><rect  redact='" + redacttype + "' class='redactannotation' id='annotation_" + annotation.Index + "'  width='" + showWidth + "' height='" + showHeight + "' style='fill:" + annotation.FillColor + ";opacity:1;'/></g></svg></div>";
        }
        hightContent += "</div>";
        $("#docannotation_" + annotation.OnPageIndex).append(hightContent);
	   // $("#draw_canvas").append(hightContent);
	} 
	else
	{
	    var actualIndex = annotation.OnPageIndex;
	    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
	    var viewerLeft = ZERO;//viewer.GetRefreshBlankLeft() - 1 * zoomValue;
	    var viewerTop = ZERO;//viewer.Top - 2 * zoomValue;
	    if (_viewerMode == "multi") {
	        var showIndex = _fileDocument[curFileId].GetShowIndex(actualIndex);
	        viewerTop += ZERO;//PreCountHeight(showIndex);
	    }

	    var tempLeft = annotation.selectTextRectangle[0];
	    var tempTop = annotation.selectTextRectangle[1];
	    var tempWidth = annotation.selectTextRectangle[2];
	    var tempHeight = annotation.selectTextRectangle[3];
	    
	    if (annotation.AddBySearch != null && annotation.AddBySearch === true) {
	        addedclass = "redactBySearch";
	    }
	    var hightContent = "<div class='new_rect " + addedclass + "' id='div_" + annotation.Index + "' isflatten='" + annotation.IsFlatten + "'>";
	    var borderWidth = 3;

	    for (var j = tempLeft.length - 1; j >= 0; j--) {
	        if (annotation.Type == "redact" && annotation.isOverlayTxt && j == 0 && !annotation.IsRepeat) {
	            var textWidth = tempWidth[0] * zoomValue;
	            var length = tempLeft.length - 1;
	            var textHeight = (tempTop[length] - tempTop[0] + tempHeight[length]) * zoomValue;
	            hightContent += "<div class='new_rect' style='cursor:text;left:" + (viewerLeft + tempLeft[j] * zoomValue - borderWidth) + "px;top:" + (viewerTop + tempTop[j] * zoomValue - borderWidth) + "px;width:" + (textWidth + borderWidth * 2) + "px;height:" + (textHeight + borderWidth * 2) + "px;'>";
	            hightContent += "<svg class='annotation' id='svg_" + annotation.Index + "_" + j + "' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
	        }
	        else {
	            hightContent += "<div class='new_rect' style='cursor:text;left:" + (viewerLeft + tempLeft[j] * zoomValue - borderWidth) + "px;top:" + (viewerTop + tempTop[j] * zoomValue - borderWidth) + "px;width:" + (tempWidth[j] * zoomValue + borderWidth * 2) + "px;height:" + (tempHeight[j] * zoomValue + borderWidth * 2) + "px;'>";
	            hightContent += "<svg class='annotation' id='svg_" + annotation.Index + "_" + j + "' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
	        }
	        var strPoints = "";
	        if (annotation.Type == "highText") {
	            hightContent += "<rect class='shadow shadow_" + annotation.Index + "'  width='" + (tempWidth[j] * zoomValue + borderWidth * 2) + "' height='" + (tempHeight[j] * zoomValue + borderWidth * 2) + "' style='fill:none;stroke:#0000ff;stroke-width:" + borderWidth + ";stroke-opacity:0.5;'/>";
	            hightContent += "<rect class='annotation' id='annotation_" + annotation.Index + "_" + j + "' x='" + borderWidth + "' y='" + borderWidth + "' width='" + tempWidth[j] * zoomValue + "' height='" + tempHeight[j] * zoomValue + "' style='fill:" + annotation.FillColor + ";stroke:none;opacity:" + (annotation.Transparency > 0.6 ? 0.6 : annotation.Transparency) + "'/></svg></div>";

	        }
	        else if (annotation.Type == "redact") {
	            hightContent += "<rect class='shadow shadow_" + annotation.Index + "' width='" + (tempWidth[j] * zoomValue + borderWidth * 2) + "' height='" + (tempHeight[j] * zoomValue + borderWidth) + "' style='fill:none;stroke:#0000ff;stroke-width:" + borderWidth + ";stroke-opacity:0.5;'/>";
	            hightContent += "<rect class=' annotation'  x='" + borderWidth + "' y='" + borderWidth + "' width='" + tempWidth[j] * zoomValue + "' height='" + tempHeight[j] * zoomValue + "' style='fill:" + annotation.MarkFillColor + ";stroke:" + annotation.MarkOutlineColor + ";stroke-width:3px;fill-opacity:" + annotation.Transparency + ";'/>";

	            if (annotation.IsRepeat && annotation.isOverlayTxt) {
	                hightContent += "<g class='redactShow' style='display:none;'><rect class='redactannotation' id='annotation_" + annotation.Index + "_" + j + "'  width='" + (tempWidth[j] * zoomValue + borderWidth * 2) + "' height='" + (tempHeight[j] * zoomValue + borderWidth * 2) + "' style='fill:" + annotation.FillColor + ";opacity:1;'/></g>";
	                hightContent += "<text class='redactText' style='display:none;' fill='" + annotation.TxtFontColor + "' font-family='" + annotation.TxtFont + "' font-size='" + annotation.TxtFontSize * zoomValue + "'>" + GetRedactTextSpanSvg(annotation.ShowedText, tempWidth[j] * zoomValue, tempHeight[j] * zoomValue, annotation.TxtFont, annotation.TxtFontColor, annotation.TxtFontSize, annotation.TxtAlignment, annotation.IsRepeat, annotation.Index, false) + "</text></svg></div>";
	            }
	            else {
	                if (j == 0 && annotation.isOverlayTxt) {
	                    hightContent += "<g class='redactShow' style='display:none;'><rect class='redactannotation' id='annotation_" + annotation.Index + "_" + j + "'  width='" + (tempWidth[j] * zoomValue + borderWidth * 2) + "' height='" + (tempHeight[j] * zoomValue + borderWidth * 2) + "' style='fill:" + annotation.FillColor + ";opacity:1;'/></g>";
	                    hightContent += "<text class='redactText' style='display:none;' fill='" + annotation.TxtFontColor + "' font-family='" + annotation.TxtFont + "' font-size='" + annotation.TxtFontSize * zoomValue + "'>" + GetRedactTextSpanSvg(annotation.ShowedText, textWidth, textHeight, annotation.TxtFont, annotation.TxtFontColor, annotation.TxtFontSize, annotation.TxtAlignment, annotation.IsRepeat, annotation.Index, false) + "</text></svg></div>";
	                }
	                else
	                    hightContent += "<g class='redactShow' style='display:none;'><rect class='redactannotation' id='annotation_" + annotation.Index + "_" + j + "'  width='" + (tempWidth[j] * zoomValue + borderWidth * 2) + "' height='" + (tempHeight[j] * zoomValue + borderWidth * 2) + "' style='fill:" + annotation.FillColor + ";opacity:1;'/></g></svg></div>";
	            }
	        }
            else {
                var targetrate = 5 / 6;
                if (annotation.Type == "underLine")
                    targetrate = 5 / 6;
                else if (annotation.Type == "strike" || annotation.Type == "replaceText")
                    targetrate = 4 / 9;
                //if (annotation.MarkupDirection == 90) {
                //    strPoints = borderWidth + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth) + " " + (tempWidth[j] * zoomValue + borderWidth) + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth);
                //} else if (annotation.MarkupDirection == 180) {
                //    strPoints = borderWidth + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth) + " " + (tempWidth[j] * zoomValue + borderWidth) + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth);
                //} else if (annotation.MarkupDirection == 270) {
                //    strPoints = borderWidth + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth) + " " + (tempWidth[j] * zoomValue + borderWidth) + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth);
                //} else {
                //    strPoints = borderWidth + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth) + " " + (tempWidth[j] * zoomValue + borderWidth) + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth);
                //}
                if (annotation.MarkupDirection == 90) {
                    targetrate = 1 - targetrate;
                    strPoints = (tempWidth[j] * zoomValue * targetrate + borderWidth) + "," + 0 + " " + (tempWidth[j] * zoomValue * targetrate + borderWidth) + "," + (tempHeight[j] * zoomValue + borderWidth);
                } else if (annotation.MarkupDirection == 180) {
                    targetrate = 1 - targetrate;
                    strPoints = 0 + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth) + " " + (tempWidth[j] * zoomValue + borderWidth) + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth);
                } else if (annotation.MarkupDirection == 270) {
                    
                    strPoints = (tempWidth[j] * zoomValue * targetrate + borderWidth) + "," + 0 + " " + (tempWidth[j] * zoomValue * targetrate + borderWidth) + "," + (tempHeight[j] * zoomValue + borderWidth);
                } else {
                    strPoints = 0 + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth) + " " + (tempWidth[j] * zoomValue + borderWidth) + "," + (tempHeight[j] * zoomValue * targetrate + borderWidth);
                }
	            hightContent += "<rect class='shadow shadow_" + annotation.Index + "' width='" + (tempWidth[j] * zoomValue + borderWidth * 2) + "' height='" + (tempHeight[j] * zoomValue + borderWidth * 2) + "' style='fill:none;stroke:#0000ff;stroke-width:" + borderWidth + ";stroke-opacity:0.5;'/>";
	            hightContent += "<polyline class='annotation' id='annotation_" + annotation.Index + "_" + j + "' points='" + strPoints + "' style='stroke:" + annotation.OutLineColor + ";stroke-width:" + annotation.OutLineWidth * zoomValue + ";opacity:" + annotation.Transparency + "' /></svg></div>";
	        }
	    }
	    hightContent += "</div>";
	   // $("#draw_canvas").append(hightContent);
	    $("#docannotation_" + annotation.OnPageIndex).append(hightContent);
	    annotation.ShowLeft = viewerLeft + tempLeft[0] * zoomValue;
	    annotation.ShowTop = viewerTop + tempTop[0] * zoomValue;
	}
	if(annotation.Type == "redact")
	    $("#div_"+annotation.Index).addClass("redactHover");
	RedactHover();
	if(annotation.Type == "replaceText")
	{
	    var noteAnno = document.getElementById("div_"+annotation.Index);
	    noteAnno.ondblclick = function(){showNoteFrame(noteAnno);};
	    NoteHover("#div_"+annotation.Index);
	}
}        

var isInRedactHover = false;
function RedactHover()
{
   $(".redactHover").hover
   (
	    function()
		{
		    var annoId = $(this).attr("id");
		    $("#" + annoId + " .redactShow").css("display","block");
		    $("#" + annoId + " .redactText").css("display","block"); 
		    isInRedactHover = true;
		},
		function()
		{
		    var annoId = $(this).attr("id");
		    $("#" + annoId + " .redactShow").css("display","none");
		    $("#" + annoId + " .redactText").css("display","none");
		    isInRedactHover = false;
		}
	);
}

function GetRedactTextSpanSvg(text,textWidth,textHeight,txtFont,txtFontColor,txtFontSize,txtAlign,isRepeat,annoIndex,isRedactPage)
{
    var pageFontSize = zoomValue * txtFontSize;
    var resultSvg = "";
	var canvas = document.createElement("canvas");
	context = canvas.getContext("2d");
	var font = pageFontSize + "px " + txtFont;
	context.font = font;
    if(textWidth < 0 || textHeight < 0)
        return;
    var lineNum = 1;
    var lineLen = 0;
    var lineStr = "";
    var id = "annotation_"+annoIndex+"_redacttext";
    if(isRepeat && isRedactPage)
        resultSvg += GetRedactPageSpanSvg(id,text,lineLen,context,textWidth,textHeight,pageFontSize,lineStr,txtAlign,resultSvg);
    else
        resultSvg += GetTextSpanSVG(id,text,lineLen,context,textWidth,textHeight,lineNum,pageFontSize,lineStr,txtAlign,resultSvg,isRepeat);
    return resultSvg;
}

function GetRedactPageSpanSvg(id,text,lineLen,context,textWidth,textHeight,pageFontSize,lineStr,txtAlign,resultSvg)
{
    var totalWidth = context.measureText(text).width;
    for(var j=0;j<text.length;j++)
    {
        if(text.charCodeAt(j) == 32)
        {
            if((lineLen+spaceWidth) > textWidth)
            {
                resultSvg += RepeatSameContent(id,textWidth,pageFontSize,lineStr,lineLen,txtAlign,textHeight);
                return resultSvg;
            }
            else
            {
                lineStr += " ";
                lineLen += spaceWidth;
                var tmpStr = text.substring(j + 1);
                var tmpWidth = 0;
                var position = tmpStr.indexOf(" ");
                if(position == -1)
                    tmpWidth = context.measureText(tmpStr).width;
                else
                    tmpWidth = context.measureText(tmpStr.substring(0,position)).width;
                if((lineLen + tmpWidth) > textWidth)
                {
                    resultSvg += RepeatSameContent(id,textWidth,pageFontSize,lineStr,lineLen,txtAlign,textHeight);
                    return resultSvg;
                }
            }
       }
       else
       {
            var charWidth = context.measureText(text[j]).width;
            lineLen += charWidth;
            if(lineLen > textWidth)
            {
                resultSvg += RepeatSameContent(id,textWidth,pageFontSize,lineStr,lineLen,txtAlign,textHeight);
                return resultSvg;
            }
            else
            {
                lineStr += text[j];  
            }
       }
   }
   if(lineStr != "")
   {
       if((textWidth - lineLen) > totalWidth)
       {
            resultSvg += GetRedactPageSpanSvg(id,text,lineLen,context,textWidth,textHeight,pageFontSize,lineStr,txtAlign,resultSvg);
       }
       else
       {
           resultSvg += RepeatSameContent(id,textWidth,pageFontSize,lineStr,lineLen,txtAlign,textHeight);
       }
   }
   return resultSvg;
}

function RepeatSameContent(id,textWidth,pageFontSize,lineStr,lineLen,txtAlign,textHeight)
{
    var paddingLeft = 0;
    if(txtAlign == "center" &&  textWidth > lineLen)
    {
        paddingLeft = (textWidth - lineLen)/2;
    }
    else if(txtAlign == "right" && textWidth > lineLen)
    {
        paddingLeft = (textWidth - lineLen);
    }
    var lineNum = 1;
    var resultSvg = "<tspan id='" + id + "_" + lineNum + "' class='redactannotation' x='" + paddingLeft + "' y='" + (parseInt(lineNum * pageFontSize) + 1) + "' xml:space='preserve'>" + lineStr + "</tspan>";
    if(parseInt(lineNum * pageFontSize) < textHeight);
    {
        lineNum++;
        while((parseInt(lineNum * pageFontSize)) < textHeight)
        {
            resultSvg += "<tspan id='" + id + "_" + lineNum + "' class='redactannotation' x='" + paddingLeft + "' y='" + (parseInt(lineNum * pageFontSize) + 1) + "' xml:space='preserve'>" + lineStr + "</tspan>";
            lineNum ++;
        }
    }
    return resultSvg;
}

function GetTextSpanSVG(id,text,lineLen,context,textWidth,textHeight,lineNum,pageFontSize,lineStr,txtAlign,resultSvg,isRepeat)
{
    var spaceWidth = context.measureText(" ").width;
    var totalWidth = context.measureText(text).width;
    for(var j=0;j<text.length;j++)
    {
        if(text.charCodeAt(j) == 32)
        {
            if((lineLen+spaceWidth) > textWidth)
            {
                if(isRepeat && lineNum > 1)
                {
                    if(lineNum * pageFontSize > textHeight)
                        return resultSvg;
                }
                else
                {
                    resultSvg += "<tspan id='" + id + "_" + lineNum + "' class='redactannotation' x='0' y='" + (parseInt(lineNum * pageFontSize) + 1) + "'>" + lineStr + "</tspan>";
                    if(lineNum * pageFontSize > textHeight)
                        return resultSvg;
                    lineStr = "";
                    lineLen = 0;
                    j--;
                    lineNum++;
                }
            }
            else
            {
                lineStr += " ";
                lineLen += spaceWidth;
                var tmpStr = text.substring(j + 1);
                var tmpWidth = 0;
                var position = tmpStr.indexOf(" ");
                if(position == -1)
                    tmpWidth = context.measureText(tmpStr).width;
                else
                    tmpWidth = context.measureText(tmpStr.substring(0,position)).width;
                if((lineLen + tmpWidth) > textWidth)
                {
                    if(isRepeat && lineNum > 1)
                    {
                        if(lineNum * pageFontSize > textHeight)
                            return resultSvg;
                    }
                    else
                    {
                        resultSvg += "<tspan id='" + id + "_" + lineNum + "' class='redactannotation' x='0' y='" + (parseInt(lineNum * pageFontSize) + 1) + "'>" + lineStr + "</tspan>";
                        if(lineNum * pageFontSize > textHeight)
                            return resultSvg;
                        lineStr = "";
                        lineLen = 0;
                        lineNum++;
                    }
                }
            }
       }
       else
       {
            var charWidth = context.measureText(text[j]).width;
            lineLen += charWidth;
            if(lineLen > textWidth)
            {
                if(isRepeat && lineNum > 1)
                {
                    if(lineNum * pageFontSize > textHeight)
                        return resultSvg;
                }
                else
                {
                    resultSvg += "<tspan id='" + id + "_" + lineNum + "' class='redactannotation' x='0' y='" + (parseInt(lineNum * pageFontSize) + 1) + "'>" + lineStr + "</tspan>";
                    if(lineNum * pageFontSize > textHeight)
                        return resultSvg;
                    lineStr = "";
                    lineLen = 0;
                    j--;
                    lineNum++;
                }
            }
            else
            {
                lineStr += text[j];  
            }
       }
   }
   if(lineStr != "")
    {
        if(isRepeat)
        {
            if((textWidth - lineLen) > totalWidth)
            {
                resultSvg += GetTextSpanSVG(id,text,lineLen,context,textWidth,textHeight,lineNum,pageFontSize,lineStr,txtAlign,resultSvg,isRepeat);
            }
            else
            {
                if((parseInt(lineNum*pageFontSize)) < textHeight)
                {
                    resultSvg += GetAlignTextSpan(txtAlign,textWidth,lineLen,id,lineNum,pageFontSize,lineStr,resultSvg);
                    lineNum++;
                    lineLen = 0;
                    lineStr = "";
                    resultSvg += GetTextSpanSVG(id,text,lineLen,context,textWidth,textHeight,lineNum,pageFontSize,lineStr,txtAlign,resultSvg,isRepeat);
                }
                else
                {
                    if(lineNum == 1)
                        resultSvg += GetAlignTextSpan(txtAlign,textWidth,lineLen,id,lineNum,pageFontSize,lineStr,resultSvg);
                }
            }
        }
        else
        {
            resultSvg += GetAlignTextSpan(txtAlign,textWidth,lineLen,id,lineNum,pageFontSize,lineStr,resultSvg);
        }
   }
   else
   {
        if(isRepeat)
        {
            if((textWidth - lineLen) > totalWidth)
            {
                resultSvg += GetTextSpanSVG(id,text,lineLen,context,textWidth,textHeight,lineNum,pageFontSize,lineStr,txtAlign,resultSvg,isRepeat);   
            } 
            else
            {
                if((parseInt(lineNum*pageFontSize)) < textHeight)
                {
                    resultSvg += GetAlignTextSpan(txtAlign,textWidth,lineLen,id,lineNum,pageFontSize,lineStr,resultSvg);
                    lineNum++;
                    lineLen = 0;
                    lineStr = "";
                    resultSvg += GetTextSpanSVG(id,text,lineLen,context,textWidth,textHeight,lineNum,pageFontSize,lineStr,txtAlign,resultSvg,isRepeat);
                }
                else
                {
                    if(lineNum == 1)
                        resultSvg += GetAlignTextSpan(txtAlign,textWidth,lineLen,id,lineNum,pageFontSize,lineStr,resultSvg);
                }
            }     
        }
   }
   return resultSvg;
}

function GetAlignTextSpan(txtAlign,textWidth,lineLen,id,lineNum,pageFontSize,lineStr,resultSvg)
{
    var paddingLeft = 0;
    if(txtAlign == "center" && textWidth > lineLen)
    {
        paddingLeft = (textWidth - lineLen)/2;
    }
    else if(txtAlign == "right" && textWidth > lineLen)
    {
        paddingLeft = (textWidth - lineLen);
    }
    resultSvg += "<tspan id='" + id + "_" + lineNum + "' class='redactannotation' x='" + paddingLeft + "' y='" + (parseInt(lineNum * pageFontSize) + 1) + "' xml:space='preserve'>" + lineStr + "</tspan>";
    return resultSvg;
}
;
///<jscompress sourcefile="createControl.js" />
var isFillBrowser = true;
var browserWidth = window.innerWidth;
var browserHeight =window.innerHeight;
var toolbarHeight = 96;
var footerbarHeight = 44;
var leftSidebarWidth = 242;
var tabWidth = 40;
var thumbPanelW = 202;
var rightSidebarWidth = 246;
var contentWidth = 0; browserWidth - leftSidebarWidth - rightSidebarWidth - 17;
var contentHeight = 0; browserHeight - toolbarHeight - footerbarHeight;
var _docWidth = 0;
var _docHeight = 0;
var applicationtitle="PDF Editor";
var webtitle = "PDF Online Editor";
var defaultDialog = "PDF";//doc,pdf,none
var appEditor = true;
var annotContainerId = "annotationContainer";
var addcomponentsId = "addcomponents";
var _rasterConfig = "1|1|1|0";
var supportLangs ;
var cookieDayTime = 7;
var defaultSearchList = [];
var defaultSearchIsCaseSenstive = false;
var defaultSearchIsWholeWord = false;
var widthprefix = 2;
var userhideeditcontent = true;

function CreaEditorViewer(parentId)
{
     contentWidth = browserWidth - leftSidebarWidth - rightSidebarWidth - 17;
     contentHeight = browserHeight - toolbarHeight - footerbarHeight;
 
    var leftSidePanel = "<div class='sidePanel' id='_leftSidePanel' style='width:11px;height:"+contentHeight+"px;float:left;'></div>";
    $(parentId).append(leftSidePanel);
    //var src = ""
	//src += getImagesFolder() + "arrow.png";
    //appendLImg
    var LImg = "<div id='_lImg' style='position:relative;top:50%;width:11px;height:15px;'></div>";
    $("#_leftSidePanel").append(LImg);
    //$("#_lImg").css("background","url('" + src + "') no-repeat -2px 0px");
    $("#_lImg").addClass("arrowimage");
    
    //appendDocViewer
    var docWidth = contentWidth - 25;
    _docWidth = docWidth - 17;
    _docHeight = contentHeight - 17;
    var editorContent = "<div id='wdp_Content' style='border-right:1px solid #E0E0E0;border-left:1px solid #E0E0E0;overflow:auto;position:relative;width:" + docWidth + "px;height:" + contentHeight + "px;float:left;'></div>";
    $(parentId).append(editorContent);
    var docViewer = "<div id='draw_canvas' class='' style='position:relative;width:"+_docWidth+"px;height:"+_docHeight+"px;float:left'></div>";
    $("#wdp_Content").append(docViewer);
    var ImagePanel = "<div id='imgBig' class='showByDrag'></div>";
    $("#draw_canvas").append(ImagePanel);
    var annos = "<div id='" + addcomponentsId + "' class=''><div id='" + annotContainerId + "'></div></div>";
    $("#draw_canvas").append(annos);

    var rightSidePanel = "<div class='sidePanel' id='_rightSidePanel' style='width:12px;height:"+contentHeight+"px;float:left'></div>";
    $(parentId).append(rightSidePanel);
    //appendRImg
    var RImg = "<div id='_rImg' style='position:relative;top:50%;width:12px;height:15px;'></div>";
    $("#_rightSidePanel").append(RImg);
    $("#_rImg").addClass("rightArrowDis");
    //$("#_rImg").css("background","url('" + src + "') no-repeat -71px 0px");
    $(".sidePanel").bind("click", function () { SideStretch(this); });
    //bindNoDragContentEvent();
}

//function bindNoDragContentEvent() {
//    $("#imgBig").attr("ondragstart", "return false;");
//}
//function unbindNoDragContentEvent() {
//    $("#imgBig").attr("ondragstart", "");
//}

var tabMenuArray = new Array();
function CreateTabMenu(tabId)
{
    var ulChild = "<ul id='_toolbarTabUl' style='background:#3A3A3A;'></ul>";
    $(tabId).append(ulChild);
    var toolbarZone = "<div id='_toolbarPanel' style='width:" + (browserWidth - 25) + "px;'></div>";
    $(tabId).append(toolbarZone);

    if (typeof (initWebApplication) != "undefined" && initWebApplication != null) {
        initWebApplication();
        var title = "<li style='padding:2px 0px 0px 0px;overflow:hidden;'><span style='padding:0px 12px 0px 12px;font-size:12px;font-style:italic;font-family:Arial; '><strong>"+applicationtitle+"</strong></span></li>";
        $("#_toolbarTabUl").append(title);
      
    } else {
        alert(i18n['content']['LoadWebappFail'] || "load RasterEdge_WebApp.js file fail.");
        var title = "<li style='padding:2px 0px 0px 0px;overflow:hidden;'><span style='padding:0px 12px 0px 12px;font-size:12px;font-style:italic;font-family:Arial; '><strong>" + applicationtitle + "</strong></span></li>";
        $("#_toolbarTabUl").append(title);
        var fileTab = "<li  style='overflow:hidden;'><a id='_fileTab' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>File</span></a></li>";
        $("#_toolbarTabUl").append(fileTab);
        var viewTab = "<li  style='overflow:hidden;'><a id='_viewTab' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>View</span></a></li>";
        $("#_toolbarTabUl").append(viewTab);
        var commentTab = "<li id='_licomments' style='overflow:hidden;'><a id='_commentTab' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>Comment</span></a></li>";
        $("#_toolbarTabUl").append(commentTab);
        var editTab = "<li  id='_liedit' style='overflow:hidden;'><a id='_editTab' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>Content Edit</span></a></li>";
        $("#_toolbarTabUl").append(editTab);
        var pagesTab = "<li id='_lipage' style='overflow:hidden;'><a id='_pageTab' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>Pages</span></a></li>";
        $("#_toolbarTabUl").append(pagesTab);
        var protectTab = "<li  style='overflow:hidden;'><a id='_protectTab' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>Protection</a></li>";
        $("#_toolbarTabUl").append(protectTab);

        CreateFileToolbar("#_toolbarPanel");
        CreateViewToolbar("#_toolbarPanel");
        CreateCommentsToolbar("#_toolbarPanel");
        CreateEditToolbar("#_toolbarPanel");
        CreatePagesToolbar("#_toolbarPanel");
        CreateProtection("#_toolbarPanel");
    }
  
    try {
        if (typeof (initCustomize) != "undefined") {
            initCustomize();
        }
    } catch (e) {
        alert((i18n['title']['Error'] || "Error") + e.message + "/n " + (i18n['content']['CustomizeError'] || "please check your custimize javascript."));
    }
    initCustomBar();

    createPopWindows();



    $(tabId).tabs();
    $(tabId).tabs( "option", "collapsible", false );
    $(tabId).tabs( "option", "active", 0);
    $(tabId).tabs().addClass("ui-tabs-re");
    $("#_toolbarTabUl li span").css("color","#ffffff");

    for(var i=1;i<tabMenuArray.length;i++)
        $("#"+tabMenuArray[i]).hide();
    $(tabId).on( "tabsactivate", function( event, ui ) 
	{
	    var instruct = $(tabId).tabs( "option", "active" ).toString();
	    for(var i=0;i<tabMenuArray.length;i++)
	    {
	        $("#"+tabMenuArray[i]).hide();
	        if(instruct == i)
	            $("#"+tabMenuArray[i]).show();
	    }
	} );
	InitTextFontSize("re_func_fontSz");
	GetSystemFont();
	if (typeof(_rasterConfig)!="undefined"&& _rasterConfig != null) {
	    var strs = _rasterConfig.split("|");
	    if (strs.length > 3 && strs[3] == "0") {
	        isSharePoint = false;
	    }
	    if (strs.length > 2 && strs[2]=="0") {
	        $("#_lipage").hide();
	    }
	    if (strs.length > 1 && strs[1] == "0") {
	        $("#_liedit").hide();
	    }
	    if (userhideeditcontent) {
	        $("#_liedit").hide();
	    }
	    if (strs.length > 0 && strs[0] == "0") {
	        $("#_licomments").hide();
	    }
	}
	$("title").html(webtitle);
}
var showstamp = false;
function createPopWindows() {
    CreateSettingsWin();
    CreatePropertiesWin();
    CreateOptionsPanel();
    createRedactAreaPagesBox();
    createNoFile();
    if (typeof($("#_comments")[0])!="undefined") {
        createStampMenu("re_func_stamp");
        $('#re_func_stamp').click(function (e) {

            if ($(e.target).attr("id") == "isstamtime" || $(e.target).attr("id") == "isstamtimelabel")
                return;
            if (showstamp) {
                $(this).find("#stamp_menu").animate({ opacity: "hide", top: "36px" }, "fast");
            }
            else { 
                $(this).find("#stamp_menu").animate({ opacity: "show", top: "36px" }, "fast");
            }
            showstamp = !showstamp;
        });
        
    }
    $("#re_func_export").bind("click", function (e) { ShowOptionsPanel(e); })
    try {
        // edit
        if (typeof($("#_edit")[0])!="undefined") {
            $("#re_func_showOutLines").hide();
            CreateLinkPopBox();
            CreateLinkProperties();
            var linkType = new Array("Visible Rectangle", "Invisible Rectangle");
            var lineStyle = new Array("Solid", "Dashed", "Underline");
            var highStyle = new Array("None", "Invert", "Outline", "Inset");
            var lineWidth = new Array("Thin", "Medium", "Thick");
            for (var i = 0; i < linkType.length; i++)
                $(".linkType").append($('<option></option>').html(linkType[i]));
            $("#_linkType").val("Visible Rectangle").attr("selected", true);

            for (var i = 0; i < lineStyle.length; i++)
                $(".lineStyle").append($('<option></option>').html(lineStyle[i]));
            $("#_lineStyle").val("Solid").attr("selected", true);

            for (var i = 0; i < highStyle.length; i++)
                $(".highStyle").append($('<option></option>').html(highStyle[i]));
            $("#_highStyle").val("Outline").attr("selected", true);

            for (var i = 0; i < lineWidth.length; i++)
                $(".linkWidth").append($('<option></option>').html(lineWidth[i]));
            $("#_linkWidth").val("Medium").attr("selected", true);
        }
    } catch (e) {
    }
    try {
        // page
        if (typeof($("#_page")[0])!="undefined") {
            CreateActionsPanel();
            $("#re_func_headFoot").bind("click", function (e) { ShowActionsPanel(e, this.id); });
            $("#re_func_background").bind("click", function (e) { ShowActionsPanel(e, this.id); });
            $("#re_func_watermark").bind("click", function (e) { ShowActionsPanel(e, this.id); });


            CreateInsertPopBox();
            CreateDeletePopBox();
            CreateExtractPopBox();
            CreateCombinePopBox();
            CreateSplitPopBox();
            CreateReplacePopBox();
            CreateReOrdPopBox();
            createRoatePopBox();
            CreateAddHeadFootPopBox();
            CreateAddBackgroundPopBox();
            CreateAddWatermarkPopBox();
            CreateSaveSettings();
            CreateEnterPasswordPanel();
            CreateConfirmActPanel();
        }
        if ($("#_protect").length > 0) {
            CreateResEditWin();
            InputPermissionPs();
            CreateEncryptWin();
            CreateRedactProps();
            CreateMarkPageBox();
            CreateRedactTextBox();
            CreateSearchTextRedactPageBox();
        }
    } catch (e) { }
}
function initCustomBar() {
    if (c_toolbartabs != null) {
        for (var ind = 0; ind < c_toolbartabs.length; ind++) {
            var obj = c_toolbartabs[ind];
            var c_tab = "<li id='_li" + obj.id + "'><a id='" + obj.id + "' href='#_toolbarPanel'><span style='padding:0px 6px 0px 6px;font-size:12px;'>" + obj.name + "</a></li>";
            $("#_toolbarTabUl").append(c_tab);

            CreateCustomToolbar("#_toolbarPanel", obj);
        }
    }
}

function CreateCustomToolbar(btnId, tbar) {
    var tabid=tbar.id;
    var groups=tbar.iconGroups;
    var maindivId = "_" + tabid;
    var maindiv = "<div id='" + maindivId + "' style='width:100%'  class='" + tbar.cssClass + "'></div>";
    $(btnId).append(maindiv);

    for (var i = 0; i < groups.length; i++) {
        var openTab = "<table style='height:100%;float:left;' class='icongroup'>";
        if (groups[i].icons.length <= 0)
            continue;


        for (var j = 0; j < groups[i].icons.length; j++) {
            var oneicon = groups[i].icons[j];
            var innercontent = "";
            if (typeof(oneicon.innerHtml ) !="undefined"&& oneicon.innerHtml != "") {
                innercontent = oneicon.innerHtml;
            } else { 
                var one = new ToolbarItem({ CssId: oneicon.id, Title: oneicon.title, Event: oneicon.event, CssClass: ("iconHover " + oneicon.cssClass) });
                innercontent = one.CreateHtml();
            }
            if (groups[i].icons.length == 1) {
                openTab += "<td><div class='oneCellMargin'>" + innercontent + "</div></td>";
                break;
            }
            if (j == 0)
                openTab += "<tr><td><div class='firstCellMargin'>" + innercontent + "</div></td>";
            else if (j == groups[i].icons.length - 1)
                openTab += "<td><div class='lastCellMargin'>" + innercontent + "</div></td>";
            else
                openTab += "<td><div class='cellMargin'>" + innercontent + "</div></td>";
        }
        openTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
        if (groups[i].icons.length == 1 && i == 0)
            openTab += "<tr><td colspan='3'><div class='cellText'>" + groups[i].name + "</div></td></tr></table>";
        else if(groups[i].icons.length == 1)
            openTab += "<tr><td colspan='1'><div class='cellText'>" + groups[i].name + "</div></td></tr></table>";
        else
            openTab += "<tr><td colspan='" + groups[i].icons.length + "'><div class='cellTextFix cellText'>" + groups[i].name + "</div></td></tr></table>";
        $("#" + maindivId).append(openTab);
    }
   

    tabMenuArray.push(maindivId);

}

function CreateFileToolbar(btnId)
{
    var fileToolbarStr = "<div id='_files' style='width:100%'></div>";
    $(btnId).append(fileToolbarStr);
    
    var openTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var toolbarUpload = new ToolbarItem({ CssId: "re_func_upload", Title: "Upload your PDF file", Event: 'ShowUploadDialog("pdf");', CssClass: "iconHover" });
    openTab += "<tr><td><div class='firstCellMargin'>" + toolbarUpload.CreateHtml() + "</div></td>";
    var toolbarOnline = new ToolbarItem({ CssId: "re_func_online", Title: "Open an online PDF file", Event: 'ShowOnlineDialog("others");', CssClass: "iconHover" });
    openTab += "<td><div class='cellMargin'>" + toolbarOnline.CreateHtml() + "</div></td>";
    var toolbarOnline = new ToolbarItem({ CssId: "re_func_files", Title: "Create PDF file from other format", Event: 'ShowUploadDialog();', CssClass: "iconHover" });
    openTab += "<td><div class='lastCellMargin'>" + toolbarOnline.CreateHtml() + "</div></td>";
    openTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    openTab += "<tr><td colspan='3'><div class='cellTextFix'>Open</div></td></tr></table>";
    $("#_files").append(openTab);
    
    var saveTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var toolbarSave = new ToolbarItem({ CssId: "re_func_save", Title: "Save your PDF file", Event: 'ShowDialog("save");', CssClass: "iconHover" });
    saveTab += "<tr><td><div class='oneCellMargin'>" + toolbarSave.CreateHtml() + "</div></td>";
    saveTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    saveTab += "<tr><td><div class='cellTextFix'>Save</div></td></tr></table>";
    $("#_files").append(saveTab);
    
    var exportTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var toolbarExport = new ToolbarItem({ CssId: "re_func_export", Title: "To save the PDF as into other formats", Event: '', CssClass: "iconHover" });
    exportTab += "<tr><td><div class='oneCellMargin'>" + toolbarExport.CreateHtml() + "</div></td>";
    exportTab += "<td><div  class='splitCellMargin'  style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    exportTab += "<tr><td><div class='cellTextFix'>Save As...</div></td></tr></table>";
    $("#_files").append(exportTab); 
   
 
    
    var printTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var toolbarPrint = new ToolbarItem({ CssId: "re_func_print", Title: "Print File", Event: '', CssClass: "iconHover" });
    printTab += "<tr><td><div class='oneCellMargin'>" + toolbarPrint.CreateHtml() + "</div></td>";
    printTab += "<td><div  class='splitCellMargin'  style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    printTab += "<tr><td><div class='cellTextFix'>Print</div></td></tr></table>";
    $("#_files").append(printTab); 
    
    var propertiesTab = "<table style='text-align:center;height:100%;float:left;' class='icongroup'>";
    var toolbarProperties = new ToolbarItem({ CssId: "re_func_properties", Title: "PDF file properties", Event: 'ShowProperties();', CssClass: "iconHover" });
    propertiesTab += "<tr><td><div class='oneCellMargin' >" + toolbarProperties.CreateHtml() + "</div></td>";
    propertiesTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    propertiesTab += "<tr><td><div class='cellTextFix'>Properties</div></td></tr></table>";
    $("#_files").append(propertiesTab); 

    tabMenuArray.push("_files");
}

function CreatePropertiesWin()
{
    var str = "<div id='_propertiesPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_propertiesPopbox").css({
        width:"480px",
        height:"430px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Document Properties</div><div  class='poptitleimage poptitlestyle'  onclick='hidePropertiesBox();'></div></div>";
    $("#_propertiesPopbox").append(title);
    
    var popContent = "<div id='propwin' style='border:1px solid #727272;margin:5px;margin-top:0px;width:467px;height:359px;background:#F0F0F0;'>";
    popContent += "<div id='propTabs'></div></div>";
    $("#_propertiesPopbox").append(popContent);
    
    var propTabUl = "<ul id='_propTabUl'></ul>";
    $("#propTabs").append(propTabUl);
    var propPanel = "<div id='_propPanel' style='width:420px;height:300px;'></div>";
    $("#propTabs").append(propPanel);
    var description = "<li><a id='_desTab' href='#_propPanel'><span style='padding:0px 10px 0px 10px;font-size:12px;'>Description</span></a></li>";
    $("#_propTabUl").append(description);
    var security = "<li><a id='_secTab' href='#_propPanel'><span style='padding:0px 10px 0px 10px;font-size:12px;'>Security</span></a></li>";
    $("#_propTabUl").append(security);
    
    CreateDescripPanel("#_propPanel");
    CreateSecurityPanel("#_propPanel");
    
	$("#_secPanel").hide();
    
    $("#propTabs").tabs();
    $("#propTabs").tabs( "option", "collapsible", false );
    $("#propTabs").tabs( "option", "active", 0);

    $("#propTabs").on( "tabsactivate", function( event, ui ) 
	{
	    var instruct = $("#propTabs").tabs( "option", "active" ).toString();
	    if(instruct == 0)
	    {
	        $("#_desPanel").show();
	        $("#_secPanel").hide();
	    }
	    else if(instruct == 1)
	    {
	        $("#_desPanel").hide();
	        $("#_secPanel").show();
	    }
	});
    
    var buttons = "<button style='margin-top:3px;margin-right:5px;width:70px;float:right;' onclick='hidePropertiesBox();'>Cancel</button>";
    buttons += "<button style='margin-top:3px;margin-right:30px;width:70px;float:right;' onclick='ChangeMetaData();'>OK</button>";
    $("#_propertiesPopbox").append(buttons);

    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_propertiesPopbox").hide();
}

function CreateSettingsWin() {
    var str = "<div id='_settingPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_settingPopbox").css({
        width: "480px",
        height: "230px",
        display: "block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >"+(i18n['title']['Setting']||"Language Setting")+"</div><div  class='poptitleimage poptitlestyle'  onclick='hideSettingsBox();'></div></div>";
    $("#_settingPopbox").append(title);

    var popContent = "<div id='settingwin' style='border:1px solid #727272;margin:5px;margin-top:0px;width:467px;height:159px;background:#F0F0F0;'>";
    popContent += "<div id='settingsTabs'  style='margin:10px'><table><tr><td><span>" + (i18n['content']['Language'] || "Language") + ":</span></td><td><select id='languageselect'></select></td></tr></table><p>" + (i18n['content']['SettingTip'] || "The current page will be refreshed after the change.") + "</p></div></div>";
    $("#_settingPopbox").append(popContent);

    var golang = "";
    if (supportLangs == null)
        supportLangs = {"en-Us":"English"};
    for (var key in supportLangs) {
        golang += "<option value='" + key + "'>" + supportLangs[key] + "</option>";
    }
    $("#languageselect").append(golang);
    

    var buttons = "<button style='margin-top:3px;margin-right:5px;width:70px;float:right;' onclick='hideSettingsBox();'>"+(i18n['button']['Cancel']||"Cancel")+"</button>";
    buttons += "<button style='margin-top:3px;margin-right:30px;width:70px;float:right;' onclick='ChangeSetting();'>" + (i18n['button']['OK'] || "OK") + "</button>";
    $("#_settingPopbox").append(buttons);

    $("._settingboxTitle").bind("mousedown", PopBoxMouseDown);
    $("#_settingPopbox").hide();
}


function CreateDescripPanel(parentId)
{
    var desPanel = "<div id='_desPanel' style='width:420px;height:300px;'></div>";
    $(parentId).append(desPanel);
    
    var desContent = "<div class='popinner' style='width:420px;height:290px;background:#ffffff;'>"
    desContent += "<table style='width:100%;height:100%;font-size:12px;'>";
    desContent += "<tr><td>File:</td><td><label id='_proFile'></label></td></tr>";
    desContent += "<tr><td>Title:</td><td><input id='_proTitle' type='text' style='width:310px;border:1px solid #A0A0A0;box-shadow:1px 1px 1px #A0A0A0 inset;'></input></td></tr>";
    desContent += "<tr><td>Author:</td><td><input id='_proAuthor' type='text' style='width:310px;border:1px solid #A0A0A0;box-shadow:1px 1px 1px #A0A0A0 inset;'></input></td></tr>";
    desContent += "<tr><td>Subject:</td><td><input id='_proSubject' type='text' style='width:310px;border:1px solid #A0A0A0;box-shadow:1px 1px 1px #A0A0A0 inset;'></input></td></tr>";
    desContent += "<tr><td>KeyWords:</td><td><input id='_proKeywords' type='text' style='width:310px;border:1px solid #A0A0A0;box-shadow:1px 1px 1px #A0A0A0 inset;'></input></td></tr>";
    desContent += "<tr><td>CreatedDate:</td><td><label id='_proCDate'></label></td></tr>";
    desContent += "<tr><td>ModifiedDate:</td><td><label id='_proMDate'></label></td></tr>";
    desContent += "<tr><td>Producer:</td><td><label id='_proProducer'></label></td></tr>";
    desContent += "</table></div>";
    $("#_desPanel").append(desContent);
}

function CreateSecurityPanel(parentId)
{
    var secPanel = "<div id='_secPanel' style='width:420px;height:300px;font-size:12px;'></div>";
    $(parentId).append(secPanel);
    
    var secContent = "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:420px;height:100%;background:#ffffff;'><legend style='font-weight:bold;'>Document Restrictions Summary</legend><table style='width:100%;height:100%;'>";
    secContent += "<tr><td>Printing:</td><td><label id='_isPrint'></label></td></tr>";
    secContent += "<tr><td>Changing the Document:</td><td><label id='_isModi'></label></td></tr>";
    secContent += "<tr><td>Document Assembly:</td><td><label id='_isAssemble'></label></td></tr>";
    secContent += "<tr><td>Content Copying:</td><td><label id='_isCopy'></label></td></tr>";
    secContent += "<tr><td>Page Extraction</td><td><label id='_isExtract'></label></td></tr>";
    secContent += "<tr><td>Commenting:</td><td><label id='_isAnnot'></label></td></tr>";
    secContent += "<tr><td>Filling of form fields:</td><td><label id='_isFillForm'></label></td></tr>";
    secContent += "</table></div>";
    
    $("#_secPanel").append(secContent);
}

var _pdfMetaData = "";
function ShowProperties()
{
    if(_pdfMetaData == "")
    {
        $.post(getServerHandlerUrl(), { "action": "GetProperties", "fid": _fid,"fileName":_actualName,password:curDocPassWord},function(result, status) {
            result = eval('(' + result + ')');
            _pdfMetaData = new PDFMetaData();
            _pdfMetaData.file = _actualName;
			if (result.state == "success")
			{
			    result = result.msg;
				_pdfMetaData.title = result.Title;
				_pdfMetaData.author = result.Author;
				_pdfMetaData.subject = result.Subject;
				_pdfMetaData.keywords = result.Keywords;
				_pdfMetaData.createDate = result.CreateDateTime;
				_pdfMetaData.modifiedDate = result.ModifiedDate;
				_pdfMetaData.producer = result.Producer;
			} 
       });
    }
    $("#_propertiesPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_propertiesPopbox");
    
    $("#_proFile").html(_pdfMetaData.file);
    $("#_proTitle").val(_pdfMetaData.title);
    $("#_proAuthor").val(_pdfMetaData.author);
    $("#_proSubject").val(_pdfMetaData.subject);
    $("#_proKeywords").val(_pdfMetaData.keywords);
    $("#_proCDate").html(_pdfMetaData.createDate);
    $("#_proMDate").html(_pdfMetaData.modifiedDate);
    $("#_proProducer").html(_pdfMetaData.producer);
}

function ShowSettings() {
    SignPanelPosition("#_settingPopbox");
    var lang = $.cookie("setlang");
    if (lang != null && typeof (lang) != "undefined") {
        $("#languageselect").val(lang);
    } else {
        if (navigator.userLanguage) {
            lang = navigator.userLanguage.substring(0, 2).toLowerCase();
        } else {
            lang = navigator.language.substring(0, 2).toLowerCase();
        }
        $("#languageselect").val(lang);
    }

    $("#_settingPopbox").show();
}
function hideSettingsBox() {
    $("#_settingPopbox").hide();
}
function ChangeSetting() {
    var cookies=$.cookie('setlang');
    var lang = $("#languageselect").val();
    if(cookies!=lang)
        $.cookie('setlang', lang, { expires: cookieDayTime });
    if (typeof (lang) != "undefined") {
        location.reload();
    }
    hideSettingsBox();
}

var isChangeMetaData = false;
function ChangeMetaData()
{
    if(_pdfMetaData.title != $("#_proTitle").val())
    {
        _pdfMetaData.title = $("#_proTitle").val();
        isChangeMetaData = true;
    }
     if(_pdfMetaData.author != $("#_proAuthor").val())
    {
        _pdfMetaData.author = $("#_proAuthor").val();
        isChangeMetaData = true;
    }
     if(_pdfMetaData.subject != $("#_proSubject").val())
    {
        _pdfMetaData.subject = $("#_proSubject").val();
        isChangeMetaData = true;
    }
     if(_pdfMetaData.keywords != $("#_proKeywords").val())
    {
        _pdfMetaData.keywords = $("#_proKeywords").val();
        isChangeMetaData = true;
    }
    hidePropertiesBox();
}

function hidePropertiesBox()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_propertiesPopbox").hide();    
} 

function CreateOptionsPanel()
{
    var str = "<div id='_optionsPanel' class='popboxbase' style='border:1px solid #A0A0A0;box-shadow:2px 2px 2px #666;z-index:600;'></div>";
    $("body").append(str);
    $("#_optionsPanel").css({
        width:"140px",
        display:"block"
    });
    var table = "<table style='color:#444444;width:100%;height:100%;cursor:pointer;'>";
    if (appEditor) {
        table += "<tr><td id='option_optimized' class='_option'><div>Optimized PDF ...</div></td></tr>";
        table += "<tr><td id='option_docx' class='_option'><div>Microsoft Word ...</div></td></tr>";
    } else {
        table += "<tr><td id='option_pdf' class='_option'><div>PDF ...</div></td></tr>";
    }
    table += "<tr><td id='option_tiff' class='_option'><div>Tiff ...</div></td></tr>";
    table += "<tr><td id='option_html5' class='_option'><div>HTML5 Web Page ...</div></td></tr>";
    table += "<tr><td id='option_img' class='_option'><div>Images ...</div></td></tr>";
    table += "<tr><td id='option_annotation' class='_option'><div>Annotation Data...</div></td></tr></table>";
    $("#_optionsPanel").append(table);
    $("._option").bind("click",function(){$("#_optionsPanel").hide();optionPanelShow = false;ShowDialog(this.id);});
    $("#_optionsPanel").hide();
}

var optionPanelShow = false;
function ShowOptionsPanel(e)
{
    if(optionPanelShow)
    {
        $("#_optionsPanel").hide();
        optionPanelShow = false;
    }
    else
    {
        e = e||window.event;
        var left = e.pageX;
        var top = e.pageY;
        $("#_optionsPanel").show();
        $("#_optionsPanel").css({
            left:(left+10)+"px",
            top:(top+10)+"px"
        })
        optionPanelShow = true;
    }
}

function CreateViewToolbar(btnId)
{
    var viewerToolbarStr = "<div id='_viewer' style='width:100%;'></div>";
    $(btnId).append(viewerToolbarStr);
    
    var cursorTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var arrowCur = "<div class='re_func_arrowCur iconHover' title='Select tool:select text and image' onclick='ArrowEvent();'></div>";
    cursorTab += "<tr><td><div class='firstCellMargin' >" + arrowCur + "</div></td>";
    var handCur = "<div class='re_func_handCur iconHover' title='Hand tool:pan around the document' onclick='HandleEvent();'></div>";
    cursorTab += "<td><div class='lastCellMargin'>" + handCur + "</div></td>";
    cursorTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    cursorTab += "<tr><td colspan='2'><div class='cellTextFix'>Tools</div></td></tr></table>";
    $("#_viewer").append(cursorTab);
    
    var gotoTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var firPage = "<div class='navi_first iconHover' style='margin-left:0px;' title='Go to first page'></div>";
    gotoTab += "<tr><td><div class='firstCellMargin' >" + firPage + "</div></td>";
    var prePage = "<div class='navi_pre iconHover' title='Go to previous page'></div>";
    gotoTab += "<td><div class='cellMargin'>" + prePage + "</div></td>";
    var pageNavi = "<div style='background:#efefef;float:left;'><select class='pageIdList' style='width:85px;height:24px;'></select></div>";
    gotoTab += "<td><div class='cellMargin'>" + pageNavi + "</div></td>";
    var nextPage = "<div class='navi_ne  iconHover' title='Go to next page'></div>";
    gotoTab += "<td><div class='cellMargin'>" + nextPage + "</div></td>";
    var lastPage = "<div class='navi_last iconHover' title='Go to last page'></div>";
    gotoTab += "<td><div class='lastCellMargin'>" + lastPage + "</div></td>";
    gotoTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    gotoTab += "<tr><td colspan='5'><div class='cellTextFix'>Go To</div></td></tr></table>";
    $("#_viewer").append(gotoTab);
    
    var pageDis = "<table style='height:100%;float:left;' class='icongroup'>";
    var single = "<div class='navi_single iconHover' title ='Single page' onclick='btnSinglePage()'></div>";
    pageDis += "<tr><td><div class='firstCellMargin' >" + single + "</div></td>";
    var multi = "<div class='navi_multi iconHover' title='Continues page'onclick='btnContinuesPage()'></div>";
    pageDis += "<td><div class='cellMargin'>" + multi + "</div></td>";
    var zoomItems = "<div style='margin-left:0px;background:#efefef;float:left;'><select class='zoomList' style='width:85px;height:24px;'></select></div>";
    pageDis += "<td><div class='cellMargin'>" + zoomItems + "</div></td>";
    var zoomIn = "<div class='navi_zoomIn iconHover' title='Zoom in' onclick='btnZoomIn()'></div>";
    pageDis += "<td><div class='cellMargin'>" + zoomIn + "</div></td>";
    var zoomOut = "<div class='navi_zoomOut iconHover' title='Zoom out' onclick='btnZoomOut()'></div>";
    pageDis += "<td><div class='lsatCellMargin'>" + zoomOut + "</div></td>";


    pageDis += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    pageDis += "<tr><td colspan='5'><div class='cellTextFix'>Page Display</div></td></tr></table>";
    $("#_viewer").append(pageDis);
    
    tabMenuArray.push("_viewer");
}

var curCursorStyle = "";
function HandleEvent()
{   
    $("#rasteredge_wdp").addClass("select");
    if(isBindSelectEvent)
    {
        
	    isBindSelectEvent = false;
    }
    $("#draw_canvas").unbind("mousedown");
    $("#draw_canvas").unbind("mousemove");
    $("#draw_canvas").unbind("mouseup");

    bindPageDragEvent();
    $(".showByDrag").removeClass("mouseStyleAnnotation");
    $(".showByDrag").removeClass("mouseStyleSelect");
    $(".showByDrag").addClass("mouseStyleMove");
    isBindHandEvent = true;
	AddIconBorder(".re_func_handCur");
	for(var i=0;i<draggableNumArray.length;i++)
        $(draggableNumArray[i]).draggable("enable");
	curCursorStyle = "move";
	//if (isBindImgEditEvent)
        RemoveEditImageEvent();
	//if (isBindTxtEditEvent)
	    RemoveEditTextEvent();
	//if (isEditPdfText)
	    removeEditText();
}

var isCreateEdit = false;
function ArrowEvent()
{
    $("#rasteredge_wdp").addClass("select");
	AddIconBorder(".re_func_arrowCur");
	$("#draw_canvas").unbind("mousedown");
	$("#draw_canvas").unbind("mousemove");
	$("#draw_canvas").unbind("mouseup");
	$(".showByDrag").removeClass("mouseStyleAnnotation");
	SelectTextEvent("select");
	curCursorStyle = "select";

	isBindHandEvent = false;
	//if (isEditPdfText)
	    removeEditText();
	//if (isBindImgEditEvent)
        RemoveEditImageEvent();
	//if (isBindTxtEditEvent)
	    RemoveEditTextEvent();
    for(var i=0;i<addIDArray.length;i++)
    {
        $("#"+addIDArray[i]).attr("contentEditable",false);
    }
    //if(editPages.length != 0 && isCreateEdit)
    //{
    //    sendToChangeHTML();
    //    CreateTempEditFile();
    //    isCreateEdit = false;
    //    for(var i=0;i<editPages.length;i++)
    //    {
    //        _fileDocument[curFileId].ViewerChars[i] = null;
    //        GetPageCharsRects(i,true);
    //    }
    //}
}



function CreateTempEditFile()
{
    var str = {action:"CreateEditFile",fid:_fid,fileName: _fileName};
	var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:false,
        data: str, 
        success: function(result){},
        error: function(err){} 
    }
    $.ajax(options);
    $("#loading").hide();
}

var commentIdArray = new Array("re_func_notes","re_func_highText","re_func_underlineText","re_func_strikeText","re_func_replaceText","re_func_textbox","re_func_freehand","re_func_line","re_func_arrow","re_func_circle","re_func_rectangle","re_func_polygon","re_func_polygonlines");
function CreateCommentsToolbar(btnId)
{
    var commentToolbarStr = "<div id='_comments' style='width:100%;'></div>";
    $(btnId).append(commentToolbarStr);
    
    var cursorTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var arrowCur = "<div class='re_func_arrowCur iconHover' title='Select tool:select text and image' onclick='ArrowEvent();'></div>";
    cursorTab += "<tr><td><div class='firstCellMargin'>" + arrowCur + "</div></td>";
    var handCur = "<div class='re_func_handCur iconHover' title='Hand tool:pan around the document' onclick='HandleEvent();'></div>";
    cursorTab += "<td><div class='lastCellMargin'>" + handCur + "</div></td>";
    cursorTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    cursorTab += "<tr><td colspan='2'><div class='cellTextFix'>Tools</div></td></tr></table>"; 
    $("#_comments").append(cursorTab);
    
    var annoTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var addNotes = new ToolbarItem({ CssId: "re_func_notes", Title: "Add sticky note", Event: 'draw_annotation("notes");ChangeIconStyle("re_func_notes");', CssClass: 'iconHover' });
    annoTab += "<tr><td><div class='firstCellMargin'>" + addNotes.CreateHtml() + "</div></td>";
    var highText = new ToolbarItem({ CssId: "re_func_highText", Title: "Highlight text", Event: '', CssClass: 'iconHover' });
    annoTab += "<td><div class='cellMargin'>" + highText.CreateHtml() + "</div></td>";
    var underlineText = new ToolbarItem({ CssId: "re_func_underlineText", Title: "Underline text", Event: '', CssClass: 'iconHover' });
    annoTab += "<td><div class='cellMargin'>" + underlineText.CreateHtml() + "</div></td>";
    var strikeText = new ToolbarItem({ CssId: "re_func_strikeText", Title: "Strikethrough text", Event: '', CssClass: 'iconHover' });
    annoTab += "<td><div class='cellMargin'>" + strikeText.CreateHtml() + "</div></td>";
    var replaceText = new ToolbarItem({ CssId: "re_func_replaceText", Title: "Add note to replace text", Event: '', CssClass: 'iconHover' });
    annoTab += "<td><div class='cellMargin'>" + replaceText.CreateHtml() + "</div></td>";
    var textbox = new ToolbarItem({ CssId: "re_func_textbox", Title: "Add text box", Event: 'draw_annotation("textbox");ChangeIconStyle("re_func_textbox");', CssClass: 'iconHover' });
    annoTab += "<td><div class='cellMargin'>" + textbox.CreateHtml() + "</div></td>";
    //var stamp = new ToolbarItem({ CssId: "re_func_stamp", Title: "Add Stamp", Event: 'draw_annotation("stamp",{ShowedText:"Agree"});ChangeIconStyle("re_func_stamp");', CssClass: 'iconHover' });
    //annoTab += "<td><div class='lastCellMargin'>" + stamp.CreateHtml() + "</div></td>";

    var stamp = new ToolbarItem({ CssId: "re_func_stamp", Title: "", Event: 'ChangeIconStyle("re_func_stamp");', CssClass: 'iconHover' });
    annoTab += "<td><div class='lastCellMargin'>" + stamp.CreateHtml() + "</div></td>";

    annoTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    annoTab += "<tr><td colspan='6'><div class='cellTextFix'>Text Markup</div></td></tr></table>";
    $("#_comments").append(annoTab);


    var markupsTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var freehand = new ToolbarItem({ CssId: "re_func_freehand", Title: "Draw free form", Event: 'draw_annotation("freehand");ChangeIconStyle("re_func_freehand");', CssClass: 'iconHover' });
    markupsTab += "<tr style='position:relative;'><td><div class='firstCellMargin'>" + freehand.CreateHtml() + "</div></td>";
    var line = new ToolbarItem({ CssId: "re_func_line", Title: "Draw line", Event: 'draw_annotation("line");ChangeIconStyle("re_func_line");', CssClass: 'iconHover' });
    markupsTab += "<td><div class='cellMargin'>" + line.CreateHtml() + "</div></td>";
    var arrow = new ToolbarItem({ CssId: "re_func_arrow", Title: "Draw arrow", Event: 'draw_annotation("arrow");ChangeIconStyle("re_func_arrow");', CssClass: 'iconHover' });
    markupsTab += "<td><div class='cellMargin'>" + arrow.CreateHtml() + "</div></td>";
    var circle = new ToolbarItem({ CssId: "re_func_circle", Title: "Draw oval", Event: 'draw_annotation("circle");ChangeIconStyle("re_func_circle");', CssClass: 'iconHover' });
    markupsTab += "<td><div class='cellMargin'>" + circle.CreateHtml() + "</div></td>";
    var rectangle = new ToolbarItem({ CssId: "re_func_rectangle", Title: "Draw rectangle", Event: 'draw_annotation("rectangle");ChangeIconStyle("re_func_rectangle");', CssClass: 'iconHover' });
    markupsTab += "<td><div class='cellMargin'>" + rectangle.CreateHtml() + "</div></td>";
    
    var polygon = new ToolbarItem({ CssId: "re_func_polygon", Title: "Draw polygon;to complete polygon right-click mouse", Event: 'draw_annotation("polygon");ChangeIconStyle("re_func_polygon");', CssClass: 'iconHover' });
    markupsTab += "<td><div class='cellMargin'>" + polygon.CreateHtml() + "</div></td>";
    
    var Polygonlines = new ToolbarItem({ CssId: "re_func_polygonlines", Title: "Draw connected lines;to end lines right-click mouse", Event: 'draw_annotation("Polygonlines");ChangeIconStyle("re_func_polygonlines");', CssClass: 'iconHover' });
    markupsTab += "<td><div class='lastCellMargin'>" + Polygonlines.CreateHtml() + "</div></td>";
    markupsTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    

    markupsTab += "<tr><td colspan='7'><div class='cellTextFix'>Drawing</div></td></tr></table>";
    $("#_comments").append(markupsTab);

    var annotationport = "<table style='height:100%;float:left;' class='icongroup'>";
    var addNotes = new ToolbarItem({ CssId: "re_func_annotationup", Title: "Import data file …", Event: 'ShowUploadDialog("annotation");', CssClass: 'iconHover' });
    annotationport += "<tr><td><div class='oneCellMargin'>" + addNotes.CreateHtml() + "</div></td>";
    annotationport += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    annotationport += "<tr><td colspan='1'><div class='cellTextFix'>Import</div></td></tr></table>";

     annotationport += "<table style='height:100%;float:left;' class='icongroup'>";
    var highText = new ToolbarItem({ CssId: "re_func_annotationex", Title: "Export all comments to data file …", Event: 'ShowDialog("option_annotation")', CssClass: 'iconHover' });
    annotationport += "<td><div class='oneCellMargin'>" + highText.CreateHtml() + "</div></td>";
    annotationport += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    annotationport += "<tr><td colspan='1'><div class='cellTextFix'>Export</div></td></tr></table>";
    $("#_comments").append(annotationport);


    tabMenuArray.push("_comments");
}

function CreateEditToolbar(btnId)
{
    var editToolbarStr = "<div id='_edit' style='width:100%;'></div>";
    $(btnId).append(editToolbarStr);
    
    //Tools
    var toolsTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var arrowCur = "<div class='re_func_arrowCur iconHover' title='Select tool:select text and image' onclick='ArrowEvent();'></div>";
    toolsTab += "<tr><td><div class='firstCellMargin'>" + arrowCur + "</div></td>";
    var handCur = "<div class='re_func_handCur iconHover' title='Hand tool:pan around the document' onclick='HandleEvent();'></div>";
    toolsTab += "<td><div class='cellMargin'>" + handCur + "</div></td>";
    var EditText = new ToolbarItem({ CssId: "re_func_editTxt", Title: "Edit Content", Event: 'EditPDFText();', CssClass: 'iconHover' });
    toolsTab += "<td><div class='lastCellMargin'>" + EditText.CreateHtml() + "</div></td>";
    toolsTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    toolsTab += "<tr><td colspan='3'><div class='cellTextFix'>Tools</div></td></tr></table>";
    $("#_edit").append(toolsTab);
    
    //Text Edit
    var TextEditTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var AddText = new ToolbarItem({ CssId: "re_func_addTxt", Title: "Add Text", Event: 'AddPDFText();', CssClass: 'iconHover' });
    TextEditTab += "<tr style='position:relative;'><td><div class='firstCellMargin'>" + AddText.CreateHtml() + "</div></td>";
    
    var fontSz = "<select id='re_func_fontSz' class='iconHover' style='width:75px;height:18px;' onchange='FontFormat(this);'></select>";
    TextEditTab += "<td><div class='cellMargin'>" + fontSz + "</div></td>";
    var fontFm = "<select id='re_func_fontFm'  class='iconHover' style='width:75px;height:18px;' onchange='FontFormat(this);'></select>";
    TextEditTab += "<td><div class='cellMargin'>" + fontFm + "</div></td>";
    
    var fontB = new ToolbarItem({ CssId: "re_func_fontB", Title: "Make the selected text bold", Event: '', CssClass: 'iconHover' });
    TextEditTab += "<td><div class='cellMargin'>" + fontB.CreateHtml() + "</div></td>";
    var fontI = new ToolbarItem({ CssId: "re_func_fontI", Title: "Italicize the selected text", Event: '', CssClass: 'iconHover' });
    TextEditTab += "<td><div class='cellMargin'>" + fontI.CreateHtml() + "</div></td>";
    var fontU = new ToolbarItem({ CssId: "re_func_fontU", Title: "Underline the selected text", Event: '', CssClass: 'iconHover' });
    TextEditTab += "<td><div class='cellMargin'>" + fontU.CreateHtml() + "</div></td>";
    var fontS = new ToolbarItem({ CssId: "re_func_fontS", Title: "Strikethrough the selected text", Event: '', CssClass: 'iconHover' });
    TextEditTab += "<td><div class='cellMargin'>" + fontS.CreateHtml() + "</div></td>";
    var groundColor = "<div id='re_func_fontBC' class='iconHover' style='width:23px;height:33px;font-size:15px;font-weight:bold;border:1px solid #727272;background:#ffff00;text-align:center;line-height:33px;color:#000000;' title='Text Highlight Color'>ab</div>";
    TextEditTab += "<td><div class='cellMargin'>" + groundColor + "</div></td>";
    var fontColor = "<div id='re_func_fontC'  class='iconHover' style='width:23px;height:33px;font-size:15px;font-weight:bold;border:1px solid #727272;background:#000000;color:#ffff00;text-align:center;line-height:33px;' title='Change the selected text color'>ab</div>";
    TextEditTab += "<td><div class='lastCellMargin'>" + fontColor + "</div></td>";
    TextEditTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    
    TextEditTab += "<tr><td colspan='9'><div class='cellTextFix'>Text Edit</div></td></tr></table>";
    $("#_edit").append(TextEditTab);
    
    //Image Edit
    var ImageEditTab = "<table style='width:270px;height:100%;float:left;' class='icongroup'>";
    var imageFormats = new Array(".png",".bmp",".RLE",".DIB",".jpg",".jpeg",".jfif",".jpe",".jbig2",".jbg",".xbm",".xpm",".pbm",".pgm",
                                  ".ppm",".dng",".jp2",".j2k",".wbm")
                                  
    var AddImage = "<div id='re_func_addImg'  class='iconHover' title='Add Image' onclick='ImgToInsert.click()'><input type='file' id='ImgToInsert' name='ImgToInsert' accept='" + imageFormats + "' style='opacity:0;right:0px;display:none;position:absolute;' onchange='AddPDFImage()'/></div>";
    ImageEditTab += "<tr><td><div class='firstCellMargin'>" + AddImage + "</div></td>";
    var imgReplace = "<div id='re_func_imgReplace' class='iconHover'  title='Replace Image' onclick='ImgToReplace.click()'><input type='file' id='ImgToReplace' name='ImgToReplace' accept='" + imageFormats + "' style='opacity:0;right:0px;display:none;top:0px;position:absolute;' onchange='ReplaceImage()'/></div>";
   ImageEditTab += "<td><div class='cellMargin'>" + imgReplace + "</div></td>";
    
   var HorFlip = new ToolbarItem({ CssId: "re_func_horFlip", Title: "Flip Horizontal", Event: '', CssClass: 'iconHover' });
    ImageEditTab += "<td><div class='cellMargin'>" + HorFlip.CreateHtml() + "</div></td>";
    var VerFlip = new ToolbarItem({ CssId: "re_func_verFlip", Title: "Flip Vertical", Event: '', CssClass: 'iconHover' });
    ImageEditTab += "<td><div class='cellMargin'>" + VerFlip.CreateHtml() + "</div></td>";
    var Rotate = new ToolbarItem({ CssId: "re_func_couRotate", Title: "Rotate Counterclockwise", Event: '', CssClass: 'iconHover' });
    ImageEditTab += "<td><div class='cellMargin'>" + Rotate.CreateHtml() + "</div></td>";
    var CouRotate = new ToolbarItem({ CssId: "re_func_rotate", Title: "Rotate Clockwise", Event: '', CssClass: 'iconHover' });
    ImageEditTab += "<td><div class='lastCellMargin'>" + CouRotate.CreateHtml() + "</div></td>";
    ImageEditTab += "<td><div  class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    ImageEditTab += "<tr><td colspan='7'><div class='cellTextFix'>Image Edit</div></td></tr></table>";
    $("#_edit").append(ImageEditTab);
    
    //Add or Edit link
    var linkTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var link = new ToolbarItem({ CssId: "re_func_link", Title: "Add or Edit Link", Event: 'EditLink();', CssClass: 'iconHover' });
    linkTab += "<tr><td><div class='oneCellMargin'>" + link.CreateHtml() + "</div></td>";
    linkTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    linkTab += "<tr><td><div class='cellTextFix'>Link Edit</div></td></tr></table>";
    $("#_edit").append(linkTab);
    
    //Clipboard
    var clipboardTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var cut = new ToolbarItem({ CssId: "re_func_cut", Title: "Cut the selection", Event: '', CssClass: 'iconHover' });
    clipboardTab += "<tr style='position:relative;'><td><div class='firstCellMargin'>" + cut.CreateHtml() + "</div></td>";
    var copy = new ToolbarItem({ CssId: "re_func_copy", Title: "Copy the selection", Event: '', CssClass: 'iconHover' });
    clipboardTab += "<td><div class='cellMargin'>" + copy.CreateHtml() + "</div></td>";
    var past = new ToolbarItem({ CssId: "re_func_past", Title: "Paste the contents of the clipboard", Event: 'PastEvent();', CssClass: 'iconHover' });
    clipboardTab += "<td><div class='cellMargin'>" + past.CreateHtml() + "</div></td>";
    var deleSelection = new ToolbarItem({ CssId: "re_func_delete", Title: "Delete the selection", Event: '', CssClass: 'iconHover' });
    clipboardTab += "<td><div class='cellMargin'>" + deleSelection.CreateHtml() + "</div></td>";
    var selectAll = new ToolbarItem({ CssId: "re_func_selectAll", Title: "Select all the contents", Event: '', CssClass: 'iconHover' });
    clipboardTab += "<td><div class='lastCellMargin'>" + selectAll.CreateHtml() + "</div></td>";
    clipboardTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    clipboardTab += "<tr><td colspan='4'><div class='cellTextFix'>Clipboard</div></td></tr></table>";
    $("#_edit").append(clipboardTab);
    
    var checkBoxs = "<div id='re_func_showOutLines' class='iconHover' style='margin-top:10px;float:left;'><input type='checkbox' id='_showOutline' style='text-align:center;line-height:25px;' onchange='ShowOutLines();'><label for='_showOutline'>Outline Text & Images</label></div>";
    $("#_edit").append(checkBoxs);
    
    tabMenuArray.push("_edit");

   
}

function CreateLinkProperties()
{
    var str = "<div id='_linkProperties' class='popboxbase' style='z-index:996;'></div>";
    $("body").append(str);
    $("#_linkProperties").css({
        width:"460px",
        height:"270px",
        display:"block"
    });
   // var iconUrl = getImagesFolder() + "ui-icons_454545_256x240.png";
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Link Properties</div><div  class='poptitleimage poptitlestyle'  onclick='hideLinkPropsBox();'></div></div>";
    $("#_linkProperties").append(title);
    
    var popContent = "<div id='linkPropWin' style='border:1px solid #727272;margin:5px;margin-top:0px;width:447px;height:200px;background:#F0F0F0;'>";
    popContent += "<div id='linkPropTabs'></div></div>";
    $("#_linkProperties").append(popContent);
    
    var propTabUl = "<ul id='_linkPropTabUl'></ul>";
    $("#linkPropTabs").append(propTabUl);
    var propPanel = "<div id='_linkPropPanel' style='width:400px;height:140px;'></div>";
    $("#linkPropTabs").append(propPanel);
    var appearance = "<li><a id='_appearTab' href='#_linkPropPanel'><span style='padding:0px 10px 0px 10px;font-size:12px;'>Appearance</span></a></li>";
    $("#_linkPropTabUl").append(appearance);
    var actions = "<li><a id='_actionTab' href='#_linkPropPanel'><span style='padding:0px 10px 0px 10px;font-size:12px;'>Actions</span></a></li>";
    $("#_linkPropTabUl").append(actions);
    
    CreateLinkAppearPanel("#_linkPropPanel");
    CreateLinkActionsPanel("#_linkPropPanel");
    
    $("#_linkActionsPanel").hide();
    
    $("#linkPropTabs").tabs();
    $("#linkPropTabs").tabs( "option", "collapsible", false );
    $("#linkPropTabs").tabs( "option", "active", 0);

    $("#linkPropTabs").on( "tabsactivate", function( event, ui ) 
	{
	    var instruct = $("#linkPropTabs").tabs( "option", "active" ).toString();
	    if(instruct == 0)
	    {
	        $("#_linkAppearPanel").show();
	        $("#_linkActionsPanel").hide();
	        $("#_linkProperties").css("height","270px");
	        $("#linkPropWin").css("height","200px");
	        $("#_linkPropPanel").css("height","140px");
	    }
	    else if(instruct == 1)
	    {
	        $("#_linkAppearPanel").hide();
	        $("#_linkActionsPanel").show();
	        $("#_linkProperties").css("height","450px");
	        $("#linkPropWin").css("height","380px");
	        $("#_linkPropPanel").css("height","320px");
	    }
	});
    var isLocked = "<input type='checkbox' id='linkLock' style='margin-left:7px;' onchange='LinkLockedChange();'><label for='linkLock'>Locked</label>";
    var buttons = "<button style='margin-top:3px;margin-right:5px;width:70px;float:right;' onclick='hideLinkPropsBox();'>Cancel</button>";
    buttons += "<button style='margin-top:3px;margin-right:30px;width:70px;float:right;' onclick='ChangeLinkAnnoProps();'>Ok</button>";
    $("#_linkProperties").append(isLocked);
    $("#_linkProperties").append(buttons);

    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_linkProperties").hide();
}

function ChangeLinkAnnoProps()
{
    var posi = changeLinkInfo.indexOf("_");
    var pageIndex = changeLinkInfo.substring(0,posi);
    var linkIndex = changeLinkInfo.substring(posi+1);
    var linkAnno = _fileDocument[curFileId].Viewers[pageIndex].Links[linkIndex];
    var rectangleType = $("#_linkAnnoType").get(0).value;
    if(rectangleType == "Invisible Rectangle")
        linkAnno.IsVisible = false;
    else
        linkAnno.IsVisible = true;
        
    linkAnno.LineStyle = $("#_lineAnnoStyle").get(0).value;
    linkAnno.HighStyle = $("#_highAnnoStyle").get(0).value;
    linkAnno.OutLineColor = $("#_linkAnnoColor").val();
    var lineWidth = $("#_linkAnnoWidth").get(0).value;
    if(lineWidth == "Thin")
        lineWidth = 1;
    else if(lineWidth == "Medium")
        lineWidth = 2;
    else if(lineWidth == "Thick")
        lineWidth = 3;
    linkAnno.OutLineWidth = lineWidth;
    linkAnno.IsLock = document.getElementById("linkLock").checked;
    var childrens = $("#AnnoLinkList").children();
    linkAnno.LinkActions = new Array();
    for(var i=0;i<childrens.length;i++)
    {
        var childId = childrens[i].id;
        var htmlContent = $("#"+childId).html();
        var newLinkAction = new LinkAction();
        if(htmlContent.indexOf("Go to a page view") != -1)
        {
            var value = htmlContent.substring(19);
            newLinkAction.ActionType = "Action_goto";
            newLinkAction.Action = _fileDocument[curFileId].GetPageIndex(value);
        }
        else if(htmlContent.indexOf("Open a file") != -1)
        {
            var value = htmlContent.substring(13);
            newLinkAction.ActionType = "Action_file";
            newLinkAction.Action = value;
        }
        else if(htmlContent.indexOf("Open a web page") != -1)
        {
            var value = htmlContent.substring(17);
            newLinkAction.ActionType = "Action_uri";
            newLinkAction.Action = value;
        }
        else
        {
            newLinkAction.ActionType = "Action_js";
            newLinkAction.Action = recordJsValue;
        }
        linkAnno.LinkActions.push(newLinkAction);
    }
    $("#link_"+linkIndex).remove();
    
    var outlineColor = linkAnno.OutLineColor;
    if(onblurLinkNum != "")
    {
	    var posi = onblurLinkNum.indexOf("_");
	    var actualIndex = onblurLinkNum.substring(0,posi);
	    var linkAnnoNum = onblurLinkNum.substring(posi+1);
	    if(linkAnno.OnPageIndex == actualIndex && linkAnno.Index == linkAnnoNum)
	        outlineColor = "#0000ff";
	}
    var append_string = "";
    var addinvisableclass = "";
    if (!linkAnno.IsVisible) {
        addinvisableclass = "invisablelink";

    }
	if(linkAnno.LineStyle == "Underline")
    {
	    append_string = "<div class='new_rect " + addinvisableclass + "' id='link_" + linkAnno.Index + "' style='left:" + linkAnno.ShowLeft + "px;top:" + linkAnno.ShowTop + "px;width:" + linkAnno.ShowWidth + "px;height:" + linkAnno.ShowHeight + "px;border-bottom:solid " + linkAnno.OutLineWidth + "px " + outlineColor + ";opacity:" + linkAnno.Transparency + ";'>";
    }
    else 
    {
	    append_string = "<div class='new_rect " + addinvisableclass + "' id='link_" + linkAnno.Index + "' style='left:" + linkAnno.ShowLeft + "px;top:" + linkAnno.ShowTop + "px;width:" + linkAnno.ShowWidth + "px;height:" + linkAnno.ShowHeight + "px;border:" + linkAnno.LineStyle + " " + linkAnno.OutLineWidth + "px " + outlineColor + ";opacity:" + linkAnno.Transparency + ";'>";
    }
    if(!linkAnno.IsLock)
    {   
        append_string += "<div class='lRightDown' id='lRightDown_"+linkAnno.Index+"'></div><div class='lLeftDown' id='lLeftDown_"
	    +linkAnno.Index+"'></div><div class='lRightUp' id='lRightUp_"+linkAnno.Index+"'></div><div class='lLeftUp' id='lLeftUp_"
	    +linkAnno.Index+"'></div><div class='lRight' id='lRight_"+linkAnno.Index+"'></div><div class='lLeft' id='lLeft_"
	    +linkAnno.Index+"'></div><div class='lUp' id='lUp_"+linkAnno.Index+"'></div><div class='lDown' id='lDown_"+linkAnno.Index+"'></div>";
    }
	append_string +="</div>";
	
	//$("#draw_canvas").append(append_string);
	$("#docannotation_" + linkAnno.OnPageIndex).append(append_string);
	$("#link_"+linkAnno.Index).val(pageIndex);
	
    addDragAction(linkAnno.Index,linkAnno.OnPageIndex,"link");
	BindImageViewerAnnotationClick("link",linkAnno.Index);
	BindResize(linkAnno.Index,linkAnno.Type);
    addLinkHoverEvent(linkAnno.Index);
    addLinkClickEvent(linkAnno.OnPageIndex,linkAnno.Index);
    $("#link_"+linkAnno.Index).smartMenu(LinkAct);
    if (!linkAnno.IsVisible)
        $("#link_" + linkAnno.Index).css("border", "none");
    
    if(linkAnno.IsLock)
        $("#link_"+linkAnno.Index).draggable("disable");
    hideLinkPropsBox();
}

function LinkLockedChange()
{
    var isLocked = document.getElementById("linkLock").checked;
    if(isLocked)
    {
        $("#_actionAdd").attr("disabled","disabled");
        $("#_actionUp").attr("disabled","disabled");
        $("#_actionDown").attr("disabled","disabled");
        $("#_actionEdit").attr("disabled","disabled");
        $("#_actionDelete").attr("disabled","disabled");
        if($("#_linkAnnoType").val() == "Visible Rectangle")
        {
            $("#_linkAnnoType").attr("disabled","disabled");
            $("#_lineAnnoStyle").attr("disabled","disabled");
            $("#_highAnnoStyle").attr("disabled","disabled");
            $("#_linkAnnoColor").unbind("click");
            $("#_linkAnnoWidth").attr("disabled","disabled");
        }
        else
        {
            $("#_linkAnnoType").attr("disabled","disabled");
            $("#_highAnnoStyle").attr("disabled","disabled");
        }
    }
    else
    {
        $("#_actionAdd").removeAttr("disabled");
        var childrens = $("#AnnoLinkList").children();
        if(childrens.length == 0){}
        else
        {
            $("#_actionEdit").removeAttr("disabled");
            $("#_actionDelete").removeAttr("disabled");
            if(childrens.length != 1)
            {
                var firstId = childrens[0].id;
                var lastId = childrens[childrens.length-1].id;
                if(firstId == blurActionItem)
                    $("#_actionDown").removeAttr("disabled");
                else if(lastId == blurActionItem)
                    $("#_actionUp").removeAttr("disabled");
                else
                {
                    $("#_actionUp").removeAttr("disabled");
                    $("#_actionDown").removeAttr("disabled");
                }
            }
        }
        
        if($("#_linkAnnoType").val() == "Visible Rectangle")
        {
            $("#_linkAnnoType").removeAttr("disabled");
            $("#_lineAnnoStyle").removeAttr("disabled");
            $("#_highAnnoStyle").removeAttr("disabled");
            $("#_linkAnnoColor").bind("click",function(){ShowTableColor(this,false);});
            $("#_linkAnnoWidth").removeAttr("disabled");
        }
        else
        {
            $("#_linkAnnoType").removeAttr("disabled");
            $("#_highAnnoStyle").removeAttr("disabled"); 
        }
    }
}

var changeLinkInfo = "";
function showLinkPropsBox(linkItem)
{
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#_linkProperties").show();
    SignPanelPosition("#_linkProperties");
    var linkIndex = linkItem.id.substring(5);
    var pageIndex = $(linkItem).val();
    var linkAnno = _fileDocument[curFileId].Viewers[pageIndex].Links[linkIndex];
    var rectangleType = "Invisible Rectangle";
    if(linkAnno.IsVisible)
        rectangleType = "Visible Rectangle";
    $("#_linkAnnoType").val(rectangleType).attr("selected",true);
    $("#_lineAnnoStyle").val(linkAnno.LineStyle).attr("selected",true);
    $("#_highAnnoStyle").val(linkAnno.HighStyle).attr("selected",true);
    $("#_linkAnnoColor").css("background",linkAnno.OutLineColor);
    $("#_linkAnnoColor").val(linkAnno.OutLineColor);
    var lineType = "Thin";
    if(linkAnno.OutLineWidth == 2)
        lineType = "Medium";
    else if(linkAnno.OutLineWidth == 3)
        lineType = "Thick";
    $("#_linkAnnoWidth").val(lineType).attr("selected",true);
    $("#AnnoLinkList").empty();
    for(var i=0;i<linkAnno.LinkActions.length;i++)
    {
        var tempLinkAction = linkAnno.LinkActions[i];
        var linkActionPanel = "<div class='actionItem' id='action_"+i+"'><div>";
        $("#AnnoLinkList").append(linkActionPanel);
        var actionType = tempLinkAction.ActionType;
        var htmlContent = "";
        if(actionType == "Action_goto")
        {
            actionType = "Go to a page view: ";
            var showIndex = _fileDocument[curFileId].GetShowIndex(tempLinkAction.Action) + 1;
            htmlContent = actionType + showIndex;
        }
        else if(actionType == "Action_file")
            htmlContent = "Open a file: " + tempLinkAction.Action;
        else if(actionType == "Action_uri")
            htmlContent = "Open a web page: " + tempLinkAction.Action;
        else if(actionType == "Action_js")
            htmlContent = "Run a Javascript:";
        
        $("#action_"+i).html(htmlContent);
        $("#action_"+i).bind("click",function(){ActionItemSelect(this);});
    }
    $("#AnnoLinkList").val(linkAnno.LinkActions.length);
    
    if(linkAnno.IsLock)
        $("#linkLock").prop("checked",true);
    else
        $("#linkLock").prop("checked",false);
    
    $("#_linkAnnoType").attr("disabled","disabled");
    $("#_lineAnnoStyle").attr("disabled","disabled");
    $("#_highAnnoStyle").attr("disabled","disabled");
    $("#_linkAnnoColor").unbind("click");
    $("#_linkAnnoWidth").attr("disabled","disabled");
    $("#_actionAdd").attr("disabled","disabled");
    $("#_actionUp").attr("disabled","disabled");
    $("#_actionDown").attr("disabled","disabled");
    $("#_actionEdit").attr("disabled","disabled");
    $("#_actionDelete").attr("disabled","disabled");

    if(!linkAnno.IsLock)  
    {
        if(rectangleType == "Invisible Rectangle")
        {
            $("#_linkAnnoType").removeAttr("disabled");
            $("#_highAnnoStyle").removeAttr("disabled");
        }
        else if(rectangleType == "Visible Rectangle")
        {
            $("#_linkAnnoType").removeAttr("disabled");
            $("#_lineAnnoStyle").removeAttr("disabled");
            $("#_highAnnoStyle").removeAttr("disabled");
            $("#_linkAnnoColor").bind("click",function(){ShowTableColor(this,false);});
            $("#_linkAnnoWidth").removeAttr("disabled");
        }
        $("#_actionAdd").removeAttr("disabled");
        if(linkAnno.LinkActions.length != 0)
        {
            $("#_actionEdit").removeAttr("disabled");
            $("#_actionDelete").removeAttr("disabled");
            $("#_actionUp").removeAttr("disabled");
            $("#_actionDown").removeAttr("disabled");
            $("#action_0").trigger("click");
        }
    } 
    changeLinkInfo = pageIndex + "_" + linkIndex; 
}

function hideLinkPropsBox()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_linkProperties").hide(); 
}

function CreateLinkAppearPanel(parentId)
{
    var appearPanel = "<div id='_linkAppearPanel' style='width:400px;height:140px;'></div>";
    $(parentId).append(appearPanel);
    
    var appearContent = "<div style='margin:5px;padding:17px;padding-top:7px;width:400px;height:130px;'>"
    appearContent += "<table style='width:100%;height:100%;font-size:12px;'>";
    appearContent += "<tr><td>Link Type:</td><td><select class='linkType' id='_linkAnnoType' style='width:130px;' onchange='LinkTypeChange(this.id);'></select></td><td>Line Style:</td><td><select class='lineStyle' id='_lineAnnoStyle' style='width:80px;'></select></td></tr>";
    appearContent += "<tr><td>Highlight Style:</td><td><select class='highStyle' id='_highAnnoStyle' style='width:130px;'></select></td><td>Color:</td><td><div id='_linkAnnoColor' class='redactColorCell'  style='background:#000000;' ></div></td></tr>";
    appearContent += "<tr><td>Line Thickness:</td><td><select class='linkWidth' id='_linkAnnoWidth' style='width:130px;'></select></td></tr></table></div>";
    $("#_linkAppearPanel").append(appearContent);
}

function CreateLinkActionsPanel(parentId)
{
    var actionsPanel = "<div id='_linkActionsPanel' style='width:400px;height:140px;font-size:12px;'></div>";
    $(parentId).append(actionsPanel);
    
    var actionsContent = "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:400px;height:55px;'><legend style='font-weight:bold;'>Add an Action</legend>Select Action:<select id='linkActions' style='margin-left:10px;width:280px;'></select><button style='float:right;margin-right:20px;margin-top:10px;' onclick='AddLinkActions();' id='_actionAdd'>Add...</button></fieldset>";
    actionsContent += "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:400px;height:225px;'><legend style='font-weight:bold;'>Actions</legend>";
    actionsContent += "<div id='AnnoLinkList' style='width:400px;height:185px;border:solid 1px #000000;overflow:auto;'></div>";
    actionsContent += "<button style='float:left;width:80px;margin-top:10px;' id='_actionUp' onclick='PreAction();'>Up</button>";
    actionsContent += "<button style='float:left;width:80px;margin-left:26px;margin-top:10px;' id='_actionDown' onclick='NextAction();'>Down</button>";
    actionsContent += "<button style='float:left;width:80px;margin-left:26px;margin-top:10px;' id='_actionEdit' onclick='EditAction();'>Edit</button>";
    actionsContent += "<button style='float:left;width:80px;margin-left:26px;margin-top:10px;' id='_actionDelete' onclick='DeleteAction();'>Delete</button>";
    actionsContent += "</fieldset>";
    $("#_linkActionsPanel").append(actionsContent);
    
    //var linkActions = new Array("Go to a page view","Open a file","Open a web page","Run a Javascript");
    var linkActions = new Array("Open a web page");
    for(var i=0;i<linkActions.length;i++)
        $("#linkActions").append($('<option></option>').html(linkActions[i]));
}

function CreateLinkPopBox()
{
     var str = "<div id='_linkPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_linkPopbox").css({
        width:"450px",
        height:"380px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Create Link</div><div  class='poptitleimage poptitlestyle'  onclick='CancelAddLink();'></div></div>";
    $("#_linkPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:5px;margin-top:0px;width:435px;height:340px;background:#F0F0F0;'>";
    
    popContent += "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:385px;height:130px;background:#ffffff;'><legend style='font-weight:bold;'>Link Appearance</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td>Link Type:</td><td><select class='linkType' id='_linkType' style='width:130px;' onchange='LinkTypeChange(this.id);'></select></td><td>Line Style:</td><td><select class='lineStyle' id='_lineStyle' style='width:80px;'></select></td></tr>";
    popContent += "<tr><td>Highlight Style:</td><td><select class='highStyle' id='_highStyle' style='width:130px;'></select></td><td>Color:</td><td><div id='_linkColor' class='redactColorCell'  style='background:#000000;'></div></td></tr>";
    popContent += "<tr><td>Line Thickness:</td><td><select class='linkWidth' id='_linkWidth' style='width:130px;'></select></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:385px;height:100px;background:#ffffff;'><legend style='font-weight:bold;'>Link Action</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr style='display:none;'><td><input type='radio' id='_goto' name='linkAction' value='Action_goto' ><label for='_goto'>Go to a page view</label></td></tr>";
    popContent += "<tr style='display:none;'><td><input type='radio' id='_file' name='linkAction' value='Action_file'><label for='_file'>Open a file</label></td></tr>";
    popContent += "<tr ><td><input type='radio' id='_uri' name='linkAction' value='Action_uri' checked><label for='_uri'>Open a web page</label></td></tr>";
    popContent += "<tr style='display:none;'><td><input type='radio' id='_js' name='linkAction' value='Action_js'><label for='_js'>Run a Javascript</label></td></tr></table></fieldset>";
    
    popContent += "<button style='margin-top:3px;margin-right:5px;width:70px;float:right;' onclick='CancelAddLink();'>Cancel</button>";
    popContent += "<button style='margin-top:3px;margin-right:30px;width:70px;float:right;' onclick='SetLinkAction();'>Next</button>";
    popContent += "</div>";
    $("#_linkPopbox").append(popContent);

    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_linkColor").bind("click",function(){ShowTableColor(this,false);});
    $("#_linkColor").val("#000000");
    $("#_linkPopbox").hide();
    
    //Edit GotoView
    var str = "<div id='_gotoPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_uriPopbox").css({
        width:"240px",
        height:"170px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Create Go to View</div><div  class='poptitleimage poptitlestyle'  onclick='hideGotoPopBox();'></div></div>";
    $("#_gotoPopbox").append(title);
    var popContent = "<div style='border:1px solid #727272;margin:5px;margin-top:0px;width:225px;height:130px;background:#F0F0F0;'>";
    popContent += "<div style='margin-left:10px;font-size:13px;margin-top:20px;'>Select the target view,then press the Set Link to create the link destination:</div><br/>";
    popContent += "<div style='margin-left:70px;'><select id='_linkGoto' style='width:80px;'></select></div>";
    popContent += "<button style='margin-top:10px;margin-right:5px;width:70px;float:right;' onclick='hideGotoPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:10px;margin-right:30px;width:70px;float:right;' onclick='AddLinkAction();'>Set Link</button>";
    popContent += "</div>";
    $("#_gotoPopbox").append(popContent); 
    $("#_gotoPopbox").hide();
    
    //Edit URI
    var str = "<div id='_uriPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_uriPopbox").css({
        width:"440px",
        height:"170px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Edit URL</div><div  class='poptitleimage poptitlestyle'  onclick='hideURIPopBox();'></div></div>";
    $("#_uriPopbox").append(title);
    var popContent = "<div style='border:1px solid #727272;margin:5px;margin-top:0px;width:425px;height:130px;background:#F0F0F0;'>";
    popContent += "<div style='margin-left:30px;font-size:13px;margin-top:20px;'>Enter a URL for this link:</div><br/>";
    popContent += "<div style='margin-left:30px;'><input id='_linkURI' style='width:300px;' value='http://'></input></div>";
    popContent += "<button style='margin-top:20px;margin-right:5px;width:70px;float:right;' onclick='hideURIPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:20px;margin-right:30px;width:70px;float:right;' onclick='AddLinkAction();'>Set Link</button>";
    popContent += "</div>";
    $("#_uriPopbox").append(popContent); 
    $("#_uriPopbox").hide();
    
    //Edit Open File
    $("body").append("<input type='file' id='LinkFile' name='LinkFile' style='opacity:0;right:0px;display:none;position:absolute;' onchange='AddLinkFile()'/>");
    
    //Edit JS
    var str = "<div id='_jsPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_jsPopbox").css({
        width:"440px",
        height:"390px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Javascript Editor</div><div  class='poptitleimage poptitlestyle'  onclick='hideJSPopBox();'></div></div>";
    $("#_jsPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:5px;margin-top:0px;width:425px;height:350px;background:#F0F0F0;'>";
    popContent += "<div style='margin-left:20px;font-size:13px;margin-top:20px;'>Create and Edit Javascripts:</div>";
    popContent += "<textarea style='margin-left:20px;margin-top:20px;width:385px;height:230px;resize:none;' id='_linkJS'></textarea>";
    popContent += "<button style='margin-top:20px;margin-right:5px;width:70px;float:right;' onclick='hideJSPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:20px;margin-right:30px;width:70px;float:right;' onclick='AddLinkAction();'>Set Link</button>";
    popContent += "</div>";
    $("#_jsPopbox").append(popContent); 
    $("#_jsPopbox").hide();
}

function LinkTypeChange(curItem)
{
    if(curItem == "_linkType")
    {
        var linkTypeVal = $("#_linkType").get(0).value;
        if(linkTypeVal == "Visible Rectangle")
        {
            $("#_lineStyle").removeAttr("disabled");
            $("#_linkColor").bind("click",function(){ShowTableColor(this,false);});
            $("#_linkWidth").removeAttr("disabled");
        }
        else if(linkTypeVal == "Invisible Rectangle")
        {
            $("#_lineStyle").attr("disabled","disabled");
            $("#_linkColor").unbind("click");
            $("#_linkWidth").attr("disabled","disabled");
        }
    }
    else
    {
        var linkTypeVal = $("#_linkAnnoType").get(0).value;
        if(linkTypeVal == "Visible Rectangle")
        {
            $("#_lineAnnoStyle").removeAttr("disabled");
            $("#_linkAnnoColor").bind("click",function(){ShowTableColor(this,false);});
            $("#_linkAnnoWidth").removeAttr("disabled");
        }
        else if(linkTypeVal == "Invisible Rectangle")
        {
            $("#_lineAnnoStyle").attr("disabled","disabled");
            $("#_linkAnnoColor").unbind("click");
            $("#_linkAnnoWidth").attr("disabled","disabled"); 
        }
    }
}

function AddLinkFile()
{
    showLoading();
	$.ajaxFileUpload
	(
	    {			
            url:getCurrentAspx(),
			secureuri:false,
			fileElementId:'LinkFile',
			dataType: 'json',
			data:{add:"link",fid:_fid},
			success: function (data,status)
			{	
			    if(typeof(data.error) != 'undefined'){}
			    if(data.indexOf("error") == -1)
			    {
			        hideLoading();
                    AddLinkAction(data);
                }
			},
			error: function (data,status, e)
			{
			    hideLoading();
				alert(e);
		    }
		 }
	)
}

var recordJsValue = "";
function AddLinkAction(value)
{
    if(isChangeActionFlag)
    {
        var numFlag = $("#AnnoLinkList").val();
        var linkActionPanel = "<div class='actionItem' id='action_"+numFlag+"'>";

        var linkAction = $("#linkActions").get(0).value;
        var linkValue = "";
        var showText = "";
        if(linkAction == "Go to a page view")
        {
            linkValue = $("#_linkGoto").get(0).value;
            hideGotoPopBox();
        }
        else if(linkAction == "Open a file")
            linkValue = value.trim();
        else if(linkAction == "Open a web page")
        {
            linkValue = $("#_linkURI").val();
            var indexh = linkValue.indexOf("http://");
            var indexhs = linkValue.indexOf("https://");
            if (indexh == 0 || indexhs == 0) {

            } else {
                linkValue = "http://" + linkValue;
            }
            hideURIPopBox();
        }
        else if(linkAction == "Run a Javascript")
        {
            linkValue = "";
            recordJsValue = $("#_linkJS").val();
            hideJSPopBox();
        }
        
        showText = linkAction + ": " + linkValue;
        linkActionPanel += showText + "</div>";
        $("#AnnoLinkList").append(linkActionPanel);
        $("#AnnoLinkList").val(numFlag+1);
        $("#action_"+numFlag).bind("click",function(){ActionItemSelect(this);});
        var childrens = $("#AnnoLinkList").children();
        if(childrens.length == 1)
        {
            $("#_actionEdit").removeAttr("disabled");
            $("#_actionDelete").removeAttr("disabled");
            $("#action_"+numFlag).trigger("click");
        }
        else
        {
            //judge blurActionItem is the last Item
           var tempId =  childrens[childrens.length - 2].id;
           if(tempId == blurActionItem)
             $("#_actionDown").removeAttr("disabled");
        }
    }
    else if(isEditActionFlag)
    {
        var htmlContent = $("#"+blurActionItem).html();
        if(htmlContent.indexOf("Go to a page view") != -1)
        {
            htmlContent = "Go to a page view: " + $("#_linkGoto").get(0).value;
            hideGotoPopBox();   
        }
        else if(htmlContent.indexOf("Open a file") != -1)
        {
            htmlContent = "Open a file: " + value.trim();
        }
        else if(htmlContent.indexOf("Open a web page") != -1)
        {
            linkValue =  $("#_linkURI").val();
            var indexh = linkValue.indexOf("http://");
            var indexhs = linkValue.indexOf("https://");
            if (indexh == 0 || indexhs == 0) {
                htmlContent = "Open a web page: " + linkValue;
            } else {
                htmlContent = "Open a web page: " + "http://" + linkValue;
            }

            hideURIPopBox();
        }
        else if(htmlContent.indexOf("Run a Javascript") != -1)
        {
            hideJSPopBox();
        }   
        $("#"+blurActionItem).html(htmlContent); 
    }
    else
    {
        var linkActionType = $('input:radio[name="linkAction"]:checked').val();
        var linkValue = "";
        if(linkActionType == "Action_goto")
        {
            linkValue = $("#_linkGoto").get(0).value - 1;
            linkValue = _fileDocument[curFileId].GetPageIndex(linkValue);
        }
        else if(linkActionType == "Action_file")
        {
            linkValue = value.trim();
        }
        else if(linkActionType == "Action_uri")
        {
            linkValue = $("#_linkURI").val();
            var indexh = linkValue.indexOf("http://");
            var indexhs = linkValue.indexOf("https://");
            if (indexh == 0 || indexhs == 0) {

            } else {
                linkValue = "http://" + linkValue;
            }
        }
        else if(linkActionType == "Action_js")
        {
            linkValue = $("#_linkJS").val();
        }
        var linkInfoArray = recordLinkInfo.split(";");
        var pageIndex = linkInfoArray[0];
        var linkIndex = linkInfoArray[1];
        var left = linkInfoArray[2];
        var top = linkInfoArray[3];
        var width = linkInfoArray[4];
        var height = linkInfoArray[5];
        var nScrollLeft = linkInfoArray[6];
        var nScrollTop = linkInfoArray[7];
        
        addLinkAnnotation(pageIndex,linkIndex,left,top,width,height,"link",nScrollLeft,nScrollTop,true); 
        var newAction = new LinkAction({ ActionType: linkActionType, Action: linkValue });
       




        _fileDocument[curFileId].Viewers[pageIndex].Links[linkIndex].LinkActions.push(newAction);
        addLinkHoverEvent(linkIndex);
        addLinkClickEvent(pageIndex,linkIndex);
        $("#link_"+linkIndex).trigger("click");
                
           


        for(var i=0;i<linkAnnoArray.length;i++)
        {
            var linkInfo = linkAnnoArray[i];
            var posi = linkInfo.indexOf("_");
            var linkAnnoNum = linkInfo.substring(posi+1);
            addLinkHoverEvent(linkAnnoNum);
       }
       addDragAction(linkIndex,pageIndex,"link");
       linkNum++; 
       if(linkActionType == "Action_goto")
            hideGotoPopBox();
       else if(linkActionType == "Action_uri")
            hideURIPopBox();
       else if(linkActionType == "Action_js")
           hideJSPopBox();
    }
}

var blurActionItem = "";
function ActionItemSelect(item)
{ 
    $("#_actionUp").attr("disabled","disabled");
    $("#_actionDown").attr("disabled","disabled");
    if(blurActionItem == "")
        blurActionItem = item.id;
    else
    {
        $("#"+blurActionItem).removeClass("blurAction");
        blurActionItem = item.id; 
    }
    $("#"+blurActionItem).addClass("blurAction");
    var childrens = $("#AnnoLinkList").children();
    if(childrens.length == 1){}
    else
    {
        var firstId = childrens[0].id;
        var lastId = childrens[childrens.length-1].id;
        if(firstId == blurActionItem)
            $("#_actionDown").removeAttr("disabled");
        else if(lastId == blurActionItem)
            $("#_actionUp").removeAttr("disabled");
        else
        {
            $("#_actionUp").removeAttr("disabled");
            $("#_actionDown").removeAttr("disabled");
        }
    }
}

var isChangeActionFlag = false;
function AddLinkActions()
{
    isChangeActionFlag = true;
    var linkAction = $("#linkActions").get(0).value;
    if(linkAction == "Go to a page view")
        linkAction = "Action_goto";
    else if(linkAction == "Open a file")
        linkAction = "Action_file";
    else if(linkAction == "Open a web page")
        linkAction = "Action_uri";
    else if(linkAction == "Run a Javascript")
        linkAction = "Action_js";
    ShowLinkActionPanel(linkAction);
}

function PreAction()
{
    var preDiv = $("#"+blurActionItem).prev();
    var preId = preDiv.attr("id");
    $("#"+preId).trigger("click");
}

function NextAction()
{
    var nextDiv = $("#"+blurActionItem).next();
    var nextId = nextDiv.attr("id");
    $("#"+nextId).trigger("click");
}

var isEditActionFlag = false;
function EditAction()
{
    var htmlContent = $("#"+blurActionItem).html();
    isEditActionFlag = true;
    if(htmlContent.indexOf("Go to a page view") != -1)
        showGotoPopBox();
    else if(htmlContent.indexOf("Open a file") != -1)
        $("#LinkFile").click(); 
    else if(htmlContent.indexOf("Open a web page") != -1)
        showURIPopBox();
    else if(htmlContent.indexOf("Run a Javascript") != -1)
        showJSPopBox();
}

function DeleteAction()
{
    if(blurActionItem == "")
        return;
    else
    {
        $("#"+blurActionItem).remove();
        var childrens = $("#AnnoLinkList").children();
        if(childrens.length == 0)
        {
            $("#_actionUp").attr("disabled","disabled");
            $("#_actionDown").attr("disabled","disabled");
            $("#_actionEdit").attr("disabled","disabled");
            $("#_actionDelete").attr("disabled","disabled");
        }
        else
        {
            $("#"+childrens[0].id).trigger("click");
        }
    }
}

function showGotoPopBox()
{
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#_gotoPopbox").show();
    SignPanelPosition("#_gotoPopbox");
    $("#_linkGoto").empty();
    for(var i=1;i<=_totalPageCount;i++)
        $("#_linkGoto").append($('<option></option>').html(i));
}

function hideGotoPopBox()
{
    $("#_gotoPopbox").hide();
    if(isChangeActionFlag)
        isChangeActionFlag = false;
    else if(isEditActionFlag)
        isEditActionFlag = false;
    else
    {
        $(".loadingImg").css("opacity","0.8");
        $("#loading_div").show();
        $("#loading").hide();
    }
}

function hideURIPopBox()
{
    $("#_uriPopbox").hide(); 
    if(isChangeActionFlag)
        isChangeActionFlag = false;
    else if(isEditActionFlag)
        isEditActionFlag = false;
    else
    {
        $(".loadingImg").css("opacity","0.8");
        $("#loading_div").show();
        $("#loading").hide();
    }
}

function hideJSPopBox()
{
    $("#_jsPopbox").hide(); 
    if(isChangeActionFlag)
        isChangeActionFlag = false;
    else if(isEditActionFlag)
        isEditActionFlag = false;
    else
    {
        $(".loadingImg").css("opacity","0.8");
        $("#loading_div").show();
        $("#loading").hide();
    }
}

function showURIPopBox()
{
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#_uriPopbox").show();
    SignPanelPosition("#_uriPopbox");
}

function showJSPopBox()
{
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#_jsPopbox").show();
    SignPanelPosition("#_jsPopbox");
}

var recordLinkInfo = "";
function showLinkPopBox(pageIndex,linkNum,left,top,width,height,nScrollLeft,nScrollTop)
{
    $("#_linkPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_linkPopbox");
    recordLinkInfo = pageIndex + ";" + linkNum + ";" + left + ";" + top + ";" + width + ";" + height + ";" + nScrollLeft +";" + nScrollTop;
}

function CancelAddLink()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_linkPopbox").hide(); 
}

function SetLinkAction()
{
    CancelAddLink();
    var linkType = $("#_linkType").get(0).value;
    if(linkType == "Visible Rectangle")
        LinkStyle.IsVisible = true;
    else
        LinkStyle.IsVisible = false;
        
    var lineStyle = $("#_lineStyle").get(0).value;
    LinkStyle.LineStyle = lineStyle;
    
    var highStyle = $("#_highStyle").get(0).value;
    LinkStyle.HighStyle = highStyle;
    
    var lineColor = $("#_linkColor").val();
    LinkStyle.OutLineColor = lineColor;
    
    var lineWidth = $("#_linkWidth").get(0).value;
    if(lineWidth == "Thin")
        LinkStyle.OutLineWidth = 1;
    else if(lineWidth == "Medium")
        LinkStyle.OutLineWidth = 2;
    else if(lineWidth == "Thick")
        LinkStyle.OutLineWidth = 4;
   var linkAction = $('input:radio[name="linkAction"]:checked').val();
   ShowLinkActionPanel(linkAction)
}

function ShowLinkActionPanel(linkAction)
{
    if(linkAction == "Action_goto")
        showGotoPopBox();
    else if(linkAction == "Action_file")
        $("#LinkFile").click();  
    else if(linkAction == "Action_uri")
        showURIPopBox();
    else if(linkAction == "Action_js")
        showJSPopBox();
}

var isBindImgEditEvent = false;
function BindEditImageEvent()
{
    $("#ImgToReplace").removeAttr("disabled");
    TargetHover("#ImgToReplace",true);
    $("#re_func_imgReplace").css("cursor", "pointer");
    $("#re_func_imgReplace").addClass("imgReplaceIconEn");
    $("#re_func_imgReplace").removeClass("imgReplaceIconDis");

    $("#re_func_horFlip").bind("click",HorizonImage);
    TargetHover("#re_func_horFlip", true);
    $("#re_func_horFlip").addClass("imgHorFlipIconEn");
    $("#re_func_horFlip").removeClass("imgHorFlipIconDis");

    
    $("#re_func_verFlip").bind("click",VerticalImage);
    TargetHover("#re_func_verFlip",true);
    $("#re_func_horFlip").addClass("imgVerFlipIconEn");
    $("#re_func_horFlip").removeClass("imgVerFlipIconDis");
    
    $("#re_func_rotate").bind("click",RotateImage);
    TargetHover("#re_func_rotate",true);
    $("#re_func_rotate").addClass("imgRotateIconEn");
    $("#re_func_rotate").removeClass("imgRotateIconDis");
    
    $("#re_func_couRotate").bind("click",CouRotateImage);
    TargetHover("#re_func_couRotate",true);
    $("#re_func_rotate").addClass("imgCouRotateIconEn");
    $("#re_func_rotate").removeClass("imgCouRotateIconDis");
    
    BindBasicBoardEvent();
    isBindImgEditEvent = true;
}

function RemoveEditImageEvent()
{
    $("#ImgToReplace").attr("disabled","disabled");
    TargetHover("#ImgToReplace",false);
    $("#re_func_imgReplace").css("cursor","text");
    $("#re_func_imgReplace").removeClass("imgReplaceIconEn");
    $("#re_func_imgReplace").addClass("imgReplaceIconDis");
    
    $("#re_func_horFlip").unbind("click");
    TargetHover("#re_func_horFlip",false);
    $("#re_func_horFlip").removeClass("imgHorFlipIconEn");
    $("#re_func_horFlip").addClass("imgHorFlipIconDis");
    
    $("#re_func_verFlip").unbind("click");
    TargetHover("#re_func_verFlip",false);
    $("#re_func_verFlip").removeClass("imgVerFlipIconEn");
    $("#re_func_verFlip").addClass("imgVerFlipIconDis");
    
    $("#re_func_rotate").unbind("click");
    TargetHover("#re_func_rotate",false);
    $("#re_func_rotate").removeClass("imgRotateIconEn");
    $("#re_func_rotate").addClass("imgRotateIconDis");
    
    $("#re_func_couRotate").unbind("click");
    TargetHover("#re_func_couRotate",false);
    $("#re_func_rotate").removeClass("imgCouRotateIconEn");
    $("#re_func_rotate").addClass("imgCouRotateIconDis");
    
    RemoveBasicBoardEvent();
    isBindImgEditEvent = false;
}

var isBindTxtEditEvent = false;
function BindEditTextEvent()
{
    $("#re_func_fontSz").removeAttr("disabled");
    $("#re_func_fontFm").removeAttr("disabled");
    $("#re_func_fontB").bind("click",function(){formatDoc("bold",null);});
    TargetHover("#re_func_fontB", true);
    $("#re_func_fontB").addClass("textFontBIconEn");
    $("#re_func_fontB").removeClass("textFontBIconDis");

    $("#re_func_fontI").bind("click",function(){formatDoc("italic",null);});
    TargetHover("#re_func_fontI",true);
    $("#re_func_fontB").addClass("textFontIIconEn");
    $("#re_func_fontB").removeClass("textFontIIconDis");
    
    $("#re_func_fontU").bind("click",function(){formatDoc("underline",null);});
    TargetHover("#re_func_fontU",true);
    $("#re_func_fontU").addClass("textFontUIconEn");
    $("#re_func_fontU").removeClass("textFontUIconDis");
    
    $("#re_func_fontS").bind("click",function(){formatDoc("strikethrough",null);});
    TargetHover("#re_func_fontS",true);
    $("#re_func_fontS").addClass("textFontSIconEn");
    $("#re_func_fontS").removeClass("textFontSIconDis");
    
    $("#re_func_fontBC").bind("click",function(){FontColorStyle(this);});
    TargetHover("#re_func_fontBC",true);
    
    $("#re_func_fontC").bind("click",function(){FontColorStyle(this);});
    TargetHover("#re_func_fontC",true);
    //$("#" + addcomponentsId).css({"pointer-events":"none"});
    BindBasicBoardEvent();
    isBindTxtEditEvent = true; 
}

function RemoveEditTextEvent()
{
    $("#re_func_fontSz").attr("disabled","disabled");
    $("#re_func_fontFm").attr("disabled","disabled");   
    $("#re_func_fontB").unbind("click");
    TargetHover("#re_func_fontB",false);
    $("#re_func_fontB").removeClass("imgReplaceIconEn");
    $("#re_func_fontB").addClass("imgReplaceIconDis");
    
    $("#re_func_fontI").unbind("click");
    TargetHover("#re_func_fontI",false);
    $("#re_func_fontI").removeClass("textFontIIconEn");
    $("#re_func_fontI").addClass("textFontIIconDis");
    
    $("#re_func_fontU").unbind("click");
    TargetHover("#re_func_fontU",false);
    $("#re_func_fontU").removeClass("textFontUIconEn");
    $("#re_func_fontU").addClass("textFontUIconDis");
    
    $("#re_func_fontS").unbind("click");
    $("#re_func_fontS").removeClass("textFontSIconEn");
    $("#re_func_fontS").addClass("textFontSIconDis");
    
    $("#re_func_fontBC").unbind("click");
    TargetHover("#re_func_fontBC",false);
    
    $("#re_func_fontC").unbind("click");
    TargetHover("#re_func_fontC",false);
    //$("#" + addcomponentsId).css({ "pointer-events": "auto" });
    RemoveBasicBoardEvent();
    isBindTxtEditEvent = false;

    
}

function HorizonImage()
{
    var currentId = "";
    if(addImgEditId != "")
        currentId = addImgEditId;
    else if(curEditImageId != "" && isEditPdfText)
        currentId = curEditImageId;
    var target = document.getElementById(currentId);
    var transform = GetTransform("horizon",currentId);
    if (target.style.msTransform !== undefined) { //IE
        target.style.msTransform = transform;	
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = transform;	
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = transform;	
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = transform;	
    } else {
        target.style.transform = transform;
    }
}

function VerticalImage()
{
    var currentId = "";
    if(addImgEditId != "")
        currentId = addImgEditId;
    else if(curEditImageId != "" && isEditPdfText)
        currentId = curEditImageId;
    var target = document.getElementById(currentId);
    var transform = GetTransform("vertical",currentId);
    if (target.style.msTransform !== undefined) { //IE
        target.style.msTransform = transform;	
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = transform;
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = transform;
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = transform;
    } else {
        target.style.transform = transform;
    }
}

function RotateImage()
{
    var currentId = "";
    if(addImgEditId != "")
        currentId = addImgEditId;
    else if(curEditImageId != "" && isEditPdfText)
        currentId = curEditImageId;
    var target = document.getElementById(currentId);
    var transform = GetTransform("rotate",currentId);
    if (target.style.msTransform !== undefined) { //IE
        target.style.msTransform = transform;	
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = transform;
   } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = transform;
   } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = transform;
   } else {
        target.style.transform = transform;
   }
}

function CouRotateImage()
{
    var currentId = "";
    if(addImgEditId != "")
        currentId = addImgEditId;
    else if(curEditImageId != "" && isEditPdfText)
        currentId = curEditImageId;
    var target = document.getElementById(currentId);
    var transform = GetTransform("couRotate",currentId);
    if (target.style.msTransform !== undefined) { //IE
        target.style.msTransform = transform;	
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = transform;
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = transform;
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = transform;
    } else {
        target.style.transform = transform;
    }
}

function GetTransform(action,Id)
{
    var transform = $("#"+Id).css("transform");
    var recordValue = $("#"+Id).attr("value");
    if(transform == "none")
    {
        if(action == "rotate")
        {
            transform = "rotate(90deg)";
            recordValue = "degree:1;";
        }
        else if(action == "couRotate")
        {
            transform = "rotate(270deg)";
            recordValue = "degree:-1;";
        }
        else if(action == "horizon")
        {
            transform = "scaleX(-1)";
            recordValue = "horizon;"
        }
        else if(action == "vertical")
        {
            transform = "scaleY(-1)";
            recordValue = "vertical;";
        }
    }
    else
    {   
        var horizonPosi = recordValue.indexOf("horizon");
        var verticalPosi = recordValue.indexOf("vertical");
        var degreeInfoPosi = recordValue.indexOf("degree");
        if(action == "rotate")
        {
            if(horizonPosi == -1 && verticalPosi == -1)
            {
                transform = transform + " rotate(90deg)";
                var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree+1));
            }
            else if(horizonPosi != -1 && verticalPosi != -1)
            {
                if(degreeInfoPosi == -1)
                {
                    recordValue += "degree:1;";
                    transform = "rotate(90deg) scaleX(-1) scaleY(-1)";
                }
                else
                {
                    var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                    var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                    transform = "rotate("+(degree+1)*90+"deg) scaleX(-1) scaleY(-1)";
                    recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree+1));
                }
            }
            else if(recordValue.indexOf("horizon") != -1)
            {
                if(degreeInfoPosi == -1)
                {
                    transform = "rotate(90deg) scaleX(-1)";
                    recordValue += "degree:1;";
                }
                else
                {
                    var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                    var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                    transform = "rotate("+(degree+1)*90+"deg) scaleX(-1)";
                    recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree+1));
                }
            }
            else if(recordValue.indexOf("vertical") != -1)
            {
                if(degreeInfoPosi == -1)
                {
                    transform = "rotate(90deg) scaleY(-1)";
                    recordValue += "degree:1";
                }
                else
                {
                    var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                    var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                    transform = "rotate("+(degree+1)*90+"deg) scaleY(-1)";
                    recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree+1));
                }
            }
        }
        else if(action == "couRotate")
        {
            if(horizonPosi == -1 && verticalPosi == -1)
            {
                transform = transform + " rotate(-90deg)";
                var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree-1));
            }
            else if(horizonPosi != -1 && verticalPosi != -1)
            {
                if(degreeInfoPosi == -1)
                {
                    recordValue += "degree:-1;";
                    transform = "rotate(-90deg) scaleX(-1) scaleY(-1)";
                }
                else
                {
                    var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                    var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                    transform = "rotate("+(degree-1)*90+"deg) scaleX(-1) scaleY(-1)";
                    recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree-1));
                }
            }
            else if(recordValue.indexOf("horizon") != -1)
            {
                if(degreeInfoPosi == -1)
                {
                    transform = "rotate(-90deg) scaleX(-1)";
                    recordValue += "degree:-1;";
                }
                else
                {
                    var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                    var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                    transform = "rotate("+(degree-1)*90+"deg) scaleX(-1)";
                    recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree-1));
                }
            }
            else if(recordValue.indexOf("vertical") != -1)
            {
                if(degreeInfoPosi == -1)
                {
                    transform = "rotate(-90deg) scaleY(-1)";
                    recordValue += "degree:-1";
                }
                else
                {
                    var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                    var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                    transform = "rotate("+(degree-1)*90+"deg) scaleY(-1)";
                    recordValue = recordValue.replace("degree:"+degree,"degree:"+(degree-1));
                }
            }
        }
        else if(action == "horizon")
        {
            if(degreeInfoPosi == -1)
                transform = transform +" scaleX(-1)";
            else
            {
                var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                if(degree%2 == 0)
                    transform = transform + " scaleX(-1)";
                else
                     transform = transform + "scaleY(-1)";
            }
            if(horizonPosi != -1)
                recordValue = recordValue.replace("horizon;","");
            else
                recordValue += "horizon;";
        }
        else if(action == "vertical")
        {
            if(degreeInfoPosi == -1)
                transform = transform +" scaleY(-1)";
            else
            {
                var tempRecord = recordValue.substring(recordValue.indexOf(":")+1);
                var degree = parseInt(tempRecord.substring(0,tempRecord.indexOf(";")));
                if(degree%2 == 0)
                    transform = transform + " scaleY(-1)";
                else
                     transform = transform + "scaleX(-1)";
            }
            if(verticalPosi != -1)
                recordValue = recordValue.replace("vertical;","");
            else
                recordValue += "vertical;";
        }
    }
    $("#"+Id).attr("value",recordValue);
    return transform;
}

function FontColorStyle(curColorDiv)
{
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(curSelectRange);
    ShowTableColor(curColorDiv,false);
}

function FontFormat(curSelect)
{
    if(curSelect.id == "re_func_fontSz")
    {
        var textFontSz = $(curSelect).get(0).value;
        document.execCommand("fontsize",false,textFontSz);
    }
    else if(curSelect.id == "re_func_fontFm")
    {
        var textFontFm = $(curSelect).get(0).value;
        document.execCommand("fontname",false,textFontFm);      
    }
}

function InitTextFontSize(divId)
{
   var textFontSize = new Array("1","2","3","4","5","6","7");
   for(var i=0;i<textFontSize.length;i++)
    {
        $("#"+divId).append($('<option></option>').html(textFontSize[i]));
    }
    $("#"+divId).val("1").attr("selected",true); 
}
var textFontArray = null;
function GetSystemFont()
{
    textFontArray = new Array();
    $.post(getServerHandlerUrl(), { "action": "GetSystemFontFamilies"},function (result, status) {
        result = eval('(' + result + ')');
		if (result.state == "success")
		{
		    var arr = result.msg;
			textFontArray = arr.split("/");
		} 
		else
		{					
		    textFontArray = new Array("Arial","Arial Black","Arial Narrow","Tahoma","Cambria","Times New Roman","Calibri","Verdana","");
		}
		var fontselect = "";
		for (var i = 0; i < textFontArray.length - 1; i++) {
		    fontselect += "<option value='" + textFontArray[i] + "'>" + textFontArray[i] + "</option>";
		}
		$("#re_func_fontFm").append(fontselect);
		$("#redactFont").append(fontselect);
		$("#HFFont").append(fontselect);
		$("#WMFont").append(fontselect);
		$("#_fontnamevalue").append(fontselect);
		$("#re_func_fontFm").val("Arial").attr("selected", true);
		$("#redactFont").val("Arial").attr("selected", true);
		$("#HFFont").val("Arial").attr("selected", true);
		$("#WMFont").val("Arial").attr("selected", true);

		$("#_fontnamevalue").val("Arial").attr("selected", true);
    });

}

var isShowOutLines = false;
function ShowOutLines()
{
    if(isShowOutLines)
    {
        isShowOutLines = false;
        for(var i=0;i<_showDocSrc.length;i++)
        {
            var pageIndex = _showDocSrc[i];
            var tempCount = getTotalEditItemCount("txt", pageIndex);// $("#RE_txtTotal_" + pageIndex).html();
            if(typeof(tempCount) != "undefined")
            {
               for(var j=1;j<=tempCount;j++)
               {
                    $("#REtxt_d"+pageIndex+"_"+j).css("border","1px solid transparent");
               } 
            }
            tempCount = getTotalEditItemCount("img", pageIndex);//$("#RE_imgTotal_" + pageIndex).html() || "0";
            if(typeof(tempCount) != "undefined")
            {
                for(var j=0;j<tempCount;j++)
                {
                    $("#REimg_d"+pageIndex+"_"+j).css("border","1px solid transparent");
                }
            }
       }
    }
    else
    {
        isShowOutLines = true;
        for(var i=0;i<_showDocSrc.length;i++)
        {
            var pageIndex = _showDocSrc[i];
            var tempCount = getTotalEditItemCount("txt", pageIndex);//$("#RE_txtTotal_" + pageIndex).html() || "0";
            if(typeof(tempCount) != "undefined")
            {
               for(var j=1;j<=tempCount;j++)
               {
                    $("#REtxt_d"+pageIndex+"_"+j).css("border","1px solid #727272");
               } 
            }
            tempCount = getTotalEditItemCount("img", pageIndex);// $("#RE_imgTotal_"+pageIndex).html()||"0";
            if(typeof(tempCount) != "undefined")
            {
                for(var j=0;j<tempCount;j++)
                {
                    $("#REimg_d"+pageIndex+"_"+j).css("border","1px solid #727272");
                }
            }
       }
    }
}

var isEditPdfText = false;
function EditPDFText()
{
    $("#re_func_showOutLines").show();
    isEditPdfText = true;
    $("#rasteredge_wdp").removeClass("select");
    if(isBindSelectEvent)
    {
        $("#draw_canvas").unbind("mousedown",selectDown);
	    $("#draw_canvas").unbind("mousemove",selectMove);
	    $("#draw_canvas").unbind("mouseup",selectUp);   
	    isBindSelectEvent = false;
    }
    else
    {
        unbindPageDragEvent();
        $(".showByDrag").removeClass("mouseStyleMove");
        $(".showByDrag").addClass("mouseStyleSelect");
    }
    AddIconBorder("#re_func_editTxt");
    for(var i=0;i<_showDocSrc.length;i++)
    {
        var pageIndex = _showDocSrc[i];
        EnablePageEdit(pageIndex);
    }
    $("#" + addcomponentsId).css({ "pointer-events": "none" });
}

//var GImgAct = [[{
//    text: "Delete",
//    func: function () {
//        $("#" + this.id).remove();
//    },
//}]];




var imgActDelete = {
    text: "Delete",
    func: function () {
        $("#" + this.id).remove();
    },
};

var imgActReplace = {
    text: "Replace Image",
    func: function () {
        curEditImageId = this.id;
        $("#re_func_imgReplace").trigger("click");
    },
};

var imgActFH = {
    text: "Flip Horizontal",
    func: function () {
        curEditImageId = this.id;
        HorizonImage();
    },
};


var imgActFV = {
    text: "Flip Vertical",
    func: function () {
        curEditImageId = this.id;
        VerticalImage();
    },
};


var imgActRotCW = {
    text: "Rotate Clockwise",
    func: function () {
        curEditImageId = this.id;
        RotateImage();
    },
};


var imgActRotCCW = {
    text: "Rotate Counterclockwise",
    func: function () {
        curEditImageId = this.id;
        CouRotateImage();
    },
};

var GImgAct = [[imgActDelete, imgActReplace, imgActFH, imgActFV, imgActRotCW, imgActRotCCW]];
function EnablePageEdit(pageIndex)
{
    if(selectTextPages.length != 0)
	{
	    for(var i=0;i<selectTextPages.length;i++)
        {
            $("#reSelectTextSvg").remove();
        }
	    selectTextPages = new Array();
	}
    if(browser == "FireFox")
        $("#page_"+pageIndex).attr("contentEditable",true);
    var tempCount = getTotalEditItemCount("txt", pageIndex);//$("#RE_txtTotal_"+pageIndex).html();
    if(typeof(tempCount) != "undefined")
    {
        for(var j=1;j<=tempCount;j++)
        {
            if(isShowOutLines)
                $("#REtxt_d"+pageIndex+"_"+j).css("border","1px solid #727272");
            else
                $("#REtxt_d"+pageIndex+"_"+j).css("border","1px solid transparent");
            $("#REtxt_d"+pageIndex+"_"+j).attr("contentEditable",true);
            HoverBorder("#REtxt_d"+pageIndex+"_"+j,true);
        }
    }
    tempCount = getTotalEditItemCount("img", pageIndex);//$("#RE_imgTotal_"+pageIndex).html();
    if(typeof(tempCount) != "undefined")
    {
        for(var j=0;j<tempCount;j++)
        {
            if(isShowOutLines)
                $("#REimg_d"+pageIndex+"_"+j).css("border","1px solid #727272");
            else
                $("#REimg_d"+pageIndex+"_"+j).css("border","1px solid transparent");
            $("#REimg_d" + pageIndex + "_" + j).attr("contentEditable", true);
            $("#REimg_d" + pageIndex + "_" + j).smartMenu(GImgAct);
            try {
                $("#REimg_d" + pageIndex + "_" + j).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this); } });
                // (addImgArray.in_array("REimg_d" + pageIndex + "_" + j)) {
                $("#REimg_d" + pageIndex + "_" + j).draggable("enable");

            } catch(e) {
                $("#REimg_d" + pageIndex + "_" + j).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
                $("#REimg_d" + pageIndex + "_" + j).draggable("enable");
            }
            HoverBorder("#REimg_d"+pageIndex+"_"+j,true);
        }
    }
    tempCount = getTotalEditItemCount("canvas", pageIndex);//$("#RE_canvasTotal_"+pageIndex).html();
    if(typeof(tempCount) != "undefined")
    {
        for(var k=0;k<tempCount;k++)
        {
            $("#RECanvas_d"+pageIndex+"_"+k).attr("contentEditable",false);
            $("#RECanvas_d" + pageIndex + "_" + k).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
        } 
    }
    $(".cPDiv_"+pageIndex + " img").hover
	(
	    function()
		{
		    $(this).css("cursor","move");
		},
		function()
		{
		    $(this).css("cursor","default");
		}
	)
	$(".cPDiv_"+pageIndex).bind("click",function(){showResizeHandler(this);});
}


function resetImageDragZoomInPage(pageIndex) {
    if (!isEditPdfText)
        return;
    tempCount = getTotalEditItemCount("img", pageIndex);//$("#RE_imgTotal_" + pageIndex).html()||"0";
    if (typeof (tempCount) != "undefined") {
        for (var j = 0; j < tempCount; j++) {
            $("#REimg_d" + pageIndex + "_" + j).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
        }
    }
    tempCount = getTotalEditItemCount("canvas", pageIndex);//$("#RE_canvasTotal_" + pageIndex).html();
    if (typeof (tempCount) != "undefined") {
        for (var k = 0; k < tempCount; k++) {
            $("#RECanvas_d" + pageIndex + "_" + k).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
        }
    }

}


function AddResizeHandler(imgId)
{
    var idLast = imgId.substring(8);
    $("#"+imgId).append("<div class='eRightDown' id='eRightDown_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eLeftDown' id='eLeftDown_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eRightUp' id='eRightUp_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eLeftUp' id='eLeftUp_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eRight' id='eRight_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eLeft' id='eLeft_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eUp' id='eUp_"+idLast+"'></div>");
	$("#"+imgId).append("<div class='eDown' id='eDown_"+idLast+"'></div>");
    ChangeEHandler();
    
	var pageIndex = idLast.substring(0,idLast.indexOf("_"));
	var rs = new Resize(imgId, {
	    Max: true, mxContainer: "page_" + pageIndex, isImg: true, onResize: function () {
	        width = this._styleWidth;
	        height = this._styleHeight;
	        $("#" + imgId).children();
	        var childs = $("#" + imgId).children();
	        var gosvgdocument = null;
	        var gokey = null;
	        if (childs.length > 0) {
	            for (var key in childs) {
	                if (childs[key].nodeName =="svg") {
	                    gosvgdocument = childs[key];
	                    gokey = key;
	                    break;
	                }
	            }
	        }


	        var source="";
	       
	        if (gosvgdocument != null) {
	            gosvgdocument.setAttribute("height", height);
	            gosvgdocument.setAttribute("width", width);
	            var sourid = null;
	            if (gosvgdocument.children.length > 0 && gosvgdocument.children[0].nodeName == "g" ){
	                var g = gosvgdocument.children[0];
	                sourid=g.getAttribute("clip-path");
	                if (g.children.length > 0 && g.children[0].nodeName == "image") {
	                    var img = gosvgdocument.children[0].children[0];
	                    img.setAttribute("height", height);
	                    img.setAttribute("width", width);
	                    img.setAttribute("transform", "");
	                    g.setAttribute("clip-path", "");
	                    source=img.getAttribute("xlink:href");

	                }
	            }
	                
	                
                  
	            if (sourid != null && gosvgdocument.children.length > 1 && gosvgdocument.children[0].nodeName == "defs") {
	                var def = gosvgdocument.children[1];
	                if (def.children.length > 0 && def.children[0].nodeName == "clipPath") {

	                    var clip = def.children[0];
	                    var goid = "url(#" + clip.getAttribute("id") + ")";
	                    if (sourid.length > 0 && sourid == goid)
	                        def.children.remove(0);
	                }
	            }
	            if (source != null && gokey!=null) {
	                // $("#" + imgId).remove("svg");

	                var usernameEle = document.getElementById(imgId);
	                var childs = usernameEle.childNodes;
	                for (var i = childs.length - 1; i >= 0; i--) {
	                    if (childs[i].nodeName == "svg")
	                        usernameEle.removeChild(childs[i]);
	                }


	                $("#" + imgId).append('<img src="/' + source + '" style="width: 100%; height: 100%; cursor: default;">')
	            }

	       } else { 

	        //$("#" + imgId).first("svg").attr("height", height);
	        //$("#" + imgId).first("svg").attr("width", width);
	        //$("#" + imgId).first("svg").first("g").first("image").attr("width", width);
	        //$("#" + imgId).first("svg").first("g").first("image").attr("height", height);
	       }
	    }
	});
	rs.Set("eRightDown_"+idLast+"", "right-down");
	rs.Set("eLeftDown_"+idLast+"", "left-down");
	rs.Set("eRightUp_"+idLast+"", "right-up");
	rs.Set("eLeftUp_"+idLast+"", "left-up");
	rs.Set("eRight_"+idLast+"", "right");
	rs.Set("eLeft_"+idLast+"", "left");
	rs.Set("eUp_"+idLast+"", "up");
    rs.Set("eDown_"+idLast+"", "down");
}



function showResizeHandler(curImgItem)
{
    var imgId = curImgItem.id;
    var childNum = $("#"+imgId).children().length;
    if(childNum == 1)
    {
        AddResizeHandler(imgId);
    }
    else
    {
        $(".eRightDown").css("visibility", "hidden");
        $(".eLeftDown").css("visibility", "hidden");
        $(".eRightUp").css("visibility", "hidden");
        $(".eLeftUp").css("visibility", "hidden");
        $(".eRight").css("visibility", "hidden");
        $(".eLeft").css("visibility", "hidden");
        $(".eUp").css("visibility", "hidden");
        $(".eDown").css("visibility", "hidden");
        
        var idLast = imgId.substring(8);
        $("#eRightDown_"+idLast).css("visibility","visible");
        $("#eLeftDown_"+idLast).css("visibility","visible");
        $("#eRightUp_"+idLast).css("visibility","visible");
        $("#eLeftUp_"+idLast).css("visibility","visible");
        $("#eRight_"+idLast).css("visibility","visible");
        $("#eLeft_"+idLast).css("visibility","visible");
        $("#eUp_"+idLast).css("visibility","visible");
        $("#eDown_"+idLast).css("visibility","visible");
    }
}

function hideResizeHandler()
{
   $(".eRightDown").css("visibility", "hidden");
   $(".eLeftDown").css("visibility", "hidden");
   $(".eRightUp").css("visibility", "hidden");
   $(".eLeftUp").css("visibility", "hidden");
   $(".eRight").css("visibility", "hidden");
   $(".eLeft").css("visibility", "hidden");
   $(".eUp").css("visibility", "hidden");
   $(".eDown").css("visibility", "hidden"); 
}

function HoverBorder(target,isHover)
{
	if(!isHover)
    {
        $(target).unbind("mouseenter").unbind("mouseleave");
    }
    else
    {
        $(target).hover
		(
		    function()
		    {
		        $(this).css("border","1px solid #325EC3");
		    },
		    function()
		    {
		        if(isShowOutLines)
		            $(this).css("border","1px solid #727272");
		        else
		        {
		            $(this).css("border","1px solid transparent");
		        }
		    }
		)
	} 
}

function formatDoc(sCmd,sValue)
{
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(curSelectRange);
    document.execCommand(sCmd,false,sValue);
}

function removeEditText()
{
    hideResizeHandler();
    $("#re_func_showOutLines").hide();
    isEditPdfText = false;
    $("#rasteredge_wdp").addClass("select");
    $("#" + addcomponentsId).css({ "pointer-events": "auto" });
    window.getSelection().removeAllRanges();
    for(var i=0;i<_showDocSrc.length;i++)
    {
        var pageIndex = _showDocSrc[i];
        if(browser == "FireFox")
            $("#page_"+pageIndex).attr("contentEditable",false);
        var tempCount = getTotalEditItemCount("txt", pageIndex);//$("#RE_txtTotal_"+pageIndex).html();
        for(var j=1;j<=tempCount;j++)
        {
            $("#REtxt_d"+pageIndex+"_"+j).css("border","0px");
            $("#REtxt_d"+pageIndex+"_"+j).attr("contentEditable",false);
            HoverBorder("#REtxt_d"+pageIndex+"_"+j,false);
        }
        tempCount = getTotalEditItemCount("img", pageIndex);// $("#RE_imgTotal_"+pageIndex).html();
        if(typeof(tempCount) != "undefined")
        {
            for(var j=0;j<tempCount;j++)
            {
                try {
                    $("#REimg_d" + pageIndex + "_" + j).draggable("destroy");
                } catch (e) {
                }
                HoverBorder("#REimg_d"+pageIndex+"_"+j,false);
            } 
        }
        tempCount = getTotalEditItemCount("canvas", pageIndex);//$("#RE_canvasTotal_"+pageIndex).html();
        if(typeof(tempCount) != "undefined")
        {
            for(var k=0;k<tempCount;k++)
            {    try {
                $("#RECanvas_d"+pageIndex+"_"+k).draggable("destroy");
            } catch (e) {
            }
            }  
        }
        $(".cPDiv_"+pageIndex+ " img").hover
		(
		    function()
		    {
		        $(this).css("cursor","default");
		    },
		    function()
		    {
		       $(this).css("cursor","default");
		    }
		)
		$(".cPDiv_"+pageIndex).unbind("click");
    }
    $("#re_func_editTxt").removeClass("iconBorder");
    $(".showByDrag").removeClass("mouseStyleSelect");
    $("#re_func_selectAll").unbind("click");
    TargetHover("#re_func_selectAll",false);
    $("#re_func_selectAll").removeClass("editSelectIcon");
    $("#re_func_selectAll").addClass("editSelectIcon");
}

var curIconBorderId = "";
function AddIconBorder(addBorderId)
{
    if(curIconBorderId != "")
        $(curIconBorderId).removeClass("iconBorder");
    curIconBorderId = addBorderId;
    if(curIconBorderId != "")
        $(curIconBorderId).addClass("iconBorder");
}

var linkNum = 0;
var DrawLinkDown;
var DrawLinkMove;
var DrawLinkUp;
var isBindDrawLinkEvent = false;
var isDrag = false;
function EditLink()
{
    if(isBindSelectEvent)
    {
        $("#draw_canvas").unbind("mousedown",selectDown);
	    $("#draw_canvas").unbind("mousemove",selectMove);
	    $("#draw_canvas").unbind("mouseup",selectUp);   
	    $(".showByDrag").removeClass("mouseStyleSelect");
	    isBindSelectEvent = false;
    }
    else
    {
        unbindPageDragEvent();
	    $(".showByDrag").removeClass("mouseStyleMove");
    }
    $("#rasteredge_wdp").addClass("select");
    AddIconBorder("#re_func_link");
    $(".showByDrag").addClass("mouseStyleAnnotation");
    
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var down_flag = false,original_flag = true;
    var x_down = 0,y_down = 0;
    var x_original=0,y_original=0;
    var x_point = 0,y_point = 0;
    var drawPageIndex = parseInt(_curCorrectPageId);
    var drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
    
    DrawLinkDown = function(e)
    {
        parent_left = $("#wdp_Content").offset().left;
        parent_top = $("#wdp_Content").offset().top;
        nScrollLeft = $("#wdp_Content")[0].scrollLeft;
        nScrollTop = $("#wdp_Content")[0].scrollTop;
        down_flag = true;
        e = e || window.event;
        x_down = e.pageX;
        y_down = e.pageY;
        if(original_flag)
        {
            x_original = e.pageX - parent_left + nScrollLeft;
            y_original = e.pageY - parent_top + nScrollTop;
            if(_viewerMode == "multi")
                drawPageIndex = PrePageCount(y_original);
            else
                drawPageIndex = parseInt(_curCorrectPageId);
            drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
            viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
            original_flag = false;
            down_flag = true;
            isDrag = false;
        }
        _annotationLastType = "re_func_rectangle";
        for(var i=0;i<linkAnnoArray.length;i++)
        {
            var linkInfo = linkAnnoArray[i];
            var posi = linkInfo.indexOf("_");
            var linkAnnoNum = linkInfo.substring(posi+1);
            $("#link_"+linkAnnoNum).unbind("mouseenter").unbind("mouseleave");
        }
        return false;
    };
    
    DrawLinkMove = function(e)
    {
        if(down_flag)
        {
            isDrag = true;
            x_down = e.pageX - parent_left + nScrollLeft;
            y_down = e.pageY - parent_top + nScrollTop;
            x_point = x_original;
            y_point = y_original;
            new_width = x_down - x_original;
            if(new_width <0)
            {
                new_width = -new_width;
                x_point = x_down;
            }
            new_height = y_down - y_original;
            if(new_height < 0)
            {
                new_height = -new_height;
                y_point = y_down;
            }
            _fileDocument[curFileId].Viewers[drawActualIndex].Links.splice(linkNum,1);
            $("#link_" + linkNum).remove();
            addLinkAnnotation(drawActualIndex,linkNum,x_point,y_point,new_width,new_height,"tempLink",nScrollLeft,nScrollTop);
        }
        return false;
    };
    
    DrawLinkUp = function(e)
    {
        down_flag = false;
        original_flag = true;
        if(isDrag)
        {
            _fileDocument[curFileId].Viewers[drawActualIndex].Links.splice(linkNum,1);
            $("#link_"+linkNum).remove();
            showLinkPopBox(drawActualIndex,linkNum,x_point,y_point,new_width,new_height,nScrollLeft,nScrollTop);
        }   
        for(var i=0;i<linkAnnoArray.length;i++)
        {
            var linkInfo = linkAnnoArray[i];
            var posi = linkInfo.indexOf("_");
            var linkAnnoNum = linkInfo.substring(posi+1);
            addLinkHoverEvent(linkAnnoNum);
        }
        $("#draw_canvas").unbind("mousedown", DrawLinkDown);
        $("#draw_canvas").unbind("mousemove", DrawLinkMove);
        $("#draw_canvas").unbind("mouseup", DrawLinkUp);
        isDrag = false;
        HandleEvent();
        return false;
    };
    $("#draw_canvas").bind("mousedown",DrawLinkDown);
    $("#draw_canvas").bind("mousemove",DrawLinkMove);
    $("#draw_canvas").bind("mouseup",DrawLinkUp);
    isBindDrawLinkEvent = true;
}

var linkMouseDown = function(e)
{
    if (curAnnoType!=""&&curAnnoType != "select" && curAnnoType != "redact" && curAnnoType != "redactArea")
        return;
    var curId = this.id;
    var linkNum = curId.substring(curId.indexOf("_")+1);
    var actualIndex = $(this).val();
    var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[linkNum];
    if(linkAnno.HighStyle == "Inset")
        $("#"+curId).addClass("linkInset");
    else if(linkAnno.HighStyle == "Invert")
        $("#"+curId).addClass("linkInvert");
    else if(linkAnno.HighStyle == "Outline")
        $("#"+curId).addClass("linkOutline");
}

function addLinkHoverEvent(num)
{
    $("#link_"+num).hover
	(
	    function()
		{
		    var posi = onblurLinkNum.indexOf("_");
		    var linkAnnoNum = onblurLinkNum.substring(posi+1); 
		    if(linkAnnoNum != num)
		    {
		        $("#lRightDown_"+num).css("visibility","visible");
		        $("#lLeftDown_"+num).css("visibility","visible");
		        $("#lRightUp_"+num).css("visibility","visible");
		        $("#lLeftUp_"+num).css("visibility","visible");
		        $("#lRight_"+num).css("visibility","visible");
		        $("#lLeft_"+num).css("visibility","visible");
		        $("#lUp_"+num).css("visibility","visible");
		        $("#lDown_"+num).css("visibility","visible");
		    }
		    //if (!isBindDrawLinkEvent) {
		    //    $("#draw_canvas").bind("mousedown", DrawLinkDown);
		    //    $("#draw_canvas").bind("mousemove", DrawLinkMove);
		    //    $("#draw_canvas").bind("mouseup", DrawLinkUp);
		    //    isBindDrawLinkEvent = true;
		    //}
	
		},
		function()
		{
		    var posi = onblurLinkNum.indexOf("_");
		    var linkAnnoNum = onblurLinkNum.substring(posi+1); 
		    if(linkAnnoNum != num)
		    {
		        $("#lRightDown_"+num).css("visibility", "hidden");
		        $("#lLeftDown_"+num).css("visibility", "hidden");
		        $("#lRightUp_"+num).css("visibility", "hidden");
		        $("#lLeftUp_"+num).css("visibility", "hidden");
		        $("#lRight_"+num).css("visibility", "hidden");
		        $("#lLeft_"+num).css("visibility", "hidden");
		        $("#lUp_"+num).css("visibility", "hidden");
		        $("#lDown_"+num).css("visibility", "hidden");
		    }
		    //if (isBindDrawLinkEvent) {
		    //    $("#draw_canvas").unbind("mousedown");
		    //    $("#draw_canvas").unbind("mousemove");
		    //    $("#draw_canvas").unbind("mouseup");
		    //    isBindDrawLinkEvent = false;
		    //}
		}
	) 
}

var onblurLinkNum = "";
var ischangelinks = false;
function addLinkClickEvent(actualIndex,num)
{
    $("#link_"+num).bind("click",function(){
		var tempInfo = actualIndex + "_" + num;
		if(onblurLinkNum == tempInfo)
		    return;
		else
		{
		    if(onblurLinkNum != "")
		    {
		        var posi = onblurLinkNum.indexOf("_");
                var pageIndex = onblurLinkNum.substring(0,posi);
                var linkAnnoNum = onblurLinkNum.substring(posi+1);
                var linkAnno = _fileDocument[curFileId].Viewers[pageIndex].Links[linkAnnoNum];
                $("#link_"+linkAnnoNum).css("border-color",linkAnno.OutLineColor);
                $("#lRightDown_"+linkAnnoNum).css("visibility","hidden");
		        $("#lLeftDown_"+linkAnnoNum).css("visibility","hidden");
		        $("#lRightUp_"+linkAnnoNum).css("visibility","hidden");
		        $("#lLeftUp_"+linkAnnoNum).css("visibility","hidden");
		        $("#lRight_"+linkAnnoNum).css("visibility","hidden");
		        $("#lLeft_"+linkAnnoNum).css("visibility","hidden");
		        $("#lUp_"+linkAnnoNum).css("visibility","hidden");
		        $("#lDown_"+linkAnnoNum).css("visibility","hidden");
		    }
		    $("#lRightDown_"+num).css("visibility","visible");
		    $("#lLeftDown_"+num).css("visibility","visible");
		    $("#lRightUp_"+num).css("visibility","visible");
		    $("#lLeftUp_"+num).css("visibility","visible");
		    $("#lRight_"+num).css("visibility","visible");
		    $("#lLeft_"+num).css("visibility","visible");
		    $("#lUp_"+num).css("visibility","visible");
		    $("#lDown_"+num).css("visibility","visible");
		    $(this).css("border-color","#0000ff");
		    onblurLinkNum = tempInfo;
		}
		if(!isBindDrawLinkEvent)
		{
		    $("#draw_canvas").bind("mousedown",DrawLinkDown);
            $("#draw_canvas").bind("mousemove",DrawLinkMove);
            $("#draw_canvas").bind("mouseup",DrawLinkUp);
            isBindDrawLinkEvent = true;
		}
    })
}

function addLinkJumpEvent(actualIndex,num)
{
    $("#link_" + num).bind("click", function () {

        if (curAnnoType != "" && curAnnoType != "select" && curAnnoType != "redact" && curAnnoType != "redactArea")
            return;

		var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[num];
		if(linkAnno.HighStyle == "Inset")
            $("#"+this.id).removeClass("linkInset");
        else if(linkAnno.HighStyle == "Invert")
            $("#"+this.id).removeClass("linkInvert");
        else if(linkAnno.HighStyle == "Outline")
            $("#" + this.id).removeClass("linkOutline");
		
        for(var k=0;k<linkAnno.LinkActions.length;k++)
        {
            var tempLinkAction = linkAnno.LinkActions[k];
            if(tempLinkAction.ActionType == "Action_goto")
            {
                if(_curCorrectPageId == tempLinkAction.Action)  
                    return;
                ChangePg(tempLinkAction.Action);
            }
            else if(tempLinkAction.ActionType == "Action_file")
            {
                if (isSharePoint)
                    return;
                window.open(getFolder("insert") + tempLinkAction.Action);
            }
            else if(tempLinkAction.ActionType == "Action_uri")
            {
                if (isSharePoint)
                    return;
                window.open(tempLinkAction.Action);
            }
            else if(tempLinkAction.ActionType == "Action_js")
            {
                //add execute js
            }
       }
   })
}

var linkDelete = {
    text:"Delete",
    func:function(){
       var linkIndex = this.id;
       var pageIndex = $(this).val();
       linkAnnoArray.remove(pageIndex + "_" + linkIndex);
       var id = linkIndex.substr(linkIndex.lastIndexOf("_") + 1);
       _fileDocument[curFileId].Viewers[pageIndex].Links[id] = null;
       this.remove();
    },
};

var linkProperties = {
    text:"Properties...",
    func:function()
    {
        var itemId = this.id;
        var pageIndex = $(this).val();
        showLinkPropsBox(this);
    },
};

var linkOpen = {
    text: "Open Link",
    func: function () {
        var linkIndex = this.id;
        var pageIndex = $(this).val();

        linkAnnoArray.remove(pageIndex + "_" + linkIndex);
        var id = linkIndex.substr(linkIndex.lastIndexOf("_") + 1);
        var tempLinkAction = _fileDocument[curFileId].Viewers[pageIndex].Links[id];
        var linkactions = tempLinkAction.LinkActions;
        if (linkactions != null && linkactions.length > 0) {
            for (var i = 0; i<linkactions.length;i++) {
                var linkaction = linkactions[i];
                if (linkaction.ActionType == "Action_goto") {
                    if (_curCorrectPageId == tempLinkAction.Action)
                        return;
                    ChangePg(linkaction.Action);
                }
                else if (linkaction.ActionType == "Action_file") {
                    if (isSharePoint)
                        return;
                    window.open(getFolder("insert") + linkaction.Action);
                }
                else if (linkaction.ActionType == "Action_uri") {
                    if (isSharePoint)
                        return;
                    window.open(linkaction.Action);
                }
            }
        }
    },
};

var LinkAct = [[linkProperties, linkOpen, linkDelete ]];

function addLinkAnnotation(actualIndex,linkIndex,left,top,width,height,annoType,nScrollLeft,nScrollTop,addnew)
{
    ischangelinks = true;
    var strPoints = "";
    var singleStrPoints = "";
    var multiStrPoints = "";
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
 

    viewer.GetViewerLeftTop();
    var fixvalue = 1;
    if (zoomValue < 2)
        fixvalue = 2;
    var fixleft = viewer.GetRefreshBlankLeft() - 1 * zoomValue;
    var countHeight = 0;
    if (_viewerMode == "single") {
        countHeight = 0;
    } else {
        countHeight = PreCountHeight(actualIndex);
    }

    var fixtop = countHeight + 1 * zoomValue;

    left -= fixleft;
    top -= fixtop;

    var docAnno = new Annotation({ OnPageIndex: actualIndex, Type: annoType, Index: linkIndex, ShowLeft: left, ShowTop: top, ShowWidth: width, ShowHeight: height, ZoomValue: zoomValue, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
    if (addnew) { 
        var rectangleType = $("#_linkType").get(0).value;
    if (rectangleType == "Invisible Rectangle")
        docAnno.IsVisible = false;
    else
        docAnno.IsVisible = true;

    docAnno.LineStyle = $("#_lineStyle").get(0).value;
    docAnno.HighStyle = $("#_highStyle").get(0).value;
    docAnno.OutLineColor = $("#_linkColor").val();
    var lineWidth = $("#_linkWidth").get(0).value;
    if (lineWidth == "Thin")
        lineWidth = 1;
    else if (lineWidth == "Medium")
        lineWidth = 2;
    else if (lineWidth == "Thick")
        lineWidth = 3;
    docAnno.OutLineWidth = lineWidth;
    }
    var append_string = "";
    var addinvisableclass = "";

    if(annoType == "link")
    {
        var border = "";
        if (docAnno.IsVisible) {
            if (docAnno.LineStyle == "Underline") {
                border = "border-bottom:solid " + docAnno.OutLineWidth + "px " + docAnno.OutLineColor;
            }
            else {
                border = "border:" + docAnno.LineStyle + " " + docAnno.OutLineWidth + "px " + docAnno.OutLineColor;
            }
        } else {
            addinvisableclass = "invisablelink";
        }
        append_string = "<div class='new_rect " + addinvisableclass + "' id='link_" + linkIndex + "' style='left:" + left + "px;top:" + top + "px;width:" + width + "px;height:" + height + "px;" + border + ";opacity:" + docAnno.Transparency + ";'>";
    }
    else if(annoType == "tempLink")
    {
        top-=
        left-=
        append_string = "<div class='new_rect ' id='link_" + linkIndex + "' style='left:" + left + "px;top:" + top + "px;width:" + width + "px;height:" + height + "px;'>";
        append_string += "<svg class='svg' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
        append_string += "<rect class='link' width='" + width + "' height='" + height + "' style='fill:"+docAnno.FillColor+";opacity:" + docAnno.Transparency + "'/></svg>";	
    }
    if(annoType == "link")
    {
        append_string += "<div class='lRightDown' id='lRightDown_"+linkIndex+"'></div><div class='lLeftDown' id='lLeftDown_"
	    +linkIndex+"'></div><div class='lRightUp' id='lRightUp_"+linkIndex+"'></div><div class='lLeftUp' id='lLeftUp_"
	    +linkIndex+"'></div><div class='lRight' id='lRight_"+linkIndex+"'></div><div class='lLeft' id='lLeft_"
	    +linkIndex+"'></div><div class='lUp' id='lUp_"+linkIndex+"'></div><div class='lDown' id='lDown_"+linkIndex+"'></div>";
    }
    append_string += "</div>";

    //$("#draw_canvas").append(append_string);
    $("#docannotation_" + actualIndex).append(append_string);
	$("#link_"+linkIndex).val(actualIndex);
	
	_fileDocument[curFileId].Viewers[actualIndex].Links[linkIndex] = docAnno;
	if(annoType == "link")
	{
	    BindImageViewerAnnotationClick("link",linkIndex);
	    BindResize(linkIndex,annoType);
	    $("#link_"+linkIndex).smartMenu(LinkAct);
	}
	
}

var isAddPdftext = false;
var addIDArray = new Array();
var addDivId = "";
function AddPDFText()
{   
    if(isBindSelectEvent)
    {
        $("#draw_canvas").unbind("mousedown",selectDown);
	    $("#draw_canvas").unbind("mousemove",selectMove);
	    $("#draw_canvas").unbind("mouseup",selectUp);   
	    isBindSelectEvent = false;
    }
    else
    {
        unbindPageDragEvent();
	    $(".showByDrag").removeClass("mouseStyleMove");
	    $(".showByDrag").addClass("mouseStyleSelect");
    }
    $("#rasteredge_wdp").removeClass("select");
    AddIconBorder("#re_func_addTxt");
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var pageIndex = 0;
    var x=0,y=0;
    addDivId = "";
    var addPageText = function(e)
    {
        if(addDivId != "" && $("#"+addDivId).html() == "" || $("#"+addDivId).html() == "<br>")
        {
           $("#"+addDivId).remove();
           addIDArray.remove(addDivId);
           var divCount = getTotalEditItemCount("txt", pageIndex)-1;// parseInt($("#RE_txtTotal_"+pageIndex).html())-1;
           setTotalEditItemCount("txt", pageIndex,divCount);// $("#RE_txtTotal_" + pageIndex).html(divCount);
        }
        parent_left = $("#wdp_Content").offset().left;
        parent_top = $("#wdp_Content").offset().top;
        nScrollLeft=$("#wdp_Content")[0].scrollLeft;
		nScrollTop=$("#wdp_Content")[0].scrollTop;
		e = e||window.event;
		x = e.pageX - parent_left + nScrollLeft;
		y = e.pageY - parent_top + nScrollTop;
		if(_viewerMode == "multi")
		    drawPageIndex = PrePageCount(y);
		else
		    drawPageIndex = parseInt(_curCorrectPageId);
		pageIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
		var viewer = _fileDocument[curFileId].Viewers[pageIndex];
		viewer.GetViewerLeftTop();
		var actualLeft = (x - viewer.GetRefreshBlankLeft()) * viewer.ScaleX / zoomValue;
		var actualTop = (y - PreCountHeight(drawPageIndex) - viewer.Top)*viewer.ScaleY/zoomValue;
		
		var divCount = getTotalEditItemCount("txt", pageIndex)+1;//(parseInt($("#RE_txtTotal_" + pageIndex).html())||0) + 1;

		$("#RE_" + pageIndex).append("<div id='REtxt_d" + pageIndex + "_" + divCount + "' class='cTDiv_" + pageIndex + "' style='position:absolute;width:200px;height:auto;min-height:45px;left:" + actualLeft + "px;top:" + actualTop + "px;border:1px solid #727272;' contentEditable='true'></div>");
		
		setTotalEditItemCount("txt", pageIndex, divCount);//$("#RE_txtTotal_"+pageIndex).html(divCount);	
		
        addDivId = "REtxt_d"+pageIndex+"_"+divCount;
        addIDArray.push(addDivId);
        if(!editPages.in_array(pageIndex))
            editPages.push(pageIndex);
        isCreateEdit = true;
        if (!isEditPdfText) { 
            EditPDFText();
            AddIconBorder("#re_func_addTxt");
        }
        $("#REtxt_d"+pageIndex+"_"+divCount).hover
		(
		    function()
		    {
		        $("#draw_canvas").unbind("mousedown",addPageText);
		        $(this).css("border", "1px solid #325EC3");
		       // this.blur();
		       // this.focus();
		        //$("#" + addDivId).blur();
		        //$("#" + addDivId).focus();
		       // document.getElementById(addDivId).focus();

		        //var $this = $(this);
		
		        //    setTimeout(function () {
		        //        $this.css({}).focus();
		        //    }, 0);
		        $("#" + addDivId).attr("contentEditable", true);
		        document.getElementById(addDivId).focus();
		    },
		    function()
		    {
		        $("#draw_canvas").bind("mousedown",addPageText);
		        $(this).css("border", "1px solid #727272");
		        document.getElementById(addDivId).blur();
		        $("#" + addDivId).removeAttr("contentEditable");
		    }
		)
       
        $("#REtxt_d" + pageIndex + "_" + divCount).bind("mousedown", function () { addDivId = this.id; });
       
       
    }
    $("#draw_canvas").bind("mousedown",addPageText);
    isAddPdftext = true;    
}

function handleAddImages()
{
    if(selectId == "re_func_addImg" || selectId == "ImgToInsert")
    {
        if(!isAddPDFImg)
        {
            isAddPDFImg = true;
            for(var i=0;i<addImgArray.length;i++)
            {
                $("#" + addImgArray[i]).bind("click", function (e) { showCurAddImage(this.id); });
                try {
                    $("#" + addImgArray[i]).draggable("enable");
                } catch (e) {
                }
            }
        }
        else
        {
            if(addImgEditId != "")
            {
                $("#"+addImgEditId).css("border","0px");
                addImgEditId = "";
            }
        }
        curEditImageId = "";
        curEditTextId = "";
   }
}

function AddPDFImage()
{
    handleAddImages();
    showLoading();
	$.ajaxFileUpload
	(	
	    {			
            url:getCurrentAspx(),
			secureuri:false,
			fileElementId:'ImgToInsert',
			dataType: 'json',
			data:{add:"img",fid:_fid},
			success: function (data,status)
			{	
			    if(typeof(data.error) != 'undefined'){}
			    if(data.indexOf("error") == -1)
			    {
			        hideLoading();
			        var preBindEvent = "";
			        if (editBeforeAddcontent) {
			            preBindEvent = "edit";
			        }
			        else if(isBindSelectEvent)
                    {
	                    preBindEvent = "select";
                    }
                    else
                    {
	                    preBindEvent = "move";
			        }
			        HandleEvent();
			        $("#draw_canvas").unbind("mousedown", selectDown);
			        $("#draw_canvas").unbind("mousemove", selectMove);
			        $("#draw_canvas").unbind("mouseup", selectUp);
			        $(".showByDrag").removeClass("mouseStyleSelect");
			        isBindSelectEvent = false;
			        unbindPageDragEvent();
			        $(".showByDrag").removeClass("mouseStyleMove");
			    
			        AddIconBorder("re_func_addImg");
                    $(".showByDrag").addClass("mouseStyleAnnotation");
                    var info = data.split(";");
                    for(var i=0;i<info.length;i++)
                    {   
                        var name = info[0].trim();
                        var imgWidth = info[1];
                        var imgHeight = info[2];
                     
                          
                        clickToAddImage(name, imgWidth, imgHeight, preBindEvent);
                        break;
                    }
                  
			    }
			    else
			    {
			        alert(data);
			    }
			    var file = $("#ImgToInsert");
			    file.after(file.clone().val(""));
			    file.remove();
			},
			error: function (data,status, e)
			{
			    hideLoading();
				alert(e);
			}
		}
	)	
}

var addImgArray = new Array();
var addImgEditId = ""
var isAddImg = false;
function clickToAddImage(name,imgWidth,imgHeight,preBindEvent)
{
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var pageIndex = 0;
    var x=0,y=0;
    isAddImg = false;
    var addPageImg = function(e)
    {
        if(!isAddImg)
        {
            isAddImg = true;
            parent_left = $("#wdp_Content").offset().left;
            parent_top = $("#wdp_Content").offset().top;
            nScrollLeft=$("#wdp_Content")[0].scrollLeft;
		    nScrollTop=$("#wdp_Content")[0].scrollTop;
		    e = e||window.event;
		    x = e.pageX - parent_left + nScrollLeft;
		    y = e.pageY - parent_top + nScrollTop;
		    if(_viewerMode == "multi")
		        drawPageIndex = PrePageCount(y);
		    else
		        drawPageIndex = parseInt(_curCorrectPageId);
		    pageIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
		    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
		    viewer.GetViewerLeftTop();
		    var actualLeft = (x - viewer.GetRefreshBlankLeft()) * viewer.ScaleX / zoomValue;
		    var actualTop = (y - PreCountHeight(drawPageIndex) - viewer.Top)*viewer.ScaleY/zoomValue;
            
            var divCount = 0;
            var curZIndex = 1;
            var tempZIndex = $(".cTDiv_"+pageIndex).css("z-index");
            var tempImgCount = getTotalEditItemCount("img", pageIndex);// $("#RE_imgTotal_"+pageIndex).html()||"0"; 
            var tempShpCount = getTotalEditItemCount("canvas", pageIndex);// $("#RE_canvasTotal_" + pageIndex).html() || "0";
            if(tempZIndex == "auto")
            {
                if(typeof(tempImgCount) != "undefined")
                {
                    curZIndex += parseInt(tempImgCount);
		            divCount = parseInt(tempImgCount);
		            if(typeof(tempShpCount) != "undefined")
		                curZIndex += parseInt(tempShpCount);
		        }
		        else
		        {
		            $("#RE_"+pageIndex).append("<div id='RE_imgTotal_"+pageIndex+"' style='display:none;'>0</div>");
		            if(typeof(tempShpCount) != "undefined")
		                curZIndex += parseInt(tempShpCount);
		        }
            }
            else
            {
                curZIndex = parseInt(tempZIndex) + 1;
                if(typeof(tempImgCount) != "undefined")
                    divCount = parseInt(tempImgCount);
                else
                   $("#RE_"+pageIndex).append("<div id='RE_imgTotal_"+pageIndex+"' style='display:none;'>0</div>"); 
            }
            settTotalEditItemCount("img", pageIndex, parseInt(divCount) + 1);//  $("#RE_imgTotal_" + pageIndex).html(parseInt(divCount) + 1);
            
		  

		    var src = getFolder("insert") + name;

		    $("#RE_"+pageIndex).append("<div id='REimg_d"+pageIndex+"_"+divCount+"' class='cPDiv_"+pageIndex+"' style='width:"+imgWidth+"px;height:"+imgHeight+"px;left:"+actualLeft+"px;top:"+actualTop+"px;z-index:"+curZIndex+";'><img src='"+src+"' style='width:100%;height:100%;'/></div>");
	   
		    if(!editPages.in_array(pageIndex))
                editPages.push(pageIndex);  
	        addImgArray.push("REimg_d"+pageIndex+"_"+divCount);
	        var canvasHeight = $('#page_'+pageIndex).outerHeight(true);
            var canvasWidth = $('#page_'+pageIndex).outerWidth(true);		
            $("#REimg_d" + pageIndex + "_" + divCount).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
            addImgEditId = "REimg_d"+pageIndex+"_"+divCount;
            AddResizeHandler(addImgEditId); 
            $("#"+addImgEditId).bind("click",function(e){showCurAddImage(this.id);});

            $("#draw_canvas").unbind("click");
            $("#"+addImgEditId+" img").css("cursor","move");
		    $(".showByDrag").removeClass("mouseStyleAnnotation");
		    if(preBindEvent == "select")
		    {
                $("#draw_canvas").bind("mousedown",selectDown);
	            $("#draw_canvas").bind("mousemove",selectMove);
	            $("#draw_canvas").bind("mouseup",selectUp);   
	            $(".showByDrag").addClass("mouseStyleSelect");
	            AddIconBorder(".re_func_arrowCur");
	        }
		    else if (preBindEvent == "move") {
		        bindPageDragEvent();
		        $(".showByDrag").addClass("mouseStyleMove");
		        AddIconBorder(".re_func_handCur");
		    } else { 
		        EditPDFText();
		    }
        }
        else
        {
            if(!addImgArray.in_array(e.target.id))
            {
                $(".eRightDown").css("visibility", "hidden");
                $(".eLeftDown").css("visibility", "hidden");
                $(".eRightUp").css("visibility", "hidden");
                $(".eLeftUp").css("visibility", "hidden");
                $(".eRight").css("visibility", "hidden");
                $(".eLeft").css("visibility", "hidden");
                $(".eUp").css("visibility", "hidden");
                $(".eDown").css("visibility", "hidden");
                addImgEditId = "";
            }
        }
     }
     //$("#draw_canvas").bind("click", addPageImg);
  
   var isDrag = false;
    //var startadd = false;
   // $("#draw_canvas").bind("click", function () {
   //     startadd = true;
   // });
  
   var addImageMouseDown = function (e)
   {
        if (!isAddImg ) {
            isAddImg = true;
            isDrag = true;
            startadd = false;
            parent_left = $("#wdp_Content").offset().left;
            parent_top = $("#wdp_Content").offset().top;
            nScrollLeft = $("#wdp_Content")[0].scrollLeft;
            nScrollTop = $("#wdp_Content")[0].scrollTop;
            e = e || window.event;
            x = e.pageX - parent_left + nScrollLeft;
            y = e.pageY - parent_top + nScrollTop;
            if (_viewerMode == "multi")
                drawPageIndex = PrePageCount(y);
            else
                drawPageIndex = parseInt(_curCorrectPageId);
            pageIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            viewer.GetViewerLeftTop();
            var actualLeft = (x - viewer.GetRefreshBlankLeft()) * viewer.ScaleX / zoomValue;
            var actualTop = (y - PreCountHeight(drawPageIndex) - viewer.Top) * viewer.ScaleY / zoomValue;

            var divCount = 0;
            var curZIndex = 1;
            var tempZIndex = $(".cTDiv_" + pageIndex).css("z-index");
            var tempImgCount = getTotalEditItemCount("img", pageIndex);// $("#RE_imgTotal_" + pageIndex).html()||"0";
            var tempShpCount = getTotalEditItemCount("canvas", pageIndex);//$("#RE_canvasTotal_" + pageIndex).html() || "0";
            if (tempZIndex == "auto") {
                if (typeof (tempImgCount) != "undefined") {
                    curZIndex += parseInt(tempImgCount);
                    divCount = parseInt(tempImgCount);
                    if (typeof (tempShpCount) != "undefined")
                        curZIndex += parseInt(tempShpCount);
                }
                else {
                    $("#RE_" + pageIndex).append("<div id='RE_imgTotal_" + pageIndex + "' style='display:none;'></div>");
                    if (typeof (tempShpCount) != "undefined")
                        curZIndex += parseInt(tempShpCount);
                }
            }
            else {
                curZIndex = parseInt(tempZIndex) + 1;
                if (typeof (tempImgCount) != "undefined")
                    divCount = parseInt(tempImgCount);
                else
                    $("#RE_" + pageIndex).append("<div id='RE_imgTotal_" + pageIndex + "' style='display:none;'></div>");
            }
            setTotalEditItemCount("img", pageIndex,parseInt(divCount) + 1); //  $("#RE_imgTotal_" + pageIndex).html(parseInt(divCount) + 1);
           

            var src = getFolder("insert") + name;

            $("#RE_" + pageIndex).append("<div id='REimg_d" + pageIndex + "_" + divCount + "' class='cPDiv_" + pageIndex + "' style='width:" + 1 + "px;height:" + 1 + "px;left:" + actualLeft + "px;top:" + actualTop + "px;z-index:" + curZIndex + ";'><img src='" + src + "' style='width:100%;height:100%;'/></div>");

            if (!editPages.in_array(pageIndex))
                editPages.push(pageIndex);
            addImgArray.push("REimg_d" + pageIndex + "_" + divCount);
            var canvasHeight = $('#page_' + pageIndex).outerHeight(true);
            var canvasWidth = $('#page_' + pageIndex).outerWidth(true);
            $("#REimg_d" + pageIndex + "_" + divCount).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
            addImgEditId = "REimg_d" + pageIndex + "_" + divCount;
     

            $("#draw_canvas").unbind("click");
    
        }
   };
   var addImageMouseUp = function (e) {
       if (isDrag) {
           AddResizeHandler(addImgEditId);
           $("#" + addImgEditId).bind("click", function (e) { showCurAddImage(this.id); });
           $("#" + addImgEditId + " img").css("cursor", "move");
           $(".showByDrag").removeClass("mouseStyleAnnotation");
           $("#draw_canvas").unbind("mousemove");
           $("#draw_canvas").unbind("mouseup");
           $("#draw_canvas").unbind("mousedown");
           if (preBindEvent == "select") {
               $("#draw_canvas").bind("mousedown", selectDown);
               $("#draw_canvas").bind("mousemove", selectMove);
               $("#draw_canvas").bind("mouseup", selectUp);
               $(".showByDrag").addClass("mouseStyleSelect");
               AddIconBorder(".re_func_arrowCur");
           }
           else if (preBindEvent == "move") {
               bindPageDragEvent();
               $(".showByDrag").addClass("mouseStyleMove");
               AddIconBorder(".re_func_handCur");
           } else {
               EditPDFText();
           }
           isDrag = false;
       }
   };
    var addImageMouseMove = function (e) {
        if (isDrag) {
            parent_left = $("#wdp_Content").offset().left;
            parent_top = $("#wdp_Content").offset().top;
            nScrollLeft = $("#wdp_Content")[0].scrollLeft;
            nScrollTop = $("#wdp_Content")[0].scrollTop;
            e = e || window.event;
            var gx = e.pageX - parent_left + nScrollLeft;
           var gy = e.pageY - parent_top + nScrollTop;
            if (_viewerMode == "multi")
                drawPageIndex = PrePageCount(gy);
            else
                drawPageIndex = parseInt(_curCorrectPageId);
            pageIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            viewer.GetViewerLeftTop();
            var actualLeft = (gx - viewer.GetRefreshBlankLeft()) * viewer.ScaleX / zoomValue;
            var actualTop = (gy - PreCountHeight(drawPageIndex) - viewer.Top) * viewer.ScaleY / zoomValue;
            var gwidth=Math.abs(gx-x)/zoomValue;
            var gheight = Math.abs(gy - y) / zoomValue;

            $("#" + addImgEditId).css("height", gheight + "px");
            $("#" + addImgEditId).css("width", gwidth + "px");
        }
    };
    $("#draw_canvas").bind("mousedown", addImageMouseDown);
    $("#draw_canvas").bind("mouseup", addImageMouseUp);
    $("#draw_canvas").bind("mousemove", addImageMouseMove);
}


     

function showCurAddImage(id)
{
    if(id == addImgEditId)
        return;
    var lastPart = id.substring(id.indexOf("p")+1);
    if(addImgEditId != "")
    {
        var tempLastPart = addImgEditId.substring(addImgEditId.indexOf("p")+1);
        $("#eRightDown_"+tempLastPart).css("visibility", "hidden");
        $("#eLeftDown_"+tempLastPart).css("visibility", "hidden");
        $("#eRightUp_"+tempLastPart).css("visibility", "hidden");
        $("#eLeftUp_"+tempLastPart).css("visibility", "hidden");
        $("#eRight_"+tempLastPart).css("visibility", "hidden");
        $("#eLeft_"+tempLastPart).css("visibility", "hidden");
        $("#eUp_"+tempLastPart).css("visibility", "hidden");
        $("#eDown_"+tempLastPart).css("visibility", "hidden");
    }
    $("#eRightDown_"+lastPart).css("visibility", "visible");
    $("#eLeftDown_"+lastPart).css("visibility", "visible");
    $("#eRightUp_"+lastPart).css("visibility", "visible");
    $("#eLeftUp_"+lastPart).css("visibility", "visible");
    $("#eRight_"+lastPart).css("visibility", "visible");
    $("#eLeft_"+lastPart).css("visibility", "visible");
    $("#eUp_"+lastPart).css("visibility", "visible");
    $("#eDown_"+lastPart).css("visibility", "visible");
    addImgEditId = id;
}

function removeAddPDFImage()
{
    isAddPDFImg = false;
    $("#draw_canvas").unbind("mousedown");
    if(isAddImg)
        $(".showByDrag").removeClass("defaultCursor"); 
    else
        $(".showByDrag").removeClass("mouseStyleAnnotation"); 
    for(var i=0;i<addImgArray.length;i++)
    {
        $("#" + addImgArray[i]).unbind("click");
        try {
            $("#" + addImgArray[i]).draggable("disable");
        } catch (e) {
        }
        if(addImgEditId != "")
        {
            $(".eRightDown").css("visibility", "hidden");
            $(".eLeftDown").css("visibility", "hidden");
            $(".eRightUp").css("visibility", "hidden");
            $(".eLeftUp").css("visibility", "hidden");
            $(".eRight").css("visibility", "hidden");
            $(".eLeft").css("visibility", "hidden");
            $(".eUp").css("visibility", "hidden");
            $(".eDown").css("visibility", "hidden");
            addImgEditId = "";
        }
   }
}

function ReplaceImage()
{
    showLoading();
	$.ajaxFileUpload
	(	
	    {			
            url:getCurrentAspx(),
			secureuri:false,
			fileElementId:'ImgToReplace',
			dataType: 'json',
			data:{add:"img",fid:_fid},
			success: function (data,status)
			{	
			    if(typeof(data.error) != 'undefined'){}
			    if(data.indexOf("error") == -1)
			    {
			        hideLoading();
			        var currentId = "";
                    if(addImgEditId != "")
                        currentId = addImgEditId;
                    else if(curEditImageId != "" && isEditPdfText)
                        currentId = curEditImageId;
			        
                    var info = data.split(";");
                    var name = info[0].trim();
                    //var svgWidth = $("#" + currentId + " svg").attr("width");
                    //var svgHeight = $("#" + currentId + " svg").attr("height");
                    //var width = $("#" + currentId + " svg g image").attr("width");
                    //var height = $("#" + currentId + " svg g image").attr("height");
                    var xlinkHref = getCacheFileFolder(_fid) + "insert/" + name;
                    $("#" + currentId).empty();
                    //if (typeof (svgWidth) == "undefined" || typeof (svgHeight) == "undefined" || typeof (width) == "undefined" || typeof (height) == "undefined") {
                        $("#" + currentId).append("<img width='100%' height='100%' src='" + xlinkHref + "'>");
                    //} else {
                    //    $("#" + currentId).append("<svg style='overflow:hidden;position:relative;top:0px;left:0px;' width='" + svgWidth + "' height='" + svgHeight + "' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><image width='" + width + "' height='" + height + "' xlink:href='" + xlinkHref + "'/></svg>");
                    //}
			    }
			    else
			    {
			        alert(data);
			    }
			},
			error: function (data,status, e)
			{
			    hideLoading();
				alert(e);
			}
		}
	)	
}

function removeAddPDFText()
{
    isAddPdftext = false;
    $("#rasteredge_wdp").addClass("select");
    if(addDivId != "" && $("#"+addDivId).html() == "" || $("#"+addDivId).html() == "<br>")
    {
        $("#"+addDivId).remove();
        addIDArray.remove(addDivId);
        var tempId = addDivId.substring(addDivId.indexOf("_")+2);
        var pageIndex = tempId.substring(0,tempId.indexOf("_"));
        var divCount = getTotalEditItemCount("txt", pageIndex) - 1;// parseInt($("#RE_txtTotal_"+pageIndex).html())-1;
        setTotalEditItemCount("txt", pageIndex,divCount);   // $("#RE_txtTotal_"+pageIndex).html(divCount);
    }
    for(var i=0;i<addIDArray.length;i++)
    {
        var target = "#"+addIDArray[i];
        $(target).unbind("mouseenter").unbind("mouseleave");
        $(target).unbind("mousedown");
        $(target).css("border","0px");
    }
    $("#re_func_addTxt").removeClass("iconBorder");
    $(".showByDrag").removeClass("mouseStyleSelect");
    $("#draw_canvas").unbind("mousedown");
}

function CutEvent()
{
    var currentId = "";
    if (addImgEditId != "" || curEditImageId != "") {
        if (addImgEditId != "")
            currentId = addImgEditId;
        else
            currentId = curEditImageId;
        window.getSelection().removeAllRanges();
        var range = document.createRange();
        range.selectNode(document.getElementById(currentId));
        window.getSelection().addRange(range);
    }
    else {
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(curSelectRange);
    }
        
    if(addImgEditId != "")
    {   
        document.execCommand("copy");
        $("#"+addImgEditId).remove();
        addImgEditId = "";
    }
    else
        document.execCommand("cut");
    RemoveBasicBoardEvent();
}

function CopyEvent()
{
    var currentId = "";
    if(addImgEditId != "" || curEditImageId != "")
    {
        if(addImgEditId != "")
            currentId = addImgEditId;
        else
            currentId = curEditImageId;
        window.getSelection().removeAllRanges();
        var range = document.createRange();
        range.selectNode(document.getElementById(currentId));
        window.getSelection().addRange(range);
        document.execCommand("copy");
    }
    else
    {

        var selection = window.getSelection();
        selection.removeAllRanges();
        if (curSelectRange == "")
            return;
        selection.addRange(curSelectRange);
        writeStyleToXml();
        xmlSelectRange = selection.getRangeAt(0);
        document.execCommand("copy");
        selection.removeAllRanges();
        selection.addRange(curSelectRange);
    }
}

function PastEvent()
{

    alert(i18n['content']['NotSupportPaste'] || "Browser does not support paste feature, use Ctrl + V shortcuts.");
}

function DeleteEvent()
{
    var currentId = "";
    if (addImgEditId != "" || curEditImageId != "") {
        if (addImgEditId != "")
            currentId = addImgEditId;
        else
            currentId = curEditImageId;
        window.getSelection().removeAllRanges();
        var range = document.createRange();
        range.selectNode(document.getElementById(currentId));
        window.getSelection().addRange(range);
    }
    else {
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(curSelectRange);
    }
    
    if(addImgEditId != "")
    {
        $("#"+addImgEditId).remove();
        addImgEditId = "";
    }
    else if (curEditImageId != "") {
        $("#" + curEditImageId).remove();
        curEditImageId = "";
    }
    else
        document.execCommand("delete");  
    RemoveBasicBoardEvent();
}

function SelectAllEvent()
{
    window.getSelection().removeAllRanges();
    var curTempId = "";
    if(curEditTextId != "")
    {
        curTempId = curEditTextId;
        if(!isBindTxtEditEvent)
            BindEditTextEvent();
    }
    else if(curEditImageId != "")
    {
        curTempId = curEditImageId;
        if(!isBindImgEditEvent)
            BindEditImageEvent();
    }
    if(browser == "Chrome")
    {
        alert(i18n['content']['NotSupportSelect']||"Browser does not support select All feature, use Ctrl + A shortcuts");
    }
    else
    {
        var range = document.createRange();
        range.selectNode(document.getElementById(curTempId));
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range);
        curSelectRange = window.getSelection().getRangeAt(0);  
    }
    if(!basicBoardEvent)
        BindBasicBoardEvent();
}

var basicBoardEvent = false;
function BindBasicBoardEvent()
{
    $("#re_func_cut").bind("click",CutEvent);
    TargetHover("#re_func_cut", true);
    $("#re_func_cut").addClass("editCutIconEn");
    $("#re_func_cut").removeClass("editCutIconDis");
    
    if(_pdfDocRestrictions.isCopy == "Allowed")
    {
        $("#re_func_copy").bind("click",CopyEvent);
        TargetHover("#re_func_copy",true);
        $("#re_func_copy").addClass("editCopyIconEn");
        $("#re_func_copy").removeClass("editCopyIconDis");
    }

    $("#re_func_delete").bind("click",DeleteEvent);
    TargetHover("#re_func_delete",true);
    $("#re_func_delete").addClass("editDeleteIconEn");
    $("#re_func_delete").removeClass("editDeleteIconEn");
    basicBoardEvent = true;
}

function RemoveBasicBoardEvent()
{
    $("#re_func_cut").unbind("click");
    TargetHover("#re_func_cut",false);
    $("#re_func_cut").addClass("editCutIconDis");
    $("#re_func_cut").removeClass("editCutIconEn");
    
    $("#re_func_copy").unbind("click");
    TargetHover("#re_func_copy",false);
    $("#re_func_copy").addClass("editCopyIconDis");
    $("#re_func_copy").removeClass("editCopyIconEn");
    
    $("#re_func_delete").unbind("click");
    TargetHover("#re_func_delete",false);
    $("#re_func_delete").addClass("editDeleteIconDis");
    $("#re_func_delete").removeClass("editDeleteIconEn");
    
    basicBoardEvent = false;
}

function CreatePagesToolbar(btnId)
{
    var pageToolbarStr = "<div id='_page' style='width:100%'></div>";
    $(btnId).append(pageToolbarStr);
    
    var createManiTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var delPages = new ToolbarItem({ CssId: "re_func_delPages", Title: "Delete Pages", Event: '', CssClass: "iconHover" });
    createManiTab += "<tr><td><div class='firstCellMargin'>" + delPages.CreateHtml() + "</div></td>";
    var reOrdPages = new ToolbarItem({ CssId: "re_func_reOrdPages", Title: "Re-order Pages", Event: '', CssClass: "iconHover" });
    createManiTab += "<td><div class='cellMargin'>" + reOrdPages.CreateHtml() + "</div></td>";
    var extractPages = new ToolbarItem({ CssId: "re_func_extPages", Title: "Extract Pages into One", Event: '', CssClass: "iconHover" });
    createManiTab += "<td><div class='cellMargin'>" + extractPages.CreateHtml() + "</div></td>";
    var replacePages = "<div id='re_func_replPages' class='iconHover' onclick='FileToReplace.click()' title='Replace pages'><input type='file' id='FileToReplace' name='FileToReplace' accept='.pdf' style='opacity:0;right:0px;display:none;position:absolute;' onchange='UploadReplaceFile();'/></div>";
    createManiTab += "<td><div class='cellMargin'>" + replacePages + "</div></td>";
    var splitDocs = new ToolbarItem({ CssId: "re_func_split", Title: "Split document into multiple files", Event: '', CssClass: "iconHover" });
    createManiTab += "<td><div class='lastCellMargin'>" + splitDocs.CreateHtml() + "</div></td></tr>";
    createManiTab += "<tr><td colspan='5'><div class='cellTextFix'>Manipulate Pages</div></td></tr></table>";
    $("#_page").append(createManiTab);
    
    $("#_page").append("<div class='splitCellMargin' style='margin-top:7px;width:1px;height:35px;border-right:1px solid #5F5F5F;float:left;'></div>");
    
    var orgPagesTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var insertBk = new ToolbarItem({ CssId: "re_func_insertBk", Title: "Insert Blank Page", Event: '', CssClass: "iconHover" });
    orgPagesTab += "<tr><td><div class='firstCellMargin'>" + insertBk.CreateHtml() + "</div></td>";
    var insertFF = "<div id='re_func_insertFF' class='iconHover' title='Insert From File' onclick='FileToInsert.click()'><input type='file' id='FileToInsert' name='FileToInsert' accept='.pdf' style='opacity:0;right:0px;display:none;position:absolute;' onchange='InsertFFPage()'/></div>";
    orgPagesTab += "<td><div class='cellMargin'>" + insertFF + "</div></td>";
    var combines = new ToolbarItem({ CssId: "re_func_combine", Title: "Combine multiple files into one PDF file", Event: 'ShowComBox();', CssClass: "iconHover" });
    orgPagesTab += "<td><div class='lastCellMargin'>" + combines.CreateHtml() + "</div></td></tr>";
    orgPagesTab += "<tr><td colspan='3'><div class='cellTextFix'>Insert Pages</div></td></tr></table>";
    $("#_page").append(orgPagesTab);
    
    $("#_page").append("<div class='splitCellMargin' style='margin-top:7px;width:1px;height:35px;border-right:1px solid #5F5F5F;float:left;'></div>");
    
   //lock
    //var pageDesignTab = "<table style='width:130px;height:100%;float:left;'>";
    //var headFoot = new ToolbarItem({ CssId: "re_func_headFoot", Title: "Edit header and footer", Event: '', CssClass: "iconHover" });
    //pageDesignTab += "<tr><td><div class='firstCellMargin'>" + headFoot.CreateHtml() + "</div></td>";
    //var background = new ToolbarItem({ CssId: "re_func_background", Title: "Edit background", Event: '', CssClass: "iconHover" });
    //pageDesignTab += "<td><div class='cellMargin'>" + background.CreateHtml() + "</div></td>";
    //var waterMark = new ToolbarItem({ CssId: "re_func_watermark", Title: "Edit watermark", Event: '', CssClass: "iconHover" });
    //pageDesignTab += "<td><div class='lastCellMargin'>" + waterMark.CreateHtml() + "</div></td></tr>";
    //pageDesignTab += "<tr><td colspan='3'><div class='cellTextFix'>Edit Page Design</div></td></tr></table>";
   // $("#_page").append(pageDesignTab);
    
    //$("#_page").append("<div class='splitCellMargin' style='margin-top:7px;width:1px;height:35px;border-right:1px solid #5F5F5F;float:left;'></div>");
    tabMenuArray.push("_page");
  
}

function CreateActionsPanel()
{
                                             
    var str = "<div id='_actionsPanel' class='popboxbase' style='box-shadow:2px 2px 2px #666;z-index:600;'></div>";
    $("body").append(str);
    $("#_actionsPanel").css({
        width:"150px",
        height:"60px",
        display:"block"
    });
    var table = "<table style='color:#444444;width:100%;height:100%;cursor:pointer;'>";
    table += "<tr><td id='action_add' class='_action'><div id='action_addTitle'></div></td></tr>";
    table += "<tr><td id='action_update' class='_action'><div>Update...</div></td></tr>";
    table += "<tr><td id='action_remove' class='_action'><div>Remove...</div></td></tr></table>";
    $("#_actionsPanel").append(table);
    $("#action_add").bind("click",AddPageDesignAct);
    $("#action_update").bind("click",UpdatePageDesignAct);
    $("#action_remove").bind("click",RemovePageDesignAct);
    $("#_actionsPanel").hide();
}

var actionsPanelShow = false;
function ShowActionsPanel(e,itemId)
{
    if(actionsPanelShow)
    {
        $("#_actionsPanel").hide();
        actionsPanelShow = false;
    }
    else
    {
        e = e||window.event;
        var left = e.pageX;
        var top = e.pageY;
        $("#_actionsPanel").show();
        if(itemId == "re_func_headFoot")
            $("#action_addTitle").html("Add Header & Footer...");
        else if(itemId == "re_func_background")
            $("#action_addTitle").html("Add Background...");
        else if(itemId == "re_func_watermark")
            $("#action_addTitle").html("Add Watermark...");
        $("#_actionsPanel").css({
            left:(left+10)+"px",
            top:(top+10)+"px"
        })
        actionsPanelShow = true;
    }
}

function AddPageDesignAct()
{
    $("#_actionsPanel").hide();
    actionsPanelShow = false;
    var title = $("#action_addTitle").html();
    if(title.indexOf("Header") != -1)
    {
        if(_pdfPageDesign.HeadAndFoot.length != 0)
            ShowConfirmActPanel("head");
        else
        {
            pageDesignAct = "New";
            ShowAddHeadFootPopBox();
        }
    }
    else if(title.indexOf("Background") != -1)
    {
        if(_pdfPageDesign.Background.length != 0)
            ShowConfirmActPanel("background");
        else
        {
            pageDesignAct = "New";
            ShowAddBackgroundPopBox();
        }
    }
    else if(title.indexOf("Watermark") != -1)
    {
        if(_pdfPageDesign.Watermark.length != 0)
            ShowConfirmActPanel("watermark");
        else
        {
            pageDesignAct = "New";
            ShowAddWatermarkPopBox();
        }
    }
}

var pageDesignAct = "";
function UpdatePageDesignAct() //Replace
{
    pageDesignAct = "Update";
    $("#_actionsPanel").hide();
    actionsPanelShow = false;
    var title = $("#action_addTitle").html();
    if(title.indexOf("Header") != -1)
    {
        ShowAddHeadFootPopBox();
    }
    else if(title.indexOf("Background") != -1)
    {
        ShowAddBackgroundPopBox();
    }
    else if(title.indexOf("Watermark") != -1)
    {
        ShowAddWatermarkPopBox();
    }
}

function RemovePageDesignAct()
{
    $("#_actionsPanel").hide();
    actionsPanelShow = false;
    var title = $("#action_addTitle").html();
    if(title.indexOf("Header") != -1)
    {
        if(_pdfPageDesign.HeadAndFoot.length == 0)
            jAlert(i18n['content']['NoFooterHeader'] || "RasterEdge Application cannot find any headers or footers in this file.", i18n['title']['RasterEdge'] || "RasterEdge Application");
        else
        {
            jConfirm(i18n['content']['RemoveHeaderAndFooter'] || "Are you sure you want to permanently remove the header and footer information?", i18n['title']['RasterEdge'] || "RasterEdge Application", function (r) {
                if(r)
                {
                    $(".HF").remove();
                    _pdfPageDesign.HeadAndFoot = new Array();
                    designHFContent = new Array();
                }
            });
        }            
    }
    else if(title.indexOf("Background") != -1)
    {
        if(_pdfPageDesign.Background.length == 0)
            jAlert(i18n['content']['NoBackground'] || "RasterEdge Application cannot find a background in this file.", i18n['title']['RasterEdge'] || "RasterEdge Application");
        else
        {
            jConfirm(i18n['content']['RemoveHeaderAndFooter'] || "Are you sure you want to permanently remove the background?", i18n['title']['RasterEdge'] || "RasterEdge Application", function (r) {
                if(r)
                {
                    $(".BG").remove();
                    _pdfPageDesign.Background = new Array();
                }
            });
        }
    }
    else if(title.indexOf("Watermark") != -1)
    {
        if(_pdfPageDesign.Watermark.length == 0)
            jAlert(i18n['content']['NoWatermark'] || "RasterEdge Application cannot find a watermark in this file.", i18n['title']['RasterEdge'] || "RasterEdge Application");
        else
        {
            jConfirm(i18n['content']['RemoveWatermark'] || "Are you sure you want to permanently remove the watermark?", i18n['title']['RasterEdge'] || "RasterEdge Application", function (r) {
                if(r)
                {
                    $(".WM").remove();
                    _pdfPageDesign.Watermark = new Array();
                    designWMContent = new Array();
                }
            });
        }
    }
}

function CreateSaveSettings()
{
    var str = "<div id='_saveSettingsPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_saveSettingsPopbox").css({
        width:"350px",
        height:"160px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Save Settings</div><div  class='poptitleimage poptitlestyle'  onclick='hideSaveSetting();'></div></div>";
    $("#_saveSettingsPopbox").append(title);
    
    var popContent = "<div  class='popinner' style='width:300px;height:90px;'>";
    popContent += "<div>Save current settings as:<span id='parentIdSpan' style='display:none;'></span></div><br/>";
    popContent += "<input id='saveName' style='width:260px;height:25px;' type='text'/>";
    popContent += "<button style='margin-top:10px;margin-right;:17px;width:80px;float:right;' onclick='hideSaveSetting();'>Cancel</button>";
    popContent += "<button id='saveSettingOk' style='margin-top:10px;margin-right:30px;width:80px;float:right;'>Ok</button></div>";
    $("#_saveSettingsPopbox").append(popContent);
    
    $("#_saveSettingsPopbox").hide();
}

var bindSaveSettingEvent = false;
$(function(){
    $("#saveName").keyup(function(event){
        var tempName = $("#saveName").val();
        if(tempName != "" && tempName != null)
        {
            if(!bindSaveSettingEvent)
            {
                $("#saveSettingOk").css("cursor","pointer");
                $("#saveSettingOk").css("color","#000000");
                $("#saveSettingOk").bind("click",SureToSaveSetting);
                bindSaveSettingEvent = true;
            }
        }  
        else
        {
            if(bindSaveSettingEvent)
            {
                $("#saveSettingOk").css("cursor","text");
                $("#saveSettingOk").css("color","#727272");
                $("#saveSettingOk").unbind("click");
                bindSaveSettingEvent = false;
            }
        } 
    });
})

function SureToSaveSetting()
{ 
    hideSaveSetting();
    var parentId = $("#parentIdSpan").html();
    var tempName = $("#saveName").val();
    if(parentId == "HFSave")
    {
        var index = savePDFHeadFoot.length;
        for(var i=0;i<savePDFHeadFoot.length;i++)
        {
            if(savePDFHeadFoot[i].Name == tempName)
            {
                index = i;
                break;
            }
        }
        var saveHFItem = SaveHeadFoot();
        if(index == savePDFHeadFoot.length)
        {
            var saveHFSetting = new PDFSaveSetting();
            saveHFSetting.Name = tempName;
            saveHFSetting.Settings = saveHFItem;
            
            savePDFHeadFoot.push(saveHFSetting);
            $("#HFSaveSettings").append($('<option></option>').html(saveHFSetting.Name));
            $("#HFSaveSettings").val(saveHFSetting.Name).attr("selected",true);
            $("#HFRemove").attr("disabled",false);
            HFFlag = true;
        }
        else
        {
            jConfirm("This setting name already exists.Do you want to replace the old setting?","RasterEdge Application",function(r){
                if(r)
                {
                    savePDFHeadFoot[index].Settings = saveHFItem;
                    $("#HFSaveSettings").val(tempName).attr("selected",true);
                    $("#HFRemove").attr("disabled",false);
                    HFFlag = true;
                }
            });
        }
    }
    else if(parentId == "BGSave")
    {
        var index = savePDFBackground.length;
        for(var i=0;i<savePDFBackground.length;i++)
        {
            if(savePDFBackground[i].Name == tempName)
            {
                index = i;
                break;
            }
        }
        var saveBGItem = SaveBackground();
        if(index == savePDFBackground.length)
        {
            var saveBGSetting = new PDFSaveSetting();
            saveBGSetting.Name = tempName;
            saveBGSetting.Settings = saveBGItem;
            
            savePDFBackground.push(saveBGSetting);
            $("#BGSaveSettings").append($('<option></option>').html(saveBGSetting.Name));
            $("#BGSaveSettings").val(saveBGSetting.Name).attr("selected",true);
            $("#BGRemove").attr("disabled",false);
            BGFlag = true;
        }
        else
        {
            jConfirm("This setting name already exists.Do you want to replace the old setting?","RasterEdge Application",function(r){
                if(r)
                {
                    savePDFBackground[index].Settings = saveBGItem;
                    $("#BGSaveSettings").val(tempName).attr("selected",true);
                    $("#BGRemove").attr("disabled",false);
                    BGFlag = true;
                }
            });
        }
    }
    else if(parentId == "WMSave")
    {
        var index = savePDFWatermark.length;
        for(var i=0;i<savePDFWatermark.length;i++)
        {
            if(savePDFWatermark[i].Name == tempName)
            {
                index = i;
                break;
            }
        }
        var saveWMItem = SaveWatermark();
        if(index == savePDFWatermark.length)
        {
            var saveWMSetting = new PDFSaveSetting();
            saveWMSetting.Name = tempName;
            saveWMSetting.Settings = saveWMItem;
            
            savePDFWatermark.push(saveWMSetting);
            $("#WMSaveSettings").append($('<option></option>').html(saveWMSetting.Name));
            $("#WMSaveSettings").val(saveWMSetting.Name).attr("selected",true);
            $("#WMRemove").attr("disabled",false);
            WMFlag = true;
        }
        else
        {
            jConfirm("This setting name already exists.Do you want to replace the old setting?","RasterEdge Application",function(r){
                if(r)
                {
                    savePDFWatermark[index].Settings = saveWMItem;
                    $("#WMSaveSettings").val(tempName).attr("selected",true);
                    $("#WMRemove").attr("disabled",false);
                    WMFlag = true;
                }
            });
        }
    }
}

var saveSettingShow = false;
function showSaveSetting(itemId)
{
    $("#_saveSettingsPopbox").show();
    saveSettingShow = true;
    SignPanelPosition("#_saveSettingsPopbox");
    $("#parentIdSpan").html(itemId);
    $("#saveName").val("");
    $("#saveSettingOk").css("cursor","text");
    $("#saveSettingOk").css("color","#727272");
    $("#saveSettingOk").unbind("click");
    bindSaveSettingEvent = false;
}

function hideSaveSetting()
{
    $("#_saveSettingsPopbox").hide();
    saveSettingShow = false;
}

var HFFlag = false;
function CreateAddHeadFootPopBox()
{
    var tempWidth = 800;
    var tempHeight = 600;
    if(browserWidth < tempWidth || browserHeight < tempHeight)
    {
        tempWidth = browserWidth * 0.9;
        tempHeight = browserHeight * 0.9;
    }
    var str = "<div id='_headFootPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_headFootPopbox").css({
        width:tempWidth + "px",
        height:tempHeight + "px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Add Header and Footer</div><div   class='poptitleimage poptitlestyle'  onclick='hideAddHeadFootPopBox();'></div></div>";
    $("#_headFootPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:5px;padding:17px;padding- top:7px;width:"+(tempWidth-45)+"px;height:"+(tempHeight-65)+"px;background:#F0F0F0;'>";
    popContent += "<table style='width:480px;height:38px;'>";
    popContent += "<tr><td>Saved Settings:</td><td><select id='HFSaveSettings' style='width:120px;'></select></td><td><button style='width:80px;' id='HFRemove' onclick='RemoveSetting(this)'>Delete</button></td><td><button style='width:120px;' id='HFSave' onclick='SaveSetting(this)'>Save Settings...</button></td></tr></table>";
    popContent += "<fieldset style='width:500px;height:50px;'><legend>Font</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td>Name:</td><td><select id='HFFont' class='HFSelect' style='width:150px;'></select></td><td>Size:</td><td><select id='HFSize' class='HFSelect' style='width:80px;'></select></td><td><div id='HFUDiv' style='border:2px solid #F0F0F0;width:17px;height:17px;'><div style='width:15px;height:15px;border:1px solid #b2b0a7;text-align:center;cursor:pointer' id='HFStyle' onclick='HFUnderlineChange();'>U</div></div></td><td><div id='HFColor' style='width:20px;height:12px;' onclick='ShowTableColor(this,false);'></div></td></tr></table></fieldset>";
    popContent += "<fieldset style='margin-top:10px;width:500px;height:50px;'><legend>Margin(Inches)</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td>Top:</td><td><input id='topMargin' class='HFSpinner' style='width:50px;border:1px solid #727272;'/></td>";
    popContent += "<td>Bttom:</td><td><input id='botMargin' class='HFSpinner' style='width:50px;border:1px solid #727272;'/></td>";
    popContent += "<td>Left:</td><td><input id='leftMargin'  class='HFSpinner' style='width:50px;border:1px solid #727272;'/></td>";
    popContent += "<td>Right:</td><td><input id='rightMargin' class='HFSpinner' style='width:50px;border:1px solid #727272;'/></td><td></td></tr></table></fieldset>";
    popContent += "<table style='width:750px;height:140px;'>";
    popContent += "<tr><td>Left Header Text</td><td>Center Header Text</td><td>Right Header Text</td></tr>";
    popContent += "<tr><td><textArea id='leftHTxt' class='HFText'></textArea></td><td><textArea id='centerHTxt' class='HFText'></textArea></td><td><textArea id='rightHTxt' class='HFText'></textArea></td></tr>";
    popContent += "<tr><td>Left Footer Text</td><td>Center Footer Text</td><td>Right Footer Text</td></tr>";
    popContent += "<tr><td><textArea id='leftFTxt' class='HFText'></textArea></td><td><textArea id='centerFTxt' class='HFText'></textArea></td><td><textArea id='rightFTxt' class='HFText'></textArea></td></tr></table>";
    popContent += "<table style='width:750px;height:60px;'>";
    popContent += "<tr><td><button style='margin-left:100px;' onclick='InsertPageNumber();'>Insert Page Number</button></td><td><button style='margin-left:100px;' onclick='InsertDate();'>Insert Date</button></td></tr></table>";
    popContent += "<fieldset style='float:left;width:320px;height:100px;'><legend>Page Range Options</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td><input type='radio' id='HFPageAll' name='HFRange' value='HFAll' checked onchange='PageRangeChange(this.id);'><label for='HFPageAll'>All Pages</label></td><td><input type='radio' id='HFPageFrom' name='HFRange' value='HFPart' onchange='PageRangeChange(this.id);'><label for='HFPageFrom'>Pages from</label></td>";
    popContent += "<td><input id='HFFrom' class='HFSpinner' style='border:1px solid #727272;width:30px;'/></td><td>to:</td><td><input id='HFTo' class='HFSpinner' style='border:1px solid #727272;width:30px;'/></td></tr>";
    popContent += "<tr><td style='padding-left:20px;'>Subset:</td><td colspan='3'><select id='HFSubset' class='HFSelect'></select></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='float:left;margin-left:30px;width:320px;height:100px;'><legend>Page Number and Date Format</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td>Date Format:</td><td><select style='width:100px;' class='HFSelect' id='HFDateF'></select></td></tr>";
    popContent += "<tr><td>Page Number Format:</td><td><select style='width:100px;' class='HFSelect' id='HFPageF' ></select></td></tr>";
    popContent += "<tr><td>Start Page Number:</td><td><input id='HFStartId' class='HFSpinner' style='width:50px;border:1px solid #727272;'/></td></tr></table></fieldset>";
    
    popContent += "<button style='margin-top:10px;margin-right;:17px;width:80px;float:right;' onclick='hideAddHeadFootPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:10px;margin-right:30px;width:80px;float:right;' onclick='AddHeadFoot();'>Ok</button>";
    popContent += "</div>";
    $("#_headFootPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#addHeadFoot").append($('<option></option>').html("None specified"));
    var HFSize = new Array("8","9","10","11","12","14","16","18","20","22","24","26","28","36","48","72");
    for(var i=0;i<HFSize.length;i++)
        $("#HFSize").append($('<option></option>').html(HFSize[i]));
    var spinnerArray = new Array("topMargin","botMargin","leftMargin","rightMargin");
    for(var i=0;i<spinnerArray.length;i++)
    {
        $("#"+spinnerArray[i]).spinner();
        $("#"+spinnerArray[i]).spinner("option", "min", 0 );
        $("#"+spinnerArray[i]).spinner("option", "step", 0.1);
    }
    $("#HFFrom").spinner();
    $("#HFFrom").spinner("option", "min", 1 );
    $("#HFFrom").spinner("option", "step", 1);
    $("#HFTo").spinner();
    $("#HFTo").spinner("option", "min", 1 );
    $("#HFTo").spinner("option", "step", 1);
    var HFSubsetArray = new Array("All pages in range","Even pages only","Odd pages only");
    for(var i=0;i<HFSubsetArray.length;i++)
        $("#HFSubset").append($('<option></option>').html(HFSubsetArray[i]));
    var dateFormat = new Array("m/d","m/d/yy","m/d/yyyy","mm/dd/yy","mm/dd/yyyy","d/m/yy","d/m/yyyy","dd/mm/yy","dd/mm/yyyy","mm/yy");
    for(var i=0;i<dateFormat.length;i++)
        $("#HFDateF").append($('<option></option>').html(dateFormat[i]));
    var pageFormat = new Array("1","1 of n","1/n","Page 1","Page 1 of n");
    for(var i=0;i<pageFormat.length;i++)
        $("#HFPageF").append($('<option></option>').html(pageFormat[i]));
    $("#HFStartId").spinner();
    $("#HFStartId").spinner("option", "min", 1 );
    $("#HFStartId").spinner("option", "step", 1);
    
    $("#HFSaveSettings").bind("change",function(){
        var selectIndex = parseInt($(this).get(0).selectedIndex);
        HFFlag = false;
        SetHeadFoot(savePDFHeadFoot[selectIndex].Settings);
        if(selectIndex == 0)
            $("#HFRemove").attr("disabled","disabled");
        else
        {
            $("#HFRemove").attr("disabled",false);
            HFFlag = true;
        }
    });
    $(".HFSelect").bind("change",function(){SwitchHFSettings();});
    $(".HFSpinner").spinner({spin:function(event,ui){SwitchHFSettings();}});
    $(".HFText").bind("keyup",function(){SwitchHFSettings();});
    
    var initHeadFoot = new PDFHeadFoot();
    var initSaveSetting = new PDFSaveSetting();
    initSaveSetting.Name = "None specified";
    initSaveSetting.Settings = initHeadFoot;
    savePDFHeadFoot.push(initSaveSetting);
    
    for(var i=0;i<savePDFHeadFoot.length;i++)
        $("#HFSaveSettings").append($('<option></option>').html(savePDFHeadFoot[i].Name));
    var HFTextArray = new Array("leftHTxt","centerHTxt","rightHTxt","leftFTxt","centerFTxt","rightFTxt");
    for(var i=0;i<HFTextArray.length;i++)
    {
        var obj = document.getElementById(HFTextArray[i]);
        obj.onfocus = function()
        {
            curFocusHFTxt = this.id;
        }
    }
    $("#_headFootPopbox").hide();
}

function HFUnderlineChange()
{
    var isUnderline = $("#HFStyle").val();
    if(isUnderline == "false")
    {
        $("#HFStyle").val("true");
        $("#HFUDiv").css("border-color","#b2b0a7");
    }
    else
    {
        $("#HFStyle").val("false");
        $("#HFUDiv").css("border-color","#F0F0F0");
    }
}

function SwitchHFSettings()
{
    if(HFFlag)
    {
        var value = $("#HFSaveSettings").val();
        if(value != "None specified")
            $("#HFSaveSettings").val("None specified").attr("selected",true);
        HFFlag = false;
    }
}

var curFocusHFTxt = "leftHTxt";
var addHFItem = "";
var addHFType = new Array("leftHead","centerHead","rightHead","leftFoot","centerFoot","rightFoot");
function AddHeadFoot()
{
    if(saveSettingShow)
        return;
    var result = CheckHeadFootData();
    if(result)
    {
        hideAddHeadFootPopBox();
        addHFItem = SaveHeadFoot();
        var addHFIndexs = GetPDFDesignIndexArray(addHFItem.PageRange,addHFItem.Subset);
        if(addHFIndexs.length == 0)
            return;
        addHFItem.PageIndexs = addHFIndexs;
        if(pageDesignAct == "New")
        {   
            drawHeadFoot(addHFItem,_pdfPageDesign.HeadAndFoot.length);
            _pdfPageDesign.HeadAndFoot.push(addHFItem);
        }
        else
        {
            $(".HF").remove();
            var headAndFoots = new Array();
            for(var i=0;i<_pdfPageDesign.HeadAndFoot.length;i++)
            {
                var HFItem = _pdfPageDesign.HeadAndFoot[i];
                var segmentItems = PageSegment(HFItem.PageRange,HFItem.Subset,addHFItem.PageRange,addHFItem.Subset);
                for(var j=0;j<segmentItems.length;j++)
                {
                    var rangeObject = segmentItems[j];
                    var indexs = GetPDFDesignIndexArray(rangeObject.PageRange,rangeObject.Subset);
                    if(indexs.length == 0)
                        continue;
                    else
                    {
                        var newItem = CloneHFItem(HFItem);
                        newItem.PageRange = rangeObject.PageRange;
                        newItem.Subset = rangeObject.Subset;
                        newItem.PageIndexs = indexs;
                        headAndFoots.push(newItem);
                    }
                }
            }
            
            _pdfPageDesign.HeadAndFoot = headAndFoots;
            designHFContent = new Array();
            for(var i=0;i<_pdfPageDesign.HeadAndFoot.length;i++)
            {
                var HFItem = _pdfPageDesign.HeadAndFoot[i];
                drawHeadFoot(HFItem,i);       
            }
  
            drawHeadFoot(addHFItem,_pdfPageDesign.HeadAndFoot.length);
            _pdfPageDesign.HeadAndFoot.push(addHFItem);
        }
    }
}

function CloneHFItem(HFItem)
{
    var newItem = new PDFHeadFoot();
    newItem.FontName = HFItem.FontName;
    newItem.FontSize = HFItem.FontSize;
    newItem.IsUnderline = HFItem.IsUnderline;
    newItem.FontColor = HFItem.FontColor;
    newItem.MarginTop = HFItem.MarginTop;
    newItem.MarginBottom = HFItem.MarginBottom;
    newItem.MarginLeft = HFItem.MarginLeft;
    newItem.MarginRight = HFItem.MarginRight;
    newItem.LeftHText = HFItem.LeftHText;
    newItem.CenterHText = HFItem.CenterHText;
    newItem.RightHText = HFItem.RightHText;
    newItem.LeftFText = HFItem.LeftFText;
    newItem.CenterFText = HFItem.CenterFText;
    newItem.RightFText = HFItem.RightFText;
    newItem.PageDateFormat = HFItem.PageDateFormat;
    return newItem;
}

function PageSegment(pageRange,subset,addPageRange,addSubset)
{
    var segmentItems = new Array();
    var startIndex = 0;
    var endIndex = 0;
    var addStartIndex = 0;
    var addEndIndex = 0;
    var newPageRange = "";
    var newSubset = "";
    
    if(pageRange.indexOf("_") != -1)
    {
        if(pageRange == "1_"+_totalPageCount)
            pageRange == "All pages";
        else
        {
            var posi = pageRange.indexOf("_");
            startIndex = parseInt(pageRange.substring(0,posi));
            endIndex = parseInt(pageRange.substring(posi+1));
        }
    }
    if(addPageRange.indexOf("_") != -1)
    {
       if(addPageRange == "1_"+_totalPageCount)
            addPageRange == "All pages";
        else
        {
            var posi = addPageRange.indexOf("_");
            addStartIndex = parseInt(addPageRange.substring(0,posi));
            addEndIndex = parseInt(addPageRange.substring(posi+1));
        } 
    }

    //case 1:
    if(subset == "Even pages only" && addSubset == "Odd pages only" || subset == "Odd pages only" && addSubset == "Even pages only")
        segmentItems.push(new DesignPageRange({PageRange:pageRange,Subset:subset}));
    //case 2:
    else if(pageRange == "All Pages")
    {
        if(subset == "All pages in range")
        {
            if(addPageRange == "All Pages")
            {
                if(addSubset == "Even pages only")
                    newSubset = "Odd pages only";
                else if(addSubset == "Odd pages only")
                    newSubset = "Even pages only";
                segmentItems.push(new DesignPageRange({PageRange:pageRange,Subset:newSubset}));
            }
            else
            {
                if(addStartIndex == 1 || addEndIndex == _totalPageCount)
                {
                    if(addStartIndex == 1)
                        newPageRange = (addEndIndex + 1) + "_" + _totalPageCount;
                    else 
                        newPageRange = "1_" + (addStartIndex - 1);
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                }  
                else
                {
                    newPageRange = "1_" + (addStartIndex - 1);
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    newPageRange = (addEndIndex + 1) + "_" + _totalPageCount;
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                }
                if(addSubset == "Even pages only")
                {
                    newPageRange = addPageRange;
                    newSubset = "Odd pages only";
                } 
                else if(addSubset == "Odd pages only")
                {
                    newPageRange = addPageRange;
                    newSubset = "Even pages only";
                }
                segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:newSubset}));
            }
        }
        else
        {
            if(addPageRange != "All Pages")
            {
                if(addSubset == "All pages in range" || (subset == addSubset))
                {
                    if(addStartIndex == 1 || addEndIndex == _totalPageCount)
                    {
                        if(addStartIndex == 1)
                            newPageRange = (addEndIndex + 1) + "_" + _totalPageCount;
                        else 
                            newPageRange = "1_" + (addStartIndex - 1);
                        segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    }  
                    else
                    {
                        newPageRange = "1_" + (addStartIndex - 1);
                        segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                        newPageRange = (addEndIndex + 1) + "_" + _totalPageCount;
                        segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    }
                }
            }
        }
    }
    //case 3
    else
    {
        if(subset == "All pages in range")
        {
            if(addPageRange == "All Pages")
            {
                 if(addSubset == "Even pages only")
                    newSubset = "Odd pages only";
                 else if(addSubset == "Odd pages only")
                    newSubset = "Even pages only";
                 segmentItems.push(new DesignPageRange({PageRange:pageRange,Subset:newSubset}));
            }
            else
            {
                if(addStartIndex <= startIndex && addEndIndex >= endIndex){}
                else if(addStartIndex <= startIndex)
                {
                    newPageRange = (addEndIndex + 1) + "_" + endIndex;
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    newPageRange = startIndex + "_" + addEndIndex;
                }
                else if(addEndIndex >= endIndex)
                {
                    newPageRange = startIndex + "_" + (addStartIndex - 1);
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    newPageRange = addStartIndex + "_" + endIndex;
                }
                else if(addStartIndex > startIndex && addEndIndex < endIndex)
                {
                    newPageRange = startIndex + "_" + (addStartIndex - 1);
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    newPageRange = (addEndIndex + 1) + "_" + endIndex;
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    newPageRange = addPageRange;
                }
                if(addSubset == "Even pages only")
                    newSubset = "Odd pages only";
                else if(addSubset == "Odd pages only")
                    newSubset = "Even pages only";
                segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:newSubset}));
            }
        }
        else
        {
            if(addPageRange != "All Pages" && addSubset == "All pages in range")
            {
                if(addStartIndex <= startIndex && addEndIndex >= endIndex){}
                else if(addStartIndex <= startIndex)
                {
                    newPageRange = (addEndIndex + 1) + "_" + endIndex;
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                }
                else if(addEndIndex >= endIndex)
                {
                    newPageRange = startIndex + "_" + (addStartIndex - 1);
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                }
                else if(addStartIndex > startIndex && addEndIndex < endIndex)
                {
                    newPageRange = startIndex + "_" + (addStartIndex - 1);
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                    newPageRange = (addEndIndex + 1) + "_" + endIndex;
                    segmentItems.push(new DesignPageRange({PageRange:newPageRange,Subset:subset}));
                }
            }
        }
    }
    return segmentItems;
}

function drawHeadFoot(HFItem,numFlag)
{
    var addHFIndexs = HFItem.PageIndexs;
    var textStyle = "";
    if(HFItem.IsUnderline)
        textStyle = "text-decoration:underline;";
        
    var TextObject = new SourceFromText({FontName:HFItem.FontName,FontSize:HFItem.FontSize,IsUnderline:textStyle,FontColor:HFItem.FontColor});
    var startNum = parseInt(HFItem.PageDateFormat.StartPageNum);
    var marginTop = HFItem.MarginTop * 72;
    var marginLeft = HFItem.MarginLeft * 72;
    var marginBottom = HFItem.MarginBottom * 72;
    var marginRight = HFItem.MarginRight * 72;
    for(var i=0;i<addHFIndexs.length;i++)
    {
        var pageIndex = addHFIndexs[i];
        var imgLoad = "";
        if(!_showDocSrc.in_array(pageIndex))
        {
            imgLoad = $("#pageImg"+pageIndex).clone();
            $("#pageImg"+pageIndex).remove();
            $("#page_"+pageIndex).empty();
        }
        $("#page_"+pageIndex).append("<div class='HF' id='HF_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:100%;height:100%;'></div>");
        if(HFItem.FontName.indexOf("WebFont:") != -1)
        {
            var defiName = HFItem.FontName.substring(8);
            var name = defiName.substring(0,defiName.lastIndexOf("."));
            var defiNamePath = getFolder(design)  + defiName;
            $("#HF_"+pageIndex+"_"+numFlag).append("<style>@font-face{font-family:"+name+";src:url('"+defiNamePath+"') format('woff');}</style>");
            TextObject.FontName = name;
        }
        $("#thumbDiv_"+pageIndex).append("<div class='HF' id='HFThumb_"+pageIndex+"_"+numFlag+"' style='width:100%;height:100%;'></div>");
        drawHeadFootText(addHFType[0],pageIndex,numFlag,TextObject,ReplaceAllDateFormat(HFItem.LeftHText),startNum,marginLeft,marginTop);
        drawHeadFootText(addHFType[1],pageIndex,numFlag,TextObject,ReplaceAllDateFormat(HFItem.CenterHText),startNum,marginLeft,marginTop);
        drawHeadFootText(addHFType[2],pageIndex,numFlag,TextObject,ReplaceAllDateFormat(HFItem.RightHText),startNum,marginRight,marginTop);
        drawHeadFootText(addHFType[3],pageIndex,numFlag,TextObject,ReplaceAllDateFormat(HFItem.LeftFText),startNum,marginLeft,marginBottom);
        drawHeadFootText(addHFType[4],pageIndex,numFlag,TextObject,ReplaceAllDateFormat(HFItem.CenterFText),startNum,marginLeft,marginBottom);
        drawHeadFootText(addHFType[5],pageIndex,numFlag,TextObject,ReplaceAllDateFormat(HFItem.RightFText),startNum,marginRight,marginBottom);
        if(!_showDocSrc.in_array(pageIndex))
        {
            var preContent = designHFContent[pageIndex];
            if(typeof(preContent) == "undefined")
                preContent = "";
            designHFContent[pageIndex] = preContent + $("#page_"+pageIndex).html();
            $("#page_"+pageIndex).empty();
            $("#page_"+pageIndex).append(imgLoad);
        }
    }
}


function drawHeadFootText(HFType,pageIndex,numFlag,textObject,text,startNum,horMargin,verMargin)
{
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
    text = ReplaceAllPageFormat(text,startNum,pageIndex);
    var thumbScale = viewer.ThumbScaleX;
   
    $("#HF_"+pageIndex+"_"+numFlag).append("<div id='"+HFType+"_"+pageIndex+"_"+numFlag+"' style='position:absolute;font-family:"+textObject.FontName+";font-size:"+textObject.FontSize+"px;color:"+textObject.FontColor+";"+textObject.IsUnderline+"'>"+text+"</div>");

    $("#HFThumb_"+pageIndex+"_"+numFlag).append("<div id='Thumb_"+HFType+"_"+pageIndex+"_"+numFlag+"' style='position:absolute;font-family:"+textObject.FontName+";font-size:"+(textObject.FontSize*thumbScale)+"px;color:"+textObject.FontColor+";"+textObject.IsUnderline+"'>"+text+"</div>");
    
    var HFWidth = $("#"+HFType+"_"+pageIndex+"_"+numFlag).outerWidth(true);
    var HFHeight = $("#"+HFType+"_"+pageIndex+"_"+numFlag).outerHeight(true);
    var HFLeft = 0;
    var HFTop = 0;
    if(HFType == "leftHead")
    {
        HFLeft = horMargin;
        HFTop = verMargin;    
    }
    else if(HFType == "centerHead")
    {
        HFLeft = (WidthArray[pageIndex] - HFWidth)/2;
        HFLeft = HFLeft < 0 ? 0 : HFLeft;
        HFTop =  verMargin;
    }
    else if(HFType == "rightHead")
    {
        HFLeft = WidthArray[pageIndex] - HFWidth - horMargin;
        HFLeft = HFLeft < 0 ? 0 : HFLeft;
        HFTop = verMargin;
    }
    else if(HFType == "leftFoot")
    {
        HFLeft = horMargin;
        HFTop = HeightArray[pageIndex] - HFHeight - verMargin;
        HFTop = HFTop < 0 ? 0 : HFTop;
    }
    else if(HFType == "centerFoot")
    {
        HFLeft = (WidthArray[pageIndex] - HFWidth)/2;
        HFTop = HeightArray[pageIndex] - HFHeight - verMargin;
        HFTop = HFTop < 0 ? 0 : HFTop;
    }
    else if(HFType == "rightFoot")
    {
        HFLeft =  WidthArray[pageIndex] - HFWidth - horMargin;
        HFLeft = HFLeft < 0 ? 0 : HFLeft;
        HFTop =  HeightArray[pageIndex] - HFHeight - verMargin;
        HFTop = HFTop < 0 ? 0 : HFTop;
    }
    $("#"+HFType+"_"+pageIndex+"_"+numFlag).css({"left":HFLeft+"px","top":HFTop+"px"});
    $("#Thumb_"+HFType+"_"+pageIndex+"_"+numFlag).css({"left":(HFLeft*thumbScale)+"px","top":(HFTop*thumbScale)+"px"})
}


function ReplaceAllPageFormat(text,startNum,pageIndex)
{
    var pageFormatArray = new Array("1","1 of n","1/n","Page 1","Page 1 of n");
    while(text.indexOf("<<") != -1 && text.indexOf(">>") != -1)
    {
        var posiStart = text.indexOf("<<");
        var posiEnd = text.indexOf(">>");
        var format = text.substring(posiStart+2,posiEnd);
        if(pageFormatArray.in_array(format))
        {
            var showText = "";
            var showIndex = startNum + pageIndex;
            var showCount = startNum + _totalPageCount;
            if(format == "1")
                showText = showIndex;
            else if(format == "1 of n")
                showText = showIndex + " of " + showCount;
            else if(format == "1/n")
                showText = showIndex + "/" + showCount;
            else if(format == "Page 1")
                showText = "Page " + showIndex;
            else if(format == "Page 1 of n")
                showText == "Page " + showIndex + " of " + showCount;
            text = text.replace("<<"+format+">>",showText);
        }
    }
    return text;
}

function ReplaceAllDateFormat(text)
{
    var dateFormatArray = new Array("m/d","m/d/yy","m/d/yyyy","mm/dd/yy","mm/dd/yyyy","d/m/yy","d/m/yyyy","dd/mm/yy","dd/mm/yyyy","mm/yy");
    var tempText = text;
    while(tempText.indexOf("<<") != -1 && tempText.indexOf(">>") != -1)
    {
        var posiStart = tempText.indexOf("<<");
        var posiEnd = tempText.indexOf(">>");
        var format = tempText.substring(posiStart+2,posiEnd);
        if(dateFormatArray.in_array(format))
        {
            text = text.replace("<<"+format+">>",GetCurrentDate(format));
            tempText = text;
        }
        else 
            tempText = tempText.substring(posiEnd+2);
    }
    return text;
}

function GetCurrentDate(format)
{
    var result = "";
    var dateNow = new Date();
    var year = dateNow.getFullYear()+"";
    var tempYear = year.substring(2);
    var month = dateNow.getMonth() + 1;
    var tempMonth = month;
    var day = dateNow.getDate();
    var tempDay = day;
        
    if(month.length == 1)
        tempMonth = "0" + month;
    else if(day.length == 1)
        tempDay = "0" + day;
                
    if(format == "m/d")
        result = month+"/"+day;
    else if(format == "m/d/yy")
        result = month +"/" + day + tempYear;
    else if(format == "m/d/yyyy")  
        result = month + "/" + day + year;
    else if(format == "mm/dd/yy") 
        result = tempMonth + "/" + tempDay + "/" + tempYear;
    else if(format == "mm/dd/yyyy")
        result = tempMonth + "/" + tempDay + "/" + year;
    else if(format == "d/m/yy")
        result = day + "/" + month + "/" + tempYear;
    else if(format == "d/m/yyyy")
        result = day + "/" + month + "/" + year;
    else if(format == "dd/mm/yy")
        result = tempDay + "/" + tempMonth + "/" + tempYear;
    else if(format == "dd/mm/yyyy")
        result = tempDay + "/" + tempMonth + "/" + year;
    else if(format == "mm/yy")
        result = tempMonth + "/" + tempYear;
    return result;
}

function GetPDFDesignIndexArray(pageRange,subset)
{
    var pageIndexs = new Array();
    var addIndexs = new Array();
    if(pageRange == "All Pages")
        pageIndexs = _fileDocument[curFileId].ViewerPageIndex;
    else
    {
        var range = pageRange;
        var posi = range.indexOf("_");
        var startIndex = range.substring(0,posi) - 1;
        var endIndex = range.substring(posi+1) - 1;
        for(var i=startIndex;i<=endIndex;i++)
        {
            var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
            pageIndexs.push(pageIndex);
        }
    }
    if(subset == "All pages in range")
        addIndexs = pageIndexs;
    else if(subset == "Even pages only")
    {
        for(var i=0;i<pageIndexs.length;i++)
        {
            if(pageIndexs[i]%2 == 1)
                addIndexs.push(pageIndexs[i]);
        }
    }
    else if(subset == "Odd pages only")
    {
        for(var i=0;i<pageIndexs.length;i++)
        {
            if(pageIndexs[i]%2 == 0)
                addIndexs.push(pageIndexs[i]);
        }
    }
    return addIndexs;
}

function InsertPageNumber()
{
    var curValue = $("#"+curFocusHFTxt).val();
    $("#"+curFocusHFTxt).val(curValue+"<<"+$("#HFPageF").val()+">>");
    SwitchHFSettings();
}

function InsertDate()
{
    var curValue = $("#"+curFocusHFTxt).val();
    $("#"+curFocusHFTxt).val(curValue+"<<"+$("#HFDateF").val()+">>");
    SwitchHFSettings();
}

function PageRangeChange(itemId)
{
    if(itemId.indexOf("HF") != -1)
    {
        var range = $('input:radio[name="HFRange"]:checked').val();
        if(range == "HFAll")
        {
            $("#HFFrom").spinner( "disable" );
            $("#HFFrom").css( "color","#B1B6B9" );
            $("#HFFrom").css("border","1px solid #B1B6B9");
            $("#HFTo").spinner( "disable" );
            $("#HFTo").css( "color","#B1B6B9" );
            $("#HFTo").css("border","1px solid #B1B6B9");
        }
        else
        {
            $("#HFFrom").spinner( "enable" );
            $("#HFFrom").css( "color","#000000" );
            $("#HFFrom").css("border","1px solid #727272");
            $("#HFTo").spinner( "enable" );
            $("#HFTo").css( "color","#000000" );
            $("#HFTo").css("border","1px solid #727272");
        }
        SwitchHFSettings();
    }
    else if(itemId.indexOf("BG") != -1)
    {
        var range = $('input:radio[name="BGRange"]:checked').val();
        if(range == "BGAll")
        {
            $("#BGFrom").spinner( "disable" );
            $("#BGFrom").css( "color","#B1B6B9" );
            $("#BGFrom").css("border","1px solid #B1B6B9");
            $("#BGTo").spinner( "disable" );
            $("#BGTo").css( "color","#B1B6B9" );
            $("#BGTo").css("border","1px solid #B1B6B9");
        }
        else
        {
            $("#BGFrom").spinner( "enable" );
            $("#BGFrom").css( "color","#000000" );
            $("#BGFrom").css("border","1px solid #727272");
            $("#BGTo").spinner( "enable" );
            $("#BGTo").css( "color","#000000" );
            $("#BGTo").css("border","1px solid #727272");
        }
        SwitchBGSettings();
    }
    else if(itemId.indexOf("WM") != -1)
    {
        var range = $('input:radio[name="WMRange"]:checked').val();
        if(range == "WMAll")
        {
            $("#WMFrom").spinner( "disable" );
            $("#WMFrom").css( "color","#B1B6B9" );
            $("#WMFrom").css("border","1px solid #B1B6B9");
            $("#WMTo").spinner( "disable" );
            $("#WMTo").css( "color","#B1B6B9" );
            $("#WMTo").css("border","1px solid #B1B6B9");
        }
        else
        {
            $("#WMFrom").spinner( "enable" );
            $("#WMFrom").css( "color","#000000" );
            $("#WMFrom").css("border","1px solid #727272");
            $("#WMTo").spinner( "enable" );
            $("#WMTo").css( "color","#000000" );
            $("#WMTo").css("border","1px solid #727272");
        }
        SwitchWMSettings();
    }
}

function RemoveSetting(item)
{
    var itemId = item.id;
    if(itemId.indexOf("HF") != -1)
    {
        var selectVal = $("#HFSaveSettings").val();
        jConfirm("Are you sure you want to delete the setting "+selectVal+"?","RasterEdge Application",function(r){
            if(r)
            {
                var removeItem = null;
                for(var i=0;i<savePDFHeadFoot.length;i++)
                {
                    if(savePDFHeadFoot[i].Name == selectVal)
                    {
                        removeItem = savePDFHeadFoot[i];
                        break;
                    }
                }
                savePDFHeadFoot.remove(removeItem);
                $("#HFSaveSettings").empty();
                for(var i=0;i<savePDFHeadFoot.length;i++)
                    $("#HFSaveSettings").append($('<option></option>').html(savePDFHeadFoot[i].Name));
                $("#HFSaveSettings").val("None specified").attr("selected",true);
                SetHeadFoot(new PDFHeadFoot());
            }
        });
    }
    else if(itemId.indexOf("BG") != -1)
    {
        var selectVal = $("#BGSaveSettings").val();
        jConfirm("Are you sure you want to delete the setting "+selectVal+"?","RasterEdge Application",function(r){
            if(r)
            {
                var removeItem = null;
                for(var i=0;i<savePDFBackground.length;i++)
                {
                    if(savePDFBackground[i].Name == selectVal)
                    {
                        removeItem = savePDFBackground[i];
                        break;
                    }
                }
                savePDFBackground.remove(removeItem);
                $("#BGSaveSettings").empty();
                for(var i=0;i<savePDFHeadFoot.length;i++)
                    $("#BGSaveSettings").append($('<option></option>').html(savePDFBackground[i].Name));
                $("#BGSaveSettings").val("None specified").attr("selected",true);
                SetBackground(new PDFBackground());
            }
        });
    }
    else if(itemId.indexOf("WM") != -1)
    {
        var selectVal = $("#WMSaveSettings").val();
        jConfirm("Are you sure you want to delete the setting "+selectVal+"?","RasterEdge Application",function(r){
            if(r)
            {
                var removeItem = null;
                for(var i=0;i<savePDFWatermark.length;i++)
                {
                    if(savePDFWatermark[i].Name == selectVal)
                    {
                        removeItem = savePDFWatermark[i];
                        break;
                    }
                }
                savePDFWatermark.remove(removeItem);
                $("#WMSaveSettings").empty();
                for(var i=0;i<savePDFHeadFoot.length;i++)
                    $("#WMSaveSettings").append($('<option></option>').html(savePDFWatermark[i].Name));
                $("#WMSaveSettings").val("None specified").attr("selected",true);
                SetWatermark(new PDFWatermark());
            }
        });
    }
}

function SaveSetting(item)
{
    var itemId = item.id;
    var result = true;
    if(itemId == "HFSave")
        result = CheckHeadFootData();
    else if(itemId == "BGSave")
        result = CheckBackgroundData();
    else if(itemId == "WMSave")
        result = CheckWatermarkData();
    if(result)
        showSaveSetting(itemId);
}

function ShowAddHeadFootPopBox()
{
    $("#_headFootPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#HFFrom").spinner("option", "max", _totalPageCount);
    $("#HFTo").spinner("option", "max", _totalPageCount);
    $("#HFStartId").spinner("option", "max", _totalPageCount);
    var initHeadFoot = new PDFHeadFoot();
    $("#HFSaveSettings").val("None specified").attr("selected",true);
    $("#HFRemove").attr("disabled","disabled");
    SetHeadFoot(initHeadFoot);
    curFocusHFTxt = "leftHTxt";
    SignPanelPosition("#_headFootPopbox");
}

function CheckHeadFootData()
{
    var result = true;
    var regEx = new RegExp(/^(-)?\d+(\.\d+)?$/);
    var topMargin = $("#topMargin").val();
    if(regEx.exec(topMargin) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value,Please input again", i18n['title']['Error'] || "Error", function () {
            $("#topMargin").spinner("value",0.5);
            $("#topMargin").select();
        });
        return false;
    }
    var botMargin = $("#botMargin").val();
    if(regEx.exec(botMargin) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#botMargin").spinner("value",0.5);
            $("#botMargin").select();
        });
        return false;
    }
    var leftMargin = $("#leftMargin").val();
    if(regEx.exec(leftMargin) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#leftMargin").spinner("value",0.5);
            $("#leftMargin").select();
        });
        return false;
    }
    var rightMargin = $("#rightMargin").val();
    if(regEx.exec(rightMargin) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#rightMargin").spinner("value",0.5);
            $("#rightMargin").select();
        });
        return false; 
    }
    result = CheckPageRange();
    return result;
}

function CheckPageRange()
{
    var result = true;
    var regEx = new RegExp(/^[0-9]*$/);
    var HFFrom = $("#HFFrom").val();
    if(regEx.exec(HFFrom) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#HFFrom").spinner("value",1);
            $("#HFFrom").select();
        });  
        return false;
    }
    else
    {
        if(HFFrom > _totalPageCount || HFFrom < 0)
        {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 1 + (i18n['content']['BetweenConnect'] || "and ") + _totalPageCount + "", i18n['title']['Error'] || "Error", function () {
                $("#HFFrom").spinner("value",1);
                $("#HFFrom").select();
            });
            return false;
        }
    }
    var HFTo = $("#HFTo").val();
    if(regEx.exec(HFTo) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#HFTo").spinner("value",1);
            $("#HFTo").select();
        });  
        return false;
    }
    else
    {
        if(HFTo > _totalPageCount || HFTo < 0)
        {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 1 + (i18n['content']['BetweenConnect'] || "and ") + _totalPageCount + "", i18n['title']['Error'] || "Error", function () {
                $("#HFTo").spinner("value",1);
                $("#HFTo").select();
            });
            return false;
        }
        if(HFFrom > HFTo)
        {
            jAlert(i18n['content']['InvalidPageRange']||"Please enter a valid page range.", i18n['title']['Error'] || "Error", function () {
                $("#HFFrom").select();
            });
            return false;
        }
    }
    return result;
}

function SaveHeadFoot()
{
    var saveHFItem = new PDFHeadFoot();
    saveHFItem.FontName = $("#HFFont").val();
    saveHFItem.FontSize = $("#HFSize").val();
    saveHFItem.IsUnderline = $("#HFStyle").val();
    saveHFItem.FontColor = $("#HFColor").val();
    var topMargin = $("#topMargin").val();
    var botMargin = $("#botMargin").val();
    var leftMargin = $("#leftMargin").val();
    var rightMargin = $("#rightMargin").val();
    saveHFItem.MarginTop = topMargin;
    saveHFItem.MarginBottom = botMargin;
    saveHFItem.MarginLeft = leftMargin;
    saveHFItem.MarginRight = rightMargin;
    saveHFItem.LeftHText = $("#leftHTxt").val();
    saveHFItem.CenterHText = $("#centerHTxt").val();
    saveHFItem.RightHText = $("#rightHTxt").val();
    saveHFItem.LeftFText = $("#leftFTxt").val();
    saveHFItem.CenterFText = $("#centerFTxt").val();
    saveHFItem.RightFText = $("#rightFTxt").val();
    var pageRange = $('input:radio[name="HFRange"]:checked').val();
    if(pageRange == "HFAll")
        saveHFItem.PageRange = "All Pages";
    else
    {
        var from = $("#HFFrom").val();
        var to = $("#HFTo").val();
        saveHFItem.PageRange = from+"_"+to;
    }
    saveHFItem.Subset = $("#HFSubset").val();
    saveHFItem.PageDateFormat.DateFormat = $("#HFDateF").val();
    saveHFItem.PageDateFormat.PageFormat = $("#HFPageF").val();
    saveHFItem.PageDateFormat.StartPageNum = $("#HFStartId").val();
    return saveHFItem;
}

function SetHeadFoot(headFootObject)
{
    $("#HFFont").val(headFootObject.FontName).attr("selected",true);
    $("#HFSize").val(headFootObject.FontSize).attr("selected",true);
    $("#HFStyle").val(headFootObject.IsUnderline);
    if($("#HFStyle").val() == "false")
        $("#HFUDiv").css("border-color","#F0F0F0");
    else
        $("#HFUDiv").css("border-color","#b2b0a7");
    $("#HFColor").css("background",headFootObject.FontColor);
    $("#HFColor").val(headFootObject.FontColor);
    $("#topMargin").spinner("value",headFootObject.MarginTop);
    $("#botMargin").spinner("value",headFootObject.MarginBottom);
    $("#leftMargin").spinner("value",headFootObject.MarginLeft);
    $("#rightMargin").spinner("value",headFootObject.MarginRight);
    $("#leftHTxt").val(headFootObject.LeftHText);
    $("#centerHTxt").val(headFootObject.CenterHText);
    $("#rightHTxt").val(headFootObject.RightHText);
    $("#leftFTxt").val(headFootObject.LeftFText);
    $("#centerFTxt").val(headFootObject.CenterFText);
    $("#rightFTxt").val(headFootObject.RightFText);
    if(headFootObject.PageRange == "All Pages")
    {
        $("#HFPageAll").prop("checked",true);
        PageRangeChange("HFPageAll");
        $("#HFFrom").spinner("value",1);
        $("#HFTo").spinner("value",1);
    }
    else
    {
        $("#HFPageFrom").prop("checked",true);
        PageRangeChange("HFPageFrom");
        var pageRange = headFootObject.PageRange;
        var posi = pageRange.indexOf("_");
        var from = pageRange.substring(0,posi);
        var to = pageRange.substring(posi+1);
        $("#HFFrom").spinner("value",from);
        $("#HFTo").spinner("value",to);
    }
    $("#HFSubset").val(headFootObject.Subset).attr("selected",true);
    $("#HFDateF").val(headFootObject.PageDateFormat.DateFormat).attr("selected",true);
    $("#HFPageF").val(headFootObject.PageDateFormat.PageFormat).attr("selected",true);
    $("#HFStartId").val(headFootObject.PageDateFormat.StartPageNum).attr("selected",true);
}

function hideAddHeadFootPopBox()
{
    if(saveSettingShow)
        return;
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_headFootPopbox").hide(); 
}

var BGFlag = false;
function CreateAddBackgroundPopBox()
{
    var tempWidth = 760;
    var tempHeight = 550;
    if(browserWidth < tempWidth || browserHeight < tempHeight)
    {
        tempWidth = browserWidth * 0.9;
        tempHeight = browserHeight * 0.9;
    }
    var str = "<div id='_backgroundPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_backgroundPopbox").css({
        width:tempWidth + "px",
        height:tempHeight + "px",
        display:"block"
    });
    var BGLoading = "<div id='BGLoad'><div class='LoadImg' id='BGLoading' style='z-index:1050;'><div class='loadingFont'>Loading</div></div></div>";
    $("#_backgroundPopbox").append(BGLoading);
    var paddingTop = (tempHeight - 130)/2;
    $("#BGLoading").css({"width": tempWidth + "px","height": (tempHeight-paddingTop) + "px"});
    $("#BGLoading").css("padding-top",paddingTop+"px");
    $("#BGLoad").hide();
    

    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Add Background</div><div  class='poptitleimage poptitlestyle'  onclick='hideAddBackgroundPopBox();'></div></div>";
    $("#_backgroundPopbox").append(title);
    
    var BGAcceptArray = new Array(".pdf",".png",".bmp",".jpg",".jpeg");
                               
    var popContent = "<div  class='popinner' style='width:" + (tempWidth - 45) + "px;height:" + (tempHeight - 65) + "px;'>";
    
    popContent += "<table style='width:480px;height:38px;'>";
    popContent += "<tr><td>Saved Settings:</td><td><select id='BGSaveSettings' style='width:120px;'></select></td><td><button style='width:80px;' id='BGRemove' onclick='RemoveSetting(this)'>Delete</button></td><td><button style='width:120px;' id='BGSave' onclick='SaveSetting(this)'>Save Settings...</button></td></tr></table>";
    
    popContent += "<fieldset style='width:400px;height:120px;'><legend>Source</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td><input type='radio' id='BGFromColor' name='BGSource' value='BGColor' onchange='BGSourceChange();' checked><label for='BGFromColor'>From color</label></td><td><div id='BGColor' style='border:1px solid #727272;width:20px;height:12px;background:#ffffff;'></div></td></tr>";
    popContent += "<tr><td><input type='radio' id='BGFromFile' name='BGSource' value='BGFile' onchange='BGSourceChange();'><label for='BGFromFile'>File</label></td><td colspan='3'><input id='BGFileText' type='text' style='width:210px;height:22px;' readOnly='readOnly' value='<No source file selected>'/></td><td><div><button onclick='BGFile.click()' id='BGFileButton'>Browse</button><input type='file' id='BGFile' name='BGFile' style='opacity:0;left:200px;top:0px;position:absolute;' onchange='BGFileChange()' accept='"+BGAcceptArray+"'/></div></td></tr>";

    popContent += "<tr><td></td><td>Page Number:</td><td><input id='BGFileNumber' class='BGSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td><td>Absolute Scale:</td><td><input id='BGFileScale' class='BGSpinner' style='border:1px solid #727272;width:30px;' onchange='BGFileScaleChange();' /></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='width:350px;height:120px;'><legend>Appearance</legend><table style='width:260px;height:100%;'>";
    popContent += "<tr><td>Rotation:</td><td><input id='BGRotate' class='BGSpinner' style='border:1px solid #727272;width:50px;' value='0'/></td></tr>";
    popContent += "<tr><td>Opacity:</td><td><input id='BGOpacity' class='BGSpinner' style='border:1px solid #727272;width:50px;' value='1'/></td></tr>";
    popContent += "<tr><td colspan='2'><input type='checkbox' id='BGRelaScale' onchange='BGRelaScaleChange();'><label for='BGRelaScale'>Scale relative to target page</label></td><td><input id='BGRelaScaleValue' class='BGSpinner' style='border:1px solid #727272;width:40px;' value='1'/></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='float:left;width:330px;height:120px;'><legend>Position</legend><table style='width:100%;height:100%'>";
    popContent += "<tr><td>Vertical Distance:</td><td><input id='BGVerD' class='BGSpinner' style='border:1px solid #727272;width:30px;'/></td><td>Inches from </td><td><select id='BGVerAlign' class='BGSelect'></select></td></tr>";
    popContent += "<tr><td>Horizontal Distance:</td><td><input id='BGHorD' class='BGSpinner' style='border:1px solid #727272;width:30px;'/></td><td>Inches from </td><td><select id='BGHorAlign' class='BGSelect'></select></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='float:left;width:330px;height:120px;'><legend>Page Range Options</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td><input type='radio' id='BGPageAll' name='BGRange' value='BGAll' checked onchange='PageRangeChange(this.id);'><label for='BGPageAll'>All Pages</label></td><td><input type='radio' id='BGPageFrom' name='BGRange' value='BGPart' onchange='PageRangeChange(this.id);'><label for='BGPageFrom'>Pages from</label></td>";
    popContent += "<td><input id='BGFrom' class='BGSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td><td>to:</td><td><input id='BGTo' class='BGSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td></tr>";
    popContent += "<tr><td style='padding-left:20px;'>Subset:</td><td colspan='3'><select id='BGSubset' class='BGSelect'></select></td></tr></table></fieldset>";
    
    popContent += "<button style='margin-top:10px;margin-right;:17px;width:80px;float:right;' onclick='hideAddBackgroundPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:10px;margin-right:30px;width:80px;float:right;' onclick='AddBackground();'>Ok</button>";
    popContent += "</div>";
    $("#_backgroundPopbox").append(popContent);
    
    $("#BGFileNumber").spinner();
    $("#BGFileNumber").spinner("option", "min", 1 );
    $("#BGFileNumber").spinner("option", "step", 1);
    
    $("#BGFileScale").spinner();
    $("#BGFileScale").spinner("option", "min", 0 );
    $("#BGFileScale").spinner("option", "step", 0.01);
    
    $("#BGRotate").spinner();
    $("#BGRotate").spinner("option", "min", 0 );
    $("#BGRotate").spinner("option", "step", 1);
    
    
    $("#BGOpacity").spinner();
    $("#BGOpacity").spinner("option", "min", 0);
    $("#BGOpacity").spinner("option", "step", 0.1);
    $("#BGOpacity").spinner("option", "max", 1);
    
    $("#BGRelaScaleValue").spinner();
    $("#BGRelaScaleValue").spinner("option", "min", 0);
    $("#BGRelaScaleValue").spinner("option", "step", 0.01);
    
    $("#BGVerD").spinner();
    $("#BGVerD").spinner("option", "step", 0.1);
    
    $("#BGHorD").spinner();
    $("#BGHorD").spinner("option", "step", 0.1);
    
    $("#BGFrom").spinner();
    $("#BGFrom").spinner("option", "min", 1 );
    $("#BGFrom").spinner("option", "step", 1);
    
    $("#BGTo").spinner();
    $("#BGTo").spinner("option", "min", 1 );
    $("#BGTo").spinner("option", "step", 1);
    var BGSubsetArray = new Array("All pages in range","Even pages only","Odd pages only");
    for(var i=0;i<BGSubsetArray.length;i++)
        $("#BGSubset").append($('<option></option>').html(BGSubsetArray[i]));
    var verAlignArray = new Array("Top","Center","Bottom");
    for(var i=0;i<verAlignArray.length;i++)
        $("#BGVerAlign").append($('<option></option>').html(verAlignArray[i]));
    var horAlignArray = new Array("Left","Center","Right")
    for(var i=0;i<horAlignArray.length;i++)
        $("#BGHorAlign").append($('<option></option>').html(horAlignArray[i]));
    
    $(".BGSelect").bind("change",function(){SwitchBGSettings();});
    $("#BGSaveSettings").bind("change",function(){
        var selectIndex = parseInt($(this).get(0).selectedIndex);
        BGFlag = false;
        SetBackground(savePDFBackground[selectIndex].Settings);
        if(selectIndex == 0)
            $("#BGRemove").attr("disabled","disabled");
        else
        {
            $("#BGRemove").attr("disabled",false);
            BGFlag = true;
        }
    });
    
    $(".BGSpinner").spinner({spin:function(event,ui){
        SwitchBGSettings();
        if(this.id == "BGFileScale")
        {
            $("#BGRelaScale").prop("checked",false);
            $("#BGRelaScaleValue").spinner("disable" );
            $("#BGRelaScaleValue").css("color","#B1B6B9");
            $("#BGRelaScaleValue").css("border","1px solid #B1B6B9");
            NumericCheck("BGFileScale",0);
        }
    }});
    
    var initBackground = new PDFBackground();
    var initSaveSetting = new PDFSaveSetting();
    initSaveSetting.Name = "None specified";
    initSaveSetting.Settings = initBackground;
    savePDFBackground.push(initSaveSetting);

    for(var i=0;i<savePDFBackground.length;i++)
        $("#BGSaveSettings").append($('<option></option>').html(savePDFBackground[i].Name));
    $("#_backgroundPopbox").hide();
}

function CreateConfirmActPanel()
{
    var str = "<div id='_confirmActPanel' class='popboxbase' style='z-index:999;'></div>";
    $("body").append(str);
    $("#_confirmActPanel").css({
        width:"510px",
        height:"210px",
        display:"block"
    });

    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >RasterEdge Application</div><div  class='poptitleimage poptitlestyle'  onclick='hideConfirmActPanel();'></div></div>";
    $("#_confirmActPanel").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:470px;height:150px;background:#F0F0F0;'>";
    popContent += "<div id='proMesg'></div>";
    
    popContent += "<button style='float:right;margin-right:5px;margin-top:10px;' id='rightButton' ></button>";
    popContent += "<button style='width:150px;float:right;margin-right:25px;margin-top:10px;' id='leftButton'></button></div>";
    
    $("#_confirmActPanel").append(popContent);
    $("#_confirmActPanel").hide();
}

function hideConfirmActPanel()
{
   $(".loadingImg").css("opacity","0.8");
   $("#loading_div").show();
   $("#loading").hide();
   $("#_confirmActPanel").hide(); 
}

function ShowConfirmActPanel(type)
{
    $("#_confirmActPanel").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_confirmActPanel"); 

    $("#leftButton").unbind("click");
    $("#rightButton").unbind("click");
    if(type == "head")
    {
        $("#proMesg").html("This file already contains a header or footer.Would you like to replace the existing header or footer with the one you are adding?<br/><br/><br/><div>Note:If you choose to add another header or footer,it might overlap the existing one.</div>");
        $("#rightButton").html("Add New");
        $("#leftButton").html("Replace Existing");
        $("#rightButton").css("margin-top","40px");
        $("#leftButton").css("margin-top","40px");
        $("#rightButton").bind("click",function(){pageDesignAct = "New";hideConfirmActPanel();ShowAddHeadFootPopBox();});
        $("#leftButton").bind("click",function(){pageDesignAct = "Replace";hideConfirmActPanel();ShowAddHeadFootPopBox();});
    }
    else if(type == "background")
    {
        $("#proMesg").html("There is already a background in this file.Would you like to replace it with a new one?");
        $("#rightButton").html("Cancel");
        $("#leftButton").html("Replace Background");
        $("#rightButton").css("margin-top","80px");
        $("#leftButton").css("margin-top","80px");
        $("#rightButton").bind("click",function(){hideConfirmActPanel();});
        $("#leftButton").bind("click",function(){pageDesignAct = "Replace";hideConfirmActPanel();ShowAddBackgroundPopBox();});
    }
    else if(type == "watermark")
    {
        $("#proMesg").html("This file already contains a watermark.Would you like to replace the existing watermark with the one you are adding?<br/><br/><br/><div>Note:If you choose to add another watermark,it might overlap the existing one.</div>");
        $("#rightButton").html("Add New");
        $("#leftButton").html("Replace Existing");
        $("#rightButton").css("margin-top","40px");
        $("#leftButton").css("margin-top","40px");
        $("#rightButton").bind("click",function(){pageDesignAct = "New";hideConfirmActPanel();ShowAddWatermarkPopBox();});
        $("#leftButton").bind("click",function(){pageDesignAct = "Replace";hideConfirmActPanel();ShowAddWatermarkPopBox();});
    }
}

function CreateEnterPasswordPanel()
{
    var str = "<div id='_designPasPanel' class='popboxbase' style='z-index:999;'></div>";
    $("body").append(str);
    $("#_designPasPanel").css({
        width:"500px",
        height:"160px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Password</div><div  class='poptitleimage poptitlestyle'  onclick='hideEnterPasswordPanel();'></div></div>";
    $("#_designPasPanel").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:460px;height:100px;background:#F0F0F0;'>";
    popContent += "<div><span id='_designName'></span> is protected.Please enter a Document Open Password.</div>";
    popContent += "<br/><div style='margin-left:100px;'>EnterPassword:&nbsp;&nbsp;&nbsp;<input type='password' id='_designPas' style='width:160px;height:20px;' onkeydown='return InsertPassword(event)'/></div>";
    
    popContent += "<button style='float:right;margin-right:5px;margin-top:8px;' onclick='hideEnterPasswordPanel();'>Cancel</button>";
    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:8px;' onclick='ParseInsertDocWithPassWord();'>Ok</button>";
    
    $("#_designPasPanel").append(popContent);
    $("#_designPasPanel").hide();
}

var isEnterPasswordPanel = false;
function hideEnterPasswordPanel()
{
    $("#_designPasPanel").hide();
    isEnterPasswordPanel = false;
}

function BGFileScaleChange()
{
    $("#BGRelaScale").prop("checked",false);
    $("#BGRelaScaleValue").spinner("disable" );
    $("#BGRelaScaleValue").css("color","#B1B6B9");
    $("#BGRelaScaleValue").css("border","1px solid #B1B6B9");
    NumericCheck("BGFileScale",0);
}

function BGRelaScaleChange()
{
   var isChecked = document.getElementById("BGRelaScale").checked;
   var source = $('input:radio[name="BGSource"]:checked').val();
   if(isChecked)
   {
      $("#BGRelaScaleValue").spinner("enable");
      $("#BGRelaScaleValue").css("color","#000000");
      $("#BGRelaScaleValue").css("border","1px solid #727272");
      if(source == "BGFile")
        $("#BGFileScale").spinner("value",""); 
   }
   else
   {
      $("#BGRelaScaleValue").spinner("disable" );
      $("#BGRelaScaleValue").css("color","#B1B6B9");
      $("#BGRelaScaleValue").css("border","1px solid #B1B6B9");
      if(source == "BGFile")
        $("#BGFileScale").spinner("value",0); 
   }
   SwitchBGSettings();
}


var addBGItem  = "";
function AddBackground()
{ 
    if(isEnterPasswordPanel || saveSettingShow)
        return;
    var result = CheckBackgroundData();
    if(result)
    {
        hideAddBackgroundPopBox();
        addBGItem = SaveBackground();
        var addBGIndexs = GetPDFDesignIndexArray(addBGItem.PageRange,addBGItem.Subset);
        if(addBGIndexs.length == 0)
            return;
        addBGItem.PageIndexs = addBGIndexs;
        _pdfPageDesign.LastDesign = "background";
        if(pageDesignAct == "New")
        {
            drawBackground(addBGItem,_pdfPageDesign.Background.length);
            _pdfPageDesign.Background.push(addBGItem);
        }
        else
        {
            $(".BG").remove();
            var background = new Array();
            for(var i=0;i<_pdfPageDesign.Background.length;i++)
            {
                var BGItem = _pdfPageDesign.Background[i];
                var segmentItems = PageSegment(BGItem.PageRange,BGItem.Subset,addBGItem.PageRange,addBGItem.Subset);
                for(var j=0;j<segmentItems.length;j++)
                {
                    var rangeObject = segmentItems[j];
                    var indexs = GetPDFDesignIndexArray(rangeObject.PageRange,rangeObject.Subset);
                    if(indexs.length == 0)
                        continue;
                    else
                    {
                        var newItem = CloneBGItem(BGItem);
                        newItem.PageRange = rangeObject.PageRange;
                        newItem.Subset = rangeObject.Subset;
                        newItem.PageIndexs = indexs;
                        background.push(newItem);
                    }
                }
            }
            _pdfPageDesign.Background = background;
            for(var i=0;i<_pdfPageDesign.Background.length;i++)
            {
                var BGItem = _pdfPageDesign.Background[i];
                drawBackground(BGItem,i);       
            }
            
            drawBackground(addBGItem,_pdfPageDesign.Background.length);
            _pdfPageDesign.Background.push(addBGItem);
        }
    }
}

function CloneBGItem(BGItem)
{
    var newItem = new PDFBackground();
    newItem.Source = BGItem.Source;
    newItem.SourceFile = BGItem.SourceFile;
    newItem.SourceColor = BGItem.SourceColor;
    newItem.Rotation = BGItem.Rotation;
    newItem.Opacity = BGItem.Opacity;
    newItem.ScaleRela = BGItem.ScaleRela;
    newItem.VDistance = BGItem.VDistance;
    newItem.VertAlign = BGItem.VertAlign;
    newItem.HDistance = BGItem.HDistance;
    newItem.HorAlign = BGItem.HorAlign;
    return newItem;
}

function drawBackground(BGItem,numFlag)
{
    var addBGIndexs = BGItem.PageIndexs;
    var translateX = 0;
    var translateY = 0;
    if(BGItem.Source == "Color")
    {
        if(BGItem.ScaleRela == "null")
            BGItem.ScaleRela = 1;
        for(var i=0;i<addBGIndexs.length;i++)
        {
            var pageIndex = addBGIndexs[i];
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            var thumbScale = viewer.ThumbScaleX;
            var width = WidthArray[pageIndex] * BGItem.ScaleRela;
            var height = HeightArray[pageIndex] * BGItem.ScaleRela;
            if(BGItem.ScaleRela < 1)
            {
                translateX = (WidthArray[pageIndex] * (1 - BGItem.ScaleRela))/2;
                translateY = (HeightArray[pageIndex] * (1 - BGItem.ScaleRela))/2;
            }
            var content = $("#page_"+pageIndex).html();
            $("#page_"+pageIndex).empty();
            var background = "<div class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;background:"+BGItem.SourceColor+";opacity:"+BGItem.Opacity+"'></div>";
            $("#page_"+pageIndex).append(background);
            $("#page_"+pageIndex).append(content);
            
            var degree = -BGItem.Rotation;
            var offWidth = 0;
            var offHeight = 0;
            var scale = 1;
            if(degree != 0)
            {
                scale = Math.abs(GetScale(width,height,scale,degree));
                offWidth = GetOffWidth(width,height,degree);
                offHeight = GetOffHeight(width,height,degree);
            }
            translateX = GetTranslateX(BGItem.HorAlign,BGItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
            translateY = GetTranslateY(BGItem.VertAlign,BGItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);
               
            var target = document.getElementById("BG_"+pageIndex+"_"+numFlag);
            var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
            AdaptTransform(target,transform);
        }
    }
    else if(BGItem.Source == "File")
    {
        var filePath = BGItem.SourceFile.Path;
        var suffix = filePath.substring(filePath.lastIndexOf("."));
        filePath = BGItem.SourceFile.FileMD5 + suffix;
        var pageNum = BGItem.SourceFile.PageNum - 1;
        var sizeArray = BGItem.SourceFile.PageSize.split("|");
        var size = sizeArray[pageNum];
        var width = size.split(",")[0];
        var height = size.split(",")[1];
        var result = GetFileHTML(filePath,pageNum);
        for(var i=0;i<addBGIndexs.length;i++)
        {
            var pageIndex = addBGIndexs[i];
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            if(BGItem.ScaleRela == "null")
            {
                if(BGItem.SourceFile.AbScale == 0)
                    return;
                var scale = BGItem.SourceFile.AbScale;
                var paWidth = WidthArray[pageIndex];
                var paHeight = HeightArray[pageIndex];
                var actualWidth = width * scale;
                var actualHeight = height * scale;
                
                var background = "";
                if(suffix == ".pdf")
                {
                    background = "<div class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+BGItem.Opacity+"'>"+result+"</div>";
                }
                else
                {
                    var imgPath = getFolder("insert") + result + ".png";
                    background = "<img class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+BGItem.Opacity+"' src='"+imgPath+"'/>";  
                }        
                var content = $("#page_"+pageIndex).html();
                $("#page_"+pageIndex).empty();
                $("#page_"+pageIndex).append(background);
                $("#page_"+pageIndex).append(content);    
                
                var degree = -BGItem.Rotation;
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                translateX = GetTranslateX(BGItem.HorAlign,BGItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
                translateY = GetTranslateY(BGItem.VertAlign,BGItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);
               
                var target = document.getElementById("BG_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
            else
            {
                if(BGItem.ScaleRela == 0)
                    return;
                var paWidth = WidthArray[pageIndex] * BGItem.ScaleRela;
                var paHeight = HeightArray[pageIndex] * BGItem.ScaleRela;
                var widthPercent = paWidth/width;
                var heightPercent = paHeight/height;
                var scale = widthPercent < heightPercent ? widthPercent : heightPercent;
                
                var background = "";
                if(suffix == ".pdf")
                {
                    background = "<div class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+BGItem.Opacity+"'>"+result+"</div>";
                }
                else
                {
                    var imgPath = getFolder("insert")+result+".png";
                    background = "<img class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+BGItem.Opacity+"' src='"+imgPath+"'/>";   
                }
                var content = $("#page_"+pageIndex).html();
                $("#page_"+pageIndex).empty();
                $("#page_"+pageIndex).append(background);
                $("#page_"+pageIndex).append(content);
                        
                var degree = -BGItem.Rotation;
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    scale = Math.abs(GetScale(width,height,scale,degree));
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                translateX = GetTranslateX(BGItem.HorAlign,BGItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
                translateY = GetTranslateY(BGItem.VertAlign,BGItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);
               
                var target = document.getElementById("BG_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
        }
    }
    else if(BGItem.Source == "FileSvg" || BGItem.Source == "ColorSvg")
    {
        var SVGContent = GetFileSvgContent(BGItem.SourceColor);
        for(var i=0;i<addBGIndexs.length;i++)
        {
            var pageIndex = addBGIndexs[i];
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            var scale = 1;
            if(BGItem.ScaleRela.indexOf("True") != -1)
            {
                scale = BGItem.ScaleRela.substring(5);
                var background = "<div class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;opacity:"+BGItem.Opacity+"'>"+SVGContent+"</div>";
                if(!_showDocSrc.in_array(pageIndex))
                {
                    $("#page_"+pageIndex).append(background);
                }
                else
                {
                    var content = $("#page_"+pageIndex).html();
                    $("#page_"+pageIndex).empty();
                    $("#page_"+pageIndex).append(background);
                    $("#page_"+pageIndex).append(content);  
                }
                var width = $("#BG_"+pageIndex+"_"+numFlag).outerWidth(true);
                var height = $("#BG_"+pageIndex+"_"+numFlag).outerHeight(true);
                var degree = -BGItem.Rotation;
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                translateX = GetTranslateX(BGItem.HorAlign,BGItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
                translateY = GetTranslateY(BGItem.VertAlign,BGItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);          
                var target = document.getElementById("BG_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
            else
            {
                if(BGItem.ScaleRela == 0)
                    return;
                var paWidth = WidthArray[pageIndex] * BGItem.ScaleRela;
                var paHeight = HeightArray[pageIndex] * BGItem.ScaleRela;
          
                var background = "<div class='BG' id='BG_"+pageIndex+"_"+numFlag+"' style='position:absolute;opacity:"+BGItem.Opacity+"'>"+SVGContent+"</div>";
                if(!_showDocSrc.in_array(pageIndex))
                {
                    $("#page_"+pageIndex).append(background);
                }
                else
                {
                    var content = $("#page_"+pageIndex).html();
                    $("#page_"+pageIndex).empty();
                    $("#page_"+pageIndex).append(background);
                    $("#page_"+pageIndex).append(content);  
                }
                var width = $("#BG_"+pageIndex+"_"+numFlag).outerWidth(true);
                var height = $("#BG_"+pageIndex+"_"+numFlag).outerHeight(true);   
                var widthPercent = paWidth/width;
                var heightPercent = paHeight/height;
                var scale = widthPercent < heightPercent ? widthPercent : heightPercent;  
                 
                var degree = -BGItem.Rotation;
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    scale = Math.abs(GetScale(width,height,scale,degree));
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                translateX = GetTranslateX(BGItem.HorAlign,BGItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
                translateY = GetTranslateY(BGItem.VertAlign,BGItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);
               
                var target = document.getElementById("BG_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
        }
    }
}

function GetFileSvgContent(svgName)
{
    var result = "";
    var str = {action: "GetDesignSvg",fid: _fid, fileName:svgName};
	var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:false,
        data: str, 
        dataType:"html",
        success: function(response) {  
            if(response.indexOf("<?xml version") != -1)
            {
                result = response;
            }
       },
       error: function(err) {}  
   }
   $.ajax(options);
   return result;
}

function GetFileHTML(_filePath,pageNum)
{
    showLoading();
    var result = "";
    var str = {action: "GetFileHTML",fid: _fid, fileName:_filePath,pageIndex:pageNum};
	var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:false,
        data: str,
        dataType:"text",
        //dataType:"html",
        success: function(response) {  
            $("#loading").hide(); 
            if(response.indexOf("<?xml version") != -1)
            {
                result = response;
            }
            else
            {
                result = eval('(' + response + ')');
                result = result.msg;
            }
       },
       error: function(err) {$("#loading").hide();}  
   }
   $.ajax(options);
   return result;
}

function AdaptTransform(target,transform)
{
    originX = "center";
    originY = "center";
    if (target.style.msTransform !== undefined) { //IE
        target.style.msTransformOrigin = ""+originX+" "+originY+"";
        target.style.msTransform = transform;	
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransformOrigin = ""+originX+" "+originY+"";
        target.style.MozTransform = transform;	
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransformOrigin = ""+originX+" "+originY+"";
        target.style.OTransform = transform;	
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransformOrigin = ""+originX+" "+originY+"";
        target.style.webkitTransform = transform;	
   } else {
        target.style.transformOrigin = ""+originX+" "+originY+"";
        target.style.transform = transform;
   }
}

function IsUploadSameFile(fileMD5)
{
    var result = "";
    for(var i=0;i<pageDesignListFile.length;i++)
    {
        if(pageDesignListFile[i].FileMD5 == fileMD5)
        {
            result = pageDesignListFile[i];
            break;
        }
    }
    return result;
}

var pageDesignListFile = new Array();
var pageDesignFile = "";
var pageDesignFileMD5 = "";
function BGFileChange()
{
    SwitchBGSettings();
    var fileReader = new FileReader();
    blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;
    file = document.getElementById("BGFile").files[0];
    chunkSize = 2097152;             
    chunks = Math.ceil(file.size / chunkSize);
    currentChunk = 0;
    spark = new SparkMD5.ArrayBuffer();
    fileReader.onload = function(e) {
        var arrayBuffer = e.target.result;
        spark.append(arrayBuffer);
        currentChunk++;
        if (currentChunk < chunks) 
            loadNext();
        else
        {
            pageDesignFileMD5  =  spark.end();
            var result = IsUploadSameFile(pageDesignFileMD5);
            if(result != "")
            {
                $("#BGFileText").val($("#BGFile").val());
                pageDesignFile = new SourceFromFile();
		        pageDesignFile.PageCount = result.PageCount;
		        pageDesignFile.PageSize = result.PageSize;
		        pageDesignFile.FileMD5 = pageDesignFileMD5;
		        if($("#BGFile").val() != result.Path)
		        {
		            pageDesignFile.Path = $("#BGFile").val();
		            pageDesignListFile.push(pageDesignFile);
		        }
		        else
		            pageDesignFile.Path = result.Path;
		        SetFileNumber(pageDesignFile.PageCount,"BGFileNumber");
            }
            else
            {
                $("#BGLoad").show();
                $.ajaxFileUpload
	            ({			
                    url:getCurrentAspx(),
			        secureuri:false,
			        fileElementId:'BGFile',
			        dataType: 'json',
			        data:{add:"pageDesign",fid:_fid},
			        success: function (data ,status)
			        {	
			            $("#BGLoad").hide();
			            if(typeof(data.error) != 'undefined'){}
				        else
				        {
				            if(data.indexOf("hasPassword") != -1)
				            {
				                insertName = $("#BGFile").val();
                                InsertType = "pageDesignBG";
                                $("#_designPasPanel").show();
                                SignPanelPosition("#_designPasPanel");
                                isEnterPasswordPanel = true;
                                $("#_designName").html(insertName)
				            }
				            else if(data.indexOf("hasOwnerPsword") != -1)
				            {
				                jAlert(i18n['content']['FileProtected'] || ("The file " + $("#BGFile").val() + " is protected.It cannot be used for this command."), i18n['title']['RasterEdge'] || "RasterEdge Application");
				            }
				            else
				            {
				                $("#BGFileText").val($("#BGFile").val());
				                var info = data.split(";");
				                pageDesignFile = new SourceFromFile();
				                pageDesignFile.Path = $("#BGFile").val();
				                pageDesignFile.FileMD5 = pageDesignFileMD5;
				                pageDesignFile.PageCount = info[1];
				                pageDesignFile.PageSize = info[2];
				                pageDesignListFile.push(pageDesignFile);
                                SetFileNumber(pageDesignFile.PageCount,"BGFileNumber");
				            }
                        }
			        },
			        error: function (data, status, e)
			        {
				        alert(e);
			        }
		        })
            }
        }
    };
    function loadNext() 
    {
        var start = currentChunk * chunkSize;
        var end = start + chunkSize >= file.size ? file.size : start + chunkSize;
        fileReader.readAsArrayBuffer(blobSlice.call(file,start,end));
    };
    loadNext();
}

function SetFileNumber(pageCount,fileNumID)
{
    if(pageCount != 1)
	{
	    $("#"+fileNumID).spinner( "enable" );
		$("#"+fileNumID).spinner( "value",1 );
        $("#"+fileNumID).css( "color" ,"#000000");
        $("#"+fileNumID).css("border","1px solid #727272");
        $("#"+fileNumID).spinner("option", "max", pageCount);
	}
	else
	{
		$("#"+fileNumID).spinner( "value",1 );
		$("#"+fileNumID).spinner( "disable" );
        $("#"+fileNumID).css( "color" ,"#B1B6B9");
        $("#"+fileNumID).css("border","1px solid #B1B6B9");
	}  
}

function BGSourceChange()
{
    var source = $('input:radio[name="BGSource"]:checked').val();
    var isCheck = document.getElementById("BGRelaScale").checked;
    $("#BGColor").unbind("click");
    if(source == "BGColor")
    {
        $("#BGFileButton").attr("disabled","disabled");
        $("#BGFile").attr("disabled","disabled");
        $("#BGFileNumber").spinner( "disable" );
        $("#BGFileNumber").css( "color" ,"#B1B6B9");
        $("#BGFileNumber").css("border","1px solid #B1B6B9");
        $("#BGFileScale").spinner( "disable" );
        $("#BGFileScale").css("border","1px solid #B1B6B9");
        $("#BGColor").bind("click",function(){ShowTableColor(this,false);});
        $("#BGColor").css("border","1px solid #727272");
    }
    else
    {
        $("#BGFileButton").attr("disabled",false);
        $("#BGFile").attr("disabled",false);
        $("#BGFileScale").spinner( "enable" );
        $("#BGFileScale").css("border","1px solid #727272");
        if(!isCheck)
            $("#BGFileScale").spinner( "value",0 );
        else
            $("#BGFileScale").spinner( "value","");
        $("#BGColor").css("border","1px solid #B1B6B9");
    }
    SwitchBGSettings();
}

function SwitchBGSettings()
{
    if(BGFlag)
    {
        var value = $("#BGSaveSettings").val();
        if(value != "None specified")
            $("#BGSaveSettings").val("None specified").attr("selected",true);
        BGFlag = false;
    }
}

function ShowAddBackgroundPopBox()
{
    $("#_backgroundPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#BGFileNumber").spinner("option", "max", _totalPageCount);
    $("#BGFrom").spinner("option", "max", _totalPageCount);
    $("#BGTo").spinner("option", "max", _totalPageCount);
    var initBackground = new PDFBackground();
    $("#BGSaveSettings").val("None specified").attr("selected",true);
    $("#BGRemove").attr("disabled","disabled");
    SetBackground(initBackground);
    SignPanelPosition("#_backgroundPopbox");
}

function CheckBackgroundData()
{
    var result = true;
    var isCheck = document.getElementById("BGRelaScale").checked;
    var source = $('input:radio[name="BGSource"]:checked').val();
    if(source == "BGFile")
    {
        if($("#BGFileText").val() == "<No source file selected>")
        {   
            jAlert(i18n['content']['NoSourceFile'] || "No source file was specified.Please click Browser to locate a source file and then try again.", i18n['title']['Error'] || "Error");
            return false;
        }
    }
    if(isCheck)
    {
        result = PositiveNumCheck("BGRelaScaleValue",1);
        if(!result){return result;}
    }
    else if(source == "BGFile")
    {
        result = CheckFileInfo("BGFileNumber","BGFileScale");
        if(!result){return result;}
    }
    result = PositiveNumCheck("BGOpacity",1);
    if(result)
    {
        var BGOpacity = $("#BGOpacity").val();
        if(BGOpacity < 0 || BGOpacity > 1)
        {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 0 + (i18n['content']['BetweenConnect'] || " and ") + 1, i18n['title']['Error'] || "Error", function () {
                $("#BGOpacity").spinner("value",1);
                $("#BGOpacity").select();
            });
            return false;
        }
    }
    var checkIdArray = new Array("BGRotate","BGVerD","BGHorD");
    var valueArray = new Array(0,0,0);
    for(var i=0;i<checkIdArray.length;i++)
    {
        result = NumericCheck(checkIdArray[i],valueArray[i]);
        if(!result){return result;}
    }
    result = CheckPageRange();
    return result;
}

function CheckFileInfo(FileNumberId,FileScaleId)
{
    var result = IntegerNumCheck(FileNumberId,1);
    if(result)
    {
        var FileNumber = $("#"+FileNumberId).val();
        if(FileNumber < 0 || FileNumber > pageDesignFile.PageCount)
        {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 0 + (i18n['content']['BetweenConnect'] || " and ") + pageDesignFile.PageCount, i18n['title']['Error'] || "Error",function(){
                $("#"+FileNumberId).spinner("value",1);
                $("#"+FileNumberId).select();
            });
            return false;
        }
        result = PositiveNumCheck(FileScaleId,0);
    }
    return result;
}

function IntegerNumCheck(checkId,value)
{
    var result = true;
    var regEx = new RegExp(/^[0-9]*$/);
    var checkValue = $("#"+checkId).val();
    if(regEx.exec(checkValue) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#"+checkId).spinner("value",value);
            $("#"+checkId).select();
        });
        result = false;
    }
    return result;
}

function PositiveNumCheck(checkId,value)
{    
    var result = true;
    var regEx = new RegExp(/^\d+(\.\d+)?$/);
    var checkValue = $("#"+checkId).val();
    if(regEx.exec(checkValue) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#"+checkId).spinner("value",value);
            $("#"+checkId).select();
        });
        result = false;
    }
    return result;
}

function NumericCheck(checkId,value)
{
    var result = true;
    var regEx = new RegExp(/^(-)?\d+(\.\d+)?$/);
    var checkValue = $("#"+checkId).val();
    if(regEx.exec(checkValue) == null)
    {
        jAlert(i18n['content']['InvalidNumericValue'] || "Invalid numeric value", i18n['title']['Error'] || "Error", function () {
            $("#"+checkId).spinner("value",value);
            $("#"+checkId).select();
        });
        result = false;
    }
    return result;
}

function SaveBackground()
{
    var saveBGItem = new PDFBackground();
    var source = $('input:radio[name="BGSource"]:checked').val();
    if(source == "BGColor")
    {
        saveBGItem.Source = "Color";
        saveBGItem.SourceColor = $("#BGColor").val();
    }
    else
    {
        saveBGItem.Source = "File";
        pageDesignFile.PageNum = $("#BGFileNumber").val();
        pageDesignFile.AbScale = $("#BGFileScale").val();
        saveBGItem.SourceFile = pageDesignFile; 
    }
    saveBGItem.Rotation = $("#BGRotate").val();
    saveBGItem.Opacity = $("#BGOpacity").val();
    if(document.getElementById("BGRelaScale").checked)
        saveBGItem.ScaleRela = $("#BGRelaScaleValue").val();
    else
        saveBGItem.ScaleRela = "null";
    saveBGItem.VDistance = $("#BGVerD").val();
    saveBGItem.VertAlign = $("#BGVerAlign").val();
    saveBGItem.HDistance = $("#BGHorD").val();
    saveBGItem.HorAlign = $("#BGHorAlign").val();
    var bgRange = $('input:radio[name="BGRange"]:checked').val();
    if(bgRange == "BGAll")
        saveBGItem.PageRange = "All Pages";
    else
    {
        var from = $("#BGFrom").val();
        var to = $("#BGTo").val();
        saveBGItem.PageRange = from+"_"+to;
    }
    saveBGItem.Subset = $("#BGSubset").val();
    return saveBGItem;
}

function SetBackground(backgroundObject)
{
    if(backgroundObject.Source == "Color")
    {
        $("#BGFromColor").prop("checked",true);
        BGSourceChange();
        $("#BGColor").css("background",backgroundObject.SourceColor);
        $("#BGColor").val(backgroundObject.SourceColor);
    }
    else
    {
        $("#BGFromFile").prop("checked",true);
        BGSourceChange();
        pageDesignFile = backgroundObject.SourceFile;
        $("#BGFileText").val(pageDesignFile.Path);
        SetFileNumber(pageDesignFile.PageCount,"BGFileNumber");
        $("#BGFileScale").spinner("value",pageDesignFile.AbScale);   
    }
    if(backgroundObject.ScaleRela == "null")
    {
        $("#BGRelaScale").prop("checked",false);
        $("#BGRelaScaleValue").spinner("disable" );
        $("#BGRelaScaleValue").css("color","#B1B6B9");
        $("#BGRelaScaleValue").css("border","1px solid #B1B6B9");
    }
    else
    {
        $("#BGRelaScale").prop("checked",true);
        $("#BGRelaScaleValue").spinner("enable");
        $("#BGRelaScaleValue").css("color","#000000");
        $("#BGRelaScaleValue").css("border","1px solid #727272");
        $("#BGRelaScaleValue").spinner("value",backgroundObject.ScaleRela);
    }
    $("#BGRotate").spinner("value",backgroundObject.Rotation);
    $("#BGOpacity").spinner("value",backgroundObject.Opacity);
    $("#BGVerD").spinner("value",backgroundObject.VDistance);
    $("#BGVerAlign").val(backgroundObject.VertAlign).attr("selected",true);
    $("#BGHorD").spinner("value",backgroundObject.HDistance);
    $("#BGHorAlign").val(backgroundObject.HorAlign).attr("selected",true);
    if(backgroundObject.PageRange == "All Pages")
    {
        $("#BGPageAll").prop("checked",true);
        PageRangeChange("BGPageAll");
    }
    else
    {
        $("#BGPageFrom").prop("checked",true);
        PageRangeChange("BGPageFrom");
        var pageRange = backgroundObject.PageRange;
        var posi = pageRange.indexOf("_");
        var from = pageRange.substring(0,posi);
        var to = pageRange.substring(posi+1);
        $("#BGFrom").spinner("value",from);
        $("#BGTo").spinner("value",to);
    }
    $("#BGSubset").val(backgroundObject.Subset).attr("selected",true);
}

function hideAddBackgroundPopBox()
{
    if(isEnterPasswordPanel || saveSettingShow)
        return;
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_backgroundPopbox").hide(); 
}

var WMFlag = false;
function CreateAddWatermarkPopBox()
{
    var tempWidth = 760;
    var tempHeight = 655;
    if(browserWidth < tempWidth || browserHeight < tempHeight)
    {
        tempWidth = browserWidth * 0.9;
        tempHeight = browserHeight * 0.9;
    }
    var str = "<div id='_watermarkPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_watermarkPopbox").css({
        width:tempWidth + "px",
        height:tempHeight + "px",
        display:"block"
    });
    var WMLoading = "<div id='WMLoad'><div class='LoadImg' id='WMLoading' style='z-index:1050;'><div class='loadingFont'>Loading</div></div></div>";
    $("#_watermarkPopbox").append(WMLoading);
    var paddingTop = (tempHeight - 130)/2;
    $("#WMLoading").css({"width": tempWidth + "px","height": (tempHeight-paddingTop) + "px"});
    $("#WMLoading").css("padding-top",paddingTop+"px");
    $("#WMLoad").hide();

    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Add Watermark</div><div   class='poptitleimage poptitlestyle'  onclick='hideAddWatermarkPopBox();'></div></div>";
    $("#_watermarkPopbox").append(title);
    
    var popContent = "<div class='popinner' style='width:" + (tempWidth - 45) + "px;height:" + (tempHeight - 65) + "px;'>";
    popContent += "<table style='width:480px;height:38px;'>";
    popContent += "<tr><td>Saved Settings:</td><td><select id='WMSaveSettings' style='width:120px;'></select></td><td><button style='width:80px;' id='WMRemove' onclick='RemoveSetting(this)'>Delete</button></td><td><button style='width:120px;' id='WMSave' onclick='SaveSetting(this)'>Save Settings...</button></td></tr></table>";
    
    var WMAcceptArray = new Array(".pdf",".png",".bmp",".jpg",".jpeg");
    
    popContent += "<fieldset style='width:450px;height:220px;'><legend>Source</legend><table style='width:430px;height:100%;'>";
    popContent += "<tr><td><input type='radio' id='WMFromText' name='WMSource' value='WMText' onchange='WMSourceChange();' checked><label for='WMFromText'>Text</label></td><td colspan='4'><textArea style='width:230px;height:40px;resize:none;' id='WMText'></textArea></td></tr>";
    popContent += "<tr><td></td><td>Font:</td><td colspan='2'><select style='width:150px;' id='WMFont' class='WMSelect'></select></td><td>Size:</td><td><select id='WMSize' class='WMSelect'></select></td></tr>";
    popContent += "<tr><td></td><td><div id='WMUDiv' style='border:2px solid #F0F0F0;width:17px;height:17px;'><div style='width:15px;height:15px;border:1px solid #b2b0a7;text-align:center;cursor:pointer' id='WMStyle' onclick='WMUnderlineChange();'>U</div></td><td>Color:</td><td><div id='WMColor' style='width:20px;height:12px;background:#000000;' value='#000000'></div></td></tr>";
    popContent += "<tr><td><input type='radio' id='WMFromFile' name='WMSource' value='WMFile' onchange='WMSourceChange();'><label for='WMFromFile'>File</label></td><td colspan='4'><input id='WMFileText' type='text' style='width:290px;height:22px;' readOnly='readOnly' value='<No source file selected>'/></td><td><div><button onclick='WMFile.click()' id='WMFileButton'>Browse</button><input type='file' id='WMFile' name='WMFile' style='opacity:0;left:200px;top:0px;position:absolute;' onchange='WMFileChange()' accept='"+WMAcceptArray+"'/></div></td></tr>";
    
    popContent += "<tr><td></td><td>Page Number:</td><td><input id='WMFileNumber' class='WMSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td><td>Absolute Scale:</td><td><input id='WMFileScale' class='WMSpinner' style='border:1px solid #727272;width:30px;' onchange='WMFileScaleChange();'/></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='width:450px;height:150px;'><legend>Appearance</legend><table style='width:440px;height:100%;'>";
    popContent += "<tr><td>Rotation:</td><td><input type='radio' id='WMC45' name='WMRotation' value='WMC45' onchange='WMRotationChange();'><label for='WMC45'>-45D</label></td><td><input type='radio' id='WMNone' name='WMRotation' value='WMNone' onchange='WMRotationChange();'><label for='WMNone'>None</label></td><td><input type='radio' id='WM45' name='WMRotation' value='WM45' onchange='WMRotationChange();'><label for='WM45'>45D</label></td><td><input type='radio' id='WMCustom' name='WMRotation' value='WMCustom' onchange='WMRotationChange();'><label for='WMCustom'>Custom</label></td><td><input id='WMCustomD' class='WMSpinner' style='width:30px;border:1px solid #727272;' onchange='WMCustomChange();'/><td></tr>";
    popContent += "<tr><td>Opacity:</td><td><input id='WMOpacity' class='WMSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td></tr>";
    popContent += "<tr><td colspan='3'><input type='checkbox' id='WMRelaScale' onchange='WMRelaScaleChange();'><label for='WMRelaScale'>Scale relative to target page</label></td><td><input id='WMRelaScaleValue' class='WMSpinner' style='border:1px solid #727272;width:50px;' value='1'/></td></tr>";
    popContent += "<tr><td>Location:</td><td colspan='3'><input type='radio' id='WMBehind' name='WMLocation' value='WMBehind' onchange='SwitchWMSettings();'><label for='WMBehind'>Appear behind page</label></td><td colspan='2'><input type='radio' id='WMTop' name='WMLocation' value='WMTop' onchange='SwitchWMSettings();' checked><label for='WMTop'>Appear on top of page</label></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='float:left;width:330px;height:100px;'><legend>Position</legend><table style='width:100%;height:100%'>";
    popContent += "<tr><td>Vertical Distance:</td><td><input id='WMVerD' class='WMSpinner' style='border:1px solid #727272;width:30px;'/></td><td>Inches from </td><td><select id='WMVerAlign' class='WMSelect'></select></td></tr>";
    popContent += "<tr><td>Horizontal Distance:</td><td><input id='WMHorD' class='WMSpinner' style='border:1px solid #727272;width:30px;'/></td><td>Inches from </td><td><select id='WMHorAlign' class='WMSelect'></select></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='float:left;width:330px;height:100px;'><legend>Page Range Options</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td><input type='radio' id='WMPageAll' name='WMRange' value='WMAll' checked onchange='PageRangeChange(this.id);'><label for='WMPageAll'>All Pages</label></td><td><input type='radio' id='WMPageFrom' name='WMRange' value='WMPart' onchange='PageRangeChange(this.id);'><label for='WMPageFrom'>Pages from</label></td>";
    popContent += "<td><input id='WMFrom' class='WMSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td><td>to:</td><td><input id='WMTo' class='WMSpinner' style='border:1px solid #727272;width:30px;' value='1'/></td></tr>";
    popContent += "<tr><td style='padding-left:20px;'>Subset:</td><td colspan='3'><select id='WMSubset' class='WMSelect'></select></td></tr></table></fieldset>";
    
    popContent += "<button style='margin-top:10px;margin-right;:17px;width:80px;float:right;' onclick='hideAddWatermarkPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:10px;margin-right:30px;width:80px;float:right;' onclick='AddWatermark();'>Ok</button>";
    popContent += "</div>";
    $("#_watermarkPopbox").append(popContent);
    
    var WMSize = new Array("8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72");
    var wmsizepp = "";
    for (var i = 0; i < WMSize.length; i++)
        wmsizepp += '<option>' + WMSize[i] + '</option>';
    $("#WMSize").append(wmsizepp);
        //$("#WMSize").append($('<option></option>').html(WMSize[i]));
    $("#WMSize").change(function(){ 
        var isCheck = document.getElementById("WMRelaScale") .checked;
        if(isCheck)
        {
            $("#WMRelaScale").prop("checked",false);
            $("#WMRelaScaleValue").spinner("disable" );
            $("#WMRelaScaleValue").css("color","#B1B6B9");
            $("#WMRelaScaleValue").css("border","1px solid #B1B6B9");
        }
    });
    var verAlignArray = new Array("Top","Center","Bottom");
    for(var i=0;i<verAlignArray.length;i++)
        $("#WMVerAlign").append($('<option></option>').html(verAlignArray[i]));
    var horAlignArray = new Array("Left","Center","Right")
    for(var i=0;i<horAlignArray.length;i++)
        $("#WMHorAlign").append($('<option></option>').html(horAlignArray[i]));
    
    var WMSubsetArray = new Array("All pages in range","Even pages only","Odd pages only");
    for(var i=0;i<WMSubsetArray.length;i++)
        $("#WMSubset").append($('<option></option>').html(WMSubsetArray[i]));
        
    $("#WMFileNumber").spinner();
    $("#WMFileNumber").spinner("option", "min", 1 );
    $("#WMFileNumber").spinner("option", "step", 1);
    
    $("#WMFileScale").spinner();
    $("#WMFileScale").spinner("option", "min", 0 );
    $("#WMFileScale").spinner("option", "step", 0.01);
    
    $("#WMCustomD").spinner();
    $("#WMCustomD").spinner("option", "step", 1);
    
    $("#WMOpacity").spinner();
    $("#WMOpacity").spinner("option", "min", 0 );
    $("#WMOpacity").spinner("option", "step", 0.01);
    $("#WMOpacity").spinner("option", "max", 1);
    
    $("#WMRelaScaleValue").spinner();
    $("#WMRelaScaleValue").spinner("option", "min", 0 );
    $("#WMRelaScaleValue").spinner("option", "step", 0.01);
    
    $("#WMVerD").spinner();
    $("#WMVerD").spinner("option", "step", 0.1);
    
    $("#WMHorD").spinner();
    $("#WMHorD").spinner("option", "step", 0.1);
    
    $("#WMFrom").spinner();
    $("#WMFrom").spinner("option", "min", 1 );
    $("#WMFrom").spinner("option", "step", 1);
    $("#WMTo").spinner();
    $("#WMTo").spinner("option", "min", 1 );
    $("#WMTo").spinner("option", "step", 1);
    
    $("#WMSaveSettings").bind("change",function(){
        var selectIndex = parseInt($(this).get(0).selectedIndex);
        WMFlag = false;
        SetWatermark(savePDFWatermark[selectIndex].Settings);
        if(selectIndex == 0)
            $("#WMRemove").attr("disabled","disabled");
        else
        {
            $("#WMRemove").attr("disabled",false);
            WMFlag = true;
        }
    });
    
    $(".WMSpinner").spinner({spin:function(event,ui){
        SwitchWMSettings();
        if(this.id == "WMFileScale")
        {
            $("#WMRelaScale").prop("checked",false);
            $("#WMRelaScaleValue").spinner("disable" );
            $("#WMRelaScaleValue").css("color","#B1B6B9");
            $("#WMRelaScaleValue").css("border","1px solid #B1B6B9");
            NumericCheck("WMFileScale",0);
        }
        else if(this.id == "WMCustomD")
        {
            $("#WMCustom").prop("checked",true);
        }
    }});
    $(".WMSelect").bind("change",function(){SwitchWMSettings();});
    
    var initWatermark = new PDFWatermark();
    var initSaveSetting = new PDFSaveSetting();
    initSaveSetting.Name = "None specified";
    initSaveSetting.Settings = initWatermark;
    savePDFWatermark.push(initSaveSetting);
    
    for(var i=0;i<savePDFWatermark.length;i++)
        $("#WMSaveSettings").append($('<option></option>').html(savePDFWatermark[i].Name));
        
    $("#_watermarkPopbox").hide();
}

function WMUnderlineChange()
{
    var isUnderline = $("#WMStyle").val();
    if(isUnderline == "false")
    {
        $("#WMStyle").val("true");
        $("#WMUDiv").css("border-color","#b2b0a7");
    }
    else
    {
        $("#WMStyle").val("false");
        $("#WMUDiv").css("border-color","#F0F0F0");
    }
}

function SwitchWMSettings()
{
    if(WMFlag)
    {
        var value = $("#WMSaveSettings").val();
        if(value != "None specified")
            $("#WMSaveSettings").val("None specified").attr("selected",true);
        WMFlag = false;
    }
}

function WMFileScaleChange()
{ 
    $("#WMRelaScale").prop("checked",false);
    $("#WMRelaScaleValue").spinner("disable" );
    $("#WMRelaScaleValue").css("color","#B1B6B9");
    $("#WMRelaScaleValue").css("border","1px solid #B1B6B9");
    NumericCheck("WMFileScale",0);
}

function WMCustomChange()
{
    $("#WMCustom").prop("checked",true);
}

function WMRelaScaleChange()
{
   var isChecked = document.getElementById("WMRelaScale").checked;
   var source = $('input:radio[name="WMSource"]:checked').val();
   if(isChecked)
   {
        $("#WMRelaScaleValue").spinner("enable");
        $("#WMRelaScaleValue").css("color","#000000");
        $("#WMRelaScaleValue").css("border","1px solid #727272");
        if(source == "WMText")
            $("#WMSize").val(" ").attr("selected",true);
        else
            $("#WMFileScale").spinner("value","");
   }
   else
   {
        $("#WMRelaScaleValue").spinner("disable");
        $("#WMRelaScaleValue").css("color","#B1B6B9");
        $("#WMRelaScaleValue").css("border","1px solid #B1B6B9");
        if(source == "WMText")
            $("#WMSize").val("24").attr("selected",true);
        else
            $("#WMFileScale").spinner("value",1);
   }
   SwitchWMSettings();
}

var addWMItem = "";
function AddWatermark()
{
    if(isEnterPasswordPanel || saveSettingShow)
        return;
    var result = CheckWatermarkData();
    if(result)
    {
        hideAddWatermarkPopBox();
        addWMItem = SaveWatermark();
        var addWMIndexs = GetPDFDesignIndexArray(addWMItem.PageRange,addWMItem.Subset);
        if(addWMIndexs.length == 0)
            return;
        addWMItem.PageIndexs = addWMIndexs;
        _pdfPageDesign.LastDesign = "watermark";
        if(pageDesignAct == "New")
        {
            drawWatermark(addWMItem,_pdfPageDesign.Watermark.length);
            _pdfPageDesign.Watermark.push(addWMItem);
        }
        else
        {
            $(".WM").remove();
            var watermark = new Array();
            for(var i=0;i<_pdfPageDesign.Watermark.length;i++)
            {
                var WMItem = _pdfPageDesign.Watermark[i];
                var segmentItems = PageSegment(WMItem.PageRange,WMItem.Subset,addWMItem.PageRange,addWMItem.Subset);
                for(var j=0;j<segmentItems.length;j++)
                {
                    var rangeObject = segmentItems[j];
                    var indexs = GetPDFDesignIndexArray(rangeObject.PageRange,rangeObject.Subset);
                    if(indexs.length == 0)
                        continue;
                    else
                    {
                        var newItem = CloneWMItem(WMItem);
                        newItem.PageRange = rangeObject.PageRange;
                        newItem.Subset = rangeObject.Subset;
                        newItem.PageIndexs = indexs;
                        watermark.push(newItem);
                    }
                }
            }
            _pdfPageDesign.Watermark = watermark;
            designWMContent = new Array();
            for(var i=0;i<_pdfPageDesign.Watermark.length;i++)
            {
                var WMItem = _pdfPageDesign.Watermark[i];
                drawWatermark(WMItem,i);       
            }
            drawWatermark(addWMItem,_pdfPageDesign.Watermark.length);
            _pdfPageDesign.Watermark.push(addWMItem);
        }
    }
}

function CloneWMItem(WMItem)
{
    var newItem = new PDFWatermark();
    newItem.Source = WMItem.Source;
    newItem.SourceText = WMItem.SourceText;
    newItem.SourceFile = WMItem.SourceFile;
    newItem.Rotation = WMItem.Rotation;
    newItem.Opacity = WMItem.Opacity;
    newItem.ScaleRela = WMItem.ScaleRela;
    newItem.Location = WMItem.Location;
    newItem.VDistance = WMItem.VDistance;
    newItem.VertAlign = WMItem.VertAlign;
    newItem.HDistance = WMItem.HDistance;
    newItem.HorAlign = WMItem.HorAlign;
    return newItem;
}


function drawWatermark(WMItem,numFlag)
{
    var addWMIndexs = WMItem.PageIndexs;
    var translateX = 0;
    var translateY = 0;
    if(WMItem.Source == "Text")
    {
       var text = WMItem.SourceText.Text;
       var lines = text.split('\n');
       var colLength = text.length;
       var rowLength = lines.length;
       if(lines.length != 1)
       {
            colLength = 0;
            text = "";
            for(var k=0;k<rowLength;k++)
            {
                colLength = colLength > lines[k].length ? colLength : lines[k].length;
                text += lines[k] + "</br>";
            }
        }
        for(var i=0;i<addWMIndexs.length;i++)
        {
            var pageIndex = addWMIndexs[i];
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            var viewerWidth = WidthArray[pageIndex];
            var viewerHeight = HeightArray[pageIndex];
            var width = 0;
            var height = 0;

            if(WMItem.ScaleRela == "null")
            {
                var fontSize = WMItem.SourceText.FontSize;
                var fontName = WMItem.SourceText.FontName;
                var fontColor = WMItem.SourceText.FontColor;
                var textStyle = "";
                if(WMItem.SourceText.IsUnderline)
                    textStyle = "text-decoration:underline;";
                var watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;"+textStyle+"opacity:"+WMItem.Opacity+";font-family:"+fontName+";font-size:"+fontSize+"px;color:"+fontColor+";float:left;'>"+text+"</div>";
                AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);

                width = $("#WM_"+pageIndex+"_"+numFlag).outerWidth(true);
                height = $("#WM_"+pageIndex+"_"+numFlag).outerHeight(true);
                
                var scale = 1;
                var degree = GetDegree(WMItem.Rotation);
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                
                translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,viewerWidth,width,scale,offWidth);
                translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,viewerHeight,height,scale,offHeight);
                var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
            else
            {
                var actualWidth = viewerWidth * WMItem.ScaleRela;
                var actualHeight = viewerHeight * WMItem.ScaleRela;
                var scale = 1;
                
                var fontSize = 0;
                var WFontSize = actualWidth/colLength;
                var HFontSize = actualHeight/rowLength;
                var flag = "";
                if(WFontSize < HFontSize)
                {
                    fontSize = WFontSize;
                    flag = "width";
                }
                else
                {
                    fontSize = HFontSize;
                    flag = "height";
                }
                    
                var fontName = WMItem.SourceText.FontName;
                var fontColor = WMItem.SourceText.FontColor;
                var textStyle = "";
                if(WMItem.SourceText.IsUnderline == "true")
                    textStyle = "text-decoration:underline;";
                var watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;"+textStyle+"opacity:"+WMItem.Opacity+";font-family:"+fontName+";font-size:"+fontSize+"px;color:"+fontColor+";'><span style='float:left;'>"+text+"</span></div>";
                AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
                    
                if(flag == "width")
                {
                    var spanWidth = $("#WM_"+pageIndex+"_"+numFlag+" span").outerWidth(true);
                    fontSize = actualWidth/spanWidth * fontSize;
                    addWMItem.SourceText.FontSize = parseFloat(fontSize).toFixed(3);
                }
                else
                {
                    var spanHeight = $("#WM_"+pageIndex+"_"+numFlag+" span").outerHeight(true);
                    fontSize = actualHeight/spanHeight * fontSize;
                    addWMItem.SourceText.FontSize = parseFloat(fontSize).toFixed(3);
                }
                $("#WM_"+pageIndex+"_"+numFlag+" span").css("font-size",fontSize+"px");
                width = $("#WM_"+pageIndex+"_"+numFlag+" span").outerWidth(true);
                height = $("#WM_"+pageIndex+"_"+numFlag+" span").outerHeight(true);
                $("#WM_"+pageIndex+"_"+numFlag).css({"width":width+"px","height":height+"px"});
                
                var degree = GetDegree(WMItem.Rotation);
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    scale = Math.abs(GetTextScale(width,height,actualWidth,actualHeight,scale,degree));
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,viewerWidth,width,scale,offWidth);
                translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,viewerHeight,height,scale,offHeight);
                var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
        }
    }
    else if(WMItem.Source == "File")
    {
        var filePath = WMItem.SourceFile.Path;
        var suffix = filePath.substring(filePath.lastIndexOf("."));
        filePath = WMItem.SourceFile.FileMD5 + suffix;
        var pageNum = WMItem.SourceFile.PageNum - 1;
        var sizeArray = WMItem.SourceFile.PageSize.split("|");
        var size = sizeArray[pageNum];
        var width = size.split(",")[0];
        var height = size.split(",")[1];
        var translateX = 0;
        var translateY = 0;
        var SVGContent = "";
        var result = GetFileHTML(filePath,pageNum);
        for(var i=0;i<addWMIndexs.length;i++)
        {
            var pageIndex = addWMIndexs[i];
            if(WMItem.ScaleRela == "null")
            {
                if(WMItem.SourceFile.AbScale == 0)
                    return;
                var scale = WMItem.SourceFile.AbScale;
                var paWidth = WidthArray[pageIndex];
                var paHeight = HeightArray[pageIndex];
                
                var watermark = "";
                if(suffix == ".pdf")
                {
                    watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+WMItem.Opacity+"'>"+result+"</div>";
                }
                else
                {
                    var imgPath = getFolder("insert") + result + ".png";
                    watermark = "<img class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+WMItem.Opacity+"' src='"+imgPath+"'/>"; 
                }
                AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
                
                var degree = GetDegree(WMItem.Rotation);
                var offWidth = 0;
                var offHeight = 0;
                if(degree != 0)
                {
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
                }
                
                translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,paWidth,width,scale,offWidth);
                translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,paHeight,height,scale,offHeight);

                var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                AdaptTransform(target,transform);
            }
            else
            {
                if(WMItem.ScaleRela == 0)
                    return;
                var paWidth = WidthArray[pageIndex] * WMItem.ScaleRela;
                var paHeight = HeightArray[pageIndex] * WMItem.ScaleRela;
                var widthPercent = paWidth/width;
                var heightPercent = paHeight/height;
                var scale = widthPercent < heightPercent ? widthPercent : heightPercent;  
                
                var watermark = "";
                if(suffix == ".pdf")
                {
                    watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+WMItem.Opacity+"'>"+SVGContent+"</div>";
                }
                else
                {
                    var imgPath = getCacheFileFolder(_fid) + "insert/0.png"; //"page/insert/0.png";
                    watermark = "<img class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;width:"+width+"px;height:"+height+"px;opacity:"+WMItem.Opacity+"' src='"+imgPath+"'/>";  
                }
               AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
               
               var degree = GetDegree(WMItem.Rotation);
               var offWidth = 0;
               var offHeight = 0;
               if(degree != 0)
               {
                    scale = Math.abs(GetScale(width,height,scale,degree));
                    offWidth = GetOffWidth(width,height,degree);
                    offHeight = GetOffHeight(width,height,degree);
               }
               translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
               translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);
               
               var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
               var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
               AdaptTransform(target,transform);
           }
        }
    }
    else if(WMItem.Source == "TextSvg" || WMItem.Source == "FileSvg")
    {
        if(WMItem.Source == "TextSvg")
        {
            var text = WMItem.SourceText.Text;
            var lines = text.split('\n');
            var colLength = text.length;
            var rowLength = lines.length;
            if(lines.length != 1)
            {
                colLength = 0;
                text = "";
                for(var k=0;k<rowLength;k++)
                {
                    colLength = colLength > lines[k].length ? colLength : lines[k].length;
                    text += lines[k] + "</br>";
                }
            }
            var fontSize = WMItem.SourceText.FontSize;
            var fontName = WMItem.SourceText.FontName;
            var fontColor = WMItem.SourceText.FontColor;
            var textStyle = "";
            if(WMItem.SourceText.IsUnderline)
                textStyle = "text-decoration:underline;";
                
            for(var i=0;i<addWMIndexs.length;i++)
            {
                var pageIndex = addWMIndexs[i];
                var viewerWidth = WidthArray[pageIndex];
                var viewerHeight = HeightArray[pageIndex];
                if(WMItem.ScaleRela == 0) //fontSize
                {
                    var watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;float:left;'></div>";
                    var name = fontName;
                    AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
                    
                    if(fontName.indexOf("WebFont:") != -1)
                    {
                        var defiName = fontName.substring(8);
                        name = defiName.substring(0,defiName.lastIndexOf("."));
                        var defiNamePath = getFolder(design) + defiName;//getCacheFileFolder(_fid) + "input/design/" + defiName;
                        $("#WM_"+pageIndex+"_"+numFlag).append("<style>@font-face{font-family:"+name+";src:url('"+defiNamePath+"') format('woff');}</style>");
                    }
                    $("#WM_"+pageIndex+"_"+numFlag).append("<div style='"+textStyle+"opacity:"+WMItem.Opacity+";font-size:"+fontSize+"px;color:"+fontColor+";font-family:"+name+"'>"+text+"</div>");
                    
                    width = $("#WM_"+pageIndex+"_"+numFlag).outerWidth(true);
                    height = $("#WM_"+pageIndex+"_"+numFlag).outerHeight(true);
                    
                    var scale = 1;
                    var degree = GetDegree(WMItem.Rotation);
                    var offWidth = 0;
                    var offHeight = 0;
                    if(degree != 0)
                    {
                        offWidth = GetOffWidth(width,height,degree);
                        offHeight = GetOffHeight(width,height,degree);
                    }
                    
                    translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,viewerWidth,width,scale,offWidth);
                    translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,viewerHeight,height,scale,offHeight);
                    var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                    var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                    AdaptTransform(target,transform);
                }
                else //scaleRela
                {
                    var actualWidth = viewerWidth * WMItem.ScaleRela;
                    var actualHeight = viewerHeight * WMItem.ScaleRela;
                    var scale = 1;
                    
                    var fontSize = 0;
                    var WFontSize = actualWidth/colLength;
                    var HFontSize = actualHeight/rowLength;
                    var flag = "";
                    if(WFontSize < HFontSize)
                    {
                        fontSize = WFontSize;
                        flag = "width";
                    }
                    else
                    {
                        fontSize = HFontSize;
                        flag = "height";
                    }
                    var watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;float:left;'></div>";
                    var name = fontName;
                    AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
                    
                    if(fontName.indexOf("WebFont:") != -1)
                    {
                        var defiName = fontName.substring(8);
                        name = defiName.substring(0,defiName.lastIndexOf("."));
                        var defiNamePath = getFolder(design) + defiName;
                        $("#WM_"+pageIndex+"_"+numFlag).append("<style>@font-face{font-family:"+name+";src:url('"+defiNamePath+"') format('woff');}</style>");
                    }
                    $("#WM_"+pageIndex+"_"+numFlag).append("<div style='"+textStyle+"opacity:"+WMItem.Opacity+";font-size:"+fontSize+"px;color:"+fontColor+";font-family:"+name+"'><span>"+text+"</span></div>");
                    
                    if(flag == "width")
                    {
                        var spanWidth = $("#WM_"+pageIndex+"_"+numFlag+" span").outerWidth(true);
                        fontSize = actualWidth/spanWidth * fontSize;
                        WMItem.SourceText.FontSize = parseFloat(fontSize).toFixed(3);
                    }
                    else
                    {
                        var spanHeight = $("#WM_"+pageIndex+"_"+numFlag+" span").outerHeight(true);
                        fontSize = actualHeight/spanHeight * fontSize;
                        WMItem.SourceText.FontSize = parseFloat(fontSize).toFixed(3);
                    }
                    $("#WM_"+pageIndex+"_"+numFlag+" span").css("font-size",fontSize+"px");
                    width = $("#WM_"+pageIndex+"_"+numFlag+" span").outerWidth(true);
                    height = $("#WM_"+pageIndex+"_"+numFlag+" span").outerHeight(true);
                    
                    var degree = GetDegree(WMItem.Rotation);
                    var offWidth = 0;
                    var offHeight = 0;
                    if(degree != 0)
                    {
                        scale = Math.abs(GetTextScale(width,height,actualWidth,actualHeight,scale,degree));
                        offWidth = GetOffWidth(width,height,degree);
                        offHeight = GetOffHeight(width,height,degree);
                    }
                    translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,viewerWidth,width,scale,offWidth);
                    translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,viewerHeight,height,scale,offHeight);
                    var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                    var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                    AdaptTransform(target,transform);
                }
            }
        }
        else if(WMItem.Source == "FileSvg")
        {
            var translateX = 0;
            var translateY = 0;
            var SVGContent = GetFileSvgContent(WMItem.SourceFile.Path);
            for(var i=0;i<addWMIndexs.length;i++)
            {
                var pageIndex = addWMIndexs[i];
                if(WMItem.SourceFile.AbScale == "")//RelaScale
                {
                    var paWidth = WidthArray[pageIndex] * WMItem.ScaleRela;
                    var paHeight = HeightArray[pageIndex] * WMItem.ScaleRela;

                    var watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;opacity:"+WMItem.Opacity+"'>"+SVGContent+"</div>";
                   AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
                   
                   var width = $("#WM_"+pageIndex+"_"+numFlag).outerWidth(true);
                   var height = $("#WM_"+pageIndex+"_"+numFlag).outerHeight(true);
                   var widthPercent = paWidth/width;
                   var heightPercent = paHeight/height;
                   var scale = widthPercent < heightPercent ? widthPercent : heightPercent; 
                   var degree = GetDegree(WMItem.Rotation);
                   var offWidth = 0;
                   var offHeight = 0;
                   if(degree != 0)
                   {
                        scale = Math.abs(GetScale(width,height,scale,degree));
                        offWidth = GetOffWidth(width,height,degree);
                        offHeight = GetOffHeight(width,height,degree);
                   }
                   translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,WidthArray[pageIndex],width,scale,offWidth);
                   translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,HeightArray[pageIndex],height,scale,offHeight);
                   
                   var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                   var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                   AdaptTransform(target,transform);
                }
                else //abScale
                {
                    var scale = WMItem.SourceFile.AbScale;
                    var paWidth = WidthArray[pageIndex];
                    var paHeight = HeightArray[pageIndex];
                    
                    var watermark = "<div class='WM' id='WM_"+pageIndex+"_"+numFlag+"' style='position:absolute;opacity:"+WMItem.Opacity+"'>"+SVGContent+"</div>";
                    AppendWatermark(WMItem.Location,pageIndex,numFlag,watermark);
                    
                    var width = $("#WM_"+pageIndex+"_"+numFlag).outerWidth(true);
                    var height = $("#WM_"+pageIndex+"_"+numFlag).outerHeight(true);
                    var degree = GetDegree(WMItem.Rotation);
                    var offWidth = 0;
                    var offHeight = 0;
                    if(degree != 0)
                    {
                        offWidth = GetOffWidth(width,height,degree);
                        offHeight = GetOffHeight(width,height,degree);
                    }
                    
                    translateX = GetTranslateX(WMItem.HorAlign,WMItem.HDistance,paWidth,width,scale,offWidth);
                    translateY = GetTranslateY(WMItem.VertAlign,WMItem.VDistance,paHeight,height,scale,offHeight);

                    var target = document.getElementById("WM_"+pageIndex+"_"+numFlag);
                    var transform = 'translateX(' + translateX + 'px) translateY(' + translateY + 'px) scale(' + scale + ') rotate(' + degree + 'deg)';
                    AdaptTransform(target,transform);
                }
            }
        }
    }
}

function AppendWatermark(WMLocation,pageIndex,numFlag,watermark)
{
    if(!_showDocSrc.in_array(pageIndex))
    {
        if(WMLocation == "Behind")
            $("#page_"+pageIndex).append(watermark);
        else
        {
            var preContent = designWMContent[pageIndex];
            if(typeof(preContent) == "undefined")
                preContent = "";
            var newContent = "WM_"+pageIndex+"_"+numFlag+";";
            designWMContent[pageIndex] = preContent + newContent;
            $("#page_"+pageIndex).append(watermark);
        }
    }
    else
    {
        var tempZIndex = $(".cTDiv_"+pageIndex).css("z-index");
        if(tempZIndex == "auto")
        {
            if(WMLocation == "WMBehind")
            {
                var content = $("#page_"+pageIndex).html();
                $("#page_"+pageIndex).empty();
                $("#page_"+pageIndex).append(watermark);
                $("#page_"+pageIndex).append(content);
            }
            else 
            {
                $("#page_"+pageIndex).append(watermark);
            }
        }
        else
        {
            tempZIndex = parseInt(tempZIndex);
            $("#page_"+pageIndex).append(watermark);
            if(WMLocation == "WMBehind"){}
            else
            {
                $("#WM_"+pageIndex+"_"+numFlag).css("z-index",tempZIndex+1);
            }
        }
    }
}

function GetDegree(rotation)
{
    var degree = 0;
    if(rotation == "WMNone")
        degree = 0;
    else if(rotation == "WMC45")
        degree = 45;
    else if(rotation == "WM45")   
        degree = -45;
    else 
        degree = -rotation;
    return degree;
}

function GetTextScale(width,height,actualWidth,actualHeight,scale,degree)
{
   degree = Math.abs(degree) % 360;
   var tempWScale = 0;
   var tempHScale = 0;
   if(degree <= 90 || (degree > 180 && degree <= 270))
   {
       if(degree > 90)
         degree -= 180;
       var angle = Math.atan2(width,height) * (180/Math.PI);
       var skewLine = width/(2 * Math.sin(angle * (Math.PI /180)));
       angle = 90 - angle - Math.abs(degree);
       var Wline = Math.cos(angle * (Math.PI /180)) * skewLine;
       tempWScale = actualWidth / (2 * Wline); 
       var Hline = Math.sin(angle * (Math.PI /180)) * skewLine;
       tempHScale = actualHeight / (2 * Hline); 
   }
   else if((degree > 90 && degree <= 180) || (degree > 270 && degree <= 360))
   {
       if(degree > 90 && degree< 180)
          degree -= 90;
       else
          degree -= 270;
       var angle = Math.atan2(height,width) * (180/Math.PI);
       var skewLine = height/(2 * Math.sin(angle * (Math.PI/180)));
       angle = 90 - angle - Math.abs(degree);
       var Wline = Math.cos(angle * (Math.PI/180)) * skewLine;
       tempWScale =  actualWidth / ( 2 * Wline );
       var Hline = Math.sin(angle * (Math.PI /180)) * skewLine;
       tempHScale = actualHeight / (2 * Hline);
   }
   if(Math.abs(tempWScale) < Math.abs(tempHScale))
       scale = scale * tempWScale;
   else
       scale = scale * tempHScale;
   return scale;
}

function GetScale(width,height,scale,degree)
{
   degree = Math.abs(degree) % 360;
   if(degree <= 90 || (degree > 180 && degree <= 270))
   {
       if(degree > 90)
         degree -= 180;
       var angle = Math.atan2(width,height) * (180/Math.PI);
       var skewLine = width/(2 * Math.sin(angle * (Math.PI /180)));
       angle = 90 - angle - Math.abs(degree);
       var line = Math.cos(angle * (Math.PI /180)) * skewLine;
       scale = scale * width / (2 * line);  
   }
   else if((degree > 90 && degree <= 180) || (degree > 270 && degree <= 360))
   {
       if(degree > 90 && degree< 180)
          degree -= 90;
       else
          degree -= 270;
       var angle = Math.atan2(height,width) * (180/Math.PI);
       var skewLine = height/(2 * Math.sin(angle * (Math.PI/180)));
       angle = 90 - angle - Math.abs(degree);
       var line = Math.cos(angle * (Math.PI/180)) * skewLine;
       scale = scale * width / ( 2 * line );
   }
   return scale;
}

function GetOffWidth(width,height,degree)
{
    var offWidth = 0;
    degree = Math.abs(degree) % 360;
    if(degree <= 90 || (degree > 180 && degree < 270))
    {
        if(degree > 90)
            degree -= 180;
        var angle = Math.atan2(width,height) * (180/Math.PI);
        var skewLine = width/(2 * Math.sin(angle * (Math.PI/180)));
        angle = Math.abs(90 - angle - Math.abs(degree));
        offWidth = Math.cos(angle * (Math.PI/180)) * skewLine - width/2;
    }
    else if((degree > 90 && degree < 180) || (degree > 270 && degree < 360))
    {
       if(degree > 90 && degree < 180)
          degree -= 90;
       else
          degree -= 270; 
       var angle = Math.atan2(height,width) * (180/Math.PI);
       var skewLine = height/(2 * Math.sin(angle * (Math.PI/180)));
       angle = Math.abs(90 - angle - Math.abs(degree));
       offWidth = Math.cos(angle * (Math.PI/180)) * skewLine - width/2;
    }
    return offWidth;
}

function GetOffHeight(width,height,degree)
{
   var offHeight = 0;
   degree = Math.abs(degree) % 360;
   if(degree <= 90 || (degree > 180 && degree < 270))
   {
        if(degree > 90)
           degree -= 180;
        var angle = Math.atan2(height,width) * (180/Math.PI);
        var skewLine = height/(2 * Math.sin(angle*(Math.PI/180)));
        angle = Math.abs(90 - angle - Math.abs(degree));
        offHeight =  Math.cos(angle * (Math.PI/180)) * skewLine - height/2;
   }
   else if((degree > 90 && degree < 180) || (degree > 270 && degree < 360))
   {
       if(degree > 90 && degree < 180)
          degree -= 90;
       else
          degree -= 270; 
       var angle = Math.atan2(width,height) * (180/Math.PI);
       var skewLine = width/(2 * Math.sin(angle*(Math.PI/180)));
       angle = Math.abs(90 - angle - Math.abs(degree));
       offHeight = Math.cos(angle * (Math.PI/180)) * skewLine - height/2; 
   }
   return offHeight;
}

function GetTranslateX(horAlign,hDistance,paWidth,width,scale,offWidth)
{
    var translateX = 0;
   if(horAlign == "Left")
   {
        if(scale > 1)
            translateX = hDistance * 72 + width/2 * (scale - 1);
        else if(scale < 1) 
            translateX = hDistance * 72 - width/2 * (1- scale);
        else if(scale == 1)
            translateX = hDistance * 72;
        translateX += offWidth * scale;
   }
   else if(horAlign == "Center")
   {
        translateX = (paWidth - width)/2  + hDistance * 72;
   }
   else if(horAlign == "Right")
   {
        if(scale > 1)
            translateX = (paWidth - width) - width/2 * (scale - 1) - hDistance * 72;
        else if(scale < 1)
            translateX = (paWidth - width) + width/2 * (1 - scale) - hDistance * 72;
        else if(scale == 1)
            translateX = (paWidth - width) - hDistance * 72;
        translateX -= offWidth * scale;
   } 
   return translateX;
}

function GetTranslateY(vertAlign,vDistance,paHeight,height,scale,offHeight)
{
    var translateY = 0;
    if(vertAlign == "Top")
    {
        if(scale > 1)
            translateY = vDistance * 72 + height/2 * (scale - 1);
        else if(scale < 1)
            translateY = vDistance * 72 - height/2 * (1- scale);
        else if(scale == 1)
            translateY = vDistance * 72;
        translateY += offHeight * scale;
    }
    else if(vertAlign == "Center")
    {
        translateY = (paHeight - height)/2 + vDistance * 72;
    }
    else if(vertAlign == "Bottom")
    {
        if(scale > 1)
            translateY = (paHeight - height) - height/2 * (scale - 1) - vDistance * 72;
        else if(scale < 1)
            translateY = (paHeight - height) + height/2 * (1- scale) - vDistance * 72;
        else if(scale == 1)
            translateY = (paHeight - height) - vDistance * 72;
        translateY -= offHeight * scale;  
    }
    return translateY;
}


function WMRotationChange()
{
    var rotation = $('input:radio[name="WMRotation"]:checked').val();
    var rotateD = 0;
    if(rotation == "WMC45")
        rotateD = -45;
    else if(rotation == "WMNone")
        rotateD = 0;
    else if(rotation == "WM45")
        rotateD = 45;
    $("#WMCustomD").spinner("value",rotateD);
    SwitchWMSettings();
}

function WMSourceChange()
{
    var source = $('input:radio[name="WMSource"]:checked').val();
    var isCheck = document.getElementById("WMRelaScale").checked;
    $("#WMColor").unbind("click");
    if(source == "WMText")
    {
        $("#WMFileButton").attr("disabled","disabled");
        $("#WMFile").attr("disabled","disabled");
        $("#WMFileNumber").spinner( "disable" );
        $("#WMFileNumber").css( "color","#B1B6B9" );
        $("#WMFileNumber").css("border","1px solid #B1B6B9");
        $("#WMFileScale").spinner( "disable" );
        $("#WMFileScale").css("border","1px solid #B1B6B9");
        $("#WMColor").bind("click",function(){ShowTableColor(this,false);});
        $("#WMColor").css("border","1px solid #727272");
        if(isCheck)
            $("#WMSize").val(" ").attr("selected",true);
        else
            $("#WMSize").val("24").attr("selected",true);
    }
    else
    {
        $("#WMFileButton").attr("disabled",false);
        $("#WMFile").attr("disabled",false);
        $("#WMFileScale").spinner( "enable" );
        $("#WMFileScale").css("border","1px solid #727272");
        $("#WMColor").css("border","1px solid #B1B6B9");
        if(isCheck)
            $("#WMFileScale").spinner("value","");
        else
            $("#WMFileScale").spinner("value","1");
    }
    SwitchWMSettings();
}

function WMFileChange()
{
    SwitchWMSettings();
    var fileReader = new FileReader();
    blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;
    file = document.getElementById("WMFile").files[0];
    chunkSize = 2097152;             
    chunks = Math.ceil(file.size / chunkSize);
    currentChunk = 0;
    spark = new SparkMD5.ArrayBuffer();
    fileReader.onload = function(e) {
        var arrayBuffer = e.target.result;
        spark.append(arrayBuffer);
        currentChunk++;
        if (currentChunk < chunks) 
            loadNext();
        else
        {
            pageDesignFileMD5  =  spark.end();
            var result = IsUploadSameFile(pageDesignFileMD5);
            if(result != "")
            {
                $("#WMFileText").val($("#WMFile").val());
                pageDesignFile = new SourceFromFile();
		        pageDesignFile.PageCount = result.PageCount;
		        pageDesignFile.PageSize = result.PageSize;
		        pageDesignFile.FileMD5 = pageDesignFileMD5;
		        if($("#WMFile").val() != result.Path)
		        {
		            pageDesignFile.Path = $("#BGFile").val();
		            pageDesignListFile.push(pageDesignFile);
		        }
		        else
		            pageDesignFile.Path = result.Path;
		        SetFileNumber(pageDesignFile.PageCount,"WMFileNumber");
            }
            else
            {
                $("#WMLoad").show();
                $.ajaxFileUpload
	            ({			
                    url:getCurrentAspx(),
			        secureuri:false,
			        fileElementId:'WMFile',
			        dataType: 'json',
			        data:{add:"pageDesign",fid:_fid},
			        success: function (data ,status)
			        {	
			            $("#WMLoad").hide();
			            if(typeof(data.error) != 'undefined'){}
				        else
				        {
				            if(data.indexOf("hasPassword") != -1)
				            {
				                insertName = $("#WMFile").val();
                                InsertType = "pageDesignWM";
                                $("#_designPasPanel").show();
                                SignPanelPosition("#_designPasPanel");
                                isEnterPasswordPanel = true;
                                $("#_designName").html(insertName)
				            }
				            else if(data.indexOf("hasOwnerPsword") != -1)
				            {
				                jAlert(i18n['content']['FileProtected'] || ("The file " + $("#WMFile").val() + " is protected.It cannot be used for this command."), i18n['title']['RasterEdge'] || "RasterEdge Application");
				             
				            }
				            else
				            {
				                $("#WMFileText").val($("#WMFile").val());
				                var info = data.split(";");
				                pageDesignFile = new SourceFromFile();
				                pageDesignFile.Path = $("#WMFile").val();
				                pageDesignFile.FileMD5 = pageDesignFileMD5;
				                pageDesignFile.PageCount = info[1];
				                pageDesignFile.PageSize = info[2];
				                pageDesignListFile.push(pageDesignFile);
                                SetFileNumber(pageDesignFile.PageCount,"WMFileNumber");
				            }
                        }
			        },
			        error: function (data, status, e)
			        {
				        alert(e);
			        }
		        })
            }
        }
    };
    function loadNext() 
    {
        var start = currentChunk * chunkSize;
        var end = start + chunkSize >= file.size ? file.size : start + chunkSize;
        fileReader.readAsArrayBuffer(blobSlice.call(file,start,end));
    };
    loadNext();
}

function ShowAddWatermarkPopBox()
{
    $("#_watermarkPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    $("#WMFileNumber").spinner("option","max",_totalPageCount);
    $("#WMFrom").spinner("option","max",_totalPageCount);
    $("#WMTo").spinner("option","max",_totalPageCount);
    $("#WMSaveSettings").val("None specified").attr("selected",true);
    $("#WMRemove").attr("disabled","disabled");
    SetWatermark(new PDFWatermark());
    SignPanelPosition("#_watermarkPopbox");
}

function CheckWatermarkData()
{
    var result = true;
    var isCheck = document.getElementById("WMRelaScale").checked;
    var source = $('input:radio[name="WMSource"]:checked').val();
    if(source == "WMFile")
    {
        if($("#WMFileText").val() == "<No source file selected>")
        {
            jAlert(i18n['content']['NoSourceFile'] || "No source file was specified.Please click Browser to locate a source file and then try again.", i18n['title']['Error'] || "Error");
            return false;
        }
    }
    if(isCheck)
    {
        result = PositiveNumCheck("WMRelaScaleValue",1);
        if(!result){return result;}
    }
    else if(source == "BGFile")
    {
        result = CheckFileInfo("WMFileNumber","WMFileScale");
        if(!result){return result;}
    }
    result = PositiveNumCheck("WMOpacity",1);
    if(result)
    {
        var WMOpacity = $("#WMOpacity").val();
        if(WMOpacity < 0 || WMOpacity > 1)
        {
            jAlert((i18n['content']['ValueBetween'] || "The value must be between ") + 0 + (i18n['content']['BetweenConnect'] || " and ") + 1, i18n['title']['Error'] || "Error",function(){
                $("#WMOpacity").spinner("value",1);
                $("#WMOpacity").select();
            });
            return false;
        }
    }
    var checkIdArray = new Array("WMCustomD","WMVerD","WMHorD");
    var valueArray = new Array(0,0,0);
    for(var i=0;i<checkIdArray.length;i++)
    {
        result = NumericCheck(checkIdArray[i],valueArray[i]);
        if(!result){return result;}
    }
    result = CheckPageRange();
    return result;
}

function SaveWatermark()
{
    var saveWMItem = new PDFWatermark();
    var source = $('input:radio[name="WMSource"]:checked').val();
    if(source == "WMText")
    {
        saveWMItem.Source = "Text";
        var fromText = new SourceFromText();
        fromText.Text = $("#WMText").val();
        fromText.FontName = $("#WMFont").val();
        fromText.FontSize = $("#WMSize").val();
        fromText.IsUnderline = $("#WMStyle").val();
        fromText.FontColor = $("#WMColor").val();
        saveWMItem.SourceText = fromText;
    }
    else
    {
        saveWMItem.Source = "File";
        pageDesignFile.AbScale = $("#WMFileScale").val();
        pageDesignFile.PageNum = $("#WMFileNumber").val();
        saveWMItem.SourceFile = pageDesignFile; 
    }
    var rotation = $('input:radio[name="WMRotation"]:checked').val();
    if(rotation == "WMCustom")
        saveWMItem.Rotation = $("#WMCustomD").val();
    else
        saveWMItem.Rotation = rotation;
    saveWMItem.Opacity = $("#WMOpacity").val();
    if(document.getElementById("WMRelaScale").checked)
        saveWMItem.ScaleRela = $("#WMRelaScaleValue").val();
    else
        saveWMItem.ScaleRela = "null";
    var location = $('input:radio[name="WMLocation"]:checked').val();
    saveWMItem.Location = location;
    saveWMItem.VDistance = $("#WMVerD").val();
    saveWMItem.VertAlign = $("#WMVerAlign").val();
    saveWMItem.HDistance = $("#WMHorD").val();
    saveWMItem.HorAlign = $("#WMHorAlign").val();
    var wmRange = $('input:radio[name="WMRange"]:checked').val();
    if(wmRange == "WMAll")
        saveWMItem.PageRange = "All Pages";
    else
    {
        var from = $("#WMFrom").val();
        var to = $("#WMTo").val();
        saveWMItem.PageRange = from+"_"+to;
    }
    saveWMItem.Subset = $("#WMSubset").val();
    return saveWMItem;
}

function SetWatermark(watermarkObject)
{
    if(watermarkObject.Source == "Text")
    {
        $("#WMFromText").prop("checked",true);
        WMSourceChange();
        $("#WMText").val(watermarkObject.SourceText.Text);
        $("#WMFont").val(watermarkObject.SourceText.FontName).attr("selected",true);
        $("#WMSize").val(watermarkObject.SourceText.FontSize).attr("selected",true);
        $("#WMStyle").val(watermarkObject.SourceText.IsUnderline);
        if($("#WMStyle").val() == "false")
            $("#WMUDiv").css("border-color","#F0F0F0");
        else
            $("#WMUDiv").css("border-color","#b2b0a7");
        $("#WMColor").css("background",watermarkObject.SourceText.FontColor);
        $("#WMColor").val(watermarkObject.SourceText.FontColor);
    }
    else
    {
        $("#WMFromFile").prop("checked",true);
        WMSourceChange();
        pageDesignFile = watermarkObject.SourceFile;
        $("#WMFileText").val(pageDesignFile.Path);
        $("#WMFileNumber").val(pageDesignFile.PageNum);
        $("#WMFileScale").val(pageDesignFile.AbScale);
    }  
    var rotation = watermarkObject.Rotation;
    if(rotation == "WMC45" || rotation == "WMNone" || rotation == "WM45")
    {
        $("#"+watermarkObject.Rotation).prop("checked",true); 
        WMRotationChange();
    }
    else
    {
        $("#WMCustom").prop("checked",true);
        $("#WMCustomD").spinner("value",watermarkObject.Rotation);
    }
    $("#WMOpacity").spinner("value",watermarkObject.Opacity);
    if(watermarkObject.ScaleRela == "null")
    {
        $("#WMRelaScale").prop("checked",false);
        $("#WMRelaScaleValue").spinner("disable");
        $("#WMRelaScaleValue").css("color","#B1B6B9");
        $("#WMRelaScaleValue").css("border","1px solid #B1B6B9");
    }
    if(watermarkObject.ScaleRela != "null")
    {
        $("#WMRelaScale").prop("checked",true);
        $("#WMRelaScaleValue").spinner("enable");
        $("#WMRelaScaleValue").css("color","#000000");
        $("#WMRelaScaleValue").css("border","1px solid #727272");
        $("#WMRelaScaleValue").spinner("value",watermarkObject.ScaleRela);
    }
    if(watermarkObject.Location == "WMBehind")
        $("#WMBehind").prop("checked",true);
    else
        $("#WMTop").prop("checked",true);
    $("#WMVerD").spinner("value",watermarkObject.VDistance);
    $("#WMVerAlign").val(watermarkObject.VertAlign).attr("selected",true);
    $("#WMHorD").spinner("value",watermarkObject.HDistance);
    $("#WMHorAlign").val(watermarkObject.HorAlign).attr("selected",true);
    if(watermarkObject.PageRange == "All Pages")
    {
        $("#WMPageAll").prop("checked",true);
        PageRangeChange("WMPageAll");
    }
    else
    {
        $("#WMPageFrom").prop("checked",true);
        PageRangeChange("WMPageFrom");
        var pageRange = watermarkObject.PageRange;
        var posi = pageRange.indexOf("_");
        var from = pageRange.substring(0,posi);
        var to = pageRange.substring(posi+1);
        $("#WMFrom").spinner("value",from);
        $("#WMTo").spinner("value",to);
    }
    $("#WMSubset").val(watermarkObject.Subset).attr("selected",true);
}

function hideAddWatermarkPopBox()
{
    if(isEnterPasswordPanel || saveSettingShow)
        return;
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_watermarkPopbox").hide(); 
}


function CreateInsertPopBox()
{
   var str = "<div id='_insertPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_insertPopbox").css({
        width:"350px",
        height:"300px",
        display:"block"
    });

    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Insert Pages</div><div  class='poptitleimage poptitlestyle'  onclick='hideInsertPopBox();'></div></div>";
    $("#_insertPopbox").append(title);
    var popContent = "<div class='popinner' style='width:303px;height:230px;'>";
    popContent += "<table style='width:200px;height:70px;'>";
    popContent += "<tr><td>Insert:</td><td colspan='4'><div id='_insertTitle'></div></td></tr>";
    popContent += "<tr><td>Location:</td><td colspan='2'><input type='radio' id='_locationB' name='location' value='before' checked><label for='_locationB'>Before</label></td><td colspan='2'><input type='radio' id='_locationA' name='location' value='after'><label for='_locationA'>After</label></td></tr></table>";
    popContent += "<fieldset><legend>Page</legend><table style='width:100%;height:100%;'>";
    popContent += "<tr><td colspan='2'><input type='radio' id='_pageF' name='page' value='First' onchange='modeRadioChange();'><label for='_pageF'>First</label></td></tr>";
    popContent += "<tr><td colspan='2'><input type='radio' id='_pageL' name='page' value='Last' onchange='modeRadioChange();'><label for='_pageL'>Last</label></td></tr>";
    popContent += "<tr><td><input type='radio' id='_pageN' name='page' value='Page' onchange='modeRadioChange();' checked><label for='_pageN'>Page</label></td>";
    popContent += "<td><input id='_insertPg' type='text' style='width:50px;' value='1'/> of <span id='_insertPgCount'>"+_totalPageCount+"</span></td></tr></table></fieldset>";
    popContent += "<button  class='popbtn popbtncancel'  onclick='hideInsertPopBox();'>Cancel</button>";
    popContent += "<button id='insertOkButton'  class='popbtn popbtnok' >Ok</button>";
    popContent += "</div>";
    $("#_insertPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_insertPopbox").hide();
}

function modeRadioChange()
{
    var pageMode = $('input:radio[name="page"]:checked').val();
    if(pageMode == "First" || pageMode == "Last")
    {
        $("#_insertPg").attr("disabled","disabled");
    }
    else
    {
        $("#_insertPg").removeAttr("disabled");
    }
}

var annoProLeft = 0;
var annoProTop = 0;
var popboxWidth = 0;
var popboxHeight = 0;
var parentId = "";
var PopBoxMouseDown = function(e)
{
    parentId = $(this).parent().attr("id");
    $("#"+parentId).bind("mousemove",PopBoxMouseMove);
    $("#"+parentId).bind("mouseup",PopBoxMouseUp);
    e = e || window.event;
    xDown = e.pageX;
    yDown = e.pageY;
    annoProLeft = $("#"+parentId).offset().left;
    annoProTop = $("#"+parentId).offset().top;
    popboxWidth = $("#"+parentId).outerWidth(true) + 17;
    popboxHeight = $("#"+parentId).outerHeight(true) + 17;
    return false;
}

var PopBoxMouseMove = function(e)
{
    e = e||window.event;
    xMove = e.pageX;
    yMove = e.pageY;
    move_x = xMove - xDown;
    move_y = yMove - yDown;
    var tempLeft = annoProLeft+move_x ;
    var tempTop = annoProTop+move_y ;
    tempLeft = tempLeft > 0 ? (tempLeft < (browserWidth - popboxWidth) ? tempLeft : (browserWidth - popboxWidth)) : 0;
    tempTop = tempTop > 0 ? (tempTop < (browserHeight - popboxHeight) ? tempTop : (browserHeight - popboxHeight)) : 0;
    $("#"+parentId).css({
        left:tempLeft+"px",
        top:tempTop+"px"
    })
	return false;
}

var PopBoxMouseUp = function(e)
{
    $("#"+parentId).unbind("mousemove",PopBoxMouseMove);
    $("#"+parentId).unbind("mouseup",PopBoxMouseUp);
}

function CreateDeletePopBox()
{
    var str = "<div id='_deletePopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_deletePopbox").css({
        width:"344px",
        height:"175px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Delete Pages</div><div  class='poptitleimage poptitlestyle'  onclick='hideDelPopBox();'></div></div>";
    $("#_deletePopbox").append(title);
    var popContent = "<div class='popinner' style='width:298px;height:110px;'>";
    popContent += "<table style='width:200px;height:70px;'>";
    popContent += "<tr><td>From:</td><td><input type='text' style='width:30px;' id='_fromPg' value='1'></td><td>To</td><td><input type='text' style='width:30px;' id='_toPg' value='1'></td><td>of <span id='_deletePgCount'>"+_totalPageCount+"</span></td></tr></table>";
    popContent += "<button  class='popbtn popbtncancel'  onclick='hideDelPopBox();'>Cancel</button>";
    popContent += "<button  class='popbtn popbtnok'  onclick='DeleteAct();'>Ok</button>";
    popContent += "</div>";
    $("#_deletePopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_deletePopbox").hide();
}

function CreateSplitPopBox()
{
    var str = "<div id='_splitPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_splitPopbox").css({
        width:"504px",
        height:"345px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Split Document</div><div  class='poptitleimage poptitlestyle'  onclick='hideSplitPopBox();'></div></div>";
    $("#_splitPopbox").append(title);
    var popContent = "<div class='popinner' style='width:458px;height:280px;'>";
    popContent += "<div>Split document by number of pages:&nbsp;&nbsp;<input type='text' id='_splitNums' style='width:150px;height:20px;'/><button style='margin-left:10px;' onclick='InspectNums();'>inspect</button><br/><div id='_inspectResult'></div><div style='margin-top:5px;color:#666666;'>(note:Use commas between number, if you input '3,' the first three pages will be split as a new document)</div></div>";
    popContent += "<fieldset style='margin-top:10px;'><legend>File Name</legend><div>Use label:&nbsp;&nbsp;<input id='_splitPart' type='text' style='width:80px;height:20px;' value='Part'/></div><br/>"
    popContent += "<div><input type='radio' id='_labelBefore' name='nameLabel' value='Before'><label for='_labelBefore'>Add label before original name</label></div><br/>";
    popContent += "<div><input type='radio' id='_labelAfter' name='nameLabel' value='After' checked><label for='_labelAfter'>Add label after original name</label></div><br/>";
    popContent += "</fieldset>";

    popContent += "<button  class='popbtn popbtncancel'  onclick='hideSplitPopBox();'>Cancel</button>";
    popContent += "<button  class='popbtn popbtnok'  onclick='SplitAct();'>Split</button>";
    popContent += "</div>";
    $("#_splitPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_splitPopbox").hide();
}

function CreateReplacePopBox()
{
    var str = "<div id='_replacePopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_replacePopbox").css({
        width:"474px",
        height:"305px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Replace Pages</div><div  class='poptitleimage poptitlestyle'  onclick='hideReplacePopBox();'></div></div>";
    $("#_replacePopbox").append(title);
    
    var popContent = "<div class='popinner' style='width:428px;height:240px;'>";
    popContent += "<fieldset style='margin-top:10px;'><legend>Original</legend><div>Replace Pages:&nbsp;&nbsp;<input id='_origFrom' style='width:40px;' value='' onkeyup='TestReplaceData(this);'>&nbsp;&nbsp;To:&nbsp;&nbsp;<input id='_origTo' style='width:40px;' value='' onkeyup='TestReplaceData(this);'>&nbsp;&nbsp;of&nbsp;&nbsp;<label id='_origCount'></label></div><br/>";
    popContent += "in <label style='margin-left:10px;' id='_origName'></label></fieldset>";
    popContent += "<fieldset style='margin-top:20px;'><legend>Replacement</legend><div>With Pages:&nbsp;&nbsp;<input id='_replFrom' style='width:40px;' value='' onkeyup='TestReplaceData(this);'>&nbsp;&nbsp;To:&nbsp;&nbsp;<label id='_replTo' style='width:40px;'>1</label>&nbsp;&nbsp;of&nbsp;&nbsp;<label id='_replCount'></label></div><br/>";
    popContent += "from <label style='margin-left:10px;' id='_replName'></label><span id='_repisHasAnno' style='display:none;'></span><span id='_replaceafid' style='display:none;'></span><span id='_pageSizes' style='display:none;'></span><span id='_pageRotates' style='display:none;'></span></fieldset>";

    popContent += "<button style='margin-top:20px;margin-right:17px;width:80px;float:right;' onclick='hideReplacePopBox();'>Cancel</button>";
    popContent += "<button  class='popbtn popbtnok'  onclick='ReplaceAct();'>Replace</button>";
    popContent += "</div>";
    $("#_replacePopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_replacePopbox").hide();
}

function CreateExtractPopBox()
{
     var str = "<div id='_extPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_extPopbox").css({
        width:"344px",
        height:"205px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Extract Pages</div><div  class='poptitleimage poptitlestyle'  onclick='hideExtPopBox();'></div></div>";
    $("#_extPopbox").append(title);
    var popContent = "<div class='popinner' style='width:298px;height:140px;'>";
    popContent += "<table style='width:200px;height:100px;'>";
    popContent += "<tr><td>From:</td><td><input type='text' style='width:30px;' id='_extFrPg' value='1'></td><td>To</td><td><input type='text' style='width:30px;' id='_extToPg' value='1'></td><td>of <span id='_extPgCount'>"+_totalPageCount+"</span></td></tr>";
    popContent += "<tr><td colspan='5'><input type='checkbox' id='_DelAfterExt'><label for='_DelAfterExt'>Delete Pages After Extrating</label></td></tr></table>";
    popContent += "<button style='margin-top:20px;margin-right:17px;width:80px;float:right;' onclick='hideExtPopBox();'>Cancel</button>";
    popContent += "<button  class='popbtn popbtnok'  onclick='ExtractAct();'>Ok</button>";
    popContent += "</div>";
    $("#_extPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_extPopbox").hide();
}

var panelWidth = 0;
var panelHeight = 0;
function CreateCombinePopBox()
{
    var tempWidth = 863;
    var tempHeight = 430;
    if(browserWidth < tempWidth || browserHeight < tempHeight)
    {
        tempWidth = browserWidth * 0.9;
        tempHeight = browserHeight * 0.9;
    }
    panelWidth = tempWidth - 33;
    panelHeight = tempHeight - 135;
    var str = "<div id='_comPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_comPopbox").css({
        width:tempWidth + "px",
        height:tempHeight + "px",
        display:"block"
    });
    var comFileLoading = "<div id='comLoad'><div class='comLoadImg' id='comLoading' style='z-index:1050;'><div class='loadingFont'>Loading</div></div></div>";
    $("#_comPopbox").append(comFileLoading);
    var paddingTop = (tempHeight - 130)/2;
    $("#comLoading").css({"width": tempWidth + "px","height": (tempHeight-paddingTop) + "px"});
    $("#comLoading").css("padding-top",paddingTop+"px");
    $("#comLoad").hide();
    
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Combine Files</div><div   class='poptitleimage poptitlestyle'  onclick='hideComPopBox();'></div></div>";
    $("#_comPopbox").append(title);
    var popContent = "<div style='border:1px solid #727272;margin:5px;padding:10px;padding-top:7px;width:"+(tempWidth - 33)+"px;height:"+(tempHeight - 68)+"px;background:#F0F0F0;'>";
    popContent += "<div style='border:1px solid #727272;width:85px;height:25px;line-height:25px;'><input type='file' id='fileToCombine' name='fileToCombine' multiple='multiple' accept='"+_fileFormat+"' style='position:absolute;opacity:0;width:85px;height:25px;' multiple='true' onchange='UploadCombineFiles()'/>Add Files...</div>";
    popContent += "<div id='_fileListPanel' style='overflow:auto;border:1px solid #727272;margin-top:5px;width:"+panelWidth+"px;height:"+panelHeight+"px;background:#FFFFFF'></div>";
    popContent += "<button style='float:right;margin-right:5px;margin-top:8px;' onclick='hideComPopBox();'>Cancel</button>";
    popContent += "<button style='float:right;margin-right:25px;margin-top:8px;display:none;' id='addcombinebtn' onclick='CombineFiles(false);'>Combine Files</button>";
    popContent += "<button style='float:right;margin-right:55px;margin-top:8px;' onclick='CombineFiles(true);'>Combine Files and Open in Editor</button>";
    popContent += "</div>";
    $("#_comPopbox").append(popContent);
    CreateComFilesPanel("#_fileListPanel",panelWidth-17,panelHeight-17);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_comPopbox").hide();
    CreateCombineDocPsword();
}

function CreateCombineDocPsword()
{
    var str = "<div id='_combinePswordPopbox' class='popboxbase' style='z-index:1000;'></div>";
    $("body").append(str);
    $("#_combinePswordPopbox").css({
        width:"500px",
        height:"180px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Password</div><div  class='poptitleimage poptitlestyle'  onclick='hideCombinePswordPopBox();'></div></div>";
    $("#_combinePswordPopbox").append(title);
    
    var popContent = "<div style='width:500px;height:130px;margin-top:5px;border-top:1px solid #727272;'>"
    popContent += "<div style='font-size:13px;margin-top:10px;margin-left:30px;'>'<span id='comPswordName'>"+insertName+"</span>' is protected, enter Permission Password</div><br/>";
	popContent += "<div style='margin-left:80px;'>Enter password:&nbsp;&nbsp;<input id='_insertPsword' type='password' style='font-size:12px;width:250px;height:25px;' onkeydown='return CombinePassword(event)'></input></div>";
	
    popContent += "<button style='margin-top:23px;margin-right:17px;width:70px;float:right;' onclick='hideCombinePswordPopBox();'>Cancel</button>";
    popContent += "<button style='margin-top:23px;margin-right:25px;width:70px;float:right;' onclick='ParseCombineDocWidthPassWord();'>Submit</button></div>";
    $("#_combinePswordPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_combinePswordPopbox").hide();
}

var _showCombinePsBox = false;
function hideCombinePswordPopBox()
{
    $("#_combinePswordPopbox").hide();
    _showCombinePsBox = false;
}

var _items = new Array();
var _items_totalWidth = 0;
var combinePanelWidth = 0;
var combinePanelHeight = 0;
function CreateComFilesPanel(id,panelWidth,panelHeight)
{
    combinePanelWidth = panelWidth - 15;
    combinePanelHeight = panelHeight - 5;
    var combinesPanel = "<div id='_combinesPanel' style='margin:5px 0px 0px 15px;width:"+combinePanelWidth+"px;height:"+combinePanelHeight+"px;'></div>";
    $(id).append(combinesPanel);
    
    var titleHeight = 25;
    var _nameTitleWidth = parseInt(panelWidth * 0.25);
    var _dataModifiedWidth = parseInt(panelWidth * 0.2);
    var _typeTitleWidth = parseInt(panelWidth * 0.15);
    var _sizeTitleWidth = parseInt(panelWidth * 0.15);
    var _resizeWidth = 1;
    
    var titlePanel = "<div id='_titlePanel' style='width:"+panelWidth+"px;height:"+titleHeight+"px;font-size:12px;color:#4C607A;float:left;'></div>";
    $("#_combinesPanel").append(titlePanel);

    var nameItemPanel = "<div class='title_item' id='_name_' style='height:"+titleHeight+"px;float:left;'></div>";
    $("#_titlePanel").append(nameItemPanel);
    var NameItem = "<div  id='_name_title' style='width:"+_nameTitleWidth+"px;line-height:"+titleHeight+"px;float:left;'>Name</div>";
    $("#_name_").append(NameItem);
    var nameResize = "<div class='title_resize' style=width:"+_resizeWidth+"px;height:"+titleHeight+"px;'></div>";
    $("#_name_").append(nameResize);
    _items.push("_name_");
    
    var dataModItemPanel = "<div class='title_item' id='_modify_' style='height:"+titleHeight+"px;float:left;'><div>";
    $("#_titlePanel").append(dataModItemPanel);
    var DataModiItem = "<div id='_modify_title' style='width:"+_dataModifiedWidth+"px;line-height:"+titleHeight+"px;float:left;'>Data modified</div>";
    $("#_modify_").append(DataModiItem);
    $("#_modify_").append(nameResize);
    _items.push("_modify_");

    var typeItemPanel = "<div class='title_item' id='_type_' style='height:"+titleHeight+"px;float:left;'><div>";
    $("#_titlePanel").append(typeItemPanel);
    var TypeItem = "<div id='_type_title' style='width:"+_typeTitleWidth+"px;line-height:"+titleHeight+"px;float:left;'>Type</div>";
    $("#_type_").append(TypeItem);
    $("#_type_").append(nameResize);
    _items.push("_type_");
    
    var sizeItemPanel = "<div class='title_item' id='_size_' style='height:"+titleHeight+"px;float:left;'><div>";
    $("#_titlePanel").append(sizeItemPanel);
    var sizeItem = "<div id='_size_title' style='width:"+_sizeTitleWidth+"px;line-height:"+titleHeight+"px;float:left;'>Size</div>";
    $("#_size_").append(sizeItem);
    $("#_size_").append(nameResize);
   _items.push("_size_");

    for(var i=0;i<_items.length;i++)
        _items_totalWidth += $("#"+_items[i]).outerWidth(true);
    $(".title_resize").bind("mousedown",_TitleResizeMouseDown);
}

var titleResizeDown = false;
var _TitleResizeMouseDown = function(e)
{
    parentId = $(this).parent().attr("id");
    titleResizeDown = true;
    e = e || window.event;
    xDown = e.pageX;
    xMove = e.pageX;
    currentPanelWidth = $("#"+parentId).outerWidth(true);
    _items_totalWidth -= currentPanelWidth;
    $("#_titlePanel").bind("mousemove",_TitleResizeMouseMove);
    $("#_fileListPanel").bind("mousemove",_TitleResizeMouseMove);
    $("#_titlePanel").bind("mouseup",_TitleResizeMouseUp);
    $("#_fileListPanel").bind("mouseup",_TitleResizeMouseUp);
    $(document).bind("mouseup",_TitleResizeMouseUp);
}

var _TitleResizeMouseMove = function(e)
{
    if(titleResizeDown)
    {
        $("#_titlePanel").css("cursor","e-resize");
        e = e || window.event;
        if(xMove == e.pageX)
            return;
        else    
            xMove = e.pageX;
        move_x = xMove - xDown;
        var minNaviWidth = 25;
        if(currentPanelWidth + move_x >= minNaviWidth)
            ReAllocateItemPanelWidth(currentPanelWidth+move_x);
    }
}

function ReAllocateItemPanelWidth(width)
{
    $("#"+parentId+"title").width(width+"px");
    var actualWidth = $("#"+parentId).width();
    $("."+parentId+"instance").width(actualWidth+"px");
    var tempWidth = _items_totalWidth + $("#"+parentId).outerWidth(true);
    if(tempWidth > (panelWidth-17))
    {
        $("#_titlePanel").width(tempWidth+"px");
        $("._instancePanel").width(tempWidth+"px");
        $(".instance_info").width(tempWidth+"px");
    }
    else
    {
        $(".instance_info").width(tempWidth+"px");
    }
}

var _TitleResizeMouseUp = function(e)
{
    _items_totalWidth = _items_totalWidth + $("#"+parentId).outerWidth(true);
    titleResizeDown = false;
    $("#_titlePanel").css("cursor","default");
    $("#_titlePanel").unbind("mousemove",_TitleResizeMouseMove);
    $("#_fileListPanel").unbind("mousemove",_TitleResizeMouseMove);
    $("#_titlePanel").unbind("mouseup",_TitleResizeMouseUp);
    $("#_fileListPanel").unbind("mouseup",_TitleResizeMouseUp);
    $(document).unbind("mouseup",_TitleResizeMouseUp);
}

function CreateReOrdPopBox()
{
    var tempWidth = 870;
    var tempHeight = 580;
    if(browserWidth < tempWidth)
        tempWidth = browserWidth * 0.9;
    if(browserHeight < tempHeight)
        tempHeight = browserHeight * 0.9;
    var str = "<div id='_ordPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_ordPopbox").css({
        width:tempWidth+"px",
        height:tempHeight+"px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Re-order Pages<span style='font-weight:normal;'>(drag the thumbnail to change the page order)</span></div><div   class='poptitleimage poptitlestyle'  onclick='hideOrdPopBox();'></div></div>";
    $("#_ordPopbox").append(title);
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:" + (tempWidth - 40) + "px;height:" + (tempHeight - 63) + "px;background:#F0F0F0;'><div id='_ordPanel' style='padding:5px 20px 5px 20px;width:" + (tempWidth - 80) + "px;height:" + (tempHeight - 105) + "px;border:1px solid #A2A2A2;overflow:auto;'></div>";
    popContent += "<div style='min-height: 28px;padding: 10px 0px;text-align: right;'><button style='margin:0 10px;min-width:120px' onclick='checkOrderPages()'>" + (i18n['content']['ReorderBoxButtonOK'] || "OK") + "</button><button style='min-width:120px' onclick='hideOrdPopBox()'>" + (i18n['content']['ReorderBoxButtonCancel'] || "Cancel") + "</button></div></div>"
    popContent += "</div></div>";
    $("#_ordPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_ordPopbox").hide();
}

function checkOrderPages() {
  var  childrenDivs = $("#_ordPanel").children("div");

    var pageIndexOrder = new Array();
    var showIndexOrder = new Array();
    var newIndex = "";
    for (var index in childrenDivs) {
        var divId = childrenDivs.eq(index).attr("id");
        if (divId != null) {
            idPosition = divId.indexOf("_");
            var id = divId.substring(idPosition + 1);
            pageIndexOrder[index] = parseInt( id);
            showIndexOrder[id] = parseInt(index);

        }
    }
    isaddFile = true;




    _fileDocument[curFileId].SortPage(showIndexOrder);
    _fileDocument[curFileId].ViewerPageIndex = pageIndexOrder;
    reorderPagesAction(pageIndexOrder);


    if (_viewerMode == "multi")
        ImageViewerAnnotationResize();

    hideOrdPopBox();
}

function reorderPagesAction(targetOrders) {
    if (targetOrders.length != _totalPageCount)
        return;

    for (var showPageIndex = 0; showPageIndex < targetOrders.length ; showPageIndex++) {
        var pageIndex = targetOrders[showPageIndex];
        var currentPage = $("#page_" + pageIndex).clone();
        $("#page_" + pageIndex).remove();
        $("#imgBig").append(currentPage);

        var copyThumbDom = $("#lbl_" + pageIndex).clone();
        $("#lbl_" + pageIndex).remove();
        $("#_thumbImg").append(copyThumbDom);
        $("#lbl_" + pageIndex).smartMenu(ThumbMenuData, { name: "thb_" + pageIndex });
    }
}

function createRoatePopBox() {
    
    var tempWidth = 885;
    var tempHeight = 620;
    if (browserWidth < tempWidth)
        tempWidth = browserWidth * 0.9;
    if (browserHeight < tempHeight)
        tempHeight = browserHeight * 0.9;
    var str = "<div id='_rotatePopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_rotatePopbox").css({
        width: tempWidth + "px",
        height: tempHeight + "px",
        display: "block"
    });
    var title = "<div class='_poprotateboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  ><b>" + (i18n['content']['RotateBoxTitle'] || "Rotate Pages") + "</b><span style='font-weight:normal;'>"+(i18n['content']['RotateBoxDescription'] || "(Right Click To Rotate the Page)") + "</span></div><div   class='poptitleimage poptitlestyle'  onclick='hiderotatePopBox();'></div></div>";
    $("#_rotatePopbox").append(title);
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:" + (tempWidth - 40) + "px;height:" + (tempHeight - 63) + "px;background:#F0F0F0;'><div id='_rotatePanel' style='padding:5px 20px 5px 20px;width:" + (tempWidth - 80) + "px;height:" + (tempHeight - 105) + "px;border:1px solid #A2A2A2;overflow:auto;'></div>";
    popContent += "<div style='min-height: 28px;padding: 10px 0px;text-align: right;'><button style='margin:0 10px;min-width:120px' onclick='checkRotatePages()'>" + (i18n['content']['RotateBoxButtonOK'] || "OK") + "</button><button style='min-width:120px' onclick='hiderotatePopBox()'>" + (i18n['content']['RotateBoxButtonCancel'] || "Cancel") + "</button></div></div>"
    popContent += "</div>";
    $("#_rotatePopbox").append(popContent);

    $("._poprotateboxTitle").bind("mousedown", PopBoxMouseDown);
    $("#_rotatePopbox").hide();
}

function CreateProtection(btnId)
{
    var protectToolbarStr = "<div id='_protect' style='width:100%'></div>";
    $(btnId).append(protectToolbarStr);

    var cursorTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var arrowCur = "<div class='re_func_arrowCur iconHover' title='Select tool:select text and image' onclick='ArrowEvent();'></div>";
    cursorTab += "<tr><td><div class='firstCellMargin' >" + arrowCur + "</div></td>";
    var handCur = "<div class='re_func_handCur iconHover' title='Hand tool:pan around the document' onclick='HandleEvent();'></div>";
    cursorTab += "<td><div class='lastCellMargin'>" + handCur + "</div></td>";
    cursorTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    cursorTab += "<tr><td colspan='2'><div class='cellTextFix'>Tools</div></td></tr></table>";
    $("#_protect").append(cursorTab);

    var TabOne = "<table style='width:115px;height:100%;float:left;' class='icongroup'>";
    var restrictEdit = new ToolbarItem({ CssId: "re_func_resEdit", Title: "Add a password to restrict editing", Event: '', CssClass: "iconHover" });
    TabOne += "<tr><td><div class='oneCellMargin' style='margin-left:39px'>" + restrictEdit.CreateHtml() + "</div></td>";
    TabOne += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    TabOne += "<tr><td colspan='2'><div class='cellTextfix'>Restrict Editing</td></tr></table>";
    $("#_protect").append(TabOne);
    
    //$("#_protect").append("<div style='margin-left:39px;margin-top:7px;width:1px;height:35px;border-right:1px solid #5F5F5F;float:left;'></div>");
    
    var TabTwo = "<table style='height:100%;float:left;' class='icongroup'>";
    var encryptWithPs = new ToolbarItem({ CssId: "re_func_encWithPs", Title: "Encrypt with Password", Event: 'ConfirmPopBox();', CssClass: "iconHover" });
    TabTwo += "<tr style='position:relative;'><td><div class='oneCellMargin'>" + encryptWithPs.CreateHtml() + "</div></td>";
    TabTwo += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    TabTwo += "<tr><td colspan='2'><div class='cellTextfix' style='margin-left:-10px;'>Encrypt</div></td></tr></table>";
    $("#_protect").append(TabTwo);
    
    //$("#_protect").append("<div style='margin-left:23px;margin-top:7px;width:1px;height:35px;border-right:1px solid #5F5F5F;float:left;'></div>");
    
    var removeContentTab = "<table style='height:100%;float:left;' class='icongroup'>";
    var markRedaction = new ToolbarItem({ CssId: "re_func_markRedact", Title: "Mark for Redaction", Event: 'MarkForRedact();', CssClass: "iconHover" });
    removeContentTab += "<tr><td ><div class='firstCellMargin' style='margin-left:31px;'>"+markRedaction.CreateHtml()+"</div></td>";
    var markPages = new ToolbarItem({ CssId: "re_func_markPage", Title: "Mark Pages to Redact", Event: 'showRedactPageBox();', CssClass: "iconHover" });
    removeContentTab += "<td ><div class='cellMargin'>" + markPages.CreateHtml() + "</div></td>";
    var redactPros = new ToolbarItem({ CssId: "re_func_redactPros", Title: "Redaction Properties", Event: 'showRedactProps("");', CssClass: "iconHover" });
    removeContentTab += "<td><div class='lastCellMargin' style='margin-right:21px;'>" + redactPros.CreateHtml() + "</div></td>";
    removeContentTab += "<td><div class='splitCellMargin' style='width:1px;height:35px;border-right:1px solid #5F5F5F;'></div></td></tr>";
    removeContentTab += "<tr><td colspan='4'><div class='cellTextFix'  style='margin-left:-10px;'>Redaction</div></td></tr></table>";
   
    $("#_protect").append(removeContentTab);
    
    //$("#_protect").append("<div style='margin-left:23px;margin-top:7px;width:1px;height:35px;border-right:1px solid #5F5F5F;float:left;'></div>");
    
    tabMenuArray.push("_protect");

}

function CreateRedactTextBox() {
    var str = "<div id='_redactTextPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_redactTextPopbox").css({
        width: "480px",
        height: "Auto",
        display: "block"
    });

    var title = "<div class='_redactpopboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Redact Text</div><div   class='poptitleimage poptitlestyle'  onclick='HideRedactTextBox();'></div></div>";
    $("#_redactTextPopbox").append(title);

    var popContent = "<div style='margin:10px;border:solid 1px #000000' id='_redacttextcontent'></div>";

    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:5px;' onclick='HideRedactTextBox();'>Close</button>";
    $("#_redactTextPopbox").append(popContent);

    $("#_redactTextPopbox").hide();
}

function HideRedactTextBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_redactTextPopbox").hide();
}

function ShowRedactTextBox() {
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_redactTextPopbox");
    $("#_redactTextPopbox").show();
}

function CreateMarkPageBox()
{
    var str = "<div id='_markPagePopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_markPagePopbox").css({
        width:"280px",
        height:"180px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Mark Page Range</div><div  class='poptitleimage poptitlestyle'  onclick='hideRedactPageBox();'></div></div>";
    $("#_markPagePopbox").append(title);
    
    var popContent = "<table style='border:1px solid #727272;background:#F0F0F0;width:270px;height:115px;padding:5px;margin:0px 5px 0px 5px;'><tr><td colspan='2'><input type='radio' id='markCurPage' name='mark' value='single' onchange='MarkRadioChange();' checked><label for='markCurPage'>Mark current page for redaction</label></td></tr>";
    popContent += "<tr><td colspan='2'><input type='radio' id='markPageRange' name='mark' value='multi' onchange='MarkRadioChange();'><label for='markPageRange'>Mark specific page range for redaction</label></td></tr>";
    popContent += "<tr><td>Page range:</td><td><input type='text' id='_markPages' disabled='disabled'></td></tr></table>";
    
    popContent += "<button style='float:right;margin-right:5px;margin-top:5px;' onclick='hideRedactPageBox();'>Cancel</button>";
    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:5px;' onclick='RedactPages();'>Ok</button>";
    $("#_markPagePopbox").append(popContent);
    
    $("#_markPagePopbox").hide();
}

function MarkRadioChange()
{
    var markPageMode = $('input:radio[name="mark"]:checked').val();
    if(markPageMode == "single")
    {
        $("#_markPages").attr("disabled","disabled");
    }
    else if(markPageMode == "multi")
    {
        $("#_markPages").removeAttr("disabled");
    }
}

function CreateSearchTextRedactPageBox() {
    var str = "<div id='_readctSearchTextPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_readctSearchTextPopbox").css({
        width: "280px",
        height: "180px",
        display: "block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >" + (i18n['content']['RedactSearchText'] || "Redact Text Search Results") + "</div><div  class='poptitleimage poptitlestyle'  onclick='hideRedactSearchTextBox();'></div></div>";
    $("#_readctSearchTextPopbox").append(title);
    
    var popContent = "<div style='padding: 10px;margin: 20px 10px;'><p>" + (i18n['content']['HasRedactText'] || "Do you want to redact all text search results?") + "</p></div>";

    popContent += "<button style='float:right;margin-right:25px;margin-top:5px;' onclick='hideRedactSearchTextBox();'>Cancel</button>";
    popContent += "<button style='width:120px;float:right;margin-right:5px;margin-top:5px;' onclick='hideRedactSearchTextBox();redactCurrentSearch(true);'>" + (i18n['button']['YesRedact'] || "Yes. Redact all") + "</button>";
    $("#_readctSearchTextPopbox").append(popContent);

    $("#_readctSearchTextPopbox").hide();
}

function showRedactSearchTextBox() {
    $("#_readctSearchTextPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_readctSearchTextPopbox");

}

function hideRedactSearchTextBox() {
    $(".loadingImg").css("opacity", "0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_readctSearchTextPopbox").hide();
}



function showRedactPageBox()
{
   $("#_markPagePopbox").show(); 
   $("#loading").show();
   $("#loading_div").hide();
   $(".loadingImg").css("opacity","0.4");
   SignPanelPosition("#_markPagePopbox");
   $("#_markPages").val("1-"+_totalPageCount);
}

function hideRedactPageBox()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_markPagePopbox").hide();
}

function RedactPages()
{
    var markPageMode = $('input:radio[name="mark"]:checked').val();
    var docAnno = null;
    var actualIndex = "";
    if(markPageMode == "single")
    {
        var curPg = parseInt(_curCorrectPageId);
        actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        docAnno = new Annotation({ OnPageIndex: actualIndex, Type: "redact", Index: num, ZoomValue: zoomValue, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height, redactPage: true });
        _fileDocument[curFileId].Viewers[actualIndex].Annotations[num] = docAnno;
        drawTextActSvg(docAnno);
        var date = getTimeString();
        _fileDocument[curFileId].Viewers[actualIndex].Annotations[num].ModifiedDate = date;
        AddAnnoToCommentsPanel(actualIndex,"redact",num,date);
        num++;
    }
    else if(markPageMode == "multi")
    {
        var pages = $("#_markPages").val();
        pages = pages.replace(/\s/g, "");
        var regEx = new RegExp(/^[0-9]+[-][0-9]+$/);
        var sblits = pages.split(',');
        for (var go = 0; go < sblits.length; go++) {
            var startNum = -1;
            var endNum = -1;

            if (regEx.exec(sblits[go]) == null) {
                startNum = parseInt(sblits[go]);
                endNum = startNum;
            }
            else {
                var posi = sblits[go].indexOf("-");
                if (posi > 0) {
                    var pt = sblits[go].split("-");
                    if (pt.length != 2) {
                        continue;
                    }
                    var st = parseInt(pt[0]);
                    var ed = parseInt(pt[1]);

                    if (st > ed) {
                        var t = st;
                        st = ed;
                        ed = t;
                    }
                    if (ed > _totalPageCount) {
                        ed = _totalPageCount;
                    }

                    startNum = st;
                    endNum = ed;
                } else {
                    startNum = parseInt(sblits[go]);
                    endNum = startNum;
                }
            }
            startNum = _fileDocument[curFileId].GetPageIndex(startNum - 1);
            endNum = _fileDocument[curFileId].GetPageIndex(endNum - 1);
            if (startNum == endNum) {
                actualIndex = startNum;
                var viewer = _fileDocument[curFileId].Viewers[actualIndex];
                docAnno = new Annotation({ OnPageIndex: actualIndex, Type: "redact", Index: num, ZoomValue: zoomValue, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height, redactPage: true });
                _fileDocument[curFileId].Viewers[actualIndex].Annotations[num] = docAnno;
                drawTextActSvg(docAnno);
                var date = getTimeString();
                _fileDocument[curFileId].Viewers[actualIndex].Annotations[num].ModifiedDate = date;
                AddAnnoToCommentsPanel(actualIndex, "redact", num, date);
                num++;
            }
            else {
                for (var i = startNum; i <= endNum; i++) {
                    actualIndex = i;
                    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
                    docAnno = new Annotation({ OnPageIndex: actualIndex, Type: "redact", Index: num, ZoomValue: zoomValue, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height, redactPage: true });
                    _fileDocument[curFileId].Viewers[actualIndex].Annotations[num] = docAnno;
                    drawTextActSvg(docAnno);
                    var date = getTimeString();
                    _fileDocument[curFileId].Viewers[actualIndex].Annotations[num].ModifiedDate = date;
                    AddAnnoToCommentsPanel(actualIndex, "redact", num, date);
                    num++;
                }
            }



        }

       
    }
    hideRedactPageBox();
    HandleEvent();
}

function CreateRedactProps()
{
    var tempWidth = 480;
    var tempHeight = 430;
    if(browserWidth < tempWidth || browserHeight < tempHeight)
    {
        tempWidth = browserWidth * 0.9;
        tempHeight = browserHeight * 0.9;
    }
    var str = "<div id='_redactPropsPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_redactPropsPopbox").css({
        width:tempWidth + "px",
        height:tempHeight+"px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Redaction Tool Properties</div><div  class='poptitleimage poptitlestyle'  onclick='hideRedactPropsPopBox();'></div></div>";
    $("#_redactPropsPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:"+(tempWidth - 40)+"px;height:"+(tempHeight - 100)+"px;background:#F0F0F0;'>";
    popContent += "<table style='margin-bottom:20px;'><tr><td>Redacted Area Fill Color:</td><td><div id='redactFillColor' class='redactColorCell'  style='background:#000000;' onclick='ShowTableColor(this,true);'></div></td><td><div style='margin-left:40px;'><input type='checkbox' id='_overlayTxt' onchange='OverlayTxtChange()'/><label for='_overlayTxt'>Use Overlay Text</label></div></td></tr></table>";
    popContent += "<fieldset style='margin-bottom:20px;'><legend>Overlay Text</legend>";
    popContent += "<table id='overlayTable' style='height:100px;color:#727272'><tr><td>Font:<select id='redactFont' disabled='disabled'></select></td><td>Font Size:</td><td><input type='text' style='width:25px;' id='redactFSize' value='12' disabled='disabled'/></td></tr>";
    popContent += "<tr><td>Text Alignment:<select id='txtAlign' disabled='disabled'></select></td><td><input type='checkbox' id='isRepeat' disabled='disabled'/><label for='isRepeat' color='#727272'>Repeat Text</label></td></tr>";
    popContent += "<tr><td>Custom Text:<input type='text' id='customTxt' style='width:173px;' disabled='disabled'/></td><td>Font Color:</td><td><div id='redactFColor' class='redactColorCell' style='background:red'></div></td></tr></table></fieldset>";
    popContent += "<fieldset style='margin-bottom:20px;'><legend>Redaction mark Appearance</legend>";
    popContent += "<table style='height:100px;'><tr><td>Outline Color:</td><td><div id='redactMarkOColor' class='redactColorCell' style='background:red' onclick='ShowTableColor(this,true);'></div></td><td><div style='margin-left:50px;'>Fill Color:</div></td><td><div id='redactMarkFColor' class='redactColorCell' style='background:red'  onclick='ShowTableColor(this,true);'></div></td></tr>";
    popContent += "<tr><td colspan='4'>Fill Opacity:<input type='text' id='_fillOpacity' style='width:25px;' value='0.3'/><span style='color:#727272;'>(note:value from 0 to 1)</span></td></tr></table></div>";
    
    popContent += " <div style='float:left;margin-left:16px;'><input type='checkbox' id='_setRedactDefaultProp'>Set to the default properties</div>";
    popContent += "<button style='float:right;margin-right:5px;margin-top:5px;' onclick='CancelRedactSetting();'>Cancel</button>";
    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:5px;' onclick='SetRedactProps();'>Ok</button>";
    $("#_redactPropsPopbox").append(popContent);
    
    var txtAligns = new Array("left","center","right");
    for(var i=0;i<txtAligns.length;i++)
        $("#txtAlign").append($('<option></option>').html(txtAligns[i]));
    $("#txtAlign").val("left").attr("selected",true);    
    $("#redactFillColor").val("#000000");
    $("#redactMarkOColor").val("#ff0000");
    $("#redactMarkFColor").val("#ff0000");
    $("#_redactPropsPopbox").hide();
}

function SetRedactProps()
{
    var ischeck = document.getElementById("_overlayTxt").checked;
    var issetdefualt = false;
    if (isAnnoChange != "") {
        issetdefualt = document.getElementById("_setRedactDefaultProp").checked;
        var annoType = isAnnoChange.split(";")[0];
        var actualIndex = isAnnoChange.split(";")[1];
        var annoIndex = isAnnoChange.split(";")[2];
        var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex];
        if (annotation == null)
            return;
        else {
            var annoAreas = new Array();
            if (!annotation.redactArea) {
                annoAreas.push(annotation);
            } else {
                if (_fileDocument[curFileId].Viewers[actualIndex].Annotations != null && _fileDocument[curFileId].Viewers[actualIndex].Annotations.length > 0) {
                    for (var key in _fileDocument[curFileId].Viewers[actualIndex].Annotations) {
                        if (_fileDocument[curFileId].Viewers[actualIndex].Annotations[key] != null && _fileDocument[curFileId].Viewers[actualIndex].Annotations[key].redactArea)
                            annoAreas.push(_fileDocument[curFileId].Viewers[actualIndex].Annotations[key]);
                    }
                }
            }
            for (var go = 0; go < annoAreas.length; go++) {
                goanno = annoAreas[go];
                goanno.FillColor = tempRedactAnno.FillColor;
                goanno.MarkOutlineColor = tempRedactAnno.MarkOutlineColor;
                goanno.MarkFillColor = tempRedactAnno.MarkFillColor;
                var number=parseFloat( $("#_fillOpacity").val());
                if(isNaN(number)|| number>1 || number<0)
                    number=1;
                goanno.Transparency =number;
                if (ischeck) {
                    goanno.isOverlayTxt = true;
                    goanno.TxtFont = $("#redactFont").val();
                    goanno.TxtFontSize = $("#redactFSize").val();
                    goanno.ShowedText = $("#customTxt").val();
                    goanno.TxtFontColor = $("#redactFColor").val();
                    goanno.TxtAlignment = $("#txtAlign").val();
                    goanno.IsRepeat = document.getElementById("isRepeat").checked;
                }
                else
                    goanno.isOverlayTxt = false;
                TimelyChangeAnno(goanno);
            }
        }




    }
    else {
        issetdefualt = true;
    }
    if (issetdefualt) {
        redactAnnoStyle.FillColor = $("#redactFillColor").val();
        redactAnnoStyle.MarkOutlineColor = $("#redactMarkOColor").val();
        redactAnnoStyle.MarkFillColor = $("#redactMarkFColor").val();
        redactAnnoStyle.Transparency = $("#_fillOpacity").val();
        if (ischeck) {
            redactAnnoStyle.isOverlayTxt = true;
            redactAnnoStyle.TxtFont = $("#redactFont").val();
            redactAnnoStyle.TxtFontSize = $("#redactFSize").val();
            redactAnnoStyle.ShowedText = $("#customTxt").val();
            redactAnnoStyle.TxtFontColor = $("#redactFColor").val();
            redactAnnoStyle.TxtAlignment = $("#txtAlign").val();
            redactAnnoStyle.IsRepeact = document.getElementById("isRepeat").checked;
        }
        else
            redactAnnoStyle.isOverlayTxt = false;
    }
    hideRedactPropsPopBox();
}

function OverlayTxtChange()
{
    var ischeck = document.getElementById("_overlayTxt").checked;
    if(ischeck)
    {
        $("#overlayTable").css("color","#000000");
        $("#redactFont").removeAttr("disabled");
        $("#redactFSize").removeAttr("disabled");
        $("#customTxt").removeAttr("disabled");
        $("#txtAlign").removeAttr("disabled");
        $("#isRepeat").removeAttr("disabled");
        $("#redactFColor").bind("click",function(){ShowTableColor(this,false);});
    }
    else
    {
        $("#overlayTable").css("color","#727272");
        $("#redactFont").attr("disabled","disabled"); 
        $("#redactFSize").attr("disabled","disabled"); 
        $("#customTxt").attr("disabled","disabled"); 
        $("#txtAlign").attr("disabled","disabled");
        $("#isRepeat").attr("disabled","disabled");
        $("#redactFColor").unbind("click");
    }
}

var isAnnoChange = "";
var tempRedactAnno = null;
function showRedactProps(curType)
{
   $("#_redactPropsPopbox").show(); 
   $("#loading").show();
   $("#loading_div").hide();
   $(".loadingImg").css("opacity","0.4");
   SignPanelPosition("#_redactPropsPopbox");
   
   isAnnoChange = curType;

   $("#_setRedactDefaultProp").prop("checked", false);
   if(isAnnoChange == "")
   {
        tempRedactAnno = null;
        $("#redactFillColor").css("background",redactAnnoStyle.FillColor);
        $("#redactMarkOColor").css("background",redactAnnoStyle.MarkOutlineColor);
        $("#redactMarkFColor").css("background",redactAnnoStyle.MarkFillColor);
        $("#_fillOpacity").val(redactAnnoStyle.Transparency);
        $("#redactFont").val(redactAnnoStyle.TxtFont);
        $("#redactFSize").val(redactAnnoStyle.TxtFontSize);
        $("#customTxt").val(redactAnnoStyle.ShowedText);
        $("#redactFColor").val(redactAnnoStyle.TxtFontColor);
        $("#txtAlign").val(redactAnnoStyle.TxtAlignment);
        if(redactAnnoStyle.IsRepeact)
            $("#isRepeat").prop("checked",true);
        else
            $("#isRepeat").prop("checked",false);
        if(redactAnnoStyle.isOverlayTxt)
            $("#_overlayTxt").prop("checked",true);
        else
            $("#_overlayTxt").prop("checked",false);
   }
   else
   {
        var annoType = isAnnoChange.split(";")[0];
        var actualIndex = isAnnoChange.split(";")[1];
        var annoIndex = isAnnoChange.split(";")[2];
        var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex];
        originalAnno.FillColor = annotation.FillColor;
        originalAnno.MarkOutlineColor = annotation.MarkOutlineColor;
        originalAnno.MarkFillColor = annotation.MarkFillColor;
        originalAnno.Transparency = annotation.Transparency;
        originalAnno.TxtFont = annotation.TxtFont;
        originalAnno.TxtFontSize = annotation.TxtFontSize;
        originalAnno.TxtFontColor = annotation.TxtFontColor;
        originalAnno.TxtAlignment = annotation.TxtAlignment;
        originalAnno.IsRepeact = annotation.IsRepeat;
        tempRedactAnno = annotation;
        
        $("#redactFillColor").css("background",tempRedactAnno.FillColor);
        $("#redactMarkOColor").css("background",tempRedactAnno.MarkOutlineColor);
        $("#redactMarkFColor").css("background",tempRedactAnno.MarkFillColor);
        $("#_fillOpacity").val(tempRedactAnno.Transparency);
        $("#redactFont").val(tempRedactAnno.TxtFont);
        $("#redactFSize").val(tempRedactAnno.TxtFontSize);
        $("#customTxt").val(tempRedactAnno.ShowedText);
        $("#redactFColor").val(tempRedactAnno.TxtFontColor);
        $("#txtAlign").val(tempRedactAnno.TxtAlignment);
        if(tempRedactAnno.IsRepeat)
            $("#isRepeat").prop("checked",true);
        else
            $("#isRepeat").prop("checked",false);
        if(tempRedactAnno.isOverlayTxt)
            $("#_overlayTxt").prop("checked",true);
        else
            $("#_overlayTxt").prop("checked",false);
   }
   OverlayTxtChange();
}

function CancelRedactSetting()
{
    if(isAnnoChange != "")
    {
        tempRedactAnno.OutLineColor = originalAnno.FillColor;
	    tempRedactAnno.MarkOutlineColor = originalAnno.MarkOutlineColor;
	    tempRedactAnno.MarkFillColor = originalAnno.MarkFillColor;
	    tempRedactAnno.Transparency = originalAnno.Transparency;	
        TimelyChangeAnno(tempRedactAnno);
    }
    hideRedactPropsPopBox();
}

function hideRedactPropsPopBox()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_redactPropsPopbox").hide();
}

function MarkForRedact()
{
    if (signRotate == 1) {
        alert(i18n['content']['CommentLimitOnRotate'] || "Cannot comment, edit content, redact, when page is rotated.");
        return;
    }
    $("#rasteredge_wdp").addClass("select");
	AddIconBorder("#re_func_markRedact");
	SelectTextEvent("redact");
	curCursorStyle = "select";
	if (isBindImgEditEvent)
        RemoveEditImageEvent();
	if (isBindTxtEditEvent)
        RemoveEditTextEvent();
}

function MarkAreaRedact(pages)
{
    if (signRotate == 1) {
        alert(i18n['content']['CommentLimitOnRotate'] || "Cannot comment, edit content, redact, when page is rotated.");
        return;
    }
    if (pages) {
        showRedactAreaPagesBox();
        return;
    }
    AddIconBorder("#re_func_markAreaRedact");
    SelectAreaEvent("redact",false);
    if (isBindImgEditEvent)
        RemoveEditImageEvent();
    if (isBindTxtEditEvent)
        RemoveEditTextEvent();
}

function reMarkAreaRedact() {
    AddIconBorder("#re_func_markAreaRedactPages");
    SelectAreaEvent("redact", true);
    if (isBindImgEditEvent)
        RemoveEditImageEvent();
    if (isBindTxtEditEvent)
        RemoveEditTextEvent();
}

function InputPermissionPs()
{
    var str = "<div id='_permisPsPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_permisPsPopbox").css({
        width:"500px",
        height:"160px",
        display:"block"
    });
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Password</div><div  class='poptitleimage poptitlestyle'  onclick='hideResEditPopBox();'></div></div>";
    $("#_permisPsPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:460px;height:100px;background:#F0F0F0;'>";
    popContent += "<div><span id='_curFileName'></span> is protected.Please enter a Permission Password.</div>";
    popContent += "<br/><div style='margin-left:100px;'>EnterPassword:&nbsp;&nbsp;&nbsp;<input type='password' id='vPmPs' style='width:160px;height:20px;' /></div>";
    
    popContent += "<button style='float:right;margin-right:5px;margin-top:8px;' onclick='HideInputPermissionPs();'>Cancel</button>";
    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:8px;' onclick='VerityPermissPs();'>Ok</button>";
    $("#_permisPsPopbox").append(popContent);
    
    $("#_permisPsPopbox").hide();
}

function ShowInputPermissionPs()
{
    $("#_permisPsPopbox").show();
    $("#vPmPs").val("");
    $("#_curFileName").html("\""+_actualName+"\"");
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_permisPsPopbox");
}

function HideInputPermissionPs()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_permisPsPopbox").hide(); 
}

var curDocOwnerPs = "";
function VerityPermissPs()
{
    HideInputPermissionPs();
    var value = $("#vPmPs").val();
    $.post(getServerHandlerUrl(), { "action":"ValidateOwnerPassword", "fid": _fid,"fileName":_actualName,password:value},
    function(result, status){
        result = eval('(' + result + ')');
        if(result.state == "success")
        {
            curDocOwnerPs = value;
            ShowEncryptWin();
        }
        else if(result.state == "error")
        {
            jAlert(i18n['content']['ErrorPassword'] || "The password is incorrect. Please make sure that Cap Lock is not on by mistake, and try again.", i18n['title']['RasterEdge'] || "RasterEdge Application",
            function(){
                $("#vPmPs").val("");
                ShowInputPermissionPs();
            });    
        }
   });
}

function ConfirmPopBox()
{
    jConfirm(i18n['content']['ChangeSecurity'] || "Are you sure you want to change the security on this document?", i18n['title']['ApplySettings'] || "Applying New Security Settings", function (r) {
        if(r)
        {
            if(_isHasUserPassword == "False" && _pdfDocRestrictions.hasOwnerPss)
                ShowInputPermissionPs();
            else
                ShowEncryptWin();
        }
    });
}

var _pdfDocRestrictions = "";
function GetPDFDocRestriction()
{

    $("#re_func_resEdit").unbind("click");
    $("#re_func_resEdit").css("cursor", "text");
    $("#re_func_resEdit").removeClass("editResEditIconEn");
    $("#re_func_resEdit").addClass("editResEditIconDis");
    
    $.post(getServerHandlerUrl(), { "action": "GetRestrictions", "fid": _fid,"fileName":_actualName,password:curDocPassWord},function(result, status)    {
        result = eval('(' + result + ')');
        _pdfDocRestrictions = new PDFRestrictions();
		if (result.state == "success")
		{
		    result = result.msg;
			if(result != "noPassword")
			{
			    if(result.print == "False")
				    _pdfDocRestrictions.isPrint = "Not Allowed";
				if(result.modify == "False")
				    _pdfDocRestrictions.isModify = "Not Allowed";
				if(result.assemble == "False")
				    _pdfDocRestrictions.isAssemble = "Not Allowed";
				if(result.copy == "False")
				    _pdfDocRestrictions.isCopy = "Not Allowed";
				if(result.extract == "False")
				    _pdfDocRestrictions.isExtract = "Not Allowed";
				if(result.annot == "False")
				    _pdfDocRestrictions.isAnnot = "Not Allowed";
				if(result.fillForm == "False")
				    _pdfDocRestrictions.isFillForm = "Not Allowed";
				if(result.hasOwnerPss == "True")
				    _pdfDocRestrictions.hasOwnerPss = true;
			}
		} 
    });
    $("#_isPrint").html(_pdfDocRestrictions.isPrint);
    $("#_isModi").html(_pdfDocRestrictions.isModify);
    $("#_isAssemble").html(_pdfDocRestrictions.isAssemble);
    $("#_isCopy").html(_pdfDocRestrictions.isCopy);
    $("#_isExtract").html(_pdfDocRestrictions.isExtract);
    $("#_isAnnot").html(_pdfDocRestrictions.isAnnot);
    $("#_isFillForm").html(_pdfDocRestrictions.isFillForm);
    SetRelativeToolbars();
    if(!_pdfDocRestrictions.hasOwnerPss)
    {
        $("#re_func_resEdit").bind("click", ShowResEditPopBox);
        $("#re_func_resEdit").css("cursor", "pointer");
        $("#re_func_resEdit").removeClass("editResEditIconDis");
        $("#re_func_resEdit").addClass("editResEditIconEn");
    }
}

function SetRelativeToolbars()
{

    //SetChangeToolbars
    //PDFMetadata
    $("#_proTitle").attr("disabled",true);
    $("#_proAuthor").attr("disabled",true);
    $("#_proSubject").attr("disabled",true);
    $("#_proKeywords").attr("disabled",true);
    //pages
    $("#re_func_delPages").unbind("click");
    $("#re_func_delPages").removeClass("pageDelPageIconEn");
    $("#re_func_delPages").addClass("pageDelPageIconDis");
    //setToolbarState("#re_func_delPages",iconUrl2,"-1683px","-13px","text");
    $("#re_func_reOrdPages").unbind("click");
    $("#re_func_reOrdPages").removeClass("pageReOrdPagesIconEn");
    $("#re_func_reOrdPages").addClass("pageReOrdPagesIconDis");
   // setToolbarState("#re_func_reOrdPages",iconUrl2,"-1718px","-13px","text");
    $("#re_func_replPages").removeAttr("onclick");
    $("#re_func_replPages").removeClass("pageReplPagesIconEn");
    $("#re_func_replPages").addClass("pageReplPagesIconDis");
    //setToolbarState("#re_func_replPages",iconUrl2,"-1792px","-13px","text");
    $("#re_func_split").unbind("click");
    $("#re_func_split").removeClass("pageSplitIconEn");
    $("#re_func_split").addClass("pageSplitIconDis");
   // setToolbarState("#re_func_split",iconUrl2,"-1827px","-13px","text");
    $("#re_func_insertBk").unbind("click");
    $("#re_func_insertBk").removeClass("pageInsertBkIconEn");
    $("#re_func_insertBk").addClass("pageInsertBkIconDis");
   // setToolbarState("#re_func_insertBk",iconUrl2,"-1864px","-13px","text");
    $("#re_func_insertFF").removeAttr("onclick");
    $("#re_func_insertFF").removeClass("pageInsertFFIconEn");
    $("#re_func_insertFF").addClass("pageInsertFFIconDis");
    //setToolbarState("#re_func_insertFF",iconUrl2,"-1900px","-13px","text");
    //Edit
    //SetCommentToolbars
    $("#wdp_Toolbar").tabs( "option", "disabled", [2,3] );
    $("#_commentTab span").attr("title","This is a secured document.Commenting is not permitted.");
    $("#_editTab span").attr("title","This is a secured document.Edit is not permitted");
    if(_pdfDocRestrictions.isModify == "Allowed" && _pdfDocRestrictions.isAnnot == "Allowed")
    {
        $("#wdp_Toolbar").tabs( "option", "disabled", []);
        $("#_commentTab span").attr("title","");
        $("#_editTab span").attr("title","");
    }
    else if(_pdfDocRestrictions.isAnnot == "Allowed")
    {
        $("#wdp_Toolbar").tabs( "option", "disabled", [3]);
        $("#_commentTab span").attr("title","");
    }
    else if(_pdfDocRestrictions.isModify == "Allowed")
    {
        $("#wdp_Toolbar").tabs( "option", "disabled", [2]);
        $("#_editTab span").attr("title","");
    }
    if(_pdfDocRestrictions.isModify == "Allowed")
    {
        $("#_proTitle").attr("disabled",false);
        $("#_proAuthor").attr("disabled",false);
        $("#_proSubject").attr("disabled",false);
        $("#_proKeywords").attr("disabled",false);
        
        $("#re_func_delPages").bind("click", DeleteOpt);
        $("#re_func_delPages").addClass("pageDelPageIconEn");
        $("#re_func_delPages").removeClass("pageDelPageIconDis");
       // setToolbarState("#re_func_delPages",iconUrl1,"-1683px","-15px","pointer");
        $("#re_func_reOrdPages").bind("click", ShowReOrdBox);
        $("#re_func_reOrdPages").addClass("pageReOrdPagesIconEn");
        $("#re_func_reOrdPages").removeClass("pageReOrdPagesIconDis");
        // setToolbarState("#re_func_reOrdPages",iconUrl1,"-1718px","-15px","pointer");
        $("#re_func_replPages").attr("onclick", "FileToReplace.click()");
        $("#re_func_replPages").addClass("pageReplPagesIconEn");
        $("#re_func_replPages").removeClass("pageReplPagesIconDis");
       // setToolbarState("#re_func_replPages", iconUrl1, "-1792px", "-15px", "pointer");
        $("#re_func_split").bind("click", ShowSplitBox);
        $("#re_func_split").addClass("pageSplitIconEn");
        $("#re_func_split").removeClass("pageSplitIconDis");
       // setToolbarState("#re_func_split", iconUrl1, "-1827px", "-15px", "pointer");
        $("#re_func_insertBk").bind("click", InsertBKPage);
        $("#re_func_insertBk").addClass("pageInsertBkIconEn");
        $("#re_func_insertBk").removeClass("pageInsertBkIconDis");
       // setToolbarState("#re_func_insertBk",iconUrl1,"-1864px","-15px","pointer");
        $("#re_func_insertFF").attr("onclick", "FileToInsert.click()");
        $("#re_func_insertFF").addClass("pageInsertFFIconEn");
        $("#re_func_insertFF").removeClass("pageInsertFFIconDis");
      //  setToolbarState("#re_func_insertFF",iconUrl1,"-1900px","-15px","pointer");
    }  
    //SetExtractToolbars
  
    //setToolbarState("#re_func_extPages", iconUrl2, "-1755px", "-13px", "text");
    if (_pdfDocRestrictions.isExtract == "Allowed") {
        $("#re_func_extPages").bind("click", ShowExtractBox);
        // setToolbarState("#re_func_extPages", iconUrl1, "-1755px", "-15px", "pointer");
        $("#re_func_extPages").addClass("pageExtPagesIconEn");
        $("#re_func_extPages").removeClass("pageExtPagesIconDis");
    } else {
        $("#re_func_extPages").unbind("click");
        $("#re_func_extPages").removeClass("pageExtPagesIconEn");
        $("#re_func_extPages").addClass("pageExtPagesIconDis");
    }
    //SetCopyToolbars
}

function CreateEncryptWin()
{
    var tempWidth = 665;
    var tempHeight = 450;
    var zoom = 1;
    if(browserWidth < tempWidth || browserHeight < tempHeight)
    {
        tempWidth = browserWidth * 0.9;
        tempHeight = browserHeight * 0.9;
        zoom = 0.9;
    }
    var str = "<div id='_encryptPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_encryptPopbox").css({
        width:tempWidth+"px",
        height:tempHeight+"px",
        display:"block"
    });
    
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Password Security - Settings</div><div  class='poptitleimage poptitlestyle'  onclick='hideEncryptWin();'></div></div>";
    $("#_encryptPopbox").append(title);
    
    var popContent = "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:"+(tempWidth - 48)+"px;height:"+(80*zoom)+"px;background:#ffffff;'><legend>Document Open</legend>";
    popContent += "<table><tr></td><input type='checkbox' id='requireOpenPs' onchange='OpenPsChange();'><label for='requireOpenPs'>Require a password to open the document</label></td><td></td>";
    popContent += "<tr><td id='openPsTitle' style='margin-left:50px;color:#727272;'>Document Open Password:</td><td><span  class='tbl-txt'><input id='userPassword' class='input-style' size='30' maxlength='30' type='password' disabled='true'/></span></td><td id='levelUserPs' class='pw-strength'><div class='pw-bar'></div><div class='pw-bar-on'></div><div class='pw-txt'><span>Weak</span><span>Medium</span><span>Strong</span></div></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:"+(tempWidth - 48)+"px;height:"+(150*zoom)+"px;background:#ffffff;'><legend>Permissions</legend>";
    popContent += "<table><tr></td><input type='checkbox' id='requireOwnerPs' onchange='OwnerPsChange();'><label for='requireOwnerPs'>Restrict editing and printing of the document. A password will be required in order to change these permission settings</label></td><td></td></tr>";
    popContent += "<tr><td><input type='checkbox' id='setPrint'><label for='setPrint' id='printTitle'>Printing Allowed</label></td>";
    popContent += "<td><input type='checkbox' id='setCopy'><label for='setCopy' id='copyTitle'>Copying content allowed</label></td>";
    popContent += "<td><input type='checkbox' id='setChange'><label for='setChange' id='changeTitle'>Changing document allowed</label></td></tr>";
    popContent += "<tr><td><input type='checkbox' id='setExtract'><label for='setExtract' id='extractTitle'>Page extraction allowed</label></td>";
    popContent += "<td><input type='checkbox' id='setComment'><label for='setComment' id='commentTitle'>Commenting allowed</label></td>";
    popContent += "<td><input type='checkbox' id='setFillField'><label for='setFillField' id='fieldTitle'>Filling of form field allowed</label></td></tr>";
    popContent += "<tr><td><input type='checkbox' id='setAssemble'><label for='setAssemble' id='assembleTitle'>Document assembly allowed</label></td><td></td><td></td></tr>";
    popContent += "<tr><td id='ownerPsTitle' style='margin-left:50px;color:#727272;'>Change Permissions Password:</td><td><span  class='tbl-txt'><input id='ownerPassword' class='input-style' size='30' maxlength='30' type='password' disabled='true'/></span></td><td id='levelOwnerPs' class='pw-strength'><div class='pw-bar'></div><div class='pw-bar-on'></div><div class='pw-txt'><span>Weak</span><span>Medium</span><span>Strong</span></div></td></tr></table></fieldset>";
    
    popContent += "<fieldset style='margin:5px;padding:17px;padding-top:7px;width:"+(tempWidth - 48)+"px;height:"+(40*zoom)+"px;background:#ffffff;'><legend>Document Security</legend>";
    popContent += "<div><input type='checkbox' id='removePs' onchange='RemovePsChange();'><label id='removePsTitle' for='removePs'>Remove security from this document (No password will be required to this doucment)</label></div></fieldset>";
    
    popContent += "<button style='float:right;margin-right:5px;margin-top:8px;' onclick='hideEncryptWin();'>Cancel</button>";
    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:8px;' onclick='EncryptPsAct();'>Ok</button>";
    $("#_encryptPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    CreateConfirmPsPopBox();
    $("#_encryptPopbox").hide();
}

function CreateConfirmPsPopBox()
{
    var str = "<div id='_confirmPsPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_confirmPsPopbox").css({
        width:"500px",
        height:"170px",
        display:"block"
    });
    //var iconUrl = getImagesFolder() + "ui-icons_454545_256x240.png";
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div id='confirmPsTitle'  class='popboxtitle'  ></div><div  class='poptitleimage poptitlestyle'  onclick='hideConfirmPsPopbox();'></div></div>";
    $("#_confirmPsPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:460px;height:110px;background:#F0F0F0;'>";
    popContent += "<div id='confirmPsNote'></div>";
    popContent += "<br/><div style='margin-left:90px;'><span id='confirmLeft'></span><input type='password' id='confirmPs' style='width:160px;height:20px;' /></div>";
    
    popContent += "<button style='float:right;margin-right:5px;margin-top:8px;' onclick='hideConfirmPsPopbox();'>Cancel</button>";
    popContent += "<button style='width:60px;float:right;margin-right:25px;margin-top:8px;' onclick='ConfirmPs();'>Ok</button>";
    $("#_confirmPsPopbox").append(popContent);
    
    $("#_confirmPsPopbox").hide();
}

var curConfirmType = "";
function showConfirmPsPopbox(type)
{
    $("#_confirmPsPopbox").show();
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_confirmPsPopbox"); 
    $("#confirmPs").val("");
    curConfirmType = type;
    if(type == "Open")
    {
        $("#confirmPsTitle").html("Confirm Document Open Password");
        $("#confirmPsNote").html("Please confirm the Document Oepn Password.Be sure to make a note of the password.It will be required to open the document.");
        $("#confirmLeft").html("Document Open Password:&nbsp;&nbsp;&nbsp;");
    }
    else if(type == "Permission")
    {
        $("#confirmPsTitle").html("Confirm Permission Password");
        $("#confirmPsNote").html("Please confirm the Permission Password.Be sure to make a note of the password.You will need it to change these settings in the future.");
        $("#confirmLeft").html("Permission Password:&nbsp;&nbsp;&nbsp;");
    }
}

function hideConfirmPsPopbox()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_confirmPsPopbox").hide();
}

var settingUserPs = "";
var settingOwnerPs = "";
var settingRestriction = "";
var removeAllPs = "";
function ConfirmPs()
{
    hideConfirmPsPopbox();
    if(curConfirmType == "Open")
    {
        if($("#confirmPs").val() == $("#userPassword").val())
        {
            if(OwnerPsRequire)
            {
                if($("#ownerPassword").val() == "")
                    jAlert(i18n['content']['EnterPassword'] || "Please enter the Permission Password!!", i18n['title']['Error'] || "Error");
                else
                    showConfirmPsPopbox("Permission");
            }
            else
            {
                hideEncryptWin();
                jAlert(i18n['content']['SecurityChange'] || "Security settings will not be applied to the document untile you save the document.You will be able to continue to change security settings until you close the document!!", i18n['title']['WarmPrompt'] || "Warm prompt");
                settingUserPs = $("#userPassword").val();   
                settingOwnerPs = "";
                removeAllPs = "";
            }
        }
        else
        {
            jAlert(i18n['content']['ErrorPassword'] || "Confirmation password does not match.Please start over and enter the password again", i18n['title']['Error'] || "Error", function () {
                showConfirmPsPopbox("Open");
            });
        }
    }
    else if(curConfirmType == "Permission")
    {
        if($("#confirmPs").val() == $("#ownerPassword").val())
        {
            hideEncryptWin();
            jAlert(i18n['content']['SecurityChange'] || "Security settings will not be applied to the document untile you save the document.You will be able to continue to change security settings until you close the document!!", i18n['title']['WarmPrompt'] || "Warm prompt");
            if(OpenPsRequire)
                settingUserPs = $("#userPassword").val(); 
            else
                settingUserPs = "";
            settingOwnerPs = $("#ownerPassword").val();
            settingRestriction = new PDFRestrictions();
            settingRestriction.isPrint = document.getElementById("setPrint").checked;
            settingRestriction.isCopy = document.getElementById("setCopy").checked;
            settingRestriction.isModify = document.getElementById("setChange").checked;
            settingRestriction.isExtract = document.getElementById("setExtract").checked;
            settingRestriction.isAnnot = document.getElementById("setComment").checked;
            settingRestriction.isFillForm = document.getElementById("setFillField").checked;
            settingRestriction.isAssemble = document.getElementById("setAssemble").checked;
            removeAllPs = "";
        }
        else
        {
            jAlert(i18n['content']['ErrorPassword'] || "Confirmation password does not match.Please start over and enter the password again", i18n['title']['Error'] || "Error", function () {
                showConfirmPsPopbox("Permission");
            });
        }
    }
}

var removeRequire = false;
var OpenPsRequire = false;
var OwnerPsRequire = false;
function EncryptPsAct()
{
    removeRequire = document.getElementById("removePs").checked;
    OpenPsRequire = document.getElementById("requireOpenPs").checked;
    OwnerPsRequire = document.getElementById("requireOwnerPs").checked;
    if(removeRequire)
    {
        hideEncryptWin();
        jConfirm(i18n['content']['RemoveSecurity'] || "Are you sure you want to remove security from this document?", i18n['title']['RemoveSecurity'] || "Remove security", function (r) {
            if(r)
            {
                jAlert(i18n['content']['SecurityChange'] || "Security settings will not be applied to the document untile you save the document.You will be able to continue to change security settings until you close the document!!", i18n['title']['WarmPrompt'] || "Warm prompt");
                removeAllPs = "yes";
                settingUserPs = "";
                settingOwnerPs = "";
            }
        });
    }
    else
    {
        if(OpenPsRequire && OwnerPsRequire)
        {
            if($("#userPassword").val() == "")
                jAlert(i18n['content']['EnterUserPassword'] || "Please enter the Document Open Password!!", i18n['title']['Error'] || "Error");
            else
                showConfirmPsPopbox("Open");
        }
        else if(OpenPsRequire)
        {
            if($("#userPassword").val() == "")
                jAlert(i18n['content']['EnterUserPassword'] || "Please enter the Document Open Password!!", i18n['title']['Error'] || "Error");
            else
                showConfirmPsPopbox("Open");
        }
        else if(OwnerPsRequire)
        {
            if($("#ownerPassword").val() == "")
                jAlert(i18n['content']['EnterPermissionPassword'] || "Please enter the Permission Password!!", i18n['title']['Error'] || "Error");
            else
                showConfirmPsPopbox("Permission");
        }
        else
        {
            jAlert(i18n['content']['SetPermission'] || "To apply security settings,please set either a Pemissions Password or a Document Open Password.<br/>To remove password security checked the \"remove security\"", i18n['title']['Error'] || "Error", function () {
                ShowEncryptWin();
            });
        }
    }
}

function OpenPsChange()
{
    var require = document.getElementById("requireOpenPs").checked;
    if(require)
    {
        $("#openPsTitle").css("color","#000000");
        $("#userPassword").attr("disabled",false);
        $("#removePs").attr("checked",false);
    }
    else
    {
        $("#openPsTitle").css("color","#727272");
        $("#userPassword").val("");
        $("#levelUserPs").removeClass("pw-weak"); 
	    $("#levelUserPs").removeClass("pw-medium"); 
	    $("#levelUserPs").removeClass("pw-strong"); 
        $("#levelUserPs").addClass("pw-defule");
        $("#userPassword").attr("disabled",true);
    }
}

function OwnerPsChange()
{
    var require = document.getElementById("requireOwnerPs").checked;
    if(require)
    {
        $("#ownerPsTitle").css("color","#000000");
        $("#ownerPassword").attr("disabled",false);
        $("#removePs").attr("checked",false);
        
        $("#copyTitle").css("color","#000000");
        $("#setCopy").attr("disabled",false);
        $("#printTitle").css("color","#000000");
        $("#setPrint").attr("disabled",false);
        $("#changeTitle").css("color","#000000");
        $("#setChange").attr("disabled",false);
        $("#extractTitle").css("color","#000000");
        $("#setExtract").attr("disabled",false);
        $("#commentTitle").css("color","#000000");
        $("#setComment").attr("disabled",false);
        $("#fieldTitle").css("color","#000000");
        $("#setFillField").attr("disabled",false);
        $("#assembleTitle").css("color","#000000");
        $("#setAssemble").attr("disabled",false);
    }
    else
    {
        $("#ownerPsTitle").css("color","#727272");
        $("#ownerPassword").val("");
        $("#levelOwnerPs").removeClass("pw-weak"); 
	    $("#levelOwnerPs").removeClass("pw-medium"); 
	    $("#levelOwnerPs").removeClass("pw-strong"); 
        $("#levelOwnerPs").addClass("pw-defule");
        $("#ownerPassword").attr("disabled",true);
        
        $("#copyTitle").css("color","#727272");
        $("#setCopy").attr("disabled",true);
        $("#printTitle").css("color","#727272");
        $("#setPrint").attr("disabled",true);
        $("#changeTitle").css("color","#727272");
        $("#setChange").attr("disabled",true);
        $("#extractTitle").css("color","#727272");
        $("#setExtract").attr("disabled",true);
        $("#commentTitle").css("color","#727272");
        $("#setComment").attr("disabled",true);
        $("#fieldTitle").css("color","#727272");
        $("#setFillField").attr("disabled",true);
        $("#assembleTitle").css("color","#727272");
        $("#setAssemble").attr("disabled",true);
    } 
}

function RemovePsChange()
{
    var require = document.getElementById("removePs").checked;
    if(require)
    {
        $("#requireOpenPs").attr("checked",false);
        $("#requireOwnerPs").attr("checked",false);
        
        $("#openPsTitle").css("color","#727272");
        $("#userPassword").val("");
        $("#levelUserPs").removeClass("pw-weak"); 
	    $("#levelUserPs").removeClass("pw-medium"); 
	    $("#levelUserPs").removeClass("pw-strong"); 
        $("#levelUserPs").addClass("pw-defule");
        $("#userPassword").attr("disabled",true);
        
        $("#ownerPsTitle").css("color","#727272");
        $("#ownerPassword").val("");
        $("#levelOwnerPs").removeClass("pw-weak"); 
	    $("#levelOwnerPs").removeClass("pw-medium"); 
	    $("#levelOwnerPs").removeClass("pw-strong"); 
        $("#levelOwnerPs").addClass("pw-defule");
        $("#ownerPassword").attr("disabled",true);
        
        $("#copyTitle").css("color","#727272");
        $("#setCopy").attr("disabled",true);
        $("#printTitle").css("color","#727272");
        $("#setPrint").attr("disabled",true);
        $("#changeTitle").css("color","#727272");
        $("#setChange").attr("disabled",true);
        $("#extractTitle").css("color","#727272");
        $("#setExtract").attr("disabled",true);
        $("#commentTitle").css("color","#727272");
        $("#setComment").attr("disabled",true);
        $("#fieldTitle").css("color","#727272");
        $("#setFillField").attr("disabled",true);
        $("#assembleTitle").css("color","#727272");
        $("#setAssemble").attr("disabled",true);
    }
}

function ShowEncryptWin()
{
    $("#_encryptPopbox").show();
    
    $("#requireOpenPs").attr("checked",false);
    $("#requireOwnerPs").attr("checked",false);
        
    $("#openPsTitle").css("color","#727272");
    $("#userPassword").val("");
    $("#levelUserPs").removeClass("pw-weak"); 
	$("#levelUserPs").removeClass("pw-medium"); 
	$("#levelUserPs").removeClass("pw-strong"); 
    $("#levelUserPs").addClass("pw-defule");
    $("#userPassword").attr("disabled",true);
        
    $("#ownerPsTitle").css("color","#727272");
    $("#ownerPassword").val("");
    $("#levelOwnerPs").removeClass("pw-weak"); 
	$("#levelOwnerPs").removeClass("pw-medium"); 
	$("#levelOwnerPs").removeClass("pw-strong"); 
    $("#levelOwnerPs").addClass("pw-defule");
    $("#ownerPassword").attr("disabled",true);
    
    $("#copyTitle").css("color","#727272");
    $("#setCopy").attr("disabled",true);
    $("#printTitle").css("color","#727272");
    $("#setPrint").attr("disabled",true);
    $("#changeTitle").css("color","#727272");
    $("#setChange").attr("disabled",true);
    $("#extractTitle").css("color","#727272");
    $("#setExtract").attr("disabled",true);
    $("#commentTitle").css("color","#727272");
    $("#setComment").attr("disabled",true);
    $("#fieldTitle").css("color","#727272");
    $("#setFillField").attr("disabled",true);
    $("#assembleTitle").css("color","#727272");
    $("#setAssemble").attr("disabled",true);
    
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_encryptPopbox");
    
    if(_isHasUserPassword == "False" && !_pdfDocRestrictions.hasOwnerPss)
    {
        $("#removePs").attr("checked",false);
        $("#removePs").attr("disabled", true);
        $("#removePsTitle").css("color","#727272");
    }
    else
    {
        $("#removePs").attr("disabled", false);
        $("#removePs").attr("checked",false);
        $("#removePsTitle").css("color","#000000");
    }
}

function hideEncryptWin()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_encryptPopbox").hide();
}

function CreateResEditWin()
{
    var str = "<div id='_resEditPopbox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_resEditPopbox").css({
        width:"700px",
        height:"230px",
        display:"block"
    });
    //var iconUrl = getImagesFolder() + "ui-icons_454545_256x240.png";
    var title = "<div class='_popboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Password</div><div  class='poptitleimage poptitlestyle'  onclick='hideResEditPopBox();'></div></div>";
    $("#_resEditPopbox").append(title);
    
    var popContent = "<div style='border:1px solid #727272;margin:10px;margin-top:5px;padding:7px 10px;width:660px;height:170px;background:#F0F0F0;'>";
    popContent += "<div>Please enter a Permissions Password.After saving, choose File Properties and select the Security tab to review a full list of restrictions.</div>";
    popContent += "<table style='width:550px;height:80px;float:left;margin-left:60px;margin-top:10px;'>";
    popContent += "<tr><td>Permissions Password:</td><td><span  class='tbl-txt'><input id='pass' class='input-style' size='30' maxlength='30' name='pass' type='password' /></span></td><td id='level' class='pw-strength'><div class='pw-bar'></div><div class='pw-bar-on'></div><div class='pw-txt'><span>Weak</span><span>Medium</span><span>Strong</span></div></td></tr>";
    popContent += "<tr><td>Confirm Password:</td><td><span  class='tbl-txt'><input id='conpass' class='input-style' size='30' maxlength='30' name='conpass' type='password' /></span></td></tr></table>";
    popContent += "<button style='float:right;margin-right:5px;margin-top:8px;' onclick='hideResEditPopBox();'>Cancel</button>";
    popContent += "<button id='resEditOk' style='width:60px;float:right;margin-right:25px;margin-top:8px;color:#727272;cursor:text;'>Ok</button>";
    $("#_resEditPopbox").append(popContent);
    
    $("._popboxTitle").bind("mousedown",PopBoxMouseDown);
    $("#_resEditPopbox").hide();
}

$(function(){
    $("#pass").keyup(function(event){ 
		PasswordMatch("#level","#pass");
		comparePass("#pass","#conpass");
		return true; 
    });
});

$(function(){
    $("#userPassword").keyup(function(event){
        PasswordMatch("#levelUserPs","#userPassword");
        return true;
    });
});

$(function(){
    $("#ownerPassword").keyup(function(event){
       PasswordMatch("#levelOwnerPs","#ownerPassword");
       return true;
    });
});

function PasswordMatch(itemId,curItemId)
{
    var strongRegex = new RegExp("^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\W).*$", "g"); 
	var mediumRegex = new RegExp("^(?=.{7,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$", "g"); 
	var enoughRegex = new RegExp("(?=.{1,}).*", "g"); 

	if (false == enoughRegex.test($(curItemId).val())) //Password is less than six, password is gray intensity images
	{ 
	    $(itemId).removeClass("pw-weak"); 
		$(itemId).removeClass("pw-medium"); 
		$(itemId).removeClass("pw-strong"); 
		$(itemId).addClass("pw-defule"); 
	} 
	else if (strongRegex.test($(curItemId).val())) //Password for eight or more special characters and alphanumeric has three strength strongest
	{ 
	    $(itemId).removeClass("pw-weak"); 
		$(itemId).removeClass("pw-medium"); 
		$(itemId).removeClass("pw-strong"); 
		$(itemId).addClass("pw-strong"); 
	} 
	else if (mediumRegex.test($(curItemId).val())) //And password for seven or more letters, Numbers, special characters in the three two, intensity is moderate
	{ 
	    $(itemId).removeClass("pw-weak"); 
		$(itemId).removeClass("pw-medium"); 
		$(itemId).removeClass("pw-strong"); 
		$(itemId).addClass("pw-medium"); 
	} 
	else //If the password is 6 to and for, even if three letters, Numbers, special characters are included, strength is weak
	{ 
	    $(itemId).removeClass("pw-weak"); 
		$(itemId).removeClass("pw-medium"); 
		$(itemId).removeClass("pw-strong"); 
		$(itemId).addClass("pw-weak"); 
	} 
}

$(function(){
    $("#conpass").keyup(function(event){
        comparePass("#pass","#conpass");
    });
});

function comparePass(passId,conPassId)
{
    if($(passId).val() == $(conPassId).val())
    {
        $("#resEditOk").css("cursor","pointer");
        $("#resEditOk").css("color","#000000");
        $("#resEditOk").bind("click",function(){
            hideResEditPopBox();
            jAlert(i18n['content']['SecurityChange'] || "Security settings will not be applied to the document untile you save the document.You will be able to continue to change security settings until you close the document!!", i18n['title']['WarmPrompt'] || "Warm prompt");
            settingOwnerPs = $(passId).val();
        });
    }
    else
    {
        $("#resEditOk").css("cursor","text");
        $("#resEditOk").css("color","#727272");
        $("#resEditOk").unbind("click");
    }
}

function ShowResEditPopBox()
{
    $("#_resEditPopbox").show();
    $("#pass").val("");
    $("#conpass").val("");
    $("#level").removeClass("pw-weak"); 
	$("#level").removeClass("pw-medium"); 
	$("#level").removeClass("pw-strong"); 
    $("#level").addClass("pw-defule");
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    SignPanelPosition("#_resEditPopbox");
}

function hideResEditPopBox()
{
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_resEditPopbox").hide(); 
}

function ChangeIconStyle(divId)
{
    AddIconBorder("#"+divId);
    noSelectAnno();
    for(var i=0;i<draggableNumArray.length;i++)
        $(draggableNumArray[i]).draggable("disable");
    $(".showByDrag").removeClass("mouseStyleSelect");
	$(".showByDrag").addClass("mouseStyleMove");
	if(isBindSelectEvent)
	{
	    $("#draw_canvas").unbind("mousedown",selectDown);
	    $("#draw_canvas").unbind("mousemove",selectMove);
	    $("#draw_canvas").unbind("mouseup",selectUp);
	    isBindSelectEvent = false;
	}
}

function CreateCustomPanel(parentId)
{
    var loadingStr = "<div id='customPanel'><div class='loadingImg' id='loading'><div class='loadingFont' id='loading_div'>Loading</div><div id='dialog'><p id='content'></p></div></div></div>";
    $(parentId).prepend(loadingStr);
    $("#curtomPanel").hide();
    LoadingCss(browserWidth,browserHeight);
}

var currentActivePanel = 99;
var thumbIdArray = new Array("_thumbImg","_thumbOutLine","_thumbSearch");
function CreateLeftSidebar(parentId)
{
    //var iconUrl = getImagesFolder() + "IconA.png";
    var ulChild = "<ul id='_leftTabUl' style='background:#565656;border-bottom:2px solid #565656;'></ul>";
    $(parentId).append(ulChild);
    
    var thumbnails = "<li title='" + i18n['tabicon']['Thumnail'] + "' style='margin-bottom:0px;'><a id='_thumbTab' href='#thumbPanel' style='width:35px;height:35px;'></a></li>";
    var outlines = "<li title='" + i18n['tabicon']['Bookmarks'] + "' style='margin-bottom:0px;'><a id='_outlineTab' href='#thumbPanel' style='width:35px;height:35px;'></a></li>";
    var search = "<li title='" + i18n['tabicon']['TextSearch'] + "' style='margin-bottom:0px;'><a id='_searchTab' href='#thumbPanel' style='width:35px;height:35px;'></a></li>";
    $("#_leftTabUl").append(thumbnails);
    $("#_leftTabUl").append(outlines);
    $("#_leftTabUl").append(search);
    
//    $("#_thumbTab").css("background-image","url('" + iconUrl + "')");
//    $("#_thumbTab").css("background-position","-2264px -13px");
//    $("#_outlineTab").css("background-image","url('" + iconUrl + "')");
//    $("#_outlineTab").css("background-position","-2300px -13px");
//    $("#_searchTab").css("background-image","url('" + iconUrl + "')");
//    $("#_searchTab").css("background-position","-2336px -13px");
    $("#_thumbTab").addClass("leftsideThumbTabEn");
    $("#_outlineTab").addClass("leftsideOutlineTabEn");
    $("#_searchTab").addClass("leftsideSearchTabEn");
    
    CreateREThumbViewer(parentId);
    
    $(parentId).tabs();
    $(parentId).tabs("option","collapsible",true);
    $(parentId).tabs("option","active",false);
    $(parentId).tabs().addClass("ui-tabs-vertical ui-helper-clearfix");
    $(parentId+" li").removeClass("ui-corner-top").addClass("ui-corner-left");
    $(".ui-tabs-vertical .ui-tabs-nav").height((contentHeight-1)+"px");
    
    $(parentId).on( "tabsactivate", function( event, ui ) 
	{
	    var instruct = $(parentId).tabs( "option", "active" ).toString();
	    var curPosi = $("#wdp_Content").scrollTop(); 
	    if(instruct == "false")
	    {
	        ThumbShrink();
	    }
	    else
	    {
	        ThumbExpansion();
	        for(var i=0;i<thumbIdArray.length;i++)
	            $("#"+thumbIdArray[i]).hide();
	        if(instruct == "0")
	        {
	            $(".ui-tabs-vertical .ui-tabs-nav li.ui-tabs-active").css("border-top","0px");
	            $("#_thumbImg").show();
	            
	            thumbPanelW = 202;
	            ReAllocate(thumbPanelW);
                $("#_outlineResize").hide();
                $("#_plcImgsThumbs").width(thumbPanelW+"px");
                
	            $("#thumbIcon").blur();   
	            currentActivePanel = 0;
	            addShowPageIds();
	        }
	        else if(instruct == "1")
	        {
	            $("#_thumbOutLine").show();
	            
	            $("#_outlineResize").show();
	            thumbPanelW = currentThumbWidth;
	            ReAllocate(thumbPanelW);
	            
	            $("#outlineIcon").blur();
	            currentActivePanel = 1;
	        }
	        else if(instruct == "2")
	        {
	            $("#_thumbSearch").show();
	            
	            thumbPanelW = searchPanelWidth;
	            ReAllocate(thumbPanelW);
                $("#_outlineResize").hide();
	            $("#_plcImgsThumbs").width(thumbPanelW+"px");
	            
	            $("#_thumbSearch").blur();
	            currentActivePanel = 2;
	        }
	    }
	    $("#wdp_Content").scrollTop(curPosi);
    });
}

function CreateREThumbViewer(parentId)
{
    var leftSideZone = "<div id='thumbPanel' style='float:left;'></div>";
    $(parentId).append(leftSideZone);
    
    CreateREThumbPart("#thumbPanel");
}

function CreateREThumbPart(parentId)
{
    var thumbWidth = leftSidebarWidth - tabWidth - 6;
    var thumbHeight = contentHeight;
    var thumbViewer = "<div id='_plcImgsThumbs' class='RE_ThumbViewer' style='background:#f5f5f5;width:" + thumbWidth + "px;height:" + thumbHeight + "px;overflow:auto;float:left;'></div>";
    $(parentId).append(thumbViewer);
    var resizePanel = "<div id='_outlineResize' style='width:6px;height:"+thumbHeight+"px;cursor:e-resize;float:left;'></div>";
    $(parentId).append(resizePanel);
    $("#_outlineResize").bind("mousedown",resizeMouseDown);
    
    var thumbImg = "<div id='_thumbImg' style='margin:20px 10px 20px 10px;background:#dcdcdc;'></div>";
    $("#_plcImgsThumbs").append(thumbImg);
    var thumbOutLine = "<div id='_thumbOutLine' style='padding:0px 0px 0px 10px;height:100%;'></div>";
    $("#_plcImgsThumbs").append(thumbOutLine);
    var thumbSearch = "<div id='_thumbSearch' style='margin:20px 10px 20px 10px;font-size:13px;color:#333333;'></div>";
    $("#_plcImgsThumbs").append(thumbSearch);
    CreateSearchControl("_thumbSearch");
    $("#_thumbSearch").hide();
}

var IsResizeDown = false;
var currentThumbWidth = thumbPanelW;
var resizeMouseDown = function(e)
{
    IsResizeDown = true;
    e = e || window.event;
    xDown = e.pageX;
    xMove = e.pageX;
    $("#rasteredge_wdp").bind("mousemove",resizeMouseMove);
    $("#rasteredge_wdp").bind("mouseup",resizeMouseUp);
}

var resizeMouseMove = function(e)
{
    if(IsResizeDown)
    {
        $("#wdp_Viewer").removeClass("defaultCursor");
        $("#wdp_Viewer").addClass("resizeCursor");
        $(".showByDrag").removeClass("mouseStyleMove");
        $(".showByDrag").addClass("resizeCursor");
        e = e || window.event;
        if(xMove == e.pageX)
            return;
        else
            xMove = e.pageX;
        move_x = xMove - xDown;
        var maxThumbWidth = thumbPanelW + (contentWidth - 25);
        if(currentThumbWidth + move_x >= 0 && currentThumbWidth + move_x <= maxThumbWidth)
            ReAllocate(currentThumbWidth + move_x);
    }
}

var resizeMouseUp = function(e)
{
    currentThumbWidth = thumbPanelW;
    IsResizeDown = false;
    $("#wdp_Viewer").removeClass("resizeCursor");
    $("#wdp_Viewer").addClass("defaultCursor");
    $(".showByDrag").removeClass("resizeCursor");
    $(".showByDrag").addClass("mouseStyleMove");
    $("#rasteredge_wdp").unbind("mousemove",resizeMouseMove);
    $("#rasteredge_wdp").unbind("mouseup",resizeMouseUp);
}

function ReAllocate(width)
{
    thumbPanelW = width;
    leftSidebarWidth = thumbPanelW + tabWidth;
    $("#wdp_LeftSidebar").width(leftSidebarWidth+"px");
    $("#_plcImgsThumbs").width((thumbPanelW - 6)+"px");
    
    if(!rightSidebarWidth)
        contentWidth = browserWidth - leftSidebarWidth - 19+17;
    else
        contentWidth = browserWidth - leftSidebarWidth - rightSidebarWidth - 19+17; 

    var docWidth = contentWidth - 25;
    _docWidth = docWidth - 17; //for scrollbar width

    $("#wdp_Viewer").width(contentWidth+"px");
    $("#wdp_Content").width(docWidth + "px");
    $("#draw_canvas").width(_docWidth+"px");
    if(_fid != null && _fid !="")
	{
	    _fileDocument[curFileId].ChangeState();
        var curPg = parseInt(_curCorrectPageId);
        actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        Adaptive(viewer);
		ChangeViewerPosition(actualIndex);
		resizeDocViewerByCSS3("imgBig",actualIndex);
		ImageViewerAnnotationResize(actualIndex);
		changePosition();
   }
}

function Adaptive(viewer)
{
    if (viewer == null)
        return;
    _currentZoomIndex = parseInt($(".zoomList").get(0).selectedIndex);
    if(_currentZoomIndex == 18)
        zoomValue = (_docHeight/viewer.OneToOne_Height*100).toFixed(2)/100;
    else if(_currentZoomIndex == 19)
        zoomValue = parseInt(_docWidth/viewer.OneToOne_Width*100)/100; 
}

function CreateRightSidebar(parentId)
{
    var title = "<div id='_commentList' style='font-size:13px;background:#565656;width:100%;height:27px;border-top:1px solid #727272;border-bottom:1px solid #727272;line-height:27px;font-weight:bold;cursor:default;color:#ffffff;'><span style='padding-left:15px;'>Comments  List</span></div>";
    $(parentId).append(title);
    var panelHeight = contentHeight - 29;
    var commentsPanel = "<div id='_commentsPanel' style='width:100%;height:"+panelHeight+"px;overflow:auto;'></div>";
    $(parentId).append(commentsPanel);
    $("#_commentList").bind("click",function(){});
    CreateTableColor();
    CreateAnnoPropWindow();
}

var ColorHexArray = new Array("ffffff","000000","eeece1","1f497d","4f81bd","c0504d","9bbb59","8064a2","4bacc6","f79646",
                              "f2f2f2","7f7f7f","ddd9c3","c6d9f0","dbe5f1","f2dcdb","ebf1dd","e5e0ec","dbeef3","fdeada",
                              "d8d8d8","595959","c4bd97","8db3e2","b8cce4","e5b9b7","d7e3bc","ccc1d9","b7dde8","fbd5b5",
                              "bfbfbf","3f3f3f","938953","548dd4","95b3d7","d99694","c3d69b","b2a2c7","92cddc","fac08f",
                              "a5a5a5","262626","494429","17365d","366092","953734","76923c","5f497a","31859b","e36c09",
                              "7f7f7f","0c0c0c","1d1b10","0f243e","244061","632423","4f6128","3f3151","205867","974806",
                              "c00000","ff0000","ffc000","ffff00","92d050","00b050","00b0f0","0070c0","002060","7030a0");
var ColorTitleArray = new Array("White","Black","Tan","Dark Blue","Blue","Red","Olive Green","Purple","Aqua","Orange",
                                "White,Darker-5%","Black,Lighter-50%","Tan,Darker-10%","Dark Blue,Lighter-80%","Blue,Lighter-80%","Red,Lighter-80%","Olive Green,Lighter-80%","Purple,Lighter-80%","Aqua,Lighter-80%","Orange,Lighter-80%",
                                "White,Darker-15%","Black,Lighter-35%","Tan,Darker-25%","Dark Blue,Lighter-60%","Blue,Lighter-60%","Red,Lighter-60%","Olive Green,Lighter-60%","Purple,Lighter-60%","Aqua,Lighter-60%","Orange,Lighter-60%",
                                "White,Darker-25%","Black,Lighter-25%","Tan,Darker-50%","Dark Blue,Lighter-40%","Blue,Lighter-40%","Red,Lighter-40%","Olive Green,Lighter-40%","Purple,Lighter-40%","Aqua,Lighter-40%","Orange,Lighter-40%",
                                "White,Darker-35%","Black,Lighter-15%","Tan,Darker-75%","Dark Blue,Darker-25%" ,"Blue,Darker-25%" ,"Red,Darker-25%" ,"Olive Green,Darker-25%" ,"Purple,Darker-25%","Aqua,Darker-25%","Orange,Darker-25%",
                                "White,Darker-50%","Black,Lighter-5%" ,"Tan,Darker-90%","Dark Blue,Darker-50%" ,"Blue,Darker-50%" ,"Red,Darker-50%" ,"Olive Green,Lighter-50%","Purple,Lighter-50%","Aqua,Darker-50%","Orange,Darker-50%",
                                "Dark Red","Red","Orange","Yellow","Light Green","Green","Light Blue","Blue","Dark Blue","Purple");
function CreateTableColor()
{
    var str =  "<div id='_tableColor' class='select' style='position:absolute;background:#ffffff;width:183px;height:170px;display:block;z-index:999;'></div>";
    $("body").append(str);
    var tableColor = "<table style='width:100%;font-size:12px;border:1px solid #c6c6c6'>";
    tableColor += "<tr class='cellColor' id='_tableColorTitle'><td colspan='10' rowspan='2' rowstyle='text-align:center;'><div id='_titleColor' style='float:left;'></div><div style='float:left;margin-left:20px;text-align:center;' id='_tableTitle'>No Color</div></td></tr><tr></tr>";
    for(var i=0;i<60;i++)
    {
        if(i%10 == 0)
        {
            tableColor += "</tr><tr>";
        }
        tableColor += "<td><div id='"+ColorHexArray[i]+"' style='background:#"+ColorHexArray[i]+";' title='"+ColorTitleArray[i]+"' class='cellColor'></div></td>";
    }
    tableColor += "</tr><tr><td colspan='10' rowspan='3' style='font-weight:bold;'  title='"+ColorTitleArray[i]+"'>Standard Colors</td></tr><tr><tr></tr>";
    for(var i=60;i<ColorHexArray.length;i++)
    {
        tableColor += "<td><div id='"+ColorHexArray[i]+"' style='background:#"+ColorHexArray[i]+";' title='"+ColorTitleArray[i]+"' class='cellColor'></div></td>";
    }
    tableColor += "</tr></table>";
    $("#_tableColor").append(tableColor);
    $(".cellColor").bind("click",function(){CellColorSelected(this);})
    $("#_tableColor").hide();
}

var showTableColor = false;
var tableColorParent = "";
function ShowTableColor(curColorDiv,flag)
{
    if(tableColorParent == curColorDiv)
    {
        if(showTableColor)
        {
            $("#_tableColor").hide();
            showTableColor = false;
        }
        else
        {
            var id=curColorDiv.id;
            var offLeft = $("#"+id).offset().left;
            var offTop = $("#"+id).offset().top + $("#"+id).outerHeight(true);
            $("#_tableColor").show();
            if(flag)
            {
                $("#_titleColor").css("background","#ffffff");
                $("#_tableTitle").html("No Color");
                $("#_tableColorTitle").removeClass("_tableColorHover");
            }
            else
            {
                $("#_titleColor").css("background","#000000");
                $("#_tableTitle").html("Automatic");
                $("#_tableColorTitle").addClass("_tableColorHover");
            }
            $("#_tableColor").css({
                left: offLeft,
                top: offTop,
            });
            showTableColor = true;
        }
    }
    else
    {
        tableColorParent = curColorDiv;
        if(!showTableColor)
        {
            $("#_tableColor").show();
            showTableColor = true;
        }
        if(flag)
        {
            $("#_titleColor").css("background","#ffffff");
            $("#_tableTitle").html("No Color");
            $("#_tableColorTitle").removeClass("_tableColorHover");
        }
        else
        {
            $("#_titleColor").css("background","#000000");
            $("#_tableTitle").html("Automatic");
            $("#_tableColorTitle").addClass("_tableColorHover");
        }
        var id=curColorDiv.id;
        var offLeft = $("#"+id).offset().left;
        var offTop = $("#"+id).offset().top + $("#"+id).outerHeight(true);
        $("#_tableColor").css({
            left: offLeft,
            top: offTop,
        });
    }
}

function CellColorSelected(cellColor)
{
    var valHex = "000000";
    if(cellColor.id != "_tableColorTitle")
        valHex = cellColor.id.toUpperCase();
    var parentId = tableColorParent.id;
    if(parentId == "redactFillColor" || parentId == "redactFColor" || parentId == "redactMarkOColor" || parentId == "redactMarkFColor")
    {
        if(parentId == "redactFColor")
        {
            $("#"+parentId).css("background","#"+valHex);
            $("#"+parentId).val("#" + valHex);
        }
        else
        {
            if(cellColor.id == "_tableColorTitle")
            {
                $("#"+parentId).css("background","#ffffff");
                $("#"+parentId).html("none");
                $("#"+parentId).val("none");
            }
            else
            {
                $("#"+parentId).css("background","#"+valHex);
                $("#"+parentId).html("");
                $("#"+parentId).val("#" + valHex);
            }
            if(tempRedactAnno != null)
            {
                if(parentId == "redactFillColor")
                    tempRedactAnno.FillColor = $("#redactFillColor").val();
                else if(parentId == "redactMarkOColor")
                    tempRedactAnno.MarkOutlineColor = $("#redactMarkOColor").val();
                else if(parentId == "redactMarkFColor")
                    tempRedactAnno.MarkFillColor = $("#redactMarkFColor").val();
                TimelyChangeAnno(tempRedactAnno);
            }
        }
    }
    else if(parentId == "HFColor" || parentId == "BGColor" || parentId == "WMColor")
    {
        $("#"+parentId).css("background","#"+valHex);
        $("#"+parentId).val("#" + valHex);
        if(parentId == "HFColor")
            SwitchHFSettings();
        else if(parentId == "BGColor")
            SwitchBGSettings();
        else if(parentId == "WMColor")
            SwitchWMSettings();
    }
    else if(parentId == "re_func_fontC" || parentId == "re_func_fontBC")
    {
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(curSelectRange);
        if(parentId == "re_func_fontC")
        {
            $("#re_func_fontC").css("color","#"+valHex);
            //if (isEditPdfText && window.getSelection() != "")
                if (window.getSelection() != "")
                document.execCommand("forecolor",false,"#"+valHex);
        }
        else if(parentId == "re_func_fontBC")
        {
            $("#re_func_fontBC").css("background","#"+valHex);
            //if(isEditPdfText && window.getSelection() != "")
            if ( window.getSelection() != "")
               document.execCommand("backcolor",false,"#"+valHex);
            window.getSelection().removeAllRanges();
        }
    }
    else if(parentId == "_linkColor" || parentId == "_linkAnnoColor")
    {
        $("#"+parentId).css("background","#"+valHex);
        $("#"+parentId).val("#" + valHex);
    }
    else
    {
        if (cellColor.innerText == "No Color") {
            $("#" + parentId).html("none");
            $("#" + parentId).css("background", "#FFFFFF");
            if (parentId == "_outlineColor")
                timelyAnno.OutLineColor = "none";
            else if (parentId == "_fillColor")
                timelyAnno.FillColor = "none";
        } else { 
            $("#" + parentId).html(valHex);
            $("#" + parentId).css("background", "#" + valHex);
            if (parentId == "_outlineColor")
                timelyAnno.OutLineColor = "#" + valHex;
            else if (parentId == "_fillColor")
                timelyAnno.FillColor = "#" + valHex;
            else if (parentId == "_fontColor")
                timelyAnno.TxtFontColor = "#" + valHex;
        }
        TimelyChangeAnno(timelyAnno);
    }
    $("#_tableColor").hide();
    showTableColor = false; 
}

function CreateAnnoPropWindow()
{
    var str = "<div id='_annoPropPanel'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_annoPropPanel").css({
        width:"448px",
        height:"365px",
        display:"block"
    });
    var propTitle = "<div class='_popboxTitle' id='_propTitle' style='width:100%;height:30px;line-height:30px;padding-left:10px;font-weight:bold;'></div>";
    $("#_annoPropPanel").append(propTitle);
    var propWin = "<div id='_propWin' style='border:1px solid #727272;margin:7px;width:432px;height:320px;background:#F0F0F0;'></div>"
    $("#_annoPropPanel").append(propWin);
    
    var props = "<div id='_stylePanel' style='border:1px solid #cccccc;margin:16px;width:396px;height:246px;background:#ffffff;'></div>";
    $("#_propWin").append(props);
    var buttonPanel = "<div style='float:left;margin-left:16px;'><input type='checkbox' id='_setDefaultProp'>Set to the default properties</div>";
    buttonPanel += "<button style='float:right;margin-right:16px;width:80px;' Onclick='CancelChangePro()'>Cancel</button>"; 
    buttonPanel += "<button style='float:right;margin-right:20px;width:80px;' Onclick='ChangeAnnoProperty()'>OK</button>";
    $("#_propWin").append(buttonPanel);
    
    var proTable = "<table id='_proTab' style='width:100%;height:100%;padding:10px;padding-bottom:30px;'>";
    proTable += "<tr><td id='outlineWidth' class='annoPropLabel'>OutLineWidth:</td><td id='followoutlineWidth'><select id='_outlineWidth' style='width:70px;'></select></td>";
    proTable += "<td id='outlineColor' class='annoPropLabel'>OutLineColor:</td><td id='followoutlineColor'><div class='REcolor' id='_outlineColor' onclick='ShowTableColor(this,false);'></div></td></tr>";
    proTable += "<tr><td id='fillColor' class='annoPropLabel'>FillColor:</td><td id='followfillColor'><div class='REcolor' id='_fillColor' onclick='ShowTableColor(this,true);'></div></td>";
    proTable += "<td id='transparency' class='annoPropLabel'>Transparency:</td><td id='followtransparency'><select id='_transparency' style='width:70px;'></select></td></tr>";
    
    proTable += "<tr><td id='fontsize' class='annoPropLabel'>Text Size:</td><td id='followfontsize'><select  id='_fontsize' style='width:70px;'></select></td>";
    proTable += "<td id='fontcolor' class='annoPropLabel'>Text Color:</td><td id='followfontcolor'><div class='REcolor' id='_fontColor' onclick='ShowTableColor(this,false);'></div></td></tr>"
    proTable += "<tr rowspan='2'><td id='fontname' class='annoPropLabel'>Font Name:</td><td id='followfontname'><div style='float:left;'><select  id='_fontnamevalue' style='width:120px;height:24px;' onchange='changefont(this,\"_fontname\");'></select></div><div style='position:absolute;'><input  id='_fontname' style='width:99px;height:20px;margin-left:1px;margin-top:1px;border:none;padding:1px;' value='Arial'/></div></td></tr>";
    proTable += "<tr rowspan='2'><td id='stamptext' class='annoPropLabel'>Text:</td><td id='followstamptext'><input  id='_stamptext' style='width:120px;'></td></tr>";

    proTable += "<tr><td id='leaderlength' class='annoPropLabel'>Leader Length:</td><td id='followleaderlength'><input  id='_leaderlength' style='width:60px;'></td>";
    proTable += "<td id='leaderextend' class='annoPropLabel'>Leader Extend:</td><td id='followleaderextend'><input  id='_leaderextend' style='width:60px;'></td></tr>"
    proTable += "<tr rowspan='2'><td id='leaderoffset' class='annoPropLabel'>Leader Offset:</td><td id='followleaderoffset'><input  id='_leaderoffset' style='width:60px;'></td></tr></table>";
    

    $("#_stylePanel").append(proTable);
    
    //InitOutLineWidth
    for (var i = 0; i < 4; i++) {
        $("#_outlineWidth").append($('<option></option>').html(i*0.5));
    }
    for (var i = 2; i <= 10; i++) {
        $("#_outlineWidth").append($('<option></option>').html(i));
    }
    $("#_outlineWidth").bind("change",function(){
        timelyAnno.OutLineWidth = parseInt($(this).get(0).selectedIndex);
        if (timelyAnno.Type == "arrow" || timelyAnno.Type == "dimension") {
            return;
        }
        TimelyChangeAnno(timelyAnno);
    });
    //InitTransItem
    //$("#_transparency").append($('<option></option>').html("0"));
    for(var i=0;i<=100;i=i+10)
        $("#_transparency").append($('<option value="'+(i/100)+'"></option>').html(i+"%"));
   // $("#_transparency").append($('<option></option>').html("1"));
    $("#_transparency").bind("change",function(){
        var transparency = parseInt($(this).get(0).selectedIndex)/10;
        timelyAnno.Transparency = transparency;
        TimelyChangeAnno(timelyAnno);
    });
    //init font size
    $("#_fontsize").append($('<option value="6"></option>').html("6"));
    for (var i = 4; i < 12; i++)
        $("#_fontsize").append($('<option value="' + (i * 2) + '"></option>').html("" + (i * 2)));
    for (var i = 3; i < 6; i++)
        $("#_fontsize").append($('<option value="' + (i * 12) + '"></option>').html("" + (i * 12)));


    $("._popboxTitle").bind("mousedown",PopBoxMouseDown)
    $("#_annoPropPanel").hide();


    if (textFontArray == null || textFontArray.length <= 0)
        GetSystemFont();
    else {
        for (var i = 0; i < textFontArray.length - 1; i++) {
          
            $("#_fontnamevalue").append($('<option></option>').html(textFontArray[i]));
        }
        $("#_fontnamevalue").val("Arial").attr("selected", true);
    }
    
}
function changefont(select, targetid) {
    var textfont = select.value;
    $("#" + targetid).val(textfont);
}

var timelyAnno = null;
function ShowAnnoPropWindow()
{
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity","0.4");
    
    $("#_signPanel").hide();
    $("#_annoPropPanel").show();
    var annoType = curAnnoInfo.split(";")[0];
    var actualIndex = curAnnoInfo.split(";")[1];
    var annoIndex = curAnnoInfo.split(";")[2];
    var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex];
    originalAnno.OutLineColor = annotation.OutLineColor;
	originalAnno.OutLineWidth = annotation.OutLineWidth;
	originalAnno.FillColor = annotation.FillColor;
	originalAnno.ShowedText = annotation.ShowedText;
	originalAnno.TxtFontColor = annotation.TxtFontColor;
	originalAnno.Transparency = annotation.Transparency;
    timelyAnno = annotation;
    SignPanelPosition("#_annoPropPanel");
}

function HideAnnoProWindow()
{   
    $(".loadingImg").css("opacity","0.8");
    $("#loading_div").show();
    $("#loading").hide();
    $("#_annoPropPanel").hide();
}

function CancelChangePro()
{
    timelyAnno.OutLineColor = originalAnno.OutLineColor;
	timelyAnno.OutLineWidth = originalAnno.OutLineWidth;
	timelyAnno.FillColor = originalAnno.FillColor;
	timelyAnno.ShowedText = originalAnno.ShowedText;
	timelyAnno.TxtFontColor = originalAnno.TxtFontColor;
	timelyAnno.Transparency = originalAnno.Transparency;
    TimelyChangeAnno(timelyAnno);
    HideAnnoProWindow();
}

function ChangeAnnoProperty()
{
   var isSetDefault = document.getElementById("_setDefaultProp").checked;
   var annoType = curAnnoInfo.split(";")[0];
   var actualIndex = curAnnoInfo.split(";")[1];
   var annoIndex = curAnnoInfo.split(";")[2];
   if(curOutLineColor != $("#_outlineColor").html())
   {
       curOutLineColor = $("#_outlineColor").html();
       if (curOutLineColor == "No Color")
           curOutLineColor = "none";
        if (curOutLineColor != "none" && curOutLineColor.indexOf("#") == -1)
            curOutLineColor = "#"+curOutLineColor;
   }
   if(curFillColor != $("#_fillColor").html())
   {
       curFillColor = $("#_fillColor").html();
       if (curFillColor == "No Color")
           curFillColor = "none";
       if(curFillColor != "none"&&curFillColor.indexOf("#") == -1)
            curFillColor = "#"+curFillColor;
   }
   if (curFontColor != $("#_fontColor").html()) {
       curFontColor = $("#_fontColor").html();
       if (curFontColor == "No Color")
           curFontColor = "none";
       if ( curFontColor != "none" && curFontColor.indexOf("#") == -1)
           curFontColor = "#" + curFontColor;
   
   }
   var leaderlength = 0;
   var leaderoffset = 0;
   var leaderextend = 0;
   if (annoType == "dimension") {
       leaderlength = parseInt($("#_leaderlength").val());
       leaderoffset= parseInt($("#_leaderoffset").val());
       leaderextend = parseInt($("#_leaderextend").val());
       if (isNaN(leaderlength))
           leaderlength = 0;
       if (isNaN(leaderoffset) || leaderoffset < 0 || leaderoffset > 500) {
           alert((i18n['content']['LeaderOffsetRange'] || "Leader Offset must in" )+ " 0~500");
           return;
       }
       if (isNaN(leaderextend) || leaderextend < 0 || leaderextend > 500) {
           alert((i18n['content']['LeaderExtendRange'] || "Leader Extend must in")+" 0~500");
           return;
       }
     
   }

   // default
   AnnoIsChanged(annoIndex, actualIndex);
   var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex];

   var outlinewidth= parseFloat($("#_outlineWidth").val());
   if (isNaN(outlinewidth))
       outlinewidth = annotation.OutLineWidth;
   var fontsize = parseInt($("#_fontsize").val());
   if (isNaN(fontsize))
       fontsize = annotation.TxtFontSize;

   if(isSetDefault)
   {
       document.getElementById("_setDefaultProp").checked = false;
       var annoStyle=null;
       if (annoType == "rectangle" || annoType == "arrow" || annoType == "dimension" || annoType == "circle" || annoType == "polygon" || annoType=="stamp" )
        {
             annoStyle = rectangleAnnoStyle;
            if(annoType == "arrow")
                annoStyle = arrowAnnoStyle;
            else  if(annoType == "dimension"){
                annoStyle = dimensionAnnoStyle;
                annoStyle.LeaderLength = leaderlength ;
                annoStyle.LeaderOffset = leaderoffset ;
                annoStyle.LeaderExtend = leaderextend ;
                annoStyle.TxtFontColor = curFontColor ;
            }
            else if(annoType == "circle")
                annoStyle = circleAnnoStyle;
            else if(annoType == "polygon")
                annoStyle = polygonAnnoStyle;
         
          
            annoStyle.OutLineWidth = outlinewidth;
           annoStyle.OutLineColor = curOutLineColor;
           annoStyle.FillColor = curFillColor;
           annoStyle.Transparency = $("#_transparency").val();
       } else if (annoType == "textbox" || annoType == "stamp" || annoType == "text") {
           if (annoType == "textbox"){
               annoStyle = textboxAnnoStyle;
               annoStyle.TxtFontSize = fontsize;
               annoStyle.TxtFontColor = curFontColor;
           }
           else if (annoType == "text"){
               annoStyle = textAnnoStyle;
               annoStyle.TxtFontSize = fontsize;
               annoStyle.TxtFontColor = curFontColor;
               annoStyle.TxtFont = $("#_fontname").val()
           }
           else if (annoType == "stamp")
               annoStyle = stampAnnoStyle;

           annoStyle.OutLineWidth = outlinewidth;
           annoStyle.OutLineColor = curOutLineColor;
           annoStyle.FillColor = curFillColor;
           annoStyle.Transparency = $("#_transparency").val();
       }
        else if(annoType == "freehand" || annoType == "line" || annoType == "Polygonlines")
        {
             annoStyle = freehandAnnoStyle;
            if(annoType == "line")
                annoStyle = lineAnnoStyle;
            else if(annoType == "Polygonlines")
                annoStyle = polygonLinesAnnoStyle;
            annoStyle.OutLineWidth = outlinewidth;
            annoStyle.OutLineColor = curOutLineColor;
            annoStyle.Transparency = $("#_transparency").val();
        }
        else if(annoType == "strike" || annoType == "underLine" || annoType == "replaceText")
        {
             annoStyle = underlineTextAnnoStyle;
            if(annoType == "strike")
                annoStyle = strikeTextAnnoStyle;
            else if(annoType == "replaceText")
                annoStyle = replaceTextAnnoStyle;
            annoStyle.OutLineColor = curOutLineColor;
            annoStyle.Transparency = $("#_transparency").val();
        }
        else if(annoType == "highText" || annoType == "notes" || annoType=="fileattach")
        {
             annoStyle = highTextAnnoStyle;
            if(annoType == "notes")
                annoStyle = notesAnnoStyle;
            else if (annoType == "notes")
                annoStyle = AttachFileAnnoStyle;
            annoStyle.FillColor = curFillColor;
            annoStyle.Transparency = $("#_transparency").val();
        }


        if (annoStyle != null)
            $.cookie(annoType + "AnnoStyle", JSON.stringify(annoStyle), { expires: cookieDayTime });
   }
  

   if (annoType == "rectangle" || annoType == "arrow" || annoType == "dimension" || annoType == "circle" || annoType == "polygon")
   {
       annotation.OutLineWidth = outlinewidth;
        annotation.OutLineColor = curOutLineColor;
        annotation.FillColor = curFillColor;
        if (annoType == "dimension") {
            annotation.LeaderLength = leaderlength;
            annotation.LeaderOffset = leaderoffset;
            annotation.LeaderExtend = leaderextend;
        }
   }
   else if(annoType == "freehand" || annoType == "line" || annoType == "Polygonlines" || annoType=="stamp" || annoType=="textbox")
   {
       annotation.OutLineWidth = outlinewidth;
        annotation.OutLineColor = curOutLineColor;
        if (annoType == "stamp" && annotation.STID=="") {
            annotation.TxtFontColor = curFontColor;
            annotation.ShowedText = $("#_stamptext").val();
        } else if (annoType == "textbox") {
            annotation.TxtFontColor = curFontColor;
            annotation.TxtFontSize = fontsize;
        }
   } else if (annoType == "text") {
       annotation.TxtFontColor = curFontColor;
       annotation.TxtFontSize = fontsize;
       annotation.TxtFont = $("#_fontname").val();
   }
   else if(annoType == "highText" || annoType == "notes" || annoType=="fileattach")
   {
        annotation.FillColor = curFillColor;
   }
   else if(annoType == "strike" || annoType == "underLine" || annoType == "replaceText")
   {
        annotation.OutLineColor = curOutLineColor;
   }
  
   annotation.Transparency = $("#_transparency").val();
   if (annoType == "arrow" || annoType == "dimension") {
       annotation.ReSetArrow();
    
   } else if (annoType == "text") {
       textAutoWarpTextarea(annoIndex, actualIndex);
   }

       TimelyChangeAnno(annotation);
   
       $("#thumbImg_" + annoIndex).remove();
   
   addThumbViewerAnnotation(annotation, actualIndex);
   HideAnnoProWindow(); 
}

function TimelyChangeAnno(annotation)
{
   $("#div_"+annotation.Index).remove();
   drawImageViewerAnnotation(annotation);  
}

function SignPanelPosition(target)
{
    $(target).css({
          left:(browserWidth - $(target).outerWidth(true))/2,
          top:(browserHeight - $(target).outerHeight(true))/2
    });
}

var footerContentWidth = 450;
function footerContentOffset()
{
    if(footerContentWidth >= browserWidth)
    {
        leftOffset = 0;
        rightOffset = 0;
    }
    else
    {
        var balance = browserWidth - footerContentWidth;
        var halfWidth = parseInt(browserWidth * 0.5 - 104);
        if(balance < halfWidth)
        {
            leftOffset = balance;
            rightOffset = 0;
        }
        else
        {
            leftOffset = halfWidth;
            rightOffset = parseInt((browserWidth - footerContentWidth - leftOffset) * 0.1); 
        }
    }
}

function CreateFooterbar(parentId)
{
    footerContentOffset();
    var footerWidth = browserWidth - (leftOffset + rightOffset)-17;
    var pageFooter = "<div id='_footerImg' style='float:left;text-align:center;padding:0px " + rightOffset + "px 0px " + leftOffset + "px;width:" + footerWidth + "px;height:" + (footerbarHeight - 1) + "px;background:#878787;'></div>";
    $(parentId).append(pageFooter);
    var pagePart = "<div id='navi_pagePart' style='float:left;'></div>";
    $("#_footerImg").append(pagePart);
    CreatePagePart("#navi_pagePart");
    
    CreateZoomPart("#_footerImg");
    
    CreatePageModePart("#_footerImg");
}

function CreatePagePart(footerId)
{
    var firstPage = "<div class='navi_first' id='footer_pageFir' title='" + i18n['tabicon']['FirstPage'] + "'></div>";
    $(footerId).append(firstPage);
    var prePage = "<div class='navi_pre' id='footer_pagePre' title='" + i18n['tabicon']['PreviousPage'] + "'></div>";
    $(footerId).append(prePage); 
      
    var pageNavi = "<div id='selectCss' style='margin-top:15px;'><select class='pageIdList' style='width:100px;'></select></div>";
    $(footerId).append(pageNavi);
    
    var nextPage = "<div class='navi_ne' id='footer_pageNe' title='" + i18n['tabicon']['NextPage'] + "'></div>";
    $(footerId).append(nextPage);
    var lastPage = "<div class='navi_last' id='footer_pageLa' title='" + i18n['tabicon']['LastPage'] + "'></div>";
    $(footerId).append(lastPage);
}

function CreateZoomPart(footerId)
{
    var zoomPart = "<div id='navi_zoomPart' style='float:right;'></div>";
    $(footerId).append(zoomPart);
    
    var zoomItems = "<div id='selectCss' style='margin-top:15px;'><select class='zoomList'></select></div>";
    $("#navi_zoomPart").append(zoomItems);
    InitZoomItems(".zoomList");
    var zoomOut = "<div class='navi_zoomOut' id='footer_zoomOut' title='" + i18n['tabicon']['ZoomOut'] + "' onclick='btnZoomOut()' style='margin-left:5px;'></div>";
    $("#navi_zoomPart").append(zoomOut);
    var zoomIn = "<div class='navi_zoomIn' id='footer_zoomIn' title='" + i18n['tabicon']['ZoomIn'] + "' onclick='btnZoomIn()'></div>";
    $("#navi_zoomPart").append(zoomIn);
}

function CreatePageModePart(footerId)
{
    var PageModePart = "<div id='navi_pageMode' style='float:right;'></div>";
    $(footerId).append(PageModePart);
    
    var singleMode = "<div class='navi_single' id='footer_single' title ='" + i18n['tabicon']['SinglePage'] + "' onclick='btnSinglePage()' style='margin-right:5px;'></div>";
    $("#navi_pageMode").append(singleMode);
    var continuesMode = "<div class='navi_multi' id='footer_multi' title='" + i18n['tabicon']['ContinuesPage'] + "'onclick='btnContinuesPage()'></div>";
    $("#navi_pageMode").append(continuesMode);
   // var rotate = "<div class='toolRotateIconDis navi_pagerotate' style='margin-top:5px;' title='Rotate(Single Mode Only)' onclick='btnRotatePage()'></div>";
   // $("#navi_pageMode").append(rotate);
}

function InitZoomItems(divId)
{
    for(var i=0; i<_zoomItems.length;i++)
    {
        if(i==16)
        {
            var option = "<option class='zoomchange_value' disabled='disabled'>"+_zoomItems[i]+"</option>"
            $(divId).append(option);
        }
        else
            $(divId).append( $('<option></option>').html(_zoomItems[i])); 
    }
    $(divId).val("Fit Page").attr("selected",true);
}

var loadWidth = 128;
var loadHeight = 128;
var _totalPageCount = 0;
function CreateDocImageControl(parentId)
{
    $("#" + parentId).empty();
    $("#"+annotContainerId).empty();
    for(var i=0;i<_totalPageCount;i++)
    {
        var viewer = _fileDocument[curFileId].Viewers[i];
        if(!viewer.Init)
        {
            viewer.GetInitialSize();
            viewer.Init = true;
        }
        var pageWidth = viewer.FirstActualWidth;
        var pageHeight = viewer.FirstActualHeight;

        
        //var src = getImagesFolder() + "upload.gif";
        var str = "<div class='docImages' id='page_" + i + "' style='overflow:hidden;width:" +( pageWidth + widthprefix )+ "px;height:" + pageHeight + "px;background:#ffffff;'>";
        //str += "<img id='pageImg"+i+"' style='margin-left:"+(pageWidth - loadWidth)/2+"px;margin-top:"+(pageHeight - loadHeight)/2+"px;width:"+loadWidth+"px;height:"+loadHeight+"px;' src='" + src + "'/></div>";
        str += "<div class='uploadbackgroud' id='pageImg" + i + "' style='margin-left:" + (pageWidth - loadWidth) / 2 + "px;margin-top:" + (pageHeight - loadHeight) / 2 + "px;width:" + loadWidth + "px;height:" + loadHeight + "px;' /></div>";
       
        str += "</div>";

        var annotpanel = "<div class='docannotations' id='docannotation_" + i + "' style='width:auto;height:auto;'><div class='showByDrag pagedrag'/></div>";
        $("#" + annotContainerId).append(annotpanel);
        $("#"+parentId).append(str);
        $("#page_"+i).css("border","1px solid #000000");
        $("#page_"+i).css('box-shadow','3px 3px 0px #000000');
    }
    if(contentHeight < (pageHeight/2 + loadHeight))
        $("#pageImg0").css("margin-top",(contentHeight-loadHeight)/2+"px");
}



var _thumbScale = "";
function ChangeThumbnailSizes()
{
    for(var i=0;i<_fileDocument[curFileId].Viewers.length;i++)
    {
        var pageIndex = _fileDocument[curFileId].GetPageIndex(i);
        ChangeThumbnailSize(pageIndex);
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        _thumbScale += viewer.ThumbScaleX.toFixed(2) + ";";
    }
}
function ChangeThumbnailSize(pageIndex)
{
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
	var width = viewer.OneToOne_Width;
	var height = viewer.OneToOne_Height;
	var Pagepercent = width/height;
	if(width > height)
	{
	    if(height < _thumbHeight)
		    viewer.thumbShowHeight = height;
		else
			viewer.thumbShowHeight = _thumbHeight;
		viewer.thumbShowWidth = viewer.thumbShowHeight * Pagepercent;
		if(viewer.thumbShowWidth >= _maxThumbnailWidth)
		{
		    viewer.thumbShowWidth = _maxThumbnailWidth;
			viewer.thumbShowHeight = viewer.thumbShowWidth / Pagepercent;
		}
	}
	else
	{
		if(width < _minThumbnailWidth)
			viewer.thumbShowWidth = width;
		else
			viewer.thumbShowWidth = _thumbWidth;
		viewer.thumbShowHeight = viewer.thumbShowWidth / Pagepercent;
	}   	
	viewer.ThumbScaleX = viewer.thumbShowWidth/width;
	viewer.ThumbScaleY = viewer.thumbShowHeight/height;
	viewer.ThumbWidth = viewer.thumbShowWidth;
	viewer.ThumbHeight = viewer.thumbShowHeight;
}

var _minThumbnailWidth = 100;
var _maxThumbnailWidth = 150;
var _thumbWidth = 130;
var _thumbHeight = 180;
function CreateThumbImageControl(parentId)
{
    $("#"+parentId).empty();
    for(var i=0;i<_totalPageCount;i++)
    {
        var lbl = "<div class='rethumbnail' id='lbl_" + i + "' onclick='ChangePg(" + i + ")'></div>";
		$("#"+parentId).append(lbl);
		
		var viewer = _fileDocument[curFileId].Viewers[i];
		var viewerWidth = viewer.ThumbWidth;
		var viewerHeight = viewer.ThumbHeight;
		
		var thumbDiv = "<div class='thumbDiv' id='thumbDiv_" + i + "' style='background:#efefef;width:" + viewerWidth + "px;height:" + viewerHeight + "px;text-align:center;'></div>";
		$("#lbl_" + i).append(thumbDiv);
		CreateThumbImage("#thumbDiv_"+i,i);
		
		var thumbPageIndex = "<div id='thumbPgId_" + i + "' class='thumbPgId'>" + (i + 1) + "</div>";
        $("#lbl_" + i).append(thumbPageIndex);
    }
    AddSmartDeletePage();
}

var objDeletePg = {
	text: "Delete",
	func: function () {
	    var pageId = this.id;
	    jConfirm(i18n['content']['confirmdelete'] || "Confirm to delete page?", "RasterEdge Application", function (r) {
	        if (r) {
	           
	            pageId = pageId.substring(pageId.indexOf("_") + 1);
	            var showIndex = _fileDocument[curFileId].GetShowIndex(pageId) + 1;
	            DeletePages(showIndex, showIndex);
	        }
	    });
	    
	}	
};
var ThumbMenuData = [
	[objDeletePg]
];

function AddSmartDeletePage()
{
    for(var i=0;i<_totalPageCount;i++)
	$("#lbl_"+i).smartMenu(ThumbMenuData, {name:"thb_"+i});
}


function CreateThumbImage(divId,index)
{
    //var src = "";
    //src += getImagesFolder()+"thumb_upload.gif";
    //var image = "<img id='thumbnail_" + index + "' src ='" + src + "'/>";
    //$(divId).append(image);

    var load = "<div class='thumbUploadbackgroud' id='thumbnail_load_" + index + "' style='width:100%;height:100%;'/>";
    $(divId).append(load);
    var image ="<img id='thumbnail_" + index + "' width='100%' height='100%'/>";
    $("#thumbnail_load_" + index).append(image);
}

function CreateOutLineControl(parentId)
{
    $("#"+parentId).empty();
    var levelArray = new Array();
    var textLengthArray = new Array();
    for(var i=0;i<outLine.length;i++)
    {
        var entry = outLine[i];
        if(entry.Level == 1)
            levelArray.push(i);
        textLengthArray.push(entry.Text.length);
    }
    levelArray.push(outLine.length);
    //var icoUrl1 = getImagesFolder() + "bookmarkicon.png";
    //var icoUrl2 =getImagesFolder() + "add.png";
    initBookmarkMenu();
    if (appEditor) {
        CreateEditableBookmark(parentId);
    } else { 
        CreatePartPanel(levelArray,parentId);
    }
    
    var instruct = $("#wdp_LeftSidebar").tabs("option","active").toString();
    if(instruct != 1)
        $("#_thumbOutLine").hide();
}
var bkgoindex = 0;
var bkcontainer = [];


function CreateEditableBookmark(containerId) {
    bkgoindex = 0;
    bkcontainer = [];

    if (outLine == null || outLine.length <= 0)
        return;

    var levelpush = [];
    levelpush.push(containerId);
    var formerEntryLevel = 0;
    var parentId = containerId;
    for (var i = 0 ; i < outLine.length; i++) {
        var startEntry = outLine[i];

        // get current parent
        if (startEntry.Level < levelpush.length) {
            levelpush = levelpush.slice(0, startEntry.Level)
        }
        parentId = levelpush[levelpush.length - 1];
        if (startEntry.Text == "" || startEntry.Text == null)
            startEntry.Text = "untitled";
        var currentId = createBookmark(parentId, startEntry);
        levelpush.push("bookmark_"+currentId);
    }
    var allbk = $(".bm_onebookmark");
    for (var i = 0; i < allbk.length; i++) {
        checkBookmarkChildren(allbk[i]);
    }
}

function checkBookmarkChildren(bookmark) {
    var one = $(bookmark).children(".bm_bookmarkinfo").children(".bm_folder")[0];
    if ($(bookmark).children(".bm_subcontainer").children().length <= 0) {
        if (one != null && !$(one).hasClass("nonefold")) {
            $(one).addClass("nonefold");
        }
    } else {
        if (one != null && $(one).hasClass("nonefold")) {
            $(one).removeClass("nonefold");
        }
    }
}

function createBookmark(containerId, startEntry) {
    bkcontainer.push(startEntry)
    var id = bkcontainer.length - 1;
    var str = '<div class="bm_onebookmark" id="bookmark_' + id + '"><div  class="bm_bookmarkinfo" id="bookmarkoperate_' + id + '"><span class="bm_folder nonefold" onclick="showfolder(this)" id="bookmarkfolder_' + id + '">&nbsp;</span><span class="bm_icon" id="bookmarkicon_' + id + '" onclick="editBtnOutLine(this)"></span><span onclick="editBtnOutLine(this)" class="bm_text" id="bookmarktext_' + id + '" >' + startEntry.Text + '</span><span>&nbsp;</span></div><div class="bm_subcontainer" style="display:none;"></div></div>'
    if (containerId.indexOf("bookmark_") >= 0) {
        $("#" + containerId).children(".bm_subcontainer").append(str);
    } else { 
        $("#" + containerId).append(str);
    }
    return id;
}

function showfolder(obj,force) {
    if ($(obj).hasClass('nonefold')) {
        return;
    }
    if (force == null || typeof (force)=="undefined") {
        if ($(obj).hasClass('unfold')) {
            $(obj).removeClass('unfold');
            $(obj).parent().parent().children(".bm_subcontainer").hide();
        } else {
            $(obj).addClass('unfold');
            $(obj).parent().parent().children(".bm_subcontainer").show();
        }
    } else {
        if (force==true) {
            if (!$(obj).hasClass('unfold')) {
                $(obj).addClass('unfold');
            }
            $(obj).parent().parent().children(".bm_subcontainer").show();
        } else {
            if ($(obj).hasClass('unfold')) {
                $(obj).removeClass('unfold');
            }
            $(obj).parent().parent().children(".bm_subcontainer").hide();
        }
    }
}

function CreatePartPanel(levelArray,parentId)
{
    var start;
    var end;
    bkcontainer = [];
    if(levelArray == null)
        return;
    for(var i=0;i<levelArray.length-1;i++)
    {
        start = levelArray[i];
        end = levelArray[i+1];
        var startEntry = outLine[start];
        if(start == end || start+1 == end)
        {
            var offset = (startEntry.Level - 1) * 18 + 18;
            if(startEntry.Text == "" || startEntry.Text == null)
                startEntry.Text = "null";
            var str = "<div style='height:auto;line-height:26px;margin-left:" + offset + "px;'><div class='bookmarkIcon' style='margin-top:1px;margin-right:5px;float:left;width:19px;height:24px;'></div><div class='outline_hover' id='outLineContent_" + start + "' title='" + startEntry.Text + "' onclick='btnOutLine(this)'>" + startEntry.Text + "</div></div>";
            $("#"+parentId).append(str);
        }
        else
        {
            var offset = (startEntry.Level - 1) * 18;
            if(startEntry.Text == "" || startEntry.Text == null)
                startEntry.Text = "null";
            var str = "<div id='outLine_" + start + "' style='margin-left:" + offset + "px;height:auto;line-height:26px;'><div id='outLineIcon_" + start + "' style='float:left;width:13px;height:12px;margin-top:6px;margin-left:5px;' onclick='btnDownOrUp(this);'></div><div style='margin-top:1px;margin-right:5px;float:left;width:19px;height:24px;' class='bookmarkIcon'></div><div class='outline_hover' id='outLineContent_" + start + "' title='" + startEntry.Text + "' onclick='btnOutLine(this)'>" + startEntry.Text + "</div></div>";
            $("#" + parentId).append(str);
            $("#outLineIcon_" + start).removeClass("addBackgroud");
            $("#outLineIcon_" + start).addClass("addBackgroud");
            //$("#outLineIcon_"+start).css("background","url('"+icoUrl2+"') no-repeat");
            var parent = "<div id='outLine_"+start+"_next'></div>";
            $("#"+parentId).append(parent);  
            var entry = outLine[start + 1];
            var level = entry.Level;
            var temp = new Array();
            for(var j=start+1;j<end;j++)
            {
                entry = outLine[j];
                if(entry.Level == level)
                    temp.push(j);
                else if(entry.Level < level)
                {
                    temp.push(j)
                    level = entry.Level;
                }
            }
            temp.push(end);
            CreatePartPanel(temp,"outLine_"+start+"_next");
            $("#outLine_"+start+"_next").hide();
        }
    }
}

var currentClickId;
function btnOutLine(currentOutLine)
{
    var id = currentOutLine.id;
    if(id == currentClickId)
        return;
    else
    {
        $("#"+currentClickId).removeClass("outline_select");
		currentClickId = id;
		$("#"+id).addClass("outline_select");
    }
    var index = id.substring(id.indexOf("_")+1);
	var entry = outLine[index];
	var pageIndex = entry.PageIndex;
	if (pageIndex == -1 || pageIndex == null)
	    return;
	var offsetX = entry.PointF.X;
	var offsetY = entry.PointF.Y;
	offsetX = Math.ceil(offsetX * zoomValue);
	if($("#wdp_Content").scrollLeft() < offsetX)
	    offsetX = $("#wdp_Content").scrollLeft();
	offsetY = Math.ceil(offsetY * zoomValue) - 40;
	if(pageIndex == _curCorrectPageId)
	{
	    if(_viewerMode == "single")
		{
		    $("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop(offsetY);
		}
		else
		{
            var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
            ChangeDocScrollBar(showIndex);
            $("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + offsetY);
		}
	}
	else
	{
		ChangePg(pageIndex);
		if(_viewerMode == "single")
		{
    	    $("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop(offsetY);   
		}
		else
		{
    	    var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
            ChangeDocScrollBar(showIndex);
    		$("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + offsetY);   
		}
	}
}



var currentSelectBk;
var bookmarkHasModified = false;
var oneBookmarkMenuAct = null;
var oneCreateBookmarkMenuAct = null;

function initBookmarkMenu() {
    var bm_goto = {
        text: i18n['content']['BookmarkGoto'] || "Go to Bookmark", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0)
                editBtnOutLine(tgt);
        }
    }
    var bm_createnewbm = {
        text: i18n['content']['BookmarkCreateNew'] || "Create New Bookmark", func: function () {
            var tgt = $("#" + currentSelectBk);
            var pbm = null;
            if (tgt != null && tgt.length > 0) {
                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);

                pbm = $("#bookmark_" + index);


            }
            bookmarkHasModified = true;
            var startEntry = new Object();
            startEntry.PageIndex = 0;
            startEntry.PointF = new Object();
            startEntry.PointF.X = 0;
            startEntry.PointF.Y = 0;
            startEntry.PointF.IsEmpty = true;
            startEntry.Text = "untitled";
            startEntry.Level = 1;
            var ctid = "";
            if (pbm != null) {
                ctid = createBookmark($(pbm).parent().attr("id"), startEntry);
            } else {
                ctid = createBookmark("_thumbOutLine", startEntry);
            }
            $("#bookmark_" + ctid).insertAfter(pbm);
            setBookmarkTarget(ctid);
            bookmarkrename(ctid);

        }
    }



    var bm_createnewcbm = {
        text: i18n['content']['BookmarkCreateNewChild'] || "Create New Child Bookmark", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0) {
                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);

                var pbm = $("#bookmark_" + index);

                if (pbm != null) {
                    bookmarkHasModified = true;
                    var startEntry = new Object();
                    startEntry.PageIndex = 0;
                    startEntry.PointF = new Object();
                    startEntry.PointF.X = 0;
                    startEntry.PointF.Y = 0;
                    startEntry.PointF.IsEmpty = true;
                    startEntry.Text = "untitled";
                    //get level
                    var goparent = pbm.parent();
                    var golevelplus = 2;
                    while (goparent.hasClass("bm_subcontainer")) {
                        golevelplus++;
                        goparent = goparent.parent().parent();
                    }

                    startEntry.Level = golevelplus;

                    var ctid = createBookmark($(pbm).attr("id"), startEntry);

                    setBookmarkTarget(ctid);
                    bookmarkrename(ctid);
                    checkBookmarkChildren(pbm);

                    showfolder($(pbm).children(".bm_bookmarkinfo").children(".bm_folder")[0], true)

                }
            }
        }
    }
    var bm_delete = {
        text: i18n['content']['BookmarkDelete'] || "Delete", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0) {
                bookmarkHasModified = true;
                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);
                var goParentId = $("#bookmark_" + index).parent().parent().attr("id");
                $("#bookmark_" + index).remove();
                if (goParentId.indexOf("bookmark_") >= 0) {
                    checkBookmarkChildren($("#" + goParentId));
                }
            }
        }
    }
    var bm_setdesination = {
        text: i18n['content']['BookmarkSet'] || "Set Destination", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0) {

                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);
                setBookmarkTarget(index);
                bookmarkHasModified = true;
            }
        }
    }
    var bm_rename = {
        text: i18n['content']['BookmarkRename'] || "Rename", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0) {

                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);
                bookmarkrename(index);
            }
        }
    }
    var bm_mup = {
        text: i18n['content']['BookmarkMoveUp'] || "Move Up", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0) {
                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);
                bkup(index);
            }
        }
    }
    var bm_md = {
        text: i18n['content']['BookmarkMoveDown'] || "Move Down", func: function () {
            var tgt = $("#" + currentSelectBk);
            if (tgt != null && tgt.length > 0) {
                var emeId = $(tgt).attr("id");
                var index = emeId.substring(emeId.indexOf("_") + 1);
                bkdown(index);
            }
        }
    }



    var bm_goto_dis = {
        text: i18n['content']['BookmarkGoto'] || "Go to Bookmark", func: function () { },
        readonly: true
    }

    var bm_createnewcbm_dis = {
        text: i18n['content']['BookmarkCreateNewChild'] || "Create New Child Bookmark", func: function () { },
        readonly: true
    }
    var bm_delete_dis = {
        text: i18n['content']['BookmarkDelete'] || "Delete", func: function () { },
        readonly: true
    }
    var bm_setdesination_dis = {
        text: i18n['content']['BookmarkSet'] || "Set Destination", func: function () { },
        readonly: true
    }
    var bm_rename_dis = {
        text: i18n['content']['BookmarkRename'] || "Rename", func: function () { },
        readonly: true
    }
    var bm_mup_dis = {
        text: i18n['content']['BookmarkMoveUp'] || "Move Up", func: function () { },
        readonly: true
    }
    var bm_md_dis = {
        text: i18n['content']['BookmarkMoveDown'] || "Move Down", func: function () { },
        readonly: true
    }
    oneBookmarkMenuAct = [[bm_goto], [bm_createnewbm, bm_createnewcbm], [bm_delete, bm_setdesination, bm_rename], [bm_mup, bm_md]];
    oneCreateBookmarkMenuAct = [[bm_goto_dis], [bm_createnewbm, bm_createnewcbm_dis], [bm_delete_dis, bm_setdesination_dis, bm_rename_dis], [bm_mup_dis, bm_md_dis]];
}


function bookmarkrename(id) {
    finishedrename();
    $("#bookmarktext_" + id).hide();
    var text = $("#bookmarktext_" + id).text();
    $("#bookmarktext_" + id).before("<input class='bm_input' id='bm_retext' data-id='" + id + "'>");
    $("#bm_retext").val(text);
    $("#bm_retext").focus();

    $("#bm_retext").blur(finishedrename);
    $("#bm_retext").on('keypress',function(event){   
        if(event.keyCode == 13)      
        {
            $("#bm_retext").blur(function () { });
            finishedrename();
            event.preventDefault();
        }  
    });
}


function finishedrename() {
    if ($("#bm_retext") == null || $("#bm_retext").length <= 0)
        return;
    bookmarkHasModified = true;
    var goid = $("#bm_retext").data("id");
    var text = $("#bm_retext").val();
    if (text == null || text.length <= 0)
        text = "untitled";
    $("#bm_retext").remove();
    $("#bookmarktext_" + goid).text(text);
    $("#bookmarktext_" + goid).show();
    var entry = bkcontainer[goid];
    if (entry != null) {
        entry.Text = text;
    }
}

function setBookmarkTarget(id) {
   
    var countHeight = $("#wdp_Content").scrollTop();


    var realtarget = 0;
    var currentPage;
    if (_viewerMode == "single") {
        realtarget = countHeight / zoomValue + 21;
        currentPage = _curCorrectPageId;

    } else {
        currentPage = PrePageCount(countHeight);
        var currentPageTopCount = PreCountHeight(currentPage);
        var y = countHeight - currentPageTopCount;
        realtarget = y / zoomValue + 20;
    }
    var entry = bkcontainer[id];
    if (entry != null) {
        entry.PageIndex = currentPage;
        entry.PointF.X = 0;
        entry.PointF.Y = realtarget;
        entry.PointF.IsEmpty = false;
    }
    editBtnOutLine($("#bookmark_" + id));
}

function bkup(id) {

    var objParentTR = $("#bookmark_" + id);
    var prevTR = objParentTR.prev();
    if (prevTR.length > 0) {
        bookmarkHasModified = true;
        prevTR.insertAfter(objParentTR);
    }
}

function bkdown(id) {
    var objParentTR = $("#bookmark_" + id);
    var nextTR = objParentTR.next();
    if (nextTR.length > 0) {
        bookmarkHasModified = true;
        nextTR.insertBefore(objParentTR);
    }
}

function editBtnOutLine(currentOutLine) {
    if ($(currentOutLine).hasClass('bm_folder'))
        return;
    var emeId = $(currentOutLine).attr("id");
    var index = emeId.substring(emeId.indexOf("_") + 1);


    if (index != currentClickId) {
        $("#bookmarkoperate_" + currentClickId).removeClass("outline_select");
        currentClickId = index;
        $("#bookmarkoperate_" + index).addClass("outline_select");
    }

    var entry = bkcontainer[index];
    var pageIndex = entry.PageIndex;
    if (pageIndex == -1 || pageIndex == null)
        return;
    var offsetX = entry.PointF.X;
    var offsetY = entry.PointF.Y;
    offsetX = Math.ceil(offsetX * zoomValue);
    if ($("#wdp_Content").scrollLeft() < offsetX)
        offsetX = $("#wdp_Content").scrollLeft();
    offsetY = Math.ceil(offsetY * zoomValue) - 40;
    if (pageIndex == _curCorrectPageId) {
        if (_viewerMode == "single") {
            $("#wdp_Content").scrollLeft(offsetX);
            $("#wdp_Content").scrollTop(offsetY);
        }
        else {
            var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
            ChangeDocScrollBar(showIndex);
            $("#wdp_Content").scrollLeft(offsetX);
            $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + offsetY);
        }
    }
    else {
        ChangePg(pageIndex);
        if (_viewerMode == "single") {
            $("#wdp_Content").scrollLeft(offsetX);
            $("#wdp_Content").scrollTop(offsetY);
        }
        else {
            var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
            ChangeDocScrollBar(showIndex);
            $("#wdp_Content").scrollLeft(offsetX);
            $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + offsetY);
        }
    }
}


function getFinalBookmarkJson() {
    var allbookmarks = $(".bm_onebookmark");
    if (allbookmarks == null || allbookmarks.length <= 0)
        return [];
    var finbm = [];
    for (var i = 0; i < allbookmarks.length; i++) {
        var emeId = $(allbookmarks[i]).attr("id");
        var index = emeId.substring(emeId.indexOf("_") + 1);
        finbm.push(bkcontainer[index]);
    }
    return $.toJSON(finbm);
}


var activePanel = new Array();
function btnDownOrUp(panel)
{
   // var icoUrl1 =getImagesFolder() + "add.png";
   // var icoUrl2 =getImagesFolder() + "sub.png";
    var id = panel.id;
    var index = id.substring(id.indexOf("_")+1);
    var panelId = "outLine_"+index+"_next";
    if(activePanel.in_array(panelId))
    {
       // $("#outLineIcon_"+index).css("background","url('"+icoUrl1+"') no-repeat -1px 0px");
        $("#outLineIcon_" + index).removeClass("subBackgroud");
        $("#outLineIcon_" + index).removeClass("addBackgroud");
        $("#outLineIcon_" + index).addClass("addBackgroud");
        $("#"+panelId).hide();
        activePanel.remove(panelId);
    }
    else
    {
        //$("#outLineIcon_"+index).css("background","url('"+icoUrl2+"') no-repeat -1px 0px");
        $("#outLineIcon_" + index).removeClass("addBackgroud");
        $("#outLineIcon_" + index).removeClass("subBackgroud");
        $("#outLineIcon_" + index).addClass("subBackgroud");
        $("#"+panelId).show();
        activePanel.push(panelId);
    }
}

function clearSubmit(e) {
    if (e.keyCode == 13) 
    {
        searchText();
        return false;
    }
}

var searchPanelWidth = 0;
var _isDefault;

var sRedactAddCurrent = {
    text: "Redact Text",
    func: function () {
        var targetid = "#" + this.id;
        if (searchredactid[targetid] != null) {
            return;
        }
        var x = $(targetid).data("X");
        var y = $(targetid).data("Y");
        var w = $(targetid).data("W");
        var h = $(targetid).data("H");
        var pg = $(targetid).data("PG");

        redactSearchText(targetid, x, y, w, h, pg);
    },
};
var sRedactDeleteCurrent = {
    text: "Delete Redact",
    func: function () {
        var targetid = "#" + this.id;

        if (searchredactid[targetid] != null && typeof (searchredactid[targetid]) != "function") {
            var deleteid = "#div_" + searchredactid[targetid];
            if ($(deleteid).length > 0) {
                deleteOneAnnotation(deleteid);
                searchredactid[targetid] = null;
            }
        }
    }
};

var sRedactAddAllCurrent = {
    text: "Redact Current Search",
    func: function () {

        redactCurrentSearch(true);

    },
};

function redactCurrentSearch(hidealert) {
    

    var allchild = $("#_searchResult").children(".searchResult");

    if (hidealert == null || typeof (hidealert)=="undefined") {
        if (allchild.length == 0) {
            alert(i18n['content']['NoRedactText'] || "No search results to redact.");
            
        } else {
            showRedactSearchTextBox();
        }
        return;
    }
    for (var i = 0; i < allchild.length; i++) {

        var targetid = "#" + $(allchild[i]).attr("id");
        if (searchredactid[targetid] != null) {
            continue;
        }
        var x = $(targetid).data("X");
        var y = $(targetid).data("Y");
        var w = $(targetid).data("W");
        var h = $(targetid).data("H");
        var pg = $(targetid).data("PG");

        redactSearchText(targetid, x, y, w, h, pg);
    }

}
var sRedactDeleteAllCurrent = {
    text: "Delete Current Search",
    func: function () {
        var keys = Object.keys(searchredactid);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (searchredactid[key] == null)
                continue;
            var deleteid = "#div_" + searchredactid[key];
            try {
                if ($(deleteid) != null && $(deleteid).length > 0) {
                    deleteOneAnnotation(deleteid);

                }
            } catch (e) {
            }

        }

        searchredactid = [];

    },
};
var sRedactDeleteAllSearch = {
    text: "Remove All Search Redact",
    func: function () {
        if ($(".redactBySearch").length > 0) {
            var children = $(".redactBySearch");
            for (var i = 0 ; i < children.length; i++) {
                var deleteid = $(children[i]).attr("id");
                deleteOneAnnotation(deleteid);
            }
            searchredactid = [];
        }
    },
};
var searchredactmenu = [[sRedactAddCurrent, sRedactDeleteCurrent], [sRedactAddAllCurrent, sRedactDeleteAllCurrent], [sRedactDeleteAllSearch]];
var nosearchmenu = [[sRedactDeleteAllSearch]];

function checkreg() {
    var isreg = $('#_regexp').is(':checked');
    if (isreg) {
        $(".nonereg").hide();
    } else {
        $(".nonereg").show();
    }
}

function CreateSearchControl(btnId)
{
    $("#"+btnId).append("<div id='_searchHead'></div>");
    $("#_searchHead").css("font-size","12px");
    
    searchPanelWidth = thumbPanelW + 50;
    var inputWidth = searchPanelWidth - 20;
    var searchWidth = inputWidth - 48;
    var searchHeight = 24;
    
    var inputStr = "<div style='width:"+inputWidth+"px;height:"+searchHeight+"px;border:1px solid #999999;border-radius:3px;float:left;'>";
    inputStr += "<div id='_searchIcon' title='Search' onclick='searchText()'></div>";
    inputStr += "<div><input id='_search' style='width:"+searchWidth+"px;padding-top:3px;border:0px;float:left;' onkeydown='return clearSubmit(event)'></input></div>";
    inputStr += "<div id='_searchClear' title='Clear Search' onclick='clearSearch()'></div></div>";
    
    var searchOptions = "<div id='_searchOptions' style='margin-top:10px;width:" + (inputWidth - 2) + "px;height:25px;float:left;'>";
    searchOptions += "<div style='float:left;'><input type='checkbox' id='_regexp' style='text-align:center;line-height:25px;' onclick='checkreg(this)' ><label for='_regexp'>Regular expressions</label></div>";
    searchOptions += "<div class='nonereg' style='float:left;'><input type='checkbox' id='_ignoreCase' style='text-align:center;line-height:25px;'><label for='_ignoreCase'>Ignore case</label></div>";
    searchOptions += "<div class='nonereg' style='margin-left:20px;float:left;'><input type='checkbox' id='_wholeWord' style='text-align:center;line-height:25px;'><label for='_wholeWord'>Whole word</label></div></div>";
    
    var label = "<label id='_labelCount' style='margin-top:20px;color:#666666;float:left;'></label>";
    $("#_searchHead").append(inputStr);
    $("#_searchHead").append(searchOptions);
    $("#_ignoreCase").attr("checked", true);
    $("#_searchHead").append(label);
    
    var searchWidth = searchPanelWidth - 10;
    var searchHeight = contentHeight - 135;
    var searchPanel = "<div id='_searchResult' style='overflow:auto;margin-top:15px;width:"+searchWidth+"px;height:"+searchHeight+"px;float:left;'><div>";
    var image = "<img id='search_load' style='padding-top:"+(searchHeight/2-10)+"px;padding-left:"+(searchWidth/2-20)+"px;' class='thumbUploadbackgroud'/>";
    $("#"+btnId).append(searchPanel);
    $("#_searchResult").hide();
    if (addRedactFromSearch) { 
        $("#_searchResult").smartMenu(nosearchmenu);
    }
    $("#"+btnId).append(image);
    $("#search_load").hide();
    var obj = document.getElementById("_search");
    obj.onblur = function()
    {
        if(obj.value == "")
        {
            obj.value = "Search Document";
            _isDefault = true;
            $("#_search").css("color","#999999");
        }
    }
    obj.onfocus = function()
    {
        if(obj.value == "Search Document" && _isDefault)
        {
            obj.value = "";
            _isDefault = false;
            $("#_search").css("color","#333333");
        }
    }
    obj.onblur();
}

var searchArray = new Array();
var svgPageResult = new Array();
var svgDefaultPageResult = new Array();
var textSearch = "";
var isIgnoreCase = false;
var isWholeWord = false;
var searchredactid = [];
function searchText()
{
    
    var isgoreg = document.getElementById("_regexp").checked;
    tempIsIgnoreCase = document.getElementById("_ignoreCase").checked;
    tempIsWholeWord = document.getElementById("_wholeWord").checked;
    if(textSearch.toLowerCase() == $("#_search").val().toLowerCase() && searchArray.length != 0)
    {
        if(tempIsIgnoreCase == isIgnoreCase && tempIsWholeWord == isWholeWord)
            return;
    }
    isIgnoreCase = tempIsIgnoreCase;
    isWholeWord = tempIsWholeWord;
    textSearch = $("#_search").val();
    if(textSearch == "Search Document" && _isDefault)
    {
        alert(i18n['content']['EnterSearchTerm']||"Please enter a search term");
        return;
    }
    if(searchArray.length != 0)
    {
        $("#_searchResult").empty();
        $("#_labelCount").html("");
        $(".searchText").remove();
        searchArray = new Array();
        svgPageResult = new Array();
    }
    searchredactid=[];
    $("#_searchResult").hide();
    $("#_labelCount").html("");
    $("#search_load").show();
    var resultCount = 0;
    
    if(textSearch != "" && !_isDefault)
    {
        $.post(getServerHandlerUrl(), { "action": "GetSearchResult", "fid": _fid, "fileName": _actualName, password: curDocPassWord, "matchedString": textSearch, "IsMatchCase": isIgnoreCase, "IsWholeWord": isWholeWord, "IsRegex": isgoreg }, function (result, status) {
                result = eval('(' + result + ')');
				if (result.state == "success")
				{
					currentResultId = null;
					$("#search_load").hide();
					var arr = result.msg;
					var actualCount = arr.resultCount;
					searchArray = unpackSearch(arr.Result);
					addSearchResult(textSearch,actualCount);	
				} 
				else
				{					
					alert(result.msg);
					$("#search_load").hide();
				}
      });	 
    }	
    return false;
}


function loadDefaultSearchText() {
    var searchTextArray = defaultSearchList;
    svgDefaultPageResult = new Array();
    $(".defaultsearchText").remove();
    if (searchTextArray.length == 0)
        return;
    for (var i = 0; i < searchTextArray.length; i++) {
        if (searchTextArray[i].length <= 2)
            continue;
        $.post(getServerHandlerUrl(), { "action": "GetSearchResult", "fid": _fid, "fileName": _actualName, password: curDocPassWord, "matchedString": searchTextArray[i], "IsMatchCase": defaultSearchIsCaseSenstive, "IsWholeWord": defaultSearchIsWholeWord }, function (result, status) {
            result = eval('(' + result + ')');
            if (result.state == "success") {
                currentResultId = null;
                $("#search_load").hide();
                var arr = result.msg;
                var actualCount = arr.resultCount;
                var currentsearchArray = unpackSearch(arr.Result);
                addDefaultSearchResult(currentsearchArray, searchTextArray[i], actualCount);
            }
            else {

                $("#search_load").hide();
            }
        });
    }
   
}

function addDefaultSearchResult(currentsearchArray, textSearch, actualCount) {
    if (actualCount == 0)
        return;
    resultCount = currentsearchArray.length;
    var svgPageIndex = currentsearchArray[0].CombinedResultArea[0].PageIndex;
    for (var i = 0; i < resultCount; i++) {
        var resultUnit = currentsearchArray[i];
        resultUnit.ContextString = HandleMatchString(resultUnit.ContextString);
        var position = resultUnit.KeywordOffset;
        var wordLength = resultUnit.CharResults.length;
        var preStr = resultUnit.ContextString.substring(0, position);
        var searchStr = resultUnit.ContextString.substring(position, position + wordLength);
        var lasStr = resultUnit.ContextString.substring(position + wordLength);

        if (!_fileDocument[curFileId].ViewerPageIndex.in_array(resultUnit.CombinedResultArea[0].PageIndex)) {
            actualCount--;
            continue;
        }
        var CombinedResultArray = resultUnit.CombinedResultArea;
        for (var k = 0 ; k < CombinedResultArray.length; k++) {
            var area = CombinedResultArray[k];
            var pgIndex = area.PageIndex;
            var svgRectStr = "<div class='defaultsearchText' style='left:" + area.Area.X.Value * zoomValue + "px;top:" + area.Area.Y.Value * zoomValue + "px;width:" + area.Area.Width.Value * zoomValue + "px;height:" + area.Area.Height.Value * zoomValue + "px'></div>";
            if (_showDocSrc.in_array(pgIndex)) {
                $("#docannotation_" + pgIndex).append(svgRectStr);
            }
            else {
                if (svgDefaultPageResult[pgIndex] == null)
                    svgDefaultPageResult[pgIndex] = svgRectStr;
                else
                    svgDefaultPageResult[pgIndex] += svgRectStr;
            }
        }
    }

}

function addSearchResult(textSearch,actualCount)
{
    $("#_searchResult").show();
	$("#_labelCount").html(actualCount +" matches");
    $(".searchText").remove();
    if(actualCount == 0)
        return;
    refreshSearchReact();
    $("#_labelCount").html(actualCount + " matches");
    if(resultCount != actualCount)
    {
        var showText = "<span style='color:#ff0000'>Too many results, please increase the length of the search string....... </span>";
        var str = "<div style='width:"+(searchPanelWidth - 50)+"px;height:auto;line-height:20px;border:1px solid #999999;border-radius:2px;'>"+showText+"</div>";
        $("#_searchResult").append(str);
    }
}




function redactSearchText(sid,x,y,w,h,targetpage) {

    curAnnoType = "redact";
        var viewer = _fileDocument[curFileId].Viewers[targetpage];
        viewer.GetViewerLeftTop();

     
        var tempLeft = [x] ;
        var tempTop = [y] ;
        var tempWidth = [w] ;
        var tempHeight = [h] ;

        var lineRectangle = new Array();
        lineRectangle.push(tempLeft);
        lineRectangle.push(tempTop);
        lineRectangle.push(tempWidth);
        lineRectangle.push(tempHeight);
        var docAnno = new Annotation({ OnPageIndex: targetpage, Type: curAnnoType, Index: num, ZoomValue: zoomValue, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
        docAnno.selectTextRectangle = lineRectangle;
        if (RotateArray[targetpage] != null) {
            docAnno.MarkupDirection = RotateArray[targetpage];
        } else {
            docAnno.MarkupDirection = 0;
        }
       
            docAnno.redactText = textSearch;
        
        if (linefirstblank) {
            docAnno.STime = " ";
            linefirstblank = false;
        }
        docAnno.AddBySearch = true;
        _fileDocument[curFileId].Viewers[targetpage].Annotations[num] = docAnno;
        var startX = tempLeft[0];
        var startY = tempTop[0];
        var endX = tempLeft[tempLeft.length - 1] + tempWidth[tempWidth.length - 1];
        var endY = tempTop[tempTop.length - 1] + tempHeight[tempHeight.length - 1];
        docAnno.Points = x+","+y+","+w+","+h+";";

        docAnno.EndLeft = endX;
        docAnno.EndTop = endY;
     
        drawTextActSvg(docAnno);
        var date = getTimeString();
        _fileDocument[curFileId].Viewers[targetpage].Annotations[num].ModifiedDate = date;
        AddAnnoToCommentsPanel(targetpage, curAnnoType, num, date);
        searchredactid[sid] = num;
        searchredactid.length++;
        num++;
}



function refreshSearchReact() {
    $(".searchText").remove();
    $("#_searchResult").empty();
    if (searchArray == null)
        return;
    resultCount = searchArray.length;
    if (resultCount == 0)
        return;
    var svgPageIndex = searchArray[0].CombinedResultArea[0].PageIndex;
    var svgRectStr = "";
    for (var i = 0; i < resultCount; i++) {
        var resultUnit = searchArray[i];
        resultUnit.ContextString = HandleMatchString(resultUnit.ContextString);
        var position = resultUnit.KeywordOffset;
        var wordLength = resultUnit.CharResults.length;
        var preStr = resultUnit.ContextString.substring(0, position);
        var searchStr = resultUnit.ContextString.substring(position, position + wordLength);
        var lasStr = resultUnit.ContextString.substring(position + wordLength);
        var resultPageIndex = resultUnit.CombinedResultArea[0].PageIndex;
        if (!_fileDocument[curFileId].ViewerPageIndex.in_array(resultPageIndex)) {
            actualCount--;
            continue;
        }

        if (_fileDocument[curFileId].Viewers[resultPageIndex] == null) {
            actualCount--
            continue;
        }
        var showpageindex = parseInt(_fileDocument[curFileId].Viewers[resultPageIndex].ShowIndex) + 1;
        var showText = "<span style='font-weight:bold;color:#555555;'>Page " + (showpageindex) + "</span><br/>";
        showText += "..." + preStr + "<span style='color:#a74a27;font-size:12px;font-weight:bold'>" + searchStr + "</span>" + lasStr + "...";
        var str = "<div class='searchResult' id='result_" + i + "' style='width:" + (searchPanelWidth - 20) + "px;height:auto;line-height:20px;border:1px solid #999999;border-radius:2px;' title='Item" + (i + 1) + "' onClick='btnSearch(this)'>" + showText + "</div>";

        $("#_searchResult").append(str);


        if (addRedactFromSearch)
        {
            $("#result_" + i).smartMenu(searchredactmenu);
        }
        var CombinedResultArray = resultUnit.CombinedResultArea;
        for (var k = 0 ; k < CombinedResultArray.length; k++) {
            var area = CombinedResultArray[k];
            $("#result_" + i).data("X", area.Area.X.Value * 1);
            $("#result_" + i).data("Y", area.Area.Y.Value * 1);
            $("#result_" + i).data("W", area.Area.Width.Value * 1);
            $("#result_" + i).data("H", area.Area.Height.Value * 1);
            $("#result_" + i).data("PG", area.PageIndex);
            
            var pgIndex = area.PageIndex;
            if (pgIndex == svgPageIndex) {
                svgRectStr += "<div class='searchText' style='left:" + area.Area.X.Value * zoomValue + "px;top:" + area.Area.Y.Value * zoomValue + "px;width:" + area.Area.Width.Value * zoomValue + "px;height:" + area.Area.Height.Value * zoomValue + "px'></div>";
       
        
                if (i == resultCount - 1) {
                    if (_showDocSrc.in_array(svgPageIndex)) {
                        $("#docannotation_" + svgPageIndex).append(svgRectStr);
                    }
                    else {
                        svgPageResult[svgPageIndex] = svgRectStr;
                    }
                }
            }
            else {
                if (_showDocSrc.in_array(svgPageIndex)) {
                    $("#docannotation_" + svgPageIndex).append(svgRectStr);
                }
                else {
                    svgPageResult[svgPageIndex] = svgRectStr;
                }
                svgPageIndex = pgIndex;
                svgRectStr = "<div class='searchText' style='left:" + area.Area.X.Value * zoomValue + "px;top:" + area.Area.Y.Value * zoomValue + "px;width:" + area.Area.Width.Value * zoomValue + "px;height:" + area.Area.Height.Value * zoomValue + "px'></div>";
                if (i == resultCount - 1) {
                    if (_showDocSrc.in_array(svgPageIndex)) {
                        $("#docannotation_" + svgPageIndex).append(svgRectStr);
                    }
                    else {
                        svgPageResult[svgPageIndex] = svgRectStr;
                    }
                }
            }
        }
    }
}

function HandleMatchString(handleStr)
{
    var count = handleStr.length;
    for(var i=0;i<count;i++)
    {
        if(handleStr.charCodeAt(i)<61727 && handleStr.charCodeAt(i)>61472)
        {
            var regEx = new RegExp(/[^[\uf021-\uf0ff]/);
            handleStr = handleStr.replace(handleStr[i]," ");
        }
    }
   return handleStr;
}


function clearSearch()
{
    $("#_search").val("");
    document.getElementById("_search").onblur();
    $("#_searchResult").empty();
    $("#_labelCount").html("");
    $(".searchText").remove();
    searchArray = new Array();
    svgPageResult = new Array();
    textSearch = "";
    currentResultId = null;
}

var test = true;
var currentResultId;
function btnSearch(currentResult)
{
    var id = currentResult.id;
    if(id == currentResultId)
        return;
    else
    {
        $("#"+currentResultId).removeClass("selectResult");
		currentResultId = id;
		$("#"+id).addClass("selectResult");
		$("#"+id).css("color","#551a8b");
    }
    var index = id.substring(id.indexOf("_")+1);
	var Result = searchArray[index];
	var charResult = Result.CharResults[0];
	var pageIndex = charResult.PageIndex;
	var offsetX = charResult.Rec.X.Value;
	var offsetY = charResult.Rec.Y.Value;
	offsetX = Math.ceil(offsetX * zoomValue);
	offsetY = Math.ceil(offsetY * zoomValue) - 40;
	if(pageIndex == _curCorrectPageId)
	{
	    if(_viewerMode == "single")
		{
		    $("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop(offsetY);
		}
		else
		{
            var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
            ChangeDocScrollBar(showIndex);
            $("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + offsetY);
		}
	}
	else
	{
		ChangePg(pageIndex);
		if(_viewerMode == "single")
		{
    		$("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop(offsetY);   
		}
		else
		{
    		var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
            ChangeDocScrollBar(showIndex);
    		$("#wdp_Content").scrollLeft(offsetX);
		    $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + offsetY);   
		}
	}
}
// pic paste event
//document.addEventListener("paste", function (e) {
//    if (_fid == null || _fid =="" || typeof(_fid) == "undefined")
//        return;
//    var cbd = e.clipboardData;
//    var ua = window.navigator.userAgent;

//    if (!(e.clipboardData && e.clipboardData.items)) {
//        return;
//    }

//    if (cbd.items && cbd.items.length === 2 && cbd.items[0].kind === "string" && cbd.items[1].kind === "file" &&
//        cbd.types && cbd.types.length === 2 && cbd.types[0] === "text/plain" && cbd.types[1] === "Files" &&
//        ua.match(/Macintosh/i) && Number(ua.match(/Chrome\/(\d{2})/i)[1]) < 49) {
//        return;
//    }

//    for (var i = 0; i < cbd.items.length; i++) {
//        var item = cbd.items[i];
//        if (item.kind == "file") {
//            var blob = item.getAsFile();
//            if (blob.size === 0) {
//                return;
//            }
         
//        } else if (item.kind == "string") {
           
//            item.getAsString(function (ff) {
//                alert(ff);
//            });
//          //  alert(go);
//        }
//    }
//}, false);
document.addEventListener('paste', function (event) {
   
    if (event.originalEvent) {
        event = event.originalEvent;
    }
    var a = "";
    var clipboardData = event.clipboardData;
    var item;
    var types;
    if (clipboardData && clipboardData.items) {
        item = clipboardData.items[0];
        types = clipboardData.types || [];
        for (var i = 0; i < types.length; i++) {
            if (types[i] === 'text/html') {
                item = clipboardData.items[i];
                break;
            }
        }
       
        if(item)
            item.getAsString(function (str) {
                if (str == null || str == "")
                    return;
                var imgReg = /<img.*?(?:>|\/>)/gi;
                var srcReg = /src=[\'\"]?([^\'\"]*)[\'\"]?/i;
                var arr = str.match(imgReg);
                if (arr == null || arr.length <= 0)
                    return;
                for (var i = 0; i < arr.length; i++) {
                    var src = arr[i].match(srcReg);
                 
                    if (src != null && src.length > 1) { 
                        uploadImgFromPaste(src[1]);
                        return;
                    }
                
                }
               
            });
            else
            return;
    }else{
        return;
    }
    
})


function uploadImgFromPaste(file) {
    var formData = new FormData();
   formData.append('fileaddress', file);
    formData.append('add', "img");
    formData.append('fid', _fid);
   // formData.append('submission-type', 'paste');
   // formData.append('action', 'UploadInsertFile');
    // var str = { action: "UploadInsertFile", fid: _fid, fileaddress: "fileaddress"};


    $.ajax
     ({
         url: getCurrentAspx(),
         secureuri: false,
         method: "post",
         dataType: 'json',
         data: { add: "imgaddress", fid: _fid, fileaddress: file },
         success: checkImage ,
        error:checkImage,
         
     });
              
 
}

function checkImage(rt) {
    data = rt.responseText;
    if (typeof (data.error) != 'undefined') { }
    if (data.indexOf("error") == -1) {
        hideLoading();
        var preBindEvent = "";
        if (isBindSelectEvent) {
            $("#draw_canvas").unbind("mousedown", selectDown);
            $("#draw_canvas").unbind("mousemove", selectMove);
            $("#draw_canvas").unbind("mouseup", selectUp);
            $(".showByDrag").removeClass("mouseStyleSelect");
            isBindSelectEvent = false;
            preBindEvent = "select";
        }
        else {
            unbindPageDragEvent();
            $(".showByDrag").removeClass("mouseStyleMove");
            preBindEvent = "move";
        }
        AddIconBorder("");
        var info = data.split(";");
        if(info==null || info.length<3)
            return;
            var name = info[0].trim();
            var imgWidth = parseInt(info[1]);
            var imgHeight = parseInt(info[2]);

            var parent_left = 0;
            var parent_top = 0;
            var nScrollLeft = 0;
            var nScrollTop = 0;
            var pageIndex = 0;
            var x = 0, y = 0;
            isAddImg = false;
 

 

            var addImageMouseDown = function (e) {
                if (!isAddImg) {
                    isAddImg = true;

                    startadd = false;
                    parent_left = $("#wdp_Content").offset().left;
                    parent_top = $("#wdp_Content").offset().top;
                    nScrollLeft = $("#wdp_Content")[0].scrollLeft;
                    nScrollTop = $("#wdp_Content")[0].scrollTop;
                    e = e || window.event;
                    x = e.pageX - parent_left + nScrollLeft;
                    y = e.pageY - parent_top + nScrollTop;
                    if (_viewerMode == "multi")
                        drawPageIndex = PrePageCount(y);
                    else
                        drawPageIndex = parseInt(_curCorrectPageId);
                    pageIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
                    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
                    viewer.GetViewerLeftTop();
                    var actualLeft = (x - viewer.GetRefreshBlankLeft()) * viewer.ScaleX / zoomValue;
                    var actualTop = (y - PreCountHeight(drawPageIndex) - viewer.Top) * viewer.ScaleY / zoomValue;

                    var divCount = 0;
                    var curZIndex = 1;
                    var tempZIndex = $(".cTDiv_" + pageIndex).css("z-index");
                    var tempImgCount = getTotalEditItemCount("img", pageIndex);//  $("#RE_imgTotal_" + pageIndex).html();
                    var tempShpCount = getTotalEditItemCount("canvas", pageIndex);// $("#RE_canvasTotal_" + pageIndex).html();
                    if (tempZIndex == "auto") {
                        if (typeof (tempImgCount) != "undefined") {
                            curZIndex += parseInt(tempImgCount);
                            divCount = parseInt(tempImgCount);
                            if (typeof (tempShpCount) != "undefined")
                                curZIndex += parseInt(tempShpCount);
                        }
                        else {
                            $("#RE_" + pageIndex).append("<div id='RE_imgTotal_" + pageIndex + "' style='display:none;'></div>");
                            if (typeof (tempShpCount) != "undefined")
                                curZIndex += parseInt(tempShpCount);
                        }
                    }
                    else {
                        curZIndex = parseInt(tempZIndex) + 1;
                        if (typeof (tempImgCount) != "undefined")
                            divCount = parseInt(tempImgCount);
                        else
                            $("#RE_" + pageIndex).append("<div id='RE_imgTotal_" + pageIndex + "' style='display:none;'></div>");
                    }
                    setTotalEditItemCount("img", pageIndex, parseInt(divCount) + 1);//  $("#RE_imgTotal_" + pageIndex).html(parseInt(divCount) + 1);

                    var src = getFolder("insert") + name;

                    $("#RE_" + pageIndex).append("<div id='REimg_d" + pageIndex + "_" + divCount + "' class='cPDiv_" + pageIndex + "' style='width:" + 1 + "px;height:" + 1 + "px;left:" + actualLeft + "px;top:" + actualTop + "px;z-index:" + curZIndex + ";'><img src='" + src + "' style='width:100%;height:100%;'/></div>");

                    if (!editPages.in_array(pageIndex))
                        editPages.push(pageIndex);
                    addImgArray.push("REimg_d" + pageIndex + "_" + divCount);
                    var canvasHeight = $('#page_' + pageIndex).outerHeight(true);
                    var canvasWidth = $('#page_' + pageIndex).outerWidth(true);
                    $("#REimg_d" + pageIndex + "_" + divCount).draggable({ containment: "#page_" + pageIndex, pageScale: zoomValue, drgZoomValue: zoomValue, scroll: false, stop: function (e) { showResizeHandler(this);  } });
                    addImgEditId = "REimg_d" + pageIndex + "_" + divCount;


                    $("#draw_canvas").unbind("click");

                    parent_left = $("#wdp_Content").offset().left;
                    parent_top = $("#wdp_Content").offset().top;
                    nScrollLeft = $("#wdp_Content")[0].scrollLeft;
                    nScrollTop = $("#wdp_Content")[0].scrollTop;
                    e = e || window.event;
                    var gx = e.pageX - parent_left + nScrollLeft;
                    var gy = e.pageY - parent_top + nScrollTop;
                    if (_viewerMode == "multi")
                        drawPageIndex = PrePageCount(gy);
                    else
                        drawPageIndex = parseInt(_curCorrectPageId);
                    pageIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
                    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
                    viewer.GetViewerLeftTop();
                    var actualLeft = (gx - viewer.GetRefreshBlankLeft()) * viewer.ScaleX / zoomValue;
                    var actualTop = (gy - PreCountHeight(drawPageIndex) - viewer.Top) * viewer.ScaleY / zoomValue;
                    var gwidth =imgWidth / zoomValue;
                    var gheight =imgHeight / zoomValue;

                    $("#" + addImgEditId).css("height", gheight + "px");
                    $("#" + addImgEditId).css("width", gwidth + "px");

                    AddResizeHandler(addImgEditId);
                    $("#" + addImgEditId).bind("click", function (e) { showCurAddImage(this.id); });
                    $("#" + addImgEditId + " img").css("cursor", "move");
                    $(".showByDrag").removeClass("mouseStyleAnnotation");
                    $("#draw_canvas").unbind("mousemove");
     
                    if (preBindEvent == "select") {
                        $("#draw_canvas").bind("mousedown", selectDown);
                        $("#draw_canvas").bind("mousemove", selectMove);
                        $("#draw_canvas").bind("mouseup", selectUp);
                        $(".showByDrag").addClass("mouseStyleSelect");
                        AddIconBorder(".re_func_arrowCur");
                    }
                    else if (preBindEvent == "move") {
                        bindPageDragEvent();
                        $(".showByDrag").addClass("mouseStyleMove");
                        AddIconBorder(".re_func_handCur");
                    }
                    EditPDFText();

                }
            };

            $("#draw_canvas").bind("mousemove", addImageMouseDown);

    }
    else {
        //  alert(data);
    }
}

function createStampMenu(stampBid) {
    var stamp_menu = '<div id="stamp_menu"><table>';
   
    for (var i = 0; i < stamplist.length; i++) {
        if (i % 3 == 0)
            stamp_menu += "<tr>";
        if (typeof(stamplist[i].CustomStampName)!="undefined"&&stamplist[i].CustomStampName!=null) {
            stamp_menu += '<td><a id="targetstamp' + stamplist[i].cssClass + '" class="stampTemplate stamp' + stamplist[i].cssClass + ' " href="javascript:;" onclick="draw_annotation(\'stamp\',{ShowedText:\'' + stamplist[i].name + '\',CustomStampName:\'' + stamplist[i].CustomStampName + '\'});" title="' + stamplist[i].name + '" ></a></td>';
        } else { 
        //stamp_menu += '<td><a href="javascript:;" onclick="draw_annotation(\'stamp\',{ checkSTime:true, ShowedText:\'' + stamplist[i].name + '\',FontColor:\'' + stamplist[i].color + '\',OutLineColor:\'' + stamplist[i].color + '\'});" title="' + stamplist[i].name + '" ><img height="55px" width="160px" src="' + getResourceFolder() + "images/stamp/" + stamplist[i].pic + '"></a></td>';
            stamp_menu += '<td><a id="targetstamp' + stamplist[i].cssClass + '" class="stampTemplate stamp' + stamplist[i].cssClass + ' " href="javascript:;" onclick="draw_annotation(\'stamp\',{ checkSTime:true, ShowedText:\'' + stamplist[i].name + '\',FontColor:\'' + stamplist[i].color + '\',OutLineColor:\'' + stamplist[i].color + '\'});" title="' + stamplist[i].name + '" ></a></td>';
        }
        if (i % 3 == 2)
            stamp_menu += "</tr>"
    }

    stamp_menu += '<tr><td colspans="3"><div class=""><input type="checkbox" value="1" class="rsc" id="isstamtime" name="isstamtime" /><label for="isstamtime"><span style="color:#000000;" id="isstamtimelabel">With Timestamp</span></label></div></td></tr></table></div>';
    $("#" + stampBid).html(stamp_menu);
}
var currentredact;
function createRedactAreaPagesBox() {
    var str = "<div id='_redactAreaPagesBox'  class='popboxbase' ></div>";
    $("body").append(str);
    $("#_redactAreaPagesBox").css({
        width: "504px",
        height: "195px",
        display: "block"
    });
    var title = "<div class='_rdpopboxTitle' style='width:100%;height:30px;'><div  class='popboxtitle'  >Redact Area for Multiple Pages</div><div  class='poptitleimage poptitlestyle'  onclick='hideRedactAreaPagesBox();'></div></div>";
    $("#_redactAreaPagesBox").append(title);
    var popContent = "<div class='popinner' style='width:458px;height:120px;'>";
    popContent +="<div>Apply for</div><br>"
    popContent += "<div>&nbsp;&nbsp;<input type='radio' name='rda' id='redactAll' onchange='setRedactall(this)' value='1' checked/><span>All pages</span> </div>";
    popContent += "<div>&nbsp;&nbsp;<input type='radio' name='rda' onchange='setRedactall(this)' value='0' />Selected pages:&nbsp;&nbsp;<input type='text' id='_redactNums' style='width:150px;height:20px;' disabled='true'/><br/><div style='margin-top:5px;color:#666666;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(note: use commas “,” between page index)</div></div>";

    popContent += "<button  class='popbtn popbtncancel'  onclick='hideRedactAreaPagesBox();'>Cancel</button>";
    popContent += "<button  class='popbtn popbtnok'  onclick='redactPagesAct();'>Ok</button>";
    popContent += "</div>";
    $("#_redactAreaPagesBox").append(popContent);

    $("._rdpopboxTitle").bind("mousedown", PopBoxMouseDown);
    $("#_redactAreaPagesBox").hide();
}
function showRedactAreaPagesBox(add) {
    redactpagesnumber = new Array();
    $("#_redactNums").val("");
    SignPanelPosition("#_redactAreaPagesBox");
    addredactpages = (add === true);
    $("#_redactAreaPagesBox").show();
}

function hideRedactAreaPagesBox() {  
    $("#_redactAreaPagesBox").hide();
}

function setRedactall(box) {
    reallpage = ($("input[name='rda']:checked").val()==1);
    $("#_redactNums").attr("disabled", reallpage);
 
}

var redactpagesnumber = [];
var reallpage = true;
var addredactpages = false;
function redactPagesAct() {
    hideRedactAreaPagesBox();
    if (reallpage) {
        for (i = 1; i <= _fileDocument[curFileId].Viewers.length ; i++) {
            redactpagesnumber.push(i);
        }
    } else {
        var str = $("#_redactNums").val();
        redactpagesnumber = new Array();


        var strs = str.replace(/\s/g, "").split(",");
        var regEx = new RegExp(/^[0-9]+[-][0-9]+$/);
        for (i = 0; i < strs.length ; i++) {
            if (regEx.exec(strs[i]) != null) {
                var pts = strs[i].split("-");
                if (pts.length == 2) {
                    var go1 = parseInt(pts[0]);
                    var go2 = parseInt(pts[1]);
                    if (go1 > go2) {
                        var tp = go1;
                        go1 = go2;
                        go2 = tp;
                    }
                    for (var go = go1; go <= go2; go++) {
                        if (go > 0) { 
                            redactpagesnumber.push(go);
                        }
                    }
                }
            } else { 
                redactpagesnumber.push(strs[i]);
            }
        }

        redactpagesnumber = unique(redactpagesnumber);
    }
    if (addredactpages == true)
        addMoreRedactPage();
    else
        reMarkAreaRedact();
}
function unique(array) {
    var n = {}, r = [], len = array.length, val, type;
    for (var i = 0; i < array.length; i++) {
        val = array[i];
        type = typeof val;
        if (!n[val]) {
            n[val] = [type];
            r.push(val);
        } else if (n[val].indexOf(type) < 0) {
            n[val].push(type);
            r.push(val);
        }
    }
    return r;
}

function addMoreRedactPage() {

    if (currentredact == null || typeof (currentredact)=="undefined")
        return;

    var actualIndex = currentredact.OnPageIndex;




    var gopagenumbers = new Array();
    if (redactpagesnumber == null || typeof (redactpagesnumber) == "undefined") {
        return;
        } else {
            redactpagesnumber = unique(redactpagesnumber);
            if (redactpagesnumber.length > 0) {
                for (var i = 0 ; i < redactpagesnumber.length ; i++) {
                    try {
                        gopagenumbers[i] = parseInt(redactpagesnumber[i])-1; 
                        if (gopagenumbers[i] < 0)
                            gopagenumbers[i] = null;
                    } catch (e) {
                        gopagenumbers[i] = null;
                    }
                }
            }
        }
    
    //var top = PreCountHeight(actualIndex);
    for (var goi = 0; goi < gopagenumbers.length; goi++) {
        var gopage = gopagenumbers[goi];
        if (gopage == null || gopage < 0 || gopage > _fileDocument[curFileId].Viewers.length)
            continue;
        if (reallpage && gopage == actualIndex)
            continue;
        var viewer = _fileDocument[curFileId].Viewers[gopage];
        var docAnno = new Annotation({ OnPageIndex: gopage, Type: currentredact.Type, Index: num, ZoomValue: zoomValue, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
        docAnno.redactArea = true;
        docAnno.selectTextRectangle = currentredact.selectTextRectangle;
        _fileDocument[curFileId].Viewers[gopage].Annotations[num] = docAnno;
  
        docAnno.ShowTop = currentredact.ShowTop;//- top + PreCountHeight(gopage);
        docAnno.ShowLeft = currentredact.ShowLeft;
        docAnno.ShowWidth = currentredact.ShowWidth;
        docAnno.ShowHeight = currentredact.ShowHeight;
        docAnno.GetActualPosition();
        drawTextActSvg(docAnno);
        var date = getTimeString();
        _fileDocument[curFileId].Viewers[gopage].Annotations[num].ModifiedDate = date;
        AddAnnoToCommentsPanel(gopage, currentredact.Type, num, date);
        num++;
    }
    currentredact = null;
}


function showNoFile() {
    $("#nofile").show();
}
function hideNoFile() {
    $("#nofile").hide();
}

function createNoFile() {
    var str = "<div id='nofile' class='loadnofile' ><p class='nofilecontent'>No File</p></div>"
    $("body").append(str);
    hideNoFile();
}

function showAttachFileBox() {
    ShowUploadDialog("fileattach");
};
///<jscompress sourcefile="customizeAPI.js" />



var c_toolbartabs = Array(); // for toolbar


var CToolbar = Class.create();
CToolbar.prototype =
{
    initialize: function (options) {
        this.SetOptions(options);
        this.id = this.options.id;
        this.name = this.options.name;
        this.cssClass = this.options.cssClass;
        this.iconGroups = this.options.iconGroups;
        this.reqDoc = this.options.reqDoc;
        this.innerHtml = this.options.innerHtml;
    },
    SetOptions: function (options) {
        this.options =
        {
            id: "",
            name: "",
            cssClass: "defaulttoolbar",
            iconGroups: [],
            reqDoc: false,
            innerHtml:"",

        };
        Extend(this.options, options || {});
    },
    addIconGroup: function (gp) {
        this.iconGroups.push( gp);
    }
}

var CToolbarIconGroup = Class.create();
CToolbarIconGroup.prototype =
{
    initialize: function (options) {
        this.SetOptions(options);
     
        this.name = this.options.name;
        this.icons = this.options.icons;
    },
    SetOptions: function (options) {
        this.options =
        {
            name: "",
            icons: [],
        };
        Extend(this.options, options || {});
    },
    addIcon: function ( baricon) {
        this.icons.push(baricon);
    }
}

var CToolbarIcon = Class.create();
CToolbarIcon.prototype =
{
    initialize: function (options) {
        this.SetOptions(options);
        this.title = this.options.title;
        this.event = this.options.event;
        this.id = this.options.id;
        this.cssClass = this.options.cssClass;
        this.reqDoc = this.options.reqDoc;
        this.enabledImagePath = this.options.enabledImagePath;
        this.disabledImagePath = this.options.disabledImagePath;
        this.iconImageID = this.options.iconImageID;
    },
    SetOptions: function (options) {
        this.options =
        {
            title: "",
            event: null,
            id: "",
            cssClass: "defaulticon",
            reqDoc: false,
            enabledImagePath: "",
            disabledImagePath: "",
            iconImageID :"",
        };
        Extend(this.options, options || {});
    },
}

// the following functions is the API for customize.

function addToolbarTab(tab) {
    c_toolbartabs.push(tab);
}

function setEditorSize(width, height) {
    if (width <= 0 && height <= 0)
        return;
    isFillBrowser = false;
    browserWidth = width;
    browserHeight = height;
}

function getCurrentFileId() {
    return _fid;
}

function addLanguage(zone, name) {
    if (supportLangs == null)
        supportLangs = new Object();
    supportLangs[zone] = name;
}


function getSaveDatas() {
    var addIndex = "";
    var extractIndex = "";
    var pdfOptimizer = "";
    //var max = _fileDocument[curFileId].ViewerPageIndex.max();
    //var tmpLength = _fileDocument[curFileId].ViewerPageIndex.length;
    //var countFlag = initialPageCount;
    //if (max >= initialPageCount) {
    //    addIndex = max;
    //    countFlag = addIndex + 1;
    //}
    //if (tmpLength < countFlag) {
    //    for (var i = 0; i < _fileDocument[curFileId].ViewerPageIndex.length; i++)
    //        extractIndex += _fileDocument[curFileId].ViewerPageIndex[i] + ";";
    //}
    //else {
    //    var flag = false;
    //    for (var i = 0; i < _fileDocument[curFileId].ViewerPageIndex.length; i++) {
    //        extractIndex += _fileDocument[curFileId].ViewerPageIndex[i] + ";";
    //        if (_fileDocument[curFileId].ViewerPageIndex[i] != i)
    //            flag = true;
    //    }
    //    if (!flag)
    //        extractIndex = "";
    //}
    var isChangeHTML = sendToChangeHTML();
    var includeAnnotation = true;
    var applyRedactions = true;
    var isLinks = _fileDocument[curFileId].IsLinks();
    //PDFMetadata
    var jsonPDFData = "";
    if (isChangeMetaData)
        jsonPDFData = $.toJSON(_pdfMetaData);
    //OwnerPassword setting
    var newRestriction = "";
    if (settingRestriction != "")
        newRestriction = $.toJSON(settingRestriction);
    //PDF Optimizer
    if (pdfOptimizer != "")
        pdfOptimizer = $.toJSON(pdfOptimizer);
    //annotation && redaction
    var annoInfo = "";
    if (includeAnnotation || applyRedactions)
        annoInfo = GetJsonDoc(true, true);
    else
        annoInfo = GetJsonDoc(false, true);
    //page design
    var designMes = $.toJSON(_pdfPageDesign);
    var str = { action: "SaveFile", _isChangeHTML: isChangeHTML, fid: _fid, fileName: _actualName, tempName: _fileName, password: curDocPassWord, docOwnerPs: curDocOwnerPs, burnAnnos: includeAnnotation, applyRedacts: applyRedactions, addIndex: addIndex, extractIndex: extractIndex, pdfMetaData: jsonPDFData, userPs: settingUserPs, ownerPs: settingOwnerPs, newRestrict: newRestriction, removePs: removeAllPs, jsonDoc: annoInfo, optimizer: pdfOptimizer, pageDesign: designMes };
    return str;
}

function setApplicationTitle(title) {
    applicationtitle = title;
    
}

function setWebTitle(title, autoset) {
    webtitle = title;
    if (typeof (autoset)!="undefined")
        autoSetWebTitleAsFileName = autoset;
}

function setDialog(type) {
    defaultDialog = type;
    if (defaultDialog == "CONVERT-2-PDF" || defaultDialog == "DOC")
        upDialogType = "uploadOthers";
    else if (defaultDialog == "OPEN-ONLINE-PDF")
        upDialogType = "online";
    else if (defaultDialog == "COMBINE-FILES-2-PDF")
        upDialogType = "combinePDF";
    else
        upDialogType = "uploadPDF";
 
}

function setEditorUploadMethod(list) {
    if (list.length > 1)
        _defaultShowDialogTab = list;
    else
        _defaultShowDialogTab = ["CONVERT-2-PDF", "OPEN-ONLINE-PDF", "COMBINE-FILES-2-PDF", "UPLOAD-PDF"];
}

function loadDemo(type) {
    if (type == "" || typeof (type) == "undefined")
        return;
    var filepath;
    if (type == "pdf") {
        filepath = { filepath: "//pdf//demo_1.pdf" };
    }
    else if (type == "word") {
        filepath = { filepath: "//word//demo_1.docx" };
    }
    else if (type == "excel") {
        filepath = { filepath: "//excel//demo_1.xlsx" };
    }
    else if (type == "ppt") {
        filepath = { filepath: "//ppt//demo_1.pptx" };
    }
    else if (type == "dicom") {
        filepath = { filepath: "//dicom//demo_1.dcm" };
    }
    else if (type == "tiff") {
        filepath = { filepath: "//tiff//demo_1.tif" };
    } else
        return;
    location.href = getRootPath() + "?filepath=" + filepath.filepath;

}

function setAppType(type) {
    if (type == "docviewer")
        appEditor = false;
}
function setSharePointApp(isSp) {
    isSharePoint = isSp;
}
function setFrameMargin(left,top,right,bottom) {
    if (left == undefined)
        left = 0;
    if (top == undefined)
        top = 0;
    if (right == undefined)
        right = 0;
    if (bottom == undefined)
        bottom = 0;
    frameMargin = [left, top, right, bottom];
}
// set the Unit of Measure
// format : px,pt,in,cm ,default is px
// text: {number} {text},text default is px
function setMeasureAnnotationUOM(format, text, float) {
    dimensionformat = { format: format, text: text ,float:float};
}

function enableDimensionTextRefresh() {
    isAutoResizeDimension = true;
}

function deleteAnnotations(type) {
    for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
        var viewer = _fileDocument[curFileId].Viewers[i];

        if (viewer == null || viewer.ShowIndex == null)
        { continue; }
        var refresh = false;
        for(var key in viewer.Annotations){
            var anno = viewer.Annotations[key];
            if (anno == null)
                continue;
            if (anno.Type == type) {
                refresh = true;
                viewer.Annotations[key] = null;
                $("#div_" + key).remove();
            }
        }
        if (refresh)
            drawPageAnnotations(i);
    }      
}

function initDefaultViewToolbar() {
    initEditToolbarForView();
    initPagesToolbarForView();
}

function initEditToolbarForView() {
    var tabEdit = new CToolbar({ id: "edit", name: i18n['tabtitle']['Edit'], reqDoc: false });
    // Tools
    var toolIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['Tools'] });

    var cursorIcon = new CToolbarIcon({ id: "re_func_arrowCur", title: i18n['tabicon']['ArrowCur'], event: 'ArrowEvent();', cssClass: "re_func_arrowCur " });
    toolIconGroup.addIcon(cursorIcon);
    var hand = new CToolbarIcon({ id: "re_func_handCur", title: i18n['tabicon']['Hand'], event: 'HandleEvent();', cssClass: "re_func_handCur " });
    toolIconGroup.addIcon(hand);
    var editcontent = new CToolbarIcon({ id: "re_func_editTxt", title: i18n['tabicon']['Edit'], event: 'EditPDFText();', cssClass: " " });
    toolIconGroup.addIcon(editcontent);

    tabEdit.addIconGroup(toolIconGroup);
    // Text  Edit
    var textEditIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['TextEdit'] });

    var addtest = new CToolbarIcon({ id: "re_func_addTxt", title: i18n['tabicon']['AddText'], event: 'AddPDFText();', cssClass: "" });
    textEditIconGroup.addIcon(addtest);

    var fontSz = new CToolbarIcon();
    fontSz.innerHtml = "<select id='re_func_fontSz' class='iconHover' style='width:75px;height:18px;' onchange='FontFormat(this);'></select>";
    textEditIconGroup.addIcon(fontSz);
    var fontFm = new CToolbarIcon();
    fontFm.innerHtml = "<select id='re_func_fontFm'  class='iconHover' style='width:75px;height:18px;' onchange='FontFormat(this);'></select>";
    textEditIconGroup.addIcon(fontFm);

    var fontB = new CToolbarIcon({ id: "re_func_fontB", title: i18n['tabicon']['TextBlod'], event: '', cssClass: "" });
    textEditIconGroup.addIcon(fontB);
    var fontI = new CToolbarIcon({ id: "re_func_fontI", title: i18n['tabicon']['TextItalic'], event: '', cssClass: "" });
    textEditIconGroup.addIcon(fontI);
    var fontU = new CToolbarIcon({ id: "re_func_fontU", title: i18n['tabicon']['TextUnderline'], event: '', cssClass: "" });
    textEditIconGroup.addIcon(fontU);
    var fontS = new CToolbarIcon({ id: "re_func_fontS", title: i18n['tabicon']['TextStrikethrough'], event: '', cssClass: "" });
    textEditIconGroup.addIcon(fontS);
    var groundColor = new CToolbarIcon({ id: "", title: "", event: '', cssClass: "" });
    groundColor.innerHtml = "<div id='re_func_fontBC' class='iconHover' style='width:23px;height:33px;font-size:15px;font-weight:bold;border:1px solid #727272;background:#ffff00;text-align:center;line-height:33px;color:#000000;' title='" + i18n['tabicon']['TextBackgroundColor'] + "'>ab</div>";
    textEditIconGroup.addIcon(groundColor);
    var fontColor = new CToolbarIcon({ id: "", title: "", event: '', cssClass: "" });
    fontColor.innerHtml = "<div id='re_func_fontC'  class='iconHover' style='width:23px;height:33px;font-size:15px;font-weight:bold;border:1px solid #727272;background:#000000;color:#ffff00;text-align:center;line-height:33px;' title='" + i18n['tabicon']['TextFontColor'] + "'>ab</div>";
    textEditIconGroup.addIcon(fontColor);

    tabEdit.addIconGroup(textEditIconGroup);
    // Image Edit
    var imageEditIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['ImageEdit'] });
    var imageFormats = new Array(".png", ".bmp", ".RLE", ".DIB", ".jpg", ".jpeg", ".jfif", ".jpe", ".jbig2", ".jbg", ".xbm", ".xpm", ".pbm", ".pgm",
                              ".ppm", ".dng", ".jp2", ".j2k", ".wbm");

    var addImage = new CToolbarIcon({ id: "", title: "", event: '', cssClass: "" });
    addImage.innerHtml = "<div id='re_func_addImg'  class='iconHover' title='" + i18n['tabicon']['AddImage'] + "' onclick='ImgToInsert.click()'><input type='file' id='ImgToInsert' name='ImgToInsert' accept='" + imageFormats + "' style='opacity:0;right:0px;display:none;position:absolute;' onchange='AddPDFImage()'/></div>";
    imageEditIconGroup.addIcon(addImage);
    var replaceImage = new CToolbarIcon({ id: "", title: "", event: '', cssClass: "" });
    replaceImage.innerHtml = "<div id='re_func_imgReplace' class='iconHover'  title='" + i18n['tabicon']['ReplaceImage'] + "' onclick='ImgToReplace.click()'><input type='file' id='ImgToReplace' name='ImgToReplace' accept='" + imageFormats + "' style='opacity:0;right:0px;display:none;top:0px;position:absolute;' onchange='ReplaceImage()'/></div>";
    imageEditIconGroup.addIcon(replaceImage);

    var horFlip = new CToolbarIcon({ id: "re_func_horFlip", title: i18n['tabicon']['FlipHorizontal'], event: '', cssClass: "" });
    imageEditIconGroup.addIcon(horFlip);
    var VerFlip = new CToolbarIcon({ id: "re_func_verFlip", title: i18n['tabicon']['FlipVertical'], event: '', cssClass: "" });
    imageEditIconGroup.addIcon(VerFlip);
    var couRotate = new CToolbarIcon({ id: "re_func_couRotate", title: i18n['tabicon']['RotateCounterclockwise'], event: '', cssClass: "" });
    imageEditIconGroup.addIcon(couRotate);
    var rotate = new CToolbarIcon({ id: "re_func_rotate", title: i18n['tabicon']['RotateClockwise'], event: '', cssClass: "" });
    imageEditIconGroup.addIcon(rotate);

    tabEdit.addIconGroup(imageEditIconGroup);
    // Add or Edit link
    var linkIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['LinkEdit'] });


    var linked = new CToolbarIcon({ id: "re_func_link", title: i18n['tabicon']['LinkEdit'], event: 'EditLink();', cssClass: "" });
    linkIconGroup.addIcon(linked);


    tabEdit.addIconGroup(linkIconGroup);
    // Clipboard
    var clipIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['Clipboard'] });


    var cut = new CToolbarIcon({ id: "re_func_cut", title: i18n['tabicon']['CutSelection'], event: '', cssClass: "" });
    clipIconGroup.addIcon(cut);
    var copy = new CToolbarIcon({ id: "re_func_copy", title: i18n['tabicon']['CopySelection'], event: '', cssClass: "" });
    clipIconGroup.addIcon(copy);
    var past = new CToolbarIcon({ id: "re_func_past", title: i18n['tabicon']['PasteSelection'], event: 'PastEvent();', cssClass: "" });
    clipIconGroup.addIcon(past);
    var deleSelection = new CToolbarIcon({ id: "re_func_delete", title: i18n['tabicon']['DeleteSelection'], event: '', cssClass: "" });
    clipIconGroup.addIcon(deleSelection);
    var selectAll = new CToolbarIcon({ id: "re_func_selectAll", title: i18n['tabicon']['SelectAll'], event: '', cssClass: "" });
    clipIconGroup.addIcon(selectAll);

    tabEdit.addIconGroup(clipIconGroup);

    addToolbarTab(tabEdit);
}

function initPagesToolbarForView() {
    var tabPage = new CToolbar({ id: "page", name: i18n['tabtitle']['Pages'], reqDoc: false });
    //  Manipulate Page 
    var manipulateIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['ManipulatePage'] });

    var delPages = new CToolbarIcon({ id: "re_func_delPages", title: i18n['tabicon']['DeletePages'], event: '', cssClass: "" });
    manipulateIconGroup.addIcon(delPages);
    var reOrdPages = new CToolbarIcon({ id: "re_func_reOrdPages", title: i18n['tabicon']['ReorderPages'], event: '', cssClass: "" });
    manipulateIconGroup.addIcon(reOrdPages);
    var extractPages = new CToolbarIcon({ id: "re_func_extPages", title: i18n['tabicon']['ExtractPages'], event: '', cssClass: "" });
    manipulateIconGroup.addIcon(extractPages);
    var replacePages = new CToolbarIcon();
    replacePages.innerHtml = "<div id='re_func_replPages' class='iconHover' onclick='FileToReplace.click()' title='" + i18n['tabicon']['ReplacePages'] + "'><input type='file' id='FileToReplace' name='FileToReplace' accept='.pdf' style='opacity:0;right:0px;display:none;position:absolute;' onchange='UploadReplaceFile();'/></div>";
    manipulateIconGroup.addIcon(replacePages);
    var splitDocs = new CToolbarIcon({ id: "re_func_split", title: i18n['tabicon']['SplitPage'], event: '', cssClass: "" });
    manipulateIconGroup.addIcon(splitDocs);

    tabPage.addIconGroup(manipulateIconGroup);
    // Insert page
    var insertIconGroup = new CToolbarIconGroup({ name: i18n['tabgroup']['InsertPage'] });

    var insertBk = new CToolbarIcon({ id: "re_func_insertBk", title: i18n['tabicon']['InsertBlankPage'], event: '', cssClass: "" });
    insertIconGroup.addIcon(insertBk);
    var insertFF = new CToolbarIcon({ id: "", title: "", event: '', cssClass: "" });
    insertFF.innerHtml = "<div id='re_func_insertFF' class='iconHover' title='" + i18n['tabicon']['InsertFilePage'] + "' onclick='FileToInsert.click()'><input type='file' id='FileToInsert' name='FileToInsert' accept='.pdf' style='opacity:0;right:0px;display:none;position:absolute;' onchange='InsertFFPage()'/></div>";
    insertIconGroup.addIcon(insertFF);
    var combines = new CToolbarIcon({ id: "re_func_combine", title: i18n['tabicon']['CombineFilePages'], event: 'ShowComBox();', cssClass: "" });
    insertIconGroup.addIcon(combines);

    tabPage.addIconGroup(insertIconGroup);

    addToolbarTab(tabPage);
}

function supportContinuousAnnotationAdding(isKeeping) {
    if (typeof (isKeeping) != null)
        continueDrawAnnotation = isKeeping;
}
function supportContinuousRedactAdding(isKeeping) {
    if (typeof (isKeeping) != null)
        continueDrawRedact = isKeeping;
}

function supportSearchRedactAdding(spt) {
    if (typeof (spt) != null)
        addRedactFromSearch = spt;

}
function setCookieExpires(day) {
    if(typeof(day)!="null")
        cookieDayTime = day;
}

function resetStampList(stamps) {
    if (stamps != null && stamps.length>0)
        stamplist = stamps;
}
function setStampTimeFormat(format) {
    if (format != null && format.length > 0)
        stamptimeformate = format;
}
function setUsedFormat(format) {
    if (format != null && format.length > 0)
        _fileFormat = format;


}

function setSupportFormatTip(tip) {
    if (tip != null && tip.length > 0)
        _sptcontent = tip;
}

function setDefaultSearchText(textarray, isCaseSenstive, isWholeWord) {
    if (textarray == null || textarray.length <= 0)
        return;
    defaultSearchList = textarray;
    defaultSearchIsCaseSenstive = isCaseSenstive || false;
    defaultSearchIsWholeWord =isWholeWord || false;

}

function deleteAllAnnotations() {
    emptyAllAnnotaions();
}

function enableContentEdit() {
    userhideeditcontent = false;
}

function setComtentDefaultAuthor(name) {
    defaultauthor = name || "RasterEdge";
}
function getCoordinatesInDocPage() {
    return currentClickLocation;
};
///<jscompress sourcefile="DrawAnno.js" />
var defaultTextColor = "Red";
var defaultTextFont = "Arial";
var defaultTextFontSize = "12";
var draggableNumArray = new Array();
var linkAnnoArray = new Array();
var fontStyleIdArray = new Array("re_func_fontB","re_func_fontI","re_func_fontU","re_func_fontS","re_func_fontC","re_func_fontBC");
var cursorStyleArray = new Array("re_func_handCur","re_func_arrowCur");
var cursorIdArray = new Array("re_func_addTxt","re_func_editTxt","re_func_addImg","ImgToInsert","re_func_markRedact");
var imgEditIdArray = new Array("re_func_rotate","re_func_couRotate","ImgToReplace","re_func_horFlip","re_func_verFlip");
var clipboardIdArray = new Array("re_func_cut","re_func_copy","re_func_past","re_func_selectAll");
var curSelectRange = "";
var xmlSelectRange = "";
var isAddPDFImg = false;
var curEditImageId = "";
var curEditTextId = "";
var editPages = new Array();
var isEditLink = false;
var dimensionformat = { format: "px", text: "px",float:2 };
var isAutoResizeDimension = false;
var continueDrawAnnotation = false;
var continueDrawRedact = false;
var addRedactFromSearch = true;
var stamptimeformate = "{yyyy-MM-dd}";
var stamplist = [{ name: 'APPROVED', width: 200, height: 64, color: "#76923c", cssClass: "APPROVED" },
    { name: 'NOT APPROVED', width: 280, height: 64, color: "#C00000", cssClass: "NOTAPPROVED" },
    { name: 'DRAFT', width: 140, height: 64, color: "#002060", cssClass: "DRAFT" },
    { name: 'FINAL', width: 140, height: 64, color: "#76923c", cssClass: "FINAL" },
    { name: 'COMPLETED', width: 220, height: 64, color: "#002060", cssClass: "COMPLETED" },
    { name: 'CONFIDENTIAL', width: 280, height: 64, color: "#002060", cssClass: "CONFIDENTIAL" },
    { name: 'FOR PUBLIC RELEASE', width: 400, height: 64, color: "#002060", cssClass: "FORPUBLICRELEASE" },
    { name: 'NOT FOR PUBLIC RELEASE', width: 480, height: 64, color: "#002060", cssClass: "NOTFORPUBLICRELEASE" },
    { name: 'FOR COMMENT', width: 260, height: 64, color: "#002060", cssClass: "FORCOMMENT" },
    { name: 'PRELIMINARY RESULTS', width: 420, height: 64, color: "#002060", cssClass: "PRELIMINARYRESULTS" },
    { name: 'INFORMATION ONLY', width: 360, height: 64, color: "#002060", cssClass: "INFORMATIONONLY" },
    { name: 'VOID', width: 120, height: 64, color: "#c00000", cssClass: "VOID" }
];
var currentClickLocation =null;
var editBeforeAddcontent = false;
$(function(){
    var  bodyMouseDown = function(e)
    {
        e = e||window.event;
        selectId = (e.target.id);
        hideStampTable(e);
   
        if(_isInToolbar)
        {
            $(".invisablelink").css("border", "");
            if(commentIdArray.in_array(selectId) || cursorIdArray.in_array(selectId) || cursorStyleArray.in_array(e.target.className) || selectId == "re_func_link")
            {
                editBeforeAddcontent = true;
                if (isAddPdftext)
                    removeAddPDFText();
                else if (isEditPdfText && selectId != "re_func_addTxt")
                    removeEditText();
                else if (isAddPDFImg)
                    removeAddPDFImage();
                else if (selectId != "re_func_addImg" && selectId != "re_func_addTxt")
                    editBeforeAddcontent = false;
                curEditImageId = "";
                curEditTextId = "";
                addImgEditId = "";
                if(selectId == "re_func_link")
                {
                    for(var i=0;i<linkAnnoArray.length;i++)
                    {
                        var linkInfo = linkAnnoArray[i];
                        var posi = linkInfo.indexOf("_");
                        var actualIndex = linkInfo.substring(0,posi);
                        var linkAnnoNum = linkInfo.substring(posi+1);
                        var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[linkAnnoNum];
                        if (linkAnno == null)
                            continue;
                        $("#link_"+linkAnnoNum).unbind("click");
                        $("#link_"+linkAnnoNum).unbind("mousedown");
                        $("#link_"+linkAnnoNum).unbind("mouseup");
                        addLinkHoverEvent(linkAnnoNum);
                        addLinkClickEvent(actualIndex,linkAnnoNum);
                        if(linkAnno.IsLock)
                        {
                            $("#lRightDown_"+linkAnnoNum).remove();
		                    $("#lLeftDown_"+linkAnnoNum).remove();
		                    $("#lRightUp_"+linkAnnoNum).remove();
		                    $("#lLeftUp_"+linkAnnoNum).remove();
		                    $("#lRight_"+linkAnnoNum).remove();
		                    $("#lLeft_"+linkAnnoNum).remove();
		                    $("#lUp_"+linkAnnoNum).remove();
		                    $("#lDown_"+linkAnnoNum).remove();
                        }
                        else
                            $("#link_"+linkAnnoNum).draggable("enable");
                        $("#link_"+linkAnnoNum).smartMenu(LinkAct);
                        if (linkAnno.IsVisible) {
                            if (linkAnno.LineStyle == "Underline")
                                $("#link_" + linkAnnoNum).css("border-bottom", "solid " + linkAnno.OutLineWidth + "px " + linkAnno.OutLineColor);
                            else
                                $("#link_" + linkAnnoNum).css("border", linkAnno.LineStyle + " " + linkAnno.OutLineWidth + "px " + linkAnno.OutLineColor);
                        } else {
                            $("#link_" + linkAnnoNum).css("border", "solid 1px #222");
                        }
                    }
                    isEditLink = true;
                }
                else
                {
                   
                    noSelectLink();
                    for(var i=0;i<linkAnnoArray.length;i++)
                    {
                        var linkInfo = linkAnnoArray[i];
                        var posi = linkInfo.indexOf("_");
                        var actualIndex = linkInfo.substring(0,posi);
                        var linkAnnoNum = linkInfo.substring(posi+1);
                        var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[linkAnnoNum];
                        if (linkAnno == null)
                            continue;
                        $("#link_"+linkAnnoNum).unbind ("click");
                        $("#link_"+linkAnnoNum).bind("mousedown",linkMouseDown);
                        //$("#link_"+linkAnnoNum).bind("mouseup",linkMouseUp);
                        addLinkJumpEvent(actualIndex,linkAnnoNum);
                        $("#link_"+linkAnnoNum).unbind("mouseenter").unbind("mouseleave");
                        $("#link_"+linkAnnoNum).draggable("disable");
                        $("#link_"+linkAnnoNum).smartMenu();
                        if(!linkAnno.IsVisible)
                            $("#link_"+linkAnnoNum).css("border","");
                    }
                    if(isBindDrawLinkEvent)
                    {
                        $("#draw_canvas").unbind("mousedown");
                        $("#draw_canvas").unbind("mousemove");
                        $("#draw_canvas").unbind("mouseup");
                    }
                    isEditLink = false;
                }
            }
            else if(fontStyleIdArray.in_array(selectId) || clipboardIdArray.in_array(selectId))
            {
                var selection = window.getSelection();
                if(selection != "")
                {
                    curSelectRange = selection.getRangeAt(0);
                }
            }
        }
        else
        {
           
            if(isEditPdfText)
            {
                curEditTextId = "";
                curEditImageId = "";
                addImgEditId = "";
                var parentId = $(e.target).parent().attr("id");
                var paParentId = $(e.target).parent().parent().attr("id");
                var paPaParentId = $(e.target).parent().parent().parent().attr("id");
                if (selectId.indexOf("REimg") != -1 || (typeof (parentId) != "undefined" && parentId.indexOf("REimg") != -1) || selectId.indexOf("RECanvas") != -1 || (typeof (paParentId) != "undefined" && (paParentId.indexOf("REimg") != -1 || paParentId.indexOf("RECanvas") != -1)) || (typeof (paPaParentId) != "undefined" && (paPaParentId.indexOf("REimg") != -1 || paPaParentId.indexOf("RECanvas") != -1)))
                {
                    var pageIndex = "";
                    if (typeof (parentId) != "undefined")
                        curEditImageId = parentId;
                    else if(typeof(paParentId) != "undefined")
                        curEditImageId = paParentId;
                    else if(typeof(paPaParentId) != "undefined")
                        curEditImageId = paPaParentId;
                    else
                        curEditImageId = selectId;
                    selectId = curEditImageId;
                    var tempId = selectId.substring(0,selectId.lastIndexOf("_"));
                    if(selectId.indexOf("REimg") != -1)
                        pageIndex = tempId.substring(7);
                   else
                        pageIndex = tempId.substring(10);
                    if(!editPages.in_array(pageIndex))
                        editPages.push(pageIndex);
                    isCreateEdit = true;
                }
                else if(selectId.indexOf("REtxt") != -1 || (typeof(parentId) != "undefined" && parentId.indexOf("REtxt") != -1) || (typeof(paParentId) != "undefined" && paParentId.indexOf("REtxt") != -1))
                {
                    if(typeof(parentId) != "undefined" && parentId.indexOf("REtxt") != -1)
                        selectId = parentId;
                    else if(typeof(paParentId) != "undefined" && paParentId.indexOf("REtxt") != -1)
                        selectId = paParentId;
                    curEditTextId = selectId;
                    var tempId = selectId.substring(0,selectId.lastIndexOf("_"));
                    var pageIndex = tempId.substring(7);
                    if(!editPages.in_array(pageIndex))
                        editPages.push(pageIndex);
                    isCreateEdit = true;
               }
                if(curEditTextId != "" || curEditImageId != "" || addImgEditId != "")
               {
                    $("#re_func_selectAll").bind("click",SelectAllEvent);
                    TargetHover("#re_func_selectAll",true);
                    $("#re_func_selectAll").addClass("selectAllIconDis");
                    $("#re_func_selectAll").removeClass("selectAllIconEn");
                    //var src = getImagesFolder() + "IconA.png";
                   // $("#re_func_selectAll").css("background","url('" + src + "') no-repeat -1647px -15px");
               }
               else
               {
                    $("#re_func_selectAll").unbind("click");
                    TargetHover("#re_func_selectAll",false);
                   // var src = getImagesFolder() + "IconB.png";
                    //$("#re_func_selectAll").css("background", "url('" + src + "') no-repeat -1647px -13px");
                    $("#re_func_selectAll").addClass("selectAllIconEn");
                    $("#re_func_selectAll").removeClass("selectAllIconDis");
               }
            }
        }
        if (_isInDocViewer  && curFileId != null) {
            parent_left = $("#wdp_Content").offset().left;
            parent_top = $("#wdp_Content").offset().top;
            nScrollLeft = $("#wdp_Content")[0].scrollLeft;
            nScrollTop = $("#wdp_Content")[0].scrollTop;
            var tpx = e.pageX - parent_left + nScrollLeft;
            var tpy = e.pageY - parent_top + nScrollTop;
            var cpageindex = 0;
            if (_viewerMode == "multi")
                cpageindex = PrePageCount(tpy);
            else
                cpageindex = parseInt(_curCorrectPageId);
            cpageindex = _fileDocument[curFileId].GetPageIndex(cpageindex);
            getClickLocation(tpx, tpy, cpageindex);
        } else {
            currentClickLocation = null;
        }
    }
    $("body").bind("mousedown",bodyMouseDown);
});
var AnnotationRightClick = null;
$(function(){
     AnnotationRightClick = function(e)
    {
        e = e||window.event;
        selectId = (e.target.id);
        noSelectAnno();
 
        hideStampTable(e);
        if (isReadOnly())
            return;
        if(_isInDocViewer)
        {
            if (selectId.indexOf("docannotation") >= 0)
                return;
            hideResizeHandler();
            if(isEditPdfText || isAddPDFImg || isAddPdftext) //can not handle annotation in edit state
            {
                var parentId = $(e.target).parent().attr("id")||"";
                var paParentId = $(e.target).parent().parent().attr("id")||"";
                var paPaParentId = $(e.target).parent().parent().parent().attr("id")||"";
                if (selectId.indexOf("REimg") != -1 || (typeof (parentId) != "undefined" && parentId.indexOf("REimg") != -1) || selectId.indexOf("RECanvas") != -1 || (typeof (paParentId) != "undefined" && (paParentId.indexOf("REimg") != -1 || paParentId.indexOf("RECanvas") != -1)) || (typeof (paPaParentId) != "undefined" && (paPaParentId.indexOf("REimg") != -1 || paPaParentId.indexOf("RECanvas") != -1)))//Enable Image edit
                {
                    if(isBindTxtEditEvent)
                        RemoveEditTextEvent();
                    if(!isBindImgEditEvent)
                        BindEditImageEvent();
                    if(!basicBoardEvent)
                        BindBasicBoardEvent();
                    if (selectId.indexOf("REimg") != -1) {
                        showResizeHandler($("#" + selectId)[0]);
                    } else if ( parentId.indexOf("REimg") != -1) {
                        showResizeHandler($("#" + parentId)[0]);
                    } if (paParentId.indexOf("REimg") != -1) {
                        showResizeHandler($("#" + paParentId)[0]);
                    } if (paPaParentId.indexOf("REimg") != -1) {
                        showResizeHandler($("#" + paPaParentId)[0]);
                    }
                }
                else if(selectId.indexOf("REtxt") != -1 || (typeof(parentId) != "undefined" && parentId.indexOf("REtxt") != -1) || selectId.indexOf("page_") != -1 || (typeof(paParentId) != "undefined" && paParentId.indexOf("REtxt") != -1))
                {
                    if (isBindImgEditEvent) {
                        curEditImageId = "";
                        addImgEditId = "";
                        RemoveEditImageEvent();
                    }
                    var selection = window.getSelection();
                    if(selection != "")
                    {
                        if(!isBindTxtEditEvent)
                            BindEditTextEvent();
                        if(!basicBoardEvent)
                            BindBasicBoardEvent(); 
                    }
                    else
                    {
                        if(isBindTxtEditEvent)
                            RemoveEditTextEvent();
                        if(basicBoardEvent)
                            RemoveBasicBoardEvent();
                    }
                
                }
                else
                {
                    if(isBindImgEditEvent)
                        RemoveEditImageEvent();
                    if(isBindTxtEditEvent)
                        RemoveEditTextEvent();
                    if(basicBoardEvent)
                        RemoveBasicBoardEvent();
                    curEditTextId = "";
                    curEditImageId = "";
                    addImgEditId = "";
                }
                return;
            }
            if(selectId == "draw_canvas" || selectId == ""  || (selectId.indexOf("svg_") == -1 && selectId.indexOf("annotation") == -1))
            {
                selectDiv = new Array();
                noSelectAnno();
                return;
            }
            idPosition = selectId.indexOf("_");
            if(idPosition != -1)
            {


               var  tempid = selectId.substring(idPosition + 1);
               var goshowResizeId = tempid.split("_");
                if (goshowResizeId.length >= 1)
                    showResizeId = goshowResizeId[0];
                else
                    return;

                if ($("#div_" + showResizeId)!=null&&($("#div_" + showResizeId).attr('isflatten') == "true"))
                    return;
                if(isCtrlDown == false)
                    showIds = new Array();
                showIds.push(showResizeId);
                if(showIds.length == 1)
                    selectOneAnno();
                for(var i=0;i<showIds.length;i++)
                {
                    if(showIds[i].indexOf("_")!=-1)
				        showIds[i]= showIds[i].substring(0,showIds[i].indexOf("_"));
				    if(selectDiv.length == 0)
				        selectDiv.push(showIds[i]);
                    $("#rRightDown_"+showIds[i]+"").css("visibility", "visible");
					$("#rLeftDown_"+showIds[i]+"").css("visibility", "visible");
					$("#rLeftUp_"+showIds[i]+"").css("visibility", "visible");
					$("#rRightUp_"+showIds[i]+"").css("visibility", "visible");
					$("#rRight_"+showIds[i]+"").css("visibility", "visible");
					$("#rLeft_"+showIds[i]+"").css("visibility", "visible");
					$("#rUp_"+showIds[i]+"").css("visibility", "visible");
					$("#rDown_"+showIds[i]+"").css("visibility", "visible");
					$("#top_"+showIds[i]+"").css("visibility", "visible");
					$("#bottom_"+showIds[i]+"").css("visibility", "visible");
					$(".shadow_"+showIds[i]+"").css("visibility","visible");
                }
                if(e.button==2 && showIds.length == 1) 
				{		
				    if(selectId.indexOf("svg") != -1)
				    {
				        selectId = selectId.replace("svg","div");
				        var posi = selectId.lastIndexOf("_");
				        var tempId = selectId.substring(0,posi);
				        if( tempId != "div")
				            selectId = tempId;
				    }
                    try {
                        if ((selectId.indexOf("annotationnoteimg") == 0) || ($("#" + selectId).attr('annotype') == "stamp" )) {
                            $("#div_" + showResizeId).smartMenu(annoMenuAct, { name: showResizeId });
                        } else if ((selectId.indexOf("annotationfileattachimg") == 0) || ($("#" + selectId).attr('annotype') == "fileattach")) {
                            $("#div_" + showResizeId).smartMenu(annoMenuActFileattach, { name: showResizeId });
                        } else if ($("#" + selectId).attr('class') == "redactannotation" && ($("#" + selectId).prop("tagName") == "rect" || $("#" + selectId).prop("tagName") == "tspan")) {
                            if ($("#" + selectId).attr('redact') == "page") {
                                $("#div_" + showResizeId).smartMenu(annoMenuActRedactPage, { name: showResizeId });
                            } else if ($("#" + selectId).attr('redact') == "area") {
                                $("#div_" + showResizeId).smartMenu(annoMenuActRedactArea, { name: showResizeId });
                            } else { 
                                $("#div_" + showResizeId).smartMenu(annoMenuActRedactText, { name: showResizeId });
                            }
                        } else if ($("#" + selectId).attr('annotype') == "dimension") {
                            $("#div_" + showResizeId).smartMenu(annoMenuActDimension, { name: showResizeId });
                        }
                        else {
                            $("#div_" + showResizeId).smartMenu(annoMenuAct, { name: showResizeId });
                        }
                    } catch (e) {
                        $("#div_" + showResizeId).smartMenu(annoMenuAct, { name: showResizeId });
                    }
                } else if (e.button == 2 && $("#" + selectId).attr('class') == "redactannotation" && $("#" + selectId).prop("tagName") == "rect") {
                    if ($("#" + selectId).attr('redact') == "page") {
                        $("#div_" + showResizeId).smartMenu(annoMenuActRedactPage, { name: showResizeId });
                    } else if ($("#" + selectId).attr('redact') == "area") {
                        $("#div_" + showResizeId).smartMenu(annoMenuActRedactArea, { name: showResizeId });
                    } else {
                        $("#div_" + showResizeId).smartMenu(annoMenuActRedactText, { name: showResizeId });
                    }
                }
            }
        } else if (appEditor && _isInBookmarkPanel && selectId.indexOf("_thumbOutLine") >= 0) {
            $("#_thumbOutLine").smartMenu(oneCreateBookmarkMenuAct, { name: "bk_all" });
            currentSelectBk = null;
        }
        else if (appEditor && _isInBookmarkPanel) {
            $("#" + selectId).smartMenu(oneBookmarkMenuAct, { name: "bk_" + selectId });
            currentSelectBk = selectId;
        }
        else
        {
            if (selectId == "")
                if (e.target != "javascript:") { }
        }
    }
    $("body").bind("mouseup",AnnotationRightClick);
     //$("#addcomponents").bind("mouseup", AnnotationRightClick);
});

var selectDiv = new Array();
var showIds = new Array();
$(function(){
    var ShowAnnotationStyle = function(e)
    {
        if(isEditPdfText)//can not handle annotation in edit state
            return;
        
        e = e || window.event;
        hideStampTable(e);
        selectId = (e.target.id);
        if (selectId == "_linkColor" || selectId == "_fillColor")
            return;
        if (isReadOnly()) {
            noSelectLink();
            noSelectAnno();
            return;
        }

        if(!_isInDocViewer)
        {
            if(selectId == "" && _isInToolbar)
                HideAllPropanel();
        }
        else
        {
            if(isEditLink && selectId.indexOf("link") == -1 && !isDrag)
                noSelectLink();

            if (selectId.indexOf("docannotation") >= 0 || selectId == "draw_canvas" || selectId == "" || (selectId.indexOf("svg_") == -1 && selectId.indexOf("annotation") == -1)) {
                selectDiv = new Array();
                ChangeTextShowed(selectId);
                noSelectAnno();
                if (selectId == "")
                    noSelectLink();
                return;
            }
            idPosition = selectId.indexOf("_");
            if (idPosition == -1)
                selectDiv = new Array();
            else {
                showResizeId = selectId.substring(idPosition + 1);
                if ($("#div_" + showResizeId) != null && ($("#div_" + showResizeId).attr('isflatten') == "true"))
                    return;
                if(isCtrlDown == false)
                    showIds = new Array();
                showIds.push(showResizeId);
                if(showIds.length == 1)
                    selectOneAnno();
                for(var i=0;i<showIds.length;i++)
                {
                    if(showIds[i].indexOf("_")!=-1)
				        showIds[i]= showIds[i].substring(0,showIds[i].indexOf("_"));
				    if(selectDiv.length == 0)
				        selectDiv.push(showIds[i]);
                    $("#rRightDown_"+showIds[i]+"").css("visibility", "visible");
					$("#rLeftDown_"+showIds[i]+"").css("visibility", "visible");
					$("#rLeftUp_"+showIds[i]+"").css("visibility", "visible");
					$("#rRightUp_"+showIds[i]+"").css("visibility", "visible");
					$("#rRight_"+showIds[i]+"").css("visibility", "visible");
					$("#rLeft_"+showIds[i]+"").css("visibility", "visible");
					$("#rUp_"+showIds[i]+"").css("visibility", "visible");
					$("#rDown_"+showIds[i]+"").css("visibility", "visible");
					$("#top_"+showIds[i]+"").css("visibility", "visible");
					$("#bottom_"+showIds[i]+"").css("visibility", "visible");
					$(".shadow_"+showIds[i]+"").css("visibility","visible");
                }
            }
            ChangeTextShowed(selectId);
        }
    }
    $("body").bind("click",ShowAnnotationStyle);
});

function hideStampTable(e) {
    var id=e.target.id;
    if (id=="stamp_menu"||id == "re_func_stamp" || id == "isstamtime" || id == "isstamtimelabel" || id.indexOf("targetstamp")==0)
        return;
    var o = $("#stamp_menu").css("display");
    if (o == "none")
        return;
        $("#stamp_menu").animate({ opacity: "hide", top: "36px" }, "fast");
        showstamp = false;
    
}

function noSelectAnno()
{
    HideAllPropanel();
    $(".rRightDown").css("visibility", "hidden");
	$(".rLeftDown").css("visibility", "hidden");
	$(".rLeftUp").css("visibility", "hidden");
	$(".rRightUp").css("visibility", "hidden");
	$(".rRight").css("visibility", "hidden");
	$(".rLeft").css("visibility", "hidden");
	$(".rUp").css("visibility", "hidden");
	$(".rDown").css("visibility", "hidden");
    $(".top").css("visibility", "hidden");
    $(".bottom").css("visibility", "hidden");
    $(".shadow").css("visibility","hidden"); 
}

function noSelectLink()
{
    if(onblurLinkNum != "")
    {
        var posi = onblurLinkNum.indexOf("_");
        var actualIndex = onblurLinkNum.substring(0,posi);
        var linkAnnoNum = onblurLinkNum.substring(posi+1);
        var linkAnno = _fileDocument[curFileId].Viewers[actualIndex].Links[linkAnnoNum];
        if (linkAnno!=null)
        $("#link_"+linkAnnoNum).css("border-color",linkAnno.OutLineColor);
    }
    onblurLinkNum = "";
    $(".lRightDown").css("visibility", "hidden");
	$(".lLeftDown").css("visibility", "hidden");
	$(".lLeftUp").css("visibility", "hidden");
	$(".lRightUp").css("visibility", "hidden");
	$(".lRight").css("visibility", "hidden");
	$(".lLeft").css("visibility", "hidden");
	$(".lUp").css("visibility", "hidden");
	$(".lDown").css("visibility", "hidden");
}

function selectOneAnno()
{
    var annoIndex = selectDiv[0];
    var pageId = null;
    var fileDoc = _fileDocument[curFileId];
    for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
    {
        var tempIndex = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[tempIndex];
        if(viewer.Annotations[annoIndex] != null)
        {
            pageId = tempIndex;
            break;
        }
    }
}

var selectTextId = null;
function ChangeTextShowed(selectId)
{
    currentTextDiv = "text_"+selectTextId;
    if(selectId != currentTextDiv)
    {
	    $(".text_edit").css("visibility", "hidden");
	    if(curHideTextAnnoId != "")
	    {
	        $("#"+curHideTextAnnoId).show();
	        curHideTextAnnoId = "";
	    }
		if(selectTextId != null)
		{
		    text_shown_original = $("#text_"+selectTextId+"").val();
			text_shown = escape(text_shown_original).replace(/\+/g, '%2B').replace(/\'/g,'%22').replace(/\'/g, '%27').replace(/\//g,'%2F');
			var curPg = parseInt(_curCorrectPageId);
			var actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
			var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[selectTextId];
			if (typeof (annotation) == "undefined") {
			    annotation = _fileDocument[curFileId].Viewers[actualIndex + 1].Annotations[selectTextId];
			    if (typeof (annotation) != "undefined")
			        _fileDocument[curFileId].Viewers[actualIndex + 1].Annotations[selectTextId].ShowedText = unescape(text_shown);
			} else if (_fileDocument[curFileId].Viewers[actualIndex].Annotations[selectTextId] != null)
			    _fileDocument[curFileId].Viewers[actualIndex].Annotations[selectTextId].ShowedText = unescape(text_shown);

			$("#svg_"+selectTextId).remove();
			$("#text_"+selectTextId).remove();
            var svgContent = drawAnnotationWithSVG(annotation, "annotation",actualIndex, false,true);
            $("#div_"+selectTextId).append(svgContent);
            var textAnno = document.getElementById("annotation_"+selectTextId+"");
            textAnno.ondblclick = function(event)
			{
                EditText(textAnno);
                if (event.preventDefault)
                    event.preventDefault();
                if (event.returnValue)
                    event.returnValue = false;
			}; 
			selectTextId = null;
		}		
	} 
}

var isDragIn = false;
var _clickNum = 0;
var _annotationLastType = "";
var num = 0;
var _annotationLastOptions;
function draw_annotation(annotationType,options)
{
    isNote = false;
    if (signRotate == 1) {
        alert(i18n['content']['CommentLimitOnRotate']||"Cannot comment, edit content, redact, when page is rotated.")
        return;
    }

    if(selectTextPages.length != 0)
	{
	    for(var i=0;i<selectTextPages.length;i++)
        {
            $("#page_"+selectTextPages[i]+" svg #reSelectTextSvg").remove();
        }
	    selectTextPages = new Array();
	}
    if(_clickNum != 0)
    {

	    _clickNum = 0;
    }

    $("#draw_canvas").unbind("mousedown");
    $("#draw_canvas").unbind("mousemove");
    $("#draw_canvas").unbind("mouseup");

    _clickNum++;
    _annotationLastType = annotationType;
    _annotationLastOptions = options;
    if(_clickNum == 1)
    {
        $(".showByDrag").unbind("mousedown",dragImageMouseDown);
        $(".showByDrag").unbind("mousemove",dragImageMouseMove);
        $(".showByDrag").unbind("mouseup", dragImageMouseUp);
       
		$(".showByDrag").removeClass("mouseStyleMove");
		$(".showByDrag").addClass("mouseStyleAnnotation");
		if (selectTextId != null)
		    ChangeTextShowed("");
		if(_annotationLastType == "polygon" || _annotationLastType == "Polygonlines")
		    draw_Polygon();
		else if (_annotationLastType == "line" || _annotationLastType == "arrow" || _annotationLastType == "dimension")
		    draw_Line();
		else if (_annotationLastType == "notes" || _annotationLastType == "fileattach")
		    draw_Notes();
		else if(_annotationLastType=="stamp")
		    draw_Stamp(options);
		else
		    draw_Rect(options);
    }
}

var MouseDown;
var MouseUp;
var MouseMove;
function draw_Rect(options)
{
    x_points = new Array();
    y_points = new Array();
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var down_flag = false,original_flag = true;
    var x_down = 0,y_down = 0;
    var x_original=0,y_original=0;
    var x_point = 0,y_point = 0;
    var drawPageIndex = parseInt(_curCorrectPageId);
    var drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
    MouseDown = function(e)
    {
        if (e.button == 2)
        {
            $("#draw_canvas").unbind("mousedown", MouseDown);
            $("#draw_canvas").unbind("mousemove", MouseMove);
            $("#draw_canvas").unbind("mouseup", MouseUp);

            if (curCursorStyle == "select")
                ArrowEvent();
            else if (curCursorStyle == "move")
                HandleEvent();
            return true;
        }
        parent_left = $("#wdp_Content").offset().left;
        parent_top = $("#wdp_Content").offset().top;
        nScrollLeft = $("#wdp_Content")[0].scrollLeft;
        nScrollTop = $("#wdp_Content")[0].scrollTop;
        down_flag = true;
        e = e || window.event;
        x_down = e.pageX;
        y_down = e.pageY;
        if(original_flag)
        {
            x_original = e.pageX - parent_left + nScrollLeft;
            y_original = e.pageY - parent_top + nScrollTop;
            if(_viewerMode == "multi")
                drawPageIndex = PrePageCount(y_original);
            else
                drawPageIndex = parseInt(_curCorrectPageId);
            drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
            viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
            original_flag = false;
            down_flag = true;
        }
        return false;
    };
    
    MouseMove = function(e)
    {
        if(down_flag)
        {
            x_down = e.pageX - parent_left + nScrollLeft;
            y_down = e.pageY - parent_top + nScrollTop;
            x_point = x_original;
            y_point = y_original;
            new_width = x_down - x_original;
            if(new_width <0)
            {
                new_width = -new_width;
                x_point = x_down;
            }
            new_height = y_down - y_original;
            if(new_height < 0)
            {
                new_height = -new_height;
                y_point = y_down;
            }
            
            if(_annotationLastType == "freehand")
            {
                $("#div_"+num).remove();
                e=e||window.event;
                x_points[point_index]=x_down;
			    y_points[point_index]=y_down;
			    point_index++;

			    var x_min=x_points.min();
			    var y_min=y_points.min();
			    var x_max=x_points.max();
			    var y_max=y_points.max();
			    var width_max=x_max-x_min;
			    var height_max=y_max-y_min;

			    strPoints="";
			    for(var i=0;i<x_points.length;i++)
			    {
				    strPoints+=x_points[i]+","+y_points[i]+";";
			    }
			    strPoints = strPoints.substring(0,strPoints.length-1);
                viewer.GetViewerLeftTop();
                var docAnno = new Annotation({ OnPageIndex: drawActualIndex, Type: _annotationLastType, Index: num, ShowLeft: x_min, ShowTop: y_min, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
    	        var borderWidth = docAnno.OutLineWidth/2* zoomValue + 3;
			    var content = "<div class='new_rect' id='div_"+num+"' style='left:"+(x_min-borderWidth)+"px;top:"+(y_min-borderWidth)+"px;"+"width:"+(width_max+2*borderWidth)+"px;height:"+(height_max+2*borderWidth)+"px'>";	    
			    content += drawAnnotationWithSVG(docAnno, "annotation", drawActualIndex, false,false);
			    content += "</div>"
			    //$("#docannotation_" + drawActualIndex).append(content);
			    $("#draw_canvas").append(content);

            }
            else
            {
                _fileDocument[curFileId].Viewers[drawActualIndex].Annotations.splice(num,1);
                $("#div_"+num).remove();
                addImageViewerAnnotation(drawActualIndex, num, x_point, y_point, new_width, new_height, _annotationLastType, nScrollLeft, nScrollTop, false, options);
                if (_annotationLastType == "text")
                    $("#shadow_" + num).css("visibility", "visible");
            }
        }
        return false;
    };
    
    MouseUp = function(e)
    {
        down_flag = false;
        original_flag = true;
        
        if(_annotationLastType == "freehand")
        {
            $("#div_"+num).remove();
            addImageViewerAnnotation(drawActualIndex,num, x_point, y_point, new_width, new_height, _annotationLastType, nScrollLeft, nScrollTop,true);
            x_points = new Array();
            y_points = new Array();
            point_index=0;
        }
        else
        {
            _fileDocument[curFileId].Viewers[drawActualIndex].Annotations.splice(num,1);
            $("#div_" + num).remove();
            if (new_width <= 2 && new_height <= 2) {
                $("#draw_canvas").unbind("mousedown", MouseDown);
                $("#draw_canvas").unbind("mousemove", MouseMove);
                $("#draw_canvas").unbind("mouseup", MouseUp);

                _clickNum = 0;

                $(".showByDrag").bind("mousedown", dragImageMouseDown);
                $(".showByDrag").bind("mousemove", dragImageMouseMove);
                $(".showByDrag").bind("mouseup", dragImageMouseUp);
                $(".showByDrag").removeClass("mouseStyleAnnotation");
                $(".showByDrag").addClass("mouseStyleMove");
                return;
            }
            addImageViewerAnnotation(drawActualIndex, num, x_point, y_point, new_width, new_height, _annotationLastType, nScrollLeft, nScrollTop, true, options);
            if (_annotationLastType == "textbox" || _annotationLastType == "text") { 
                $("#annotation_" + num).trigger("ondblclick");
                
            }
        }
        addThumbViewerAnnotation(_fileDocument[curFileId].Viewers[drawActualIndex].Annotations[num],drawActualIndex);

        $("#draw_canvas").unbind("mousedown",MouseDown);
        $("#draw_canvas").unbind("mousemove",MouseMove);
        $("#draw_canvas").unbind("mouseup",MouseUp);
        
        _clickNum=0;

	    $(".showByDrag").bind("mousedown",dragImageMouseDown);
	    $(".showByDrag").bind("mousemove",dragImageMouseMove);
	    $(".showByDrag").bind("mouseup",dragImageMouseUp);
	    $(".showByDrag").removeClass("mouseStyleAnnotation");
	    $(".showByDrag").addClass("mouseStyleMove");
	    
	    addDragAction(num,drawActualIndex,"");
	    CompleteDraw(drawActualIndex, _annotationLastType, num);
	    num++;
	    if (continueDrawAnnotation && e.button != 2 && (_annotationLastType == "rectangle" || _annotationLastType == "circle" || _annotationLastType == "freehand")) {
	        draw_annotation(_annotationLastType, _annotationLastOptions);
	    } else {
	        curAnnoType = "";
	    }
	  
	    return false;
    };
    $("#draw_canvas").bind("mousedown",MouseDown);
    $("#draw_canvas").bind("mousemove",MouseMove);
    $("#draw_canvas").bind("mouseup",MouseUp);
}

var stamp_add=false;
function draw_Stamp(options) {
    x_points = new Array();
    y_points = new Array();
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var down_flag = false,original_flag = true;
    var x_down = 0,y_down = 0;
    var x_point = 0,y_point = 0;
    var drawPageIndex = parseInt(_curCorrectPageId);
    var drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
    stamp_add = false;
    var stampInfo;
    for(var o in stamplist){
        if (stamplist[o].name == options.ShowedText) {
            stampInfo = stamplist[o];
            break;
        }
    }
    if (stampInfo == null || typeof (stampInfo) == "indefined")
        return;
    MouseDown = function(e)
    {

        return false;
    };
    
    MouseMove = function(e)
    {
        stamp_add = true;
        parent_left = $("#wdp_Content").offset().left;
        parent_top = $("#wdp_Content").offset().top;
        nScrollLeft = $("#wdp_Content")[0].scrollLeft;
        nScrollTop = $("#wdp_Content")[0].scrollTop;

        e = e || window.event;


        x_down = e.pageX - parent_left + nScrollLeft;
        y_down = e.pageY - parent_top + nScrollTop;

        
        //if (_viewerMode == "multi")
        //    drawPageIndex = PrePageCount(y_down);
        //else
        //    drawPageIndex = parseInt(_curCorrectPageId);
        //drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);

        new_width = stampInfo.width * zoomValue;
        new_height = stampInfo.height * zoomValue;
        x_point = x_down - new_width*0.5;
        y_point = y_down - new_height*0.5;
    
        if (x_point <= 0)
            x_point = 0;
        if (y_point <= 0)
            y_point = 0;
         _fileDocument[curFileId].Viewers[drawActualIndex].Annotations.splice(num,1);
        $("#div_"+num).remove();
        addImageViewerAnnotation(drawActualIndex, num, x_point, y_point, new_width, new_height, _annotationLastType, nScrollLeft, nScrollTop, false, options);
        return false;
    };
    
    MouseUp = function(e)
    {

        _fileDocument[curFileId].Viewers[drawActualIndex].Annotations.splice(num, 1);
        $("#draw_canvas").unbind("mousedown", MouseDown);
        $("#draw_canvas").unbind("mousemove", MouseMove);
        $("#draw_canvas").unbind("mouseup", MouseUp);

        _clickNum = 0;
        if (typeof (e.button) != "undefined") {
            $(".showByDrag").bind("mousedown", dragImageMouseDown);
            $(".showByDrag").bind("mousemove", dragImageMouseMove);
            $(".showByDrag").bind("mouseup", dragImageMouseUp);
            $(".showByDrag").removeClass("mouseStyleAnnotation");
            $(".showByDrag").addClass("mouseStyleMove");
        }
        $("#div_" + num).remove();
        stamp_add = false;
        if (e.button == 2 || typeof (e.button) == "undefined") {
            return;
        }
        if (_viewerMode == "multi")
            drawPageIndex = PrePageCount(y_down);
        else
            drawPageIndex = parseInt(_curCorrectPageId);
        drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
        addImageViewerAnnotation(drawActualIndex, num, x_point, y_point, new_width, new_height, _annotationLastType, nScrollLeft, nScrollTop, true, options);
        addThumbViewerAnnotation(_fileDocument[curFileId].Viewers[drawActualIndex].Annotations[num], drawActualIndex);
        addDragAction(num, drawActualIndex, "");
        CompleteDraw(drawActualIndex, _annotationLastType, num);
        num++;
        if (continueDrawAnnotation && e.button != 2) {
            draw_annotation(_annotationLastType, _annotationLastOptions);
        } else {
            curAnnoType = "";
        }
        return false;
    };
    $("#draw_canvas").bind("mousedown", MouseDown);
    $("#draw_canvas").bind("mousemove", MouseMove);
    $("#draw_canvas").bind("mouseup", MouseUp);

}

var x_points = new Array();y_points = new Array();
var new_width=0,new_height=0;
var point_index = 0;
function draw_Line()
{
    x_points = new Array();
    y_points = new Array();
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var drawPageIndex = parseInt(_curCorrectPageId);
    var drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
    var down_flag = false;
    var x=0;y=0;
    MouseDown = function(e)
    {
        if (e.button == 2) {
            $("#draw_canvas").unbind("mousedown", MouseDown);
            $("#draw_canvas").unbind("mousemove", MouseMove);
            $("#draw_canvas").unbind("mouseup", MouseUp);

            $(".showByDrag").bind("mousedown", dragImageMouseDown);
            $(".showByDrag").bind("mousemove", dragImageMouseMove);
            $(".showByDrag").bind("mouseup", dragImageMouseUp);
            $(".showByDrag").removeClass("mouseStyleAnnotation");
            $(".showByDrag").addClass("mouseStyleMove");
            if (curCursorStyle == "select")
                ArrowEvent();
            else if (curCursorStyle == "move")
                HandleEvent();
            return true;
        }

        if (down_flag)
            return;
        point_index = 0;
        parent_left=$("#wdp_Content").offset().left;
		parent_top=$("#wdp_Content").offset().top;
		nScrollLeft=$("#wdp_Content")[0].scrollLeft;
		nScrollTop=$("#wdp_Content")[0].scrollTop;
		e=e||window.event;
		x=e.pageX-parent_left+nScrollLeft;
		y=e.pageY-parent_top+nScrollTop;
		if(_viewerMode == "multi")
		    drawPageIndex = PrePageCount(y);
		else
		    drawPageIndex = parseInt(_curCorrectPageId);
		drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
		viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
		viewer.GetViewerLeftTop();
		var content = "";
		x_points[point_index]=parseInt(x);
		y_points[point_index]=parseInt(y);
		point_index++; 
		down_flag = true;	
		return false;
    };
    
    MouseMove = function(e)
    {
        if(down_flag)
		{
		    e=e||window.event;
		    $("#div_"+num).remove();
			x=e.pageX-parent_left+nScrollLeft;
			y=e.pageY-parent_top+nScrollTop;
			var content = "";
			x_points[point_index]=parseInt(x);
			y_points[point_index]=parseInt(y);
			if(_annotationLastType == "arrow")
            {
                var arrowPoints = new Array();
			    arrowPoints = getArrowKeypoints(x_points[1],y_points[1],x_points[0],y_points[0],arrowAnnoStyle.OutLineWidth);
                x_points[point_index+1] = parseInt(arrowPoints[0]);
			    y_points[point_index+1] = parseInt(arrowPoints[1]);
			    x_points[point_index+2] = parseInt(arrowPoints[2]);
			    y_points[point_index+2] = parseInt(arrowPoints[3]);
			} else if (_annotationLastType == "dimension") {
			    //var arrowPoints = new Array();
			    //arrowPoints = getArrowKeypoints(x_points[1], y_points[1], x_points[0], y_points[0], dimensionAnnoStyle.OutLineWidth);
			    //x_points[point_index + 1] = parseInt(arrowPoints[0]);
			    //y_points[point_index + 1] = parseInt(arrowPoints[1]);
			    //x_points[point_index + 2] = parseInt(arrowPoints[2]);
			    //y_points[point_index + 2] = parseInt(arrowPoints[3]);
			    //arrowPoints = getArrowKeypoints(x_points[0], y_points[0], x_points[1], y_points[1], dimensionAnnoStyle.OutLineWidth);
			    //x_points[point_index + 3] = parseInt(arrowPoints[0]);
			    //y_points[point_index + 3] = parseInt(arrowPoints[1]);
			    //x_points[point_index + 4] = parseInt(arrowPoints[2]);
			    //y_points[point_index + 4] = parseInt(arrowPoints[3]);
			    //arrowPoints = getDimensionLeftRight(x_points[0], y_points[0], x_points[1], y_points[1], dimensionAnnoStyle.OutLineWidth, dimensionAnnoStyle.LeaderLength, dimensionAnnoStyle.LeaderExtend, dimensionAnnoStyle.LeaderOffset);
			    //x_points[point_index + 5] = parseInt(arrowPoints[0]);
			    //y_points[point_index + 5] = parseInt(arrowPoints[1]);
			    //x_points[point_index + 6] = parseInt(arrowPoints[2]);
			    //y_points[point_index + 6] = parseInt(arrowPoints[3]);
			    //arrowPoints = getDimensionLeftRight(x_points[1], y_points[1], x_points[0], y_points[0], dimensionAnnoStyle.OutLineWidth, dimensionAnnoStyle.LeaderLength, dimensionAnnoStyle.LeaderExtend, dimensionAnnoStyle.LeaderOffset);
			    //x_points[point_index + 7] = parseInt(arrowPoints[0]);
			    //y_points[point_index + 7] = parseInt(arrowPoints[1]);
			    //x_points[point_index + 8] = parseInt(arrowPoints[2]);
			    //y_points[point_index + 8] = parseInt(arrowPoints[3]);
			    var dimensionpoints = getDimensionLocation(x_points[0], y_points[0], x_points[1], y_points[1], dimensionAnnoStyle.OutLineWidth, dimensionAnnoStyle.LeaderLength, dimensionAnnoStyle.LeaderExtend, dimensionAnnoStyle.LeaderOffset);
                // start end point 
			    x_points[0] = dimensionpoints[1].x;
			    y_points[0] = dimensionpoints[1].y;
			    x_points[1] = dimensionpoints[6].x;
			    y_points[1] = dimensionpoints[6].y;
			    // arrow 1 top botom
			    x_points[2] = dimensionpoints[3].x;
			    y_points[2] = dimensionpoints[3].y;
			    x_points[3] = dimensionpoints[4].x;
			    y_points[3] = dimensionpoints[4].y;
			    // arrow 2 top botom
			    x_points[4] = dimensionpoints[8].x;
			    y_points[4] = dimensionpoints[8].y;
			    x_points[5] = dimensionpoints[9].x;
			    y_points[5] = dimensionpoints[9].y;
			    // line 1 top botom
			    x_points[6] = dimensionpoints[0].x;
			    y_points[6] = dimensionpoints[0].y;
			    x_points[7] = dimensionpoints[2].x;
			    y_points[7] = dimensionpoints[2].y;
                // line 2 top botom
			    x_points[8] = dimensionpoints[5].x;
			    y_points[8] = dimensionpoints[5].y;
			    x_points[9] = dimensionpoints[7].x;
			    y_points[9] = dimensionpoints[7].y;
			    for (var go = 0; go < 10; go++) {
			        x_points[go + 10] = dimensionpoints[go].x + dimensionpoints[10].x * zoomValue;
			        y_points[go + 10] = dimensionpoints[go].y + dimensionpoints[10].y * zoomValue;
			    }
			}
			var x_min=x_points.min();
			var y_min=y_points.min();
			var x_max=x_points.max();
			var y_max=y_points.max();
			var width_max=x_max-x_min;
			var height_max=y_max-y_min;

			var strPoints="";
			for(var i=0;i<x_points.length;i++)
			    strPoints+=x_points[i]+","+y_points[i]+";";
			strPoints = strPoints.substring(0,strPoints.length-1);
			
			var docAnno = new Annotation({ OnPageIndex: drawActualIndex, Type: _annotationLastType, Index: num, ShowLeft: x_min, ShowTop: y_min, ZoomValue: zoomValue, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
			var borderWidth = docAnno.OutLineWidth / 2 * zoomValue + 3;
            var content = "<div class='new_rect' id='div_"+num+"' style='left:"+(x_min-borderWidth)+"px;top:"+(y_min-borderWidth)+"px;"+"width:"+(width_max+2*borderWidth)+"px;height:"+(height_max+2*borderWidth)+"px'>";
	        content += drawAnnotationWithSVG(docAnno, "annotation",drawActualIndex, false,false);
	        content += "</div>";
	      //  $("#docannotation_" + drawActualIndex).append(content);
			$("#draw_canvas").append(content);  
		}
		return false;
    };
    
    MouseUp = function(e)
    {
        $("#div_" + num).remove();
        if (x_points.length <=1 ||y_points.length<=1) {
            $("#draw_canvas").unbind("mousedown", MouseDown);
            $("#draw_canvas").unbind("mousemove", MouseMove);
            $("#draw_canvas").unbind("mouseup", MouseUp);
            _clickNum = 0;
            $(".showByDrag").bind("mousedown", dragImageMouseDown);
            $(".showByDrag").bind("mousemove", dragImageMouseMove);
            $(".showByDrag").bind("mouseup", dragImageMouseUp);
            $(".showByDrag").removeClass("mouseStyleAnnotation");
            $(".showByDrag").addClass("mouseStyleMove");
            if (curCursorStyle == "select")
                ArrowEvent();
            else if (curCursorStyle == "move")
                HandleEvent();
            return;
        }

	    addImageViewerAnnotation(drawActualIndex,num, 0, 0, 0, 0, _annotationLastType, nScrollLeft, nScrollTop,true);					
		addThumbViewerAnnotation(_fileDocument[curFileId].Viewers[drawActualIndex].Annotations[num], drawActualIndex);    
        x_points = new Array();
		y_points = new Array();
		point_index=0;
		
		$("#draw_canvas").unbind("mousedown",MouseDown);
        $("#draw_canvas").unbind("mousemove",MouseMove);
        $("#draw_canvas").unbind("mouseup",MouseUp);	
		_clickNum=0;
		$(".showByDrag").bind("mousedown",dragImageMouseDown);
		$(".showByDrag").bind("mousemove",dragImageMouseMove);
		$(".showByDrag").bind("mouseup",dragImageMouseUp);
		$(".showByDrag").removeClass("mouseStyleAnnotation");
		$(".showByDrag").addClass("mouseStyleMove");
		
		addDragAction(num,drawActualIndex,"");
		CompleteDraw(drawActualIndex,_annotationLastType,num);
		num++;
		down_flag = false;
		if (continueDrawAnnotation && e.button != 2) {
		    draw_annotation(_annotationLastType, _annotationLastOptions);
		} else {
		    curAnnoType = "";
		}
		return false;
    }; 
    $("#draw_canvas").bind("mousedown",MouseDown);
    $("#draw_canvas").bind("mousemove",MouseMove);
    $("#draw_canvas").bind("mouseup",MouseUp);
}

function getArrowKeypoints(startX,startY,endX,endY,outlineWidth,linestartstyle, lineendstyle)
{
    lineendstyle = lineendstyle || 4;
    linestartstyle = linestartstyle || 0;
    if (linestartstyle == 0 && lineendstyle > 0) {
        var temp = endY;
        endY = startY;
        startY = temp;
        temp = endX;
        endX = startX;
        startX = temp;
    }
    var arrowRadius = 50 * zoomValue * (outlineWidth/2);   
    var pointsXY = [0,0,0,0,0,0,0,0];
    var tmpx = endX - startX ;
    var tmpy = startY - endY;
    var angle = Math.atan2(tmpy,tmpx)*(180/Math.PI);
    var centerX = endX;
    var centerY = endY;
    var topX = endX + arrowRadius * Math.cos(angle * (Math.PI /180));
    var topY = endY - arrowRadius * Math.sin(angle * (Math.PI /180));
    var radius = Math.tan(25*(Math.PI/180)) * arrowRadius;
    var leftX = centerX + radius * Math.cos((angle +150) *(Math.PI/180));
    var leftY = centerY - radius * Math.sin((angle +150) *(Math.PI/180));
    var rightX = centerX + radius * Math.cos((angle +210) *(Math.PI/180));
    var rightY = centerY - radius * Math.sin((angle +210) *(Math.PI/180));

    pointsXY[0] = parseInt(leftX+0.5);
    pointsXY[1] = parseInt(leftY+0.5);
    pointsXY[2] = parseInt(rightX+0.5);
    pointsXY[3] = parseInt(rightY+0.5);
    return pointsXY;
}



function getDimensionLocation(calstartX, calstartY, calendX, calendY, outlineWidth, ll, le, lo) {

    // array points 0~9 max 10
    // 0~4 as group one 5~9 group two
    // 0,5 is the height line top,point (saving start end)
    // 1,6 is the height line center point(calculating start,end point);
    // 2,7 is the height line bottom point
    // 3,8 is the arrow top point
    // 4,9 is the arrow bottom point
    // 10 is the offset


    var tmpx = calendX - calstartX;
    var tmpy = calstartY - calendY;
    var angle = Math.atan2(tmpy, tmpx) * (180 / Math.PI);
    var toplength = 0;// le * zoomValue ;//* (outlineWidth / 2);
    var bottomlength = 0;// (ll) * zoomValue ;//* (outlineWidth / 2);
    var offsetlength =lo;
    var arrowRadius = 20 * zoomValue ;//* (outlineWidth / 2);
    var arrayPoints = new Array();
    var linetop1 = { x: 0, y: 0 };
    var linecenter1 = { x: 0, y: 0 };
    var linebottom1 = { x: 0, y: 0 };
    var arrowtop1 = { x: 0, y: 0 };
    var arrowbottom1 = { x: 0, y: 0 };
    var linetop2 = { x: 0, y: 0 };
    var linecenter2 = { x: 0, y: 0 };
    var linebottom2 = { x: 0, y: 0 };
    var arrowtop2 = { x: 0, y: 0 };
    var arrowbottom2 = { x: 0, y: 0 };
    var offsetpoint = { x: 0, y: 0 };

    if (ll < 0) {
        toplength = (0-ll) * zoomValue;
        bottomlength = le * zoomValue;
        offsetlength = 0 - offsetlength;
    } else {
        toplength = le * zoomValue;
        bottomlength = ll * zoomValue;
      
    }

    // line top
    linetop1.x = calstartX + toplength * Math.cos((angle + 90) * (Math.PI / 180));
    linetop1.y = calstartY - toplength * Math.sin((angle + 90) * (Math.PI / 180));
    linetop2.x = calendX + toplength * Math.cos((angle + 90) * (Math.PI / 180));
    linetop2.y = calendY - toplength * Math.sin((angle + 90) * (Math.PI / 180));
    // line center
    linecenter1.x = calstartX;
    linecenter1.y = calstartY;
    linecenter2.x = calendX;
    linecenter2.y = calendY;
    // line bottom
    linebottom1.x = calstartX + bottomlength * Math.cos((angle + 270) * (Math.PI / 180));
    linebottom1.y = calstartY - bottomlength * Math.sin((angle + 270) * (Math.PI / 180));
    linebottom2.x = calendX + bottomlength * Math.cos((angle + 270) * (Math.PI / 180));
    linebottom2.y = calendY - bottomlength * Math.sin((angle + 270) * (Math.PI / 180));
    // arrow 1
    arrowtop1.x = calendX + arrowRadius * Math.cos((angle + 150) * (Math.PI / 180));
    arrowtop1.y = calendY - arrowRadius * Math.sin((angle + 150) * (Math.PI / 180));
    arrowbottom1.x = calendX + arrowRadius * Math.cos((angle + 210) * (Math.PI / 180));
    arrowbottom1.y = calendY - arrowRadius * Math.sin((angle + 210) * (Math.PI / 180));
    // arrow 2
    arrowtop2.x = calstartX - arrowRadius * Math.cos((angle + 150) * (Math.PI / 180));
    arrowtop2.y = calstartY + arrowRadius * Math.sin((angle + 150) * (Math.PI / 180));
    arrowbottom2.x = calstartX - arrowRadius * Math.cos((angle + 210) * (Math.PI / 180));
    arrowbottom2.y = calstartY + arrowRadius * Math.sin((angle + 210) * (Math.PI / 180));
    // offset
    offsetpoint.x = -offsetlength * Math.cos((angle + 270) * (Math.PI / 180));
    offsetpoint.y = offsetlength * Math.sin((angle + 270) * (Math.PI / 180));

    arrayPoints.push(linetop1);
    arrayPoints.push(linecenter1);
    arrayPoints.push(linebottom1);
    arrayPoints.push(arrowtop1);
    arrayPoints.push(arrowbottom1);
    arrayPoints.push(linetop2);
    arrayPoints.push(linecenter2);
    arrayPoints.push(linebottom2);
    arrayPoints.push(arrowtop2);
    arrayPoints.push(arrowbottom2);
    arrayPoints.push(offsetpoint);

    return arrayPoints;
}




function getDimentsionUpStartEnd(startX, startY, endX, endY, outlineWidth, le) {
    var tmpx = startX - endX;
    var tmpy = endY - startY;
    var angle = Math.atan2(tmpy, tmpx) * (180 / Math.PI);
    var length=le* zoomValue;//*(outlineWidth / 2);
    var pointsXY = [0, 0, 0, 0];
    pointsXY[0] = startX - length * Math.cos((angle + 270) * (Math.PI / 180));
    pointsXY[1] = startY + length * Math.sin((angle + 270) * (Math.PI / 180));
    pointsXY[2] = endX + length * Math.cos((angle + 90) * (Math.PI / 180));
    pointsXY[3] = endY - length * Math.sin((angle + 90) * (Math.PI / 180));
    return pointsXY;
}

function getDimentsionDownStartEnd(startX, startY, endX, endY, outlineWidth, le) {
    var tmpx = endX - startX;
    var tmpy = startY - endY;
    var angle = Math.atan2(tmpy, tmpx) * (180 / Math.PI);
    var length = le * zoomValue ;//* (outlineWidth / 2);
    var pointsXY = [0, 0, 0, 0];
    pointsXY[0] = startX + length * Math.cos((angle + 90) * (Math.PI / 180));
    pointsXY[1] = startY - length * Math.sin((angle + 90) * (Math.PI / 180));
    pointsXY[2] = endX - length * Math.cos((angle + 270) * (Math.PI / 180));
    pointsXY[3] = endY + length * Math.sin((angle + 270) * (Math.PI / 180));
    return pointsXY;
}


function getDimensionLeftRight(startX, startY, endX, endY, outlineWidth, ll, le, lo) {
    if (isNaN(ll))
        ll = 25 * zoomValue;
    if (isNaN(le))
        le = 25 * zoomValue;
    if (isNaN(lo))
        lo = 0;

    var arrowRadius = 50 * zoomValue ;//* (outlineWidth / 2);
    var leaderLength = ll * zoomValue/2;
    var leaderExtend = le * zoomValue / 2;
    var gowidth = (leaderLength + leaderExtend)/2;
    var pointsXY = [0, 0, 0, 0, 0, 0, 0, 0];
    var tmpx = endX - startX;
    var tmpy = startY - endY;
    var angle = Math.atan2(tmpy, tmpx) * (180 / Math.PI);
    var centerX = endX;
    var centerY = endY;
    var topX = endX + arrowRadius * Math.cos(angle * (Math.PI / 180));
    var topY = endY - arrowRadius * Math.sin(angle * (Math.PI / 180));
    var radius = Math.tan(25 * (Math.PI / 180)) * (arrowRadius);
    var leftX = centerX + gowidth * Math.cos((angle + 90) * (Math.PI / 180));
    var leftY = centerY - gowidth * Math.sin((angle + 90) * (Math.PI / 180));
    var rightX = centerX + gowidth * Math.cos((angle + 270) * (Math.PI / 180));
    var rightY = centerY - gowidth * Math.sin((angle + 270) * (Math.PI / 180));

    pointsXY[0] = parseInt(leftX + 0.5);
    pointsXY[1] = parseInt(leftY + 0.5);
    pointsXY[2] = parseInt(rightX + 0.5);
    pointsXY[3] = parseInt(rightY + 0.5);
    return pointsXY;
}

function draw_Polygon()
{
    x_points = new Array();
    y_points = new Array();
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var drawPageIndex = parseInt(_curCorrectPageId);
    var drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
    var x=0,y=0;
    var original_flag = true;
    var down_flag = false;
    MouseDown = function(e)
    {
    
        if (e.button == 2 && point_index==0) {
            $("#draw_canvas").unbind("mousedown", MouseDown);
            $("#draw_canvas").unbind("mousemove", MouseMove);
            $("#draw_canvas").unbind("mouseup", MouseUp);

            $(".showByDrag").bind("mousedown", dragImageMouseDown);
            $(".showByDrag").bind("mousemove", dragImageMouseMove);
            $(".showByDrag").bind("mouseup", dragImageMouseUp);
            $(".showByDrag").removeClass("mouseStyleAnnotation");
            $(".showByDrag").addClass("mouseStyleMove");
           
            return true;
        }
        parent_left = $("#wdp_Content").offset().left;
        parent_top = $("#wdp_Content").offset().top;
        nScrollLeft=$("#wdp_Content")[0].scrollLeft;
		nScrollTop=$("#wdp_Content")[0].scrollTop;
		e = e||window.event;
		x = e.pageX - parent_left + nScrollLeft;
		y = e.pageY - parent_top + nScrollTop;
		if(original_flag)
		{
		    if(_viewerMode == "multi")
		        drawPageIndex = PrePageCount(y);
		    else
		        drawPageIndex = parseInt(_curCorrectPageId);
		    drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
		    viewer = _fileDocument[curFileId].Viewers[drawActualIndex];
            original_flag = false;   
		}
		x_points[point_index]=x;
		y_points[point_index]=y;
		point_index++;

		var x_min=x_points.min();
		var y_min=y_points.min();
		var x_max=x_points.max();
		var y_max=y_points.max();
		var width_max=x_max-x_min;
		var height_max=y_max-y_min;

		strPoints="";
		for(var i=0;i<x_points.length;i++)
		{
		    strPoints+=x_points[i]+","+y_points[i]+";";
		}
		strPoints = strPoints.substring(0,strPoints.length-1);
        viewer.GetViewerLeftTop();
        var docAnno = new Annotation({ OnPageIndex: drawActualIndex, Type: _annotationLastType, Index: num, ShowLeft: x_min, ShowTop: y_min, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });

        $("#div_"+num).remove();
        var borderWidth = docAnno.OutLineWidth/2 * zoomValue + 3;
		var content = "<div class='new_rect' id='div_"+num+"' style='left:"+(x_min-borderWidth)+"px;top:"+(y_min-borderWidth)+"px;"+"width:"+(width_max+2*borderWidth)+"px;height:"+(height_max+2*borderWidth)+"px'>";
		content += drawAnnotationWithSVG(docAnno, "annotation",drawActualIndex, false,false);
		content += "</div>"
		//$("#docannotation_" + drawActualIndex).append(content);
		$("#draw_canvas").append(content);  
		down_flag = true;
    };
    
    MouseMove = function(e)
    {
        if(down_flag)
        {
            e=e||window.event;
		    $("#div_"+num).remove();
			x=e.pageX-parent_left+nScrollLeft;
			y=e.pageY-parent_top+nScrollTop;
			x_points[point_index]=x;
			y_points[point_index]=y;
    			
			var x_min=x_points.min();
			var y_min=y_points.min();
			var x_max=x_points.max();
			var y_max=y_points.max();
			var width_max=x_max-x_min;
			var height_max=y_max-y_min;

			strPoints="";
			for(var i=0;i<x_points.length;i++)
			{
			    strPoints+=x_points[i]+","+y_points[i]+";";
			}
			strPoints = strPoints.substring(0,strPoints.length-1);

			var docAnno = new Annotation({ OnPageIndex: drawActualIndex, Type: _annotationLastType, Index: num, ShowLeft: x_min, ShowTop: y_min, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
            var borderWidth = docAnno.OutLineWidth/2 * zoomValue + 3;
            var content = "<div class='new_rect' id='div_"+num+"' style='left:"+(x_min-borderWidth)+"px;top:"+(y_min-borderWidth)+"px;"+"width:"+(width_max+2*borderWidth)+"px;height:"+(height_max+2*borderWidth)+"px'>";
			content += drawAnnotationWithSVG(docAnno, "annotation",drawActualIndex, false,false);
			content += "</div>"
			//$("#docannotation_" + drawActualIndex).append(content);
			$("#draw_canvas").append(content);  
        }
    };
    MouseUp = function(e)
    {
        e=e||window.event;
		if(e.button==2) 
		{   
			$("#div_"+num).remove();
			if(_annotationLastType == "polygon")
			{
			    x_points.push(x_points[0]);
			    y_points.push(y_points[0]);
			}
			addImageViewerAnnotation(drawActualIndex,num, 0, 0, 0, 0, _annotationLastType, nScrollLeft, nScrollTop,true);			
			x_points = new Array();
			y_points = new Array();
			point_index=0;	
			addThumbViewerAnnotation(_fileDocument[curFileId].Viewers[drawActualIndex].Annotations[num], drawActualIndex);

			$("#draw_canvas").unbind("mousedown",MouseDown);
            $("#draw_canvas").unbind("mousemove",MouseMove);
            $("#draw_canvas").unbind("mouseup",MouseUp);
			_clickNum=0;
			$(".showByDrag").bind("mousedown",dragImageMouseDown);
			$(".showByDrag").bind("mousemove",dragImageMouseMove);
			$(".showByDrag").bind("mouseup",dragImageMouseUp);
			$(".showByDrag").removeClass("mouseStyleAnnotation");
			$(".showByDrag").addClass("mouseStyleMove");
			
			addDragAction(num,drawActualIndex,"");   
		    CompleteDraw(drawActualIndex,_annotationLastType,num);
		    num++;
			down_flag = false;
		}
    };
    $("#draw_canvas").bind("mousedown",MouseDown);
    $("#draw_canvas").bind("mousemove",MouseMove);
    $("#draw_canvas").bind("mouseup",MouseUp);
}

var noteImgWidth = 26;
var noteImgHeight = 28;
var isNote = false;;
function draw_Notes()
{
    var parent_left = 0;
    var parent_top = 0;
    var nScrollLeft = 0;
    var nScrollTop = 0;
    var drawActualIndex = 0;
    var x = 0, y = 0;
    isNote = true;
    var drawNotes = function (e)
    {
        if (!isNote) {
            $("#draw_canvas").unbind("click", drawNotes);
            return;
        }
        isNote = false;
        parent_left = $("#wdp_Content").offset().left;
        parent_top = $("#wdp_Content").offset().top;
        nScrollLeft=$("#wdp_Content")[0].scrollLeft;
		nScrollTop=$("#wdp_Content")[0].scrollTop;
		e = e||window.event;
		x = e.pageX - parent_left + nScrollLeft;
		y = e.pageY - parent_top + nScrollTop;
		if(_viewerMode == "multi")
		    drawPageIndex = PrePageCount(y);
		else
		    drawPageIndex = parseInt(_curCorrectPageId);
		drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
		//if (_annotationLastType == "text")
		//    addImageViewerAnnotation(drawActualIndex, num, x, y - noteImgHeight, noteImgWidth * 2, noteImgHeight * 2, _annotationLastType, nScrollLeft, nScrollTop, true);
        //else
		    addImageViewerAnnotation(drawActualIndex,num,x-noteImgWidth/2,y-noteImgHeight/2,noteImgWidth,noteImgHeight,_annotationLastType,nScrollLeft,nScrollTop,true);	
		//if (_annotationLastType != "text")
		$("#div_" + num).bind("ondblclick");
        $("#draw_canvas").unbind("click");
        _clickNum=0;
        $(".showByDrag").bind("mousedown",dragImageMouseDown);
		$(".showByDrag").bind("mousemove",dragImageMouseMove);
		$(".showByDrag").bind("mouseup",dragImageMouseUp);
		$(".showByDrag").removeClass("mouseStyleAnnotation");
		$(".showByDrag").addClass("mouseStyleMove");
		var annoIndex = num;
		if (_annotationLastType == "notes")
		    addDragAction(num, drawActualIndex, "notes");
		else 
		    addDragAction(num, drawActualIndex, "fileattach");
		CompleteDraw(drawActualIndex, _annotationLastType, num);
		//if (_annotationLastType == "text")
        //    $("#annotation_" + num).trigger("ondblclick");
		addThumbViewerAnnotation(_fileDocument[curFileId].Viewers[drawActualIndex].Annotations[num], drawActualIndex);
		num++;

    }
    $("#draw_canvas").bind("click",drawNotes);
}


var noteFrameW = 245;
var noteFrameH = 160;
function CreateNoteFrame(actualIndex,annoIndex,showText,flag)
{
    //var ImgPosi = "no-repeat -486px -8px";
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    var annotation = viewer.Annotations[annoIndex];
    if(annotation == null)
        return;
    //var iconUrl1 = getImagesFolder() + "Icon-small.png";
   // var iconUrl2 = getImagesFolder() + "ui-icons_454545_256x240.png";
    var noteFrame = "<div class='new_rect' id='noteFrame_" + actualIndex + "_" + annoIndex + "' style='font-family:Helvetica Neue;font-size:10px;border:1px solid #000000;position:absolute;z-index:10;'></div>";
    $("#docannotation_" + actualIndex).append(noteFrame);
    //$("#draw_canvas").append(noteFrame);
    var fillColor = "";
    var showLeft = 0;
    var showTop = 0;
    var noteFrameId = "noteFrame_"+actualIndex+"_"+annoIndex;
    if(annotation.Type == "notes")
    {
        fillColor = annotation.FillColor;
        showLeft = annotation.ShowLeft+annotation.ShowWidth;
        showTop = annotation.ShowTop+annotation.ShowHeight;
    }
    else if(annotation.Type == "replaceText")
    { 
        fillColor = annotation.OutLineColor;
        var viewerLeft = ZERO;//viewer.GetRefreshBlankLeft();
        var viewerTop = ZERO;//viewer.Top;
	    //if(_viewerMode == "multi")
	    //{
	    //    var showIndex = _fileDocument[curFileId].GetShowIndex(actualIndex);
	    //    viewerTop += PreCountHeight(showIndex);
	    //}
        showLeft = viewerLeft + annotation.EndLeft * zoomValue;
        showTop = viewerTop + annotation.EndTop * zoomValue;
    }
    if(!showNoteFrameArray.in_array(noteFrameId))
        showNoteFrameArray.push(noteFrameId);
    $("#"+noteFrameId).css({
        left: showLeft + "px",
        top: showTop + "px",
        width: noteFrameW + "px",
        height: noteFrameH + "px",
        background: fillColor,
        display:"block"
    });
    annotation.noteLeft = showLeft;
    annotation.noteTop = showTop;
    
    var frameTitle = "<div style='width:100%;height:32px;'><div class='frameIcon' style='margin-top:5px;margin-left:5px;margin-right:2px;width:25px;height:25px;float:left;'></div><div style='line-height:32px;float:left;margin-left:5px;'>" + showText + "</div><div class='poptitleimage' id='close_" + actualIndex + "_" + annoIndex + "' style='margin-right:5px;margin-top:7px;width:17px;height:17px;float:right;cursor:pointer;' onclick='hideNoteFrame(this);'></div></div>";
    $("#"+noteFrameId).append(frameTitle);
    var frameContent = "<textarea id='content_" + annoIndex + "' style='width:233px;height:108px;margin:10px 5px;border:1px solid #000000;resize:none;' onchange='setframetext(this," + actualIndex + "," + annoIndex + ")'>" + annotation.ShowedText + "</textarea>";
    $("#"+noteFrameId).append(frameContent);
    
    $("#" + noteFrameId).draggable({ containment: "#page_" + actualIndex, drgZoomValue: zoomValue, scroll: false, start: function (e) { NotePosiMouseDown(e); }, stop: function (e) { NotePosiMouseUp(e, actualIndex, annoIndex);  } });
    $("#" + noteFrameId).smartMenu(annoMenuAct, { name: annoIndex });


    var frameGoId = "#" + noteFrameId
    if (!draggableNumArray.in_array(frameGoId))
        draggableNumArray.push(frameGoId);

    CreateNoteLine(actualIndex,annoIndex);
    NoteHover("#"+noteFrameId);
    if(flag)
        annotation.isNoteFrameShow = true;
    else
    {
        $("#"+noteFrameId).hide();
        annotation.isNoteFrameShow = false;
    }
}


function setframetext(textbox, actualIndex, annoIndex) {
    
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    var annotation = viewer.Annotations[annoIndex];
    if (annotation == null)
        return;
    annotation.ShowedText = textbox.value;
}
var noteDownX = 0;
var noteDownY = 0;
var noteUpX = 0;
var noteUpY = 0;
var NotePosiMouseDown = function(e)
{
    e = e || window.event;
    noteDownX = e.pageX;
    noteDownY = e.pageY;
}

var NotePosiMouseUp = function(e,actualIndex,annoIndex)
{
    e = e||window.event;
    noteUpX = e.pageX;
    noteUpY = e.pageY;
    var move_x = noteUpX - noteDownX;
    var move_y = noteUpY - noteDownY;
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    var viewerLeft = ZERO;// viewer.GetRefreshBlankLeft();
    var viewerTop = ZERO;//viewer.Top;
    //if(_viewerMode == "multi")
    //{
    //    var showIndex = _fileDocument[curFileId].GetShowIndex(actualIndex);
	//    viewerTop += PreCountHeight(showIndex);
	//}
	var viewerML = viewerLeft + viewer.ActualWidth - noteFrameW;
	var viewerMT = viewerTop + viewer.ActualHeight - noteFrameH;
    var annotation = viewer.Annotations[annoIndex];
    var noteLeft = annotation.noteLeft + move_x;
    var noteTop = annotation.noteTop + move_y;
    noteLeft = noteLeft > viewerLeft ? (noteLeft < viewerML ? noteLeft : viewerML) : viewerLeft;
    noteTop = noteTop > viewerTop ? (noteTop < viewerMT ? noteTop : viewerMT) : viewerTop;
    annotation.noteLeft = noteLeft;
    annotation.noteTop = noteTop;
    ChangeNotePosi(actualIndex,annoIndex);
}

var showNoteFrameArray = new Array();
function showNoteFrame(curItem)
{
    if(isEditPdfText || isAddPDFImg || isAddPdftext)
        return;
    else
    {
        var annoIndex = curItem.id.substring(curItem.id.indexOf("_")+1);
        var actualIndex = "";
        var fileDoc = _fileDocument[curFileId];
        for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
        {
            var tempIndex = fileDoc.ViewerPageIndex[i];
            var viewer = _fileDocument[curFileId].Viewers[tempIndex];
            if(viewer.Annotations[annoIndex] != null)
            {
                actualIndex = tempIndex;
                break;
            }
        }
        var noteFrameId = "noteFrame_"+actualIndex+"_"+annoIndex;
        if(!showNoteFrameArray.in_array(noteFrameId))
            showNoteFrameArray.push(noteFrameId);
        $("#"+noteFrameId).show();
        _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex].isNoteFrameShow = true;
    }
}

function hideNoteFrame(curItem)
{
    var id = curItem.id;
    var posi = id.indexOf("_");
    var tempId = id.substring(posi+1);
    var noteFrameId = "noteFrame_"+tempId;
    showNoteFrameArray.remove(noteFrameId);
    $("#"+noteFrameId).hide();
    posi = tempId.indexOf("_");
    var actualIndex = tempId.substring(0,posi);
    var annoIndex = tempId.substring(posi+1);
    _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex].isNoteFrameShow = false;
    return false;
}

function ChangeNotePosi(actualIndex,annoIndex)
{
    $("#noteLeadline_"+actualIndex+"_"+annoIndex).remove();
    CreateNoteLine(actualIndex,annoIndex);
}

function CreateNoteLine(actualIndex,annoIndex)
{
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    if(viewer == null || viewer.Annotations[annoIndex] == null)
        return;
    annotation = viewer.Annotations[annoIndex];
    var pointsX = new Array();
    var pointsY = new Array();
    var fillColor = "";
    if(annotation.Type == "notes")
    {
        pointsX[0] = annotation.ShowLeft + annotation.ShowWidth;
        pointsY[0] = annotation.ShowTop + annotation.ShowHeight;
        pointsX[1] = annotation.noteLeft;
        pointsY[1] = annotation.noteTop;
        fillColor = annotation.FillColor
    }
    else if(annotation.Type == "replaceText")
    {
        var viewerLeft = ZERO;// viewer.GetRefreshBlankLeft();
        var viewerTop = ZERO;// viewer.Top;
	    //if(_viewerMode == "multi")
	    //{
	    //    var showIndex = _fileDocument[curFileId].GetShowIndex(actualIndex);
	    //    viewerTop += PreCountHeight(showIndex);
	    //}
        pointsX[0] = viewerLeft + annotation.EndLeft * zoomValue;
        pointsY[0] = viewerTop + annotation.EndTop * zoomValue;
        pointsX[1] = annotation.noteLeft;
        pointsY[1] = annotation.noteTop;
        fillColor = annotation.OutLineColor;
    }
    var tempLeft = pointsX.min();
    var tempWidth = pointsX.max() - tempLeft;
    var tempTop = pointsY.min();
    var tempHeight = pointsY.max() - tempTop;
    var strPoints = (pointsX[0] - tempLeft) + "," + (pointsY[0] - tempTop) + " " + (pointsX[1] - tempLeft) + "," + (pointsY[1] - tempTop);
    var noteLeadline = "<div class='new_rect' id='noteLeadline_" + actualIndex + "_" + annoIndex + "' style='position:absolute;left:" + tempLeft + "px;top:" + tempTop + "px;width:" + tempWidth + "px;height:" + tempHeight + "px;'><svg class='svg' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'><polyline points='" + strPoints + "' style='fill:none;stroke:" + fillColor + ";stroke-width:3;opacity:0.8'/></svg></div>";
    $("#docannotation_" + actualIndex).append(noteLeadline);
    //$("#draw_canvas").append(noteLeadline);
}

function NoteHover(target)
{
    var actualIndex = "";
    var annoIndex = "";
    if(target.indexOf("noteFrame") != -1)
    {
        var tempId = target.substring(target.indexOf("_")+1);
        var posi = tempId.indexOf("_");
        actualIndex = tempId.substring(0,posi);
        annoIndex = tempId.substring(posi+1);
    }
    else
    {
        annoIndex = target.substring(target.lastIndexOf("_")+1);
        var fileDoc = _fileDocument[curFileId];
        for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
        {
            var tempIndex = fileDoc.ViewerPageIndex[i];
            var viewer = _fileDocument[curFileId].Viewers[tempIndex];
            if(viewer.Annotations[annoIndex] != null)
            {
                actualIndex = tempIndex;
                break;
            }
        }
    }
    $(target).hover
	(
	    function()
		{
		    if(showNoteFrameArray.in_array("noteFrame_"+actualIndex+"_"+annoIndex))
		        $("#noteLeadline_"+actualIndex+"_"+annoIndex).show();
		},
		function()
		{
		    $("#noteLeadline_"+actualIndex+"_"+annoIndex).hide();
		}
	)
}

function AnnoIsChanged(AnnotId, actualIndex)
{
    var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[AnnotId];
    if (typeof (annotation)=="undefined" || annotation == null || annotation.IsChanged)
        return;
    if (annotation.Type == "textbox" || annotation.Type == "freehand") {
        $("#annotationtextapp_" + annotation.Index).remove();
        $("#svg_" + annotation.Index).show();
    }
    annotation.IsChanged = true;
    
}

function addImageViewerAnnotation(actualIndex, annoIndex, left, top, width, height, annoType, nScrollLeft, nScrollTop, isShadow, options)
{
    if (width <= 0)
        width = 1;
    if (height <= 0)
        height = 1;
    var strPoints = "";
    var singleStrPoints = "";
    var multiStrPoints = "";
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    viewer.GetViewerLeftTop();
    var fixvalue = 1;
    if (zoomValue < 2)
        fixvalue = 2;
    var fixleft = viewer.GetRefreshBlankLeft() - 1 * zoomValue;
    
    var countHeight = 0;
    if (_viewerMode == "single")
    {
        countHeight = viewer.Top;
    } else {
        countHeight = PreCountHeight(viewer.ShowIndex);
    }

    var fixtop = countHeight+1 * zoomValue;
    if (annoType == "line" || annoType == "arrow" || annoType == "dimension" || annoType == "polygon" || annoType == "Polygonlines" || annoType == "freehand") {
        var x_min = x_points.min();
        var y_min = y_points.min();
        var x_max = x_points.max();
        var y_max = y_points.max();

        var width_max = x_max - x_min;
        var height_max = y_max - y_min;
        if ((width_max == 0 && height_max == 0) || x_points.length == 0 || x_points.length == 1)
            return;
        for (var i = 0; i < x_points.length; i++) {
            strPoints += (x_points[i] - fixleft) + "," + (y_points[i] - fixtop) + ";";
        }
        strPoints = strPoints.substring(0, strPoints.length - 1);
        left = x_min - fixleft;
        top = y_min - fixtop;
        width = width_max;
        height = height_max;
    } else {
        left -= fixleft;
        top -= fixtop;
    }
    var docAnno = new Annotation({ OnPageIndex: actualIndex, Type: annoType, Index: annoIndex, ShowLeft: left, ShowTop: top, ShowWidth: width, ShowHeight: height, ZoomValue: zoomValue, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
    if (typeof (options) != "undefined" && options != null && options != "" && docAnno.Type) {
        if (options.ShowedText != "undefined" && options.ShowedText != null && options.ShowedText != "") {
            docAnno.ShowedText = options.ShowedText;
        }
        if (options.OutLineWidth != "undefined" && options.OutLineWidth != null && options.OutLineWidth != "") {
            docAnno.OutLineWidth = options.OutLineWidth;
        }
        if (options.OutLineColor != "undefined" && options.OutLineColor != null && options.OutLineColor != "") {
            docAnno.OutLineColor = options.OutLineColor;
        }
        if (options.FillColor != "undefined" && options.FillColor != null && options.FillColor != "") {
            docAnno.FillColor = options.FillColor;
        }
        if (options.FontColor != "undefined" && options.FontColor != null && options.FontColor != "") {
            docAnno.TxtFontColor = options.FontColor;
        }
        if (options.FontSize != "undefined" && options.FontSize != null && options.FontSize != "") {
            docAnno.TxtFontSize = options.FontSize;
        }
        if (options.FontName != "undefined" && options.FontName != null && options.FontName != "") {
            docAnno.TxtFont = options.FontName;
        }
       
        docAnno.LeaderExtend = options.LeaderExtend;
        docAnno.LeaderOffset = options.LeaderOffset;
        docAnno.LeaderLength = options.LeaderLength;
     
        if (options.CustomStampName != "undefined" && options.CustomStampName != null) {
            docAnno.CStamp = true;
            docAnno.CStampid = options.CustomStampName;
        }
        if (options.checkSTime != "undefined" && options.checkSTime != null && options.checkSTime == true) {
            var check = $("#isstamtime")[0].checked;
            if (check==true) {
                var time = new Date();
                if (stamptimeformate == null || stamptimeformate == "") {
                    docAnno.STime = time.format("yyyy-MM-dd");
                } else {
                    var timefm = stamptimeformate.match(/{(\S*)}/)[1];
                    var pre= stamptimeformate.match(/(\S*){/)[1];
                    var lt=stamptimeformate.match(/}(\S*)/)[1];
                    docAnno.STime = pre + "" + time.format(timefm) + "" + lt;
                }
            }
        }
    }
    var borderWidth = (docAnno.OutLineWidth / 2 * zoomValue + 3) || 0;
    if (docAnno.Type == "stamp" || docAnno.Type == "fileattach" || docAnno.Type == "notes")
        borderWidth = 0;
    var append_string = "<div class='new_rect' id='div_" + annoIndex + "'  annotype='" + docAnno.Type + "' style='left:" + (left - borderWidth) + "px;top:" + (top - borderWidth) + "px;width:" + (width + 2 * borderWidth) + "px;height:" + (height + 2 * borderWidth) + "px'>";
    if (annoType == "line" || annoType == "arrow" || annoType == "dimension")
        append_string += addLineOrArrowHandler(annoType,x_points,y_points,annoIndex,borderWidth);
    else if (annoType == "notes" || annoType=="text") {
        if(docAnno.ModifiedDate=="")
            docAnno.ModifiedDate = getTimeString();
    } else if (annoType == "fileattach") {
        docAnno.Attachpath = tempFilepath;
        docAnno.Attachname = tempFilename;
    }
    else
    {
        append_string += "<div class='rRightDown' id='rRightDown_" + annoIndex + "'></div><div class='rLeftDown' id='rLeftDown_"
	    + annoIndex + "'></div><div class='rRightUp' id='rRightUp_" + annoIndex + "'></div><div class='rLeftUp' id='rLeftUp_"
	    + annoIndex + "'></div><div class='rRight' id='rRight_" + annoIndex + "'></div><div class='rLeft' id='rLeft_"
	    + annoIndex + "'></div><div class='rUp' id='rUp_" + annoIndex + "'></div><div class='rDown' id='rDown_" + annoIndex + "'></div>";
    }
	append_string += drawAnnotationWithSVG(docAnno,"annotation",actualIndex,false,isShadow);
	append_string += "</div>";
	$("#docannotation_" + actualIndex).append(append_string);
	//$("#draw_canvas").append(append_string);
	if(annoType == "notes")
	{
	   // var src =getImagesFolder()+"Icon-small.png";
	    //	$("#annotation_"+annoIndex).css("background","url('" + src + "') no-repeat -486px -7px");
	   // $("#annotation_" + annoIndex).removeClass("noteimage");
	    //$("#annotation_" + annoIndex).addClass("noteimage");
	    target = document.getElementById("annotationnoteimg_" + annoIndex);
	    setTransform(target, 'scale(' + zoomValue + ')');
	} else if (annoType == "fileattach") {
	   
	    var textAnno = document.getElementById("annotation_" + annoIndex);

	    textAnno.ondblclick = function (event) {
	        if (isSharePoint)
	            return;
	        window.open(getCacheFolder() + docAnno.Attachpath);
	    };
	}
	if (annoType == "textbox" || annoType == "text")
	{
	    var text_shown = $("#text_"+annoIndex).val();
	    if(text_shown != null)
	        docAnno.ShowedText = text_shown;
	    var textAnno = document.getElementById("annotation_"+annoIndex);
	    textAnno.ondblclick = function(event)
	    {
	        EditText(textAnno);
	        if (event.preventDefault)
	            event.preventDefault();
	        if (event.returnValue)
	            event.returnValue = false;
	    };
	}
	_fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex] = docAnno;
	selectDiv = new Array();
	selectDiv.push(annoIndex);
	BindImageViewerAnnotationClick("annotation",annoIndex);
	BindResize(annoIndex,annoType);
	noSelectAnno();
}

var curHideTextAnnoId = "";
function EditText(textAnno)
{
    selectId = (textAnno.id);
    try{
        idPosition = selectId.indexOf("_");
    } catch (e) {
        return;
    }
	selectTextId = selectId.substring(idPosition + 1);
	oText = document.getElementById("text_"+selectTextId);
	oText.style.visibility = "visible";
	$(".rRightDown").css("visibility", "hidden");
	$(".rLeftDown").css("visibility", "hidden");
	$(".rLeftUp").css("visibility", "hidden");
	$(".rRightUp").css("visibility", "hidden");
	$(".rRight").css("visibility", "hidden");
	$(".rLeft").css("visibility", "hidden");
	$(".rUp").css("visibility", "hidden");
	$(".rDown").css("visibility", "hidden");
	$(".top").css("visibility", "hidden");
	$(".bottom").css("visibility", "hidden");
	$(".shadow").css("visibility","hidden"); 
	oText.focus();
    var len = oText.value.length;
    if (document.selection) {
        var sel = oText.createTextRange();
        sel.moveStart('character',len);
        sel.collapse();
        sel.select();
    } 
    else if (typeof oText.selectionStart == 'number' && typeof oText.selectionEnd == 'number')
    {
        oText.selectionStart = oText.selectionEnd = len;
    }
    for(var i=0;i<_fileDocument[curFileId].Viewers.length;i++)
	{
	    var viewer = _fileDocument[curFileId].Viewers[i];
	    if(viewer == null || viewer.ShowIndex == null)
		{continue;}
	    if(viewer.Annotations[selectTextId] != null)
	    {
	        pageId = i;
	        break;
	    }
	}
	if(pageId == null)
	    return;
	var annotation = _fileDocument[curFileId].Viewers[pageId].Annotations[selectTextId];
	AnnoIsChanged(selectTextId, pageId);
    //$("#text_"+selectTextId+"").css("margin-top",annotation.OutLineWidth+"px");
   // $("#text_"+selectTextId+"").css("margin-left",annotation.OutLineWidth+"px");
   // $("#text_"+selectTextId+"").css("width",annotation.ShowWidth - 8-annotation.OutLineWidth/2);
   // $("#text_"+selectTextId+"").css("height",annotation.ShowHeight - 8-annotation.OutLineWidth/2);
    curHideTextAnnoId = selectId;
}

function addLineOrArrowHandler(type,x_points,y_points,annoIndex,borderWidth)
{
    var x0;var y0;var x1;var y1;
    var offset0X;var offset0Y;var offset1X;var offset1Y;
    if(type == "line")
    {
        x0 = x_points[0];y0 = y_points[0];
        x1 = x_points[1]; y1 = y_points[1];
        x_points = x_points.slice(0, 2);
        y_points = y_points.slice(0, 2);
    }
    else if(type == "arrow")
    {
        x0 = x_points[0];y0 = y_points[0];
        x1 = x_points[1]; y1 = y_points[1];
        x_points = x_points.slice(0, 4);
        y_points = y_points.slice(0, 4);
    } else if (type == "dimension") {
        x0 = x_points[0];y0 = y_points[0];
        x1 = x_points[1]; y1 = y_points[1];
        x_points = x_points.slice(0, 20)
        y_points = y_points.slice(0, 20);
    }
    var x_min=x_points.min();
	var y_min=y_points.min();
	var x_max=x_points.max();
    var y_max=y_points.max();
    offsetFirstX = x0 - x_min - 3;
    offsetFirstY = y0 - y_min - 3;
	offsetSecondX = x1 - x_min - 3;
	offsetSecondY = y1 - y_min - 3;
    var tempstr = ""; 
	tempstr = "<div id='rRightDown_"+annoIndex+"'></div><div id='rLeftDown_"+annoIndex+"'></div><div class='top' id='top_"
	+annoIndex+"' style='left:"+offsetFirstX+"px;top:"+offsetFirstY+"px;'></div><div id='rRightUp_"+annoIndex+"'></div><div class='bottom' id='bottom_"
	+annoIndex+"' style='left:"+offsetSecondX+"px;top:"+offsetSecondY+"px;'></div><div id='rLeftUp_"+annoIndex+"'></div><div id='rRight_"+annoIndex+"'></div><div id='rLeft_"
	+annoIndex+"'></div><div id='rUp_"+annoIndex+"'></div><div id='rDown_"+annoIndex+"'></div>"; 
	return tempstr;
}

function addThumbViewerAnnotation(annotation,actualIndex)
{
    if(annotation == null || annotation.Index == null)
        return;
    var append_string = "<div class='thumb_rect' id='thumbImg_"+annotation.Index+"' style='left:"+annotation.ThumbShowLeft+"px;top:"+annotation.ThumbShowTop+"px;width:"+annotation.ThumbShowWidth+"px;height:"+annotation.ThumbShowHeight+"px;'>";
    append_string += drawAnnotationWithSVG(annotation,"thumbAnnotation",actualIndex,true,false);
    append_string += "</div>";
    $("#thumbDiv_"+actualIndex).append(append_string);
}

function CompleteDraw(actualIndex,annoType,annoIndex)
{
    var date = getTimeString();
    if (_fileDocument[curFileId].Viewers[actualIndex] != null && _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex]!=null)
        _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex].ModifiedDate = date;
    
    AddAnnoToCommentsPanel(actualIndex,annoType,annoIndex,date);
    var tempArray = new Array();
    for(var i=0;i<draggableNumArray.length;i++)
    {
        var tempNum = draggableNumArray[i];
        if($(tempNum)[0] == null)
            tempArray.push(tempNum);
        else
            $(draggableNumArray[i]).draggable("enable");
    }
    for(var i=0;i<tempArray.length;i++)
        draggableNumArray.remove(tempArray[i]);
    if (continueDrawAnnotation && (_annotationLastType == "stamp" || _annotationLastType == "freehand" || _annotationLastType == "arrow" || _annotationLastType == "line" || _annotationLastType == "dimension" || _annotationLastType == "rectangle" || _annotationLastType == "circle"))
        return;
    else {
        curAnnoType = "";
    }
    if(curCursorStyle == "select")
        ArrowEvent();
    else if(curCursorStyle == "move")
        HandleEvent();
}

function AnnoOnPageIndex(annoIndex)
{
    var fileDoc = _fileDocument[curFileId];
    for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
    {
        var tempIndex = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[tempIndex];
        if(viewer.Annotations[annoIndex] != null)
        {
            pageId = tempIndex;
            break;
        }
    }
    return pageId;
}
var redactTextPanel = {
    text: "Show Marked Text ...",
    func: function () {
        var deleteId = this.id;
        var tempId = deleteId.substring(deleteId.indexOf("_") + 1);
        var actualIndex = 0;
        var annoIndex = 0;
        if (deleteId.indexOf("comment") != -1) {
            actualIndex = tempId.substring(0, tempId.indexOf("_"));
            annoIndex = tempId.substring(tempId.indexOf("_") + 1);
        }
        else {
            if (tempId.indexOf("_") != -1)
                tempId = tempId.substring(0, tempId.indexOf("_"));
            annoIndex = tempId;
            actualIndex = AnnoOnPageIndex(annoIndex);
        }
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        if (viewer == null || viewer.Annotations[annoIndex] == null)
            return;
        var annotation = viewer.Annotations[annoIndex];
        if (annotation.Type == "redact")
        {
            $("#_redacttextcontent").html(annotation.redactText);
            ShowRedactTextBox();

        }
    }
};
var redactMore = {
    text: "Apply to Multiple Pages...",
    func: function () {
        var deleteId = this.id;
        var tempId = deleteId.substring(deleteId.indexOf("_") + 1);
        var actualIndex = 0;
        var annoIndex = 0;
        if (deleteId.indexOf("comment") != -1) {
            actualIndex = tempId.substring(0, tempId.indexOf("_"));
            annoIndex = tempId.substring(tempId.indexOf("_") + 1);
        }
        else {
            if (tempId.indexOf("_") != -1)
                tempId = tempId.substring(0, tempId.indexOf("_"));
            annoIndex = tempId;
            actualIndex = AnnoOnPageIndex(annoIndex);
        }
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        if (viewer == null || viewer.Annotations[annoIndex] == null)
            return;
        var annotation = viewer.Annotations[annoIndex];
        if (annotation.Type == "redact") {
            currentredact = annotation;
            showRedactAreaPagesBox(true);
        }
    }
}
var annoDelete = {
    text:"Delete",
    func:function()
    {
        var deleteId = this.id;
        deleteOneAnnotation(deleteId);
    },
};

function deleteOneAnnotation(deleteId) {
    var tempId = deleteId.substring(deleteId.indexOf("_") + 1);
    if (deleteId.indexOf("comment") != -1 || deleteId.indexOf("noteFrame") != -1) {
        var actualIndex = tempId.substring(0, tempId.indexOf("_"));
        var annoIndex = tempId.substring(tempId.indexOf("_") + 1);

        $("#div_" + annoIndex).remove();
        $("#thumbImg_" + annoIndex).remove();
        $("#comment_" + actualIndex + "_" + annoIndex).remove();
        removeAnnoFromCommentsPanel();
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        if (viewer == null || viewer.Annotations[annoIndex] == null)
            return;
        if (viewer.Annotations[annoIndex].Type == "notes" || viewer.Annotations[annoIndex].Type == "replaceText")
            $("#noteFrame_" + actualIndex + "_" + annoIndex).remove();
        else if (viewer.Annotations[annoIndex].Type == "redact")
            redactAnnoNum--;
        viewer.Annotations[annoIndex] = null;
    }
    else {
        if (tempId.indexOf("_") != -1)
            tempId = tempId.substring(0, tempId.indexOf("_"));
        var actualIndex = _fileDocument[curFileId].DeleteAnno(tempId);
        $("#div_" + tempId).remove();
        $("#thumbImg_" + tempId).remove();
        $("#comment_" + actualIndex + "_" + tempId).remove();
        removeAnnoFromCommentsPanel();
    }
}

var annoRefresh={
    text: "Refresh Dimension",
    func:function()
    {
        var deleteId = this.id;
        var tempId = deleteId.substring(deleteId.indexOf("_") + 1);
        var actualIndex = 0;
        var annoIndex = 0;
        if (deleteId.indexOf("comment") != -1) {
            actualIndex = tempId.substring(0, tempId.indexOf("_"));
            annoIndex = tempId.substring(tempId.indexOf("_") + 1);
        }
        else {
            if (tempId.indexOf("_") != -1)
                tempId = tempId.substring(0, tempId.indexOf("_"));
            annoIndex = tempId;
            actualIndex = AnnoOnPageIndex(annoIndex);
        }
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        if (viewer == null || viewer.Annotations[annoIndex] == null)
            return;
        var annotation = viewer.Annotations[annoIndex];
        if (annotation.Type == "dimension")
            annotation.ShowedText = "";
        $("#div_" + annoIndex).remove();
        drawImageViewerAnnotation(annotation);
    },

};
var annoDownload = {
    text: "Open Attached File",
    func: function () {
        var deleteId = this.id;
        var tempId = deleteId.substring(deleteId.indexOf("_") + 1);

        if (deleteId.indexOf("comment") != -1 || deleteId.indexOf("noteFrame") != -1) {
            var actualIndex = tempId.substring(0, tempId.indexOf("_"));
            var annoIndex = tempId.substring(tempId.indexOf("_") + 1);

            $("#annotation_" + annoIndex).trigger("ondblclick");
        }
        else {
            if (tempId.indexOf("_") != -1)
                tempId = tempId.substring(0, tempId.indexOf("_"));
            $("#annotation_" + tempId).trigger("ondblclick");
        }

       
    },
};

var proIdArray = new Array("outlineWidth", "outlineColor", "fillColor", "transparency", "fontsize", "fontcolor", "stamptext", "fontname", "leaderlength", "leaderoffset", "leaderextend");
var curAnnoInfo = "";
var curOutLineColor = "";
var curFontColor = "";
var curFillColor = "";
var curTextColor = "";
var annoProp = {
    text:"Properties...",
    func:function()
    {
        var deleteId = this.id;
        var tempId = deleteId.substring(deleteId.indexOf("_")+1);
        var actualIndex = 0;
        var annoIndex = 0;
        if(deleteId.indexOf("comment") != -1)
        {
            actualIndex = tempId.substring(0,tempId.indexOf("_"));
            annoIndex = tempId.substring(tempId.indexOf("_")+1);
        }
        else
        {
            if(tempId.indexOf("_") != -1)
                tempId = tempId.substring(0,tempId.indexOf("_"));
            annoIndex = tempId;
            actualIndex = AnnoOnPageIndex(annoIndex);
        }
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        if(viewer == null || viewer.Annotations[annoIndex] == null)
            return;
        var annotation = viewer.Annotations[annoIndex];
        curAnnoInfo = annotation.Type + ";" + actualIndex + ";" + annoIndex;
        if (annotation.Type == "stamp" && annotation.STID != "") {
            alert(i18n['content']['NoOperationOnSavedStamp'] || "The content of this stamp can not be modified.");
            return;
        }
        var typename = annotation.Type;
        if (typename == "circle")
            typename = "Oval";
        else if (typename == "fileattach")
            typename = "Attach File";
            typename = typename.replace(/(\w)/, function (v) { return v.toUpperCase() });
        if(annotation.Type != "redact")
        {
            ShowAnnoPropWindow();
            $("#_propTitle").html(typename + " Properties");
            for(var i=0;i<proIdArray.length;i++)
            {
                $("#"+proIdArray[i]).show();
                $("#_" + proIdArray[i]).show();
                $("#follow" + proIdArray[i]).show();
            }
            var tempHideArray = new Array();
            var classOne= new Array("strike","replaceText","underLine","freehand","line","Polygonlines","arrow","dimension");
            var classTwo = new Array("highText", "notes","fileattach");
            var classThr = new Array("strike", "underLine", "replaceText");
            var classFour = new Array("textbox", "stamp","text");
            
            $("#fillColor").html("FillColor:")
            $("#outlineWidth").html("Width:");
            $("#outlineColor").html("Color:");

            if(classOne.in_array(annotation.Type))
            {
                tempHideArray.push("fillColor");
                tempHideArray.push("fontsize");
                if (annotation.Type!="dimension")
                tempHideArray.push("fontcolor");
                tempHideArray.push("stamptext");
                tempHideArray.push("fontname");
                if(classThr.in_array(annotation.Type))
                    tempHideArray.push("outlineWidth");
       
            }
            else if(classTwo.in_array(annotation.Type))
            {
                tempHideArray.push("outlineWidth");
                tempHideArray.push("outlineColor");
                tempHideArray.push("fontsize");
                tempHideArray.push("fontcolor");
                tempHideArray.push("stamptext");
                tempHideArray.push("fontname");
                $("#fillColor").html("Color:")
            } else if (classFour.in_array(annotation.Type)) {
                tempHideArray.push("fillColor")
                if (annotation.Type == "stamp"){
                    tempHideArray.push("fontsize");
                    tempHideArray.push("fontname");
                }
                else if (annotation.Type == "textbox"){
                    tempHideArray.push("stamptext");
                    tempHideArray.push("fontname");
                }
                else if (annotation.Type == "text") { 
                    tempHideArray.push("stamptext");
                    tempHideArray.push("outlineWidth");
                    tempHideArray.push("outlineColor");
                }
         
            } else {
                tempHideArray.push("fontsize")
                tempHideArray.push("stamptext");
                tempHideArray.push("fontcolor");
                tempHideArray.push("fontname");
            }
            if (annotation.Type != "dimension") {
                tempHideArray.push("leaderlength")
                tempHideArray.push("leaderoffset");
                tempHideArray.push("leaderextend");
            } else { 
                $("#_leaderlength").val(parseInt(annotation.LeaderLength));
                $("#_leaderoffset").val(parseInt(annotation.LeaderOffset));
                $("#_leaderextend").val(parseInt(annotation.LeaderExtend));
            }

            for(var j=0;j<tempHideArray.length;j++)
            {
                $("#"+tempHideArray[j]).hide();
                $("#_" + tempHideArray[j]).hide();
                $("#follow" + tempHideArray[j]).hide();
            }  
            if(!classTwo.in_array(annotation.Type))
            {
                if(!classThr.in_array(annotation.Type))
                    $("#_outlineWidth").val(annotation.OutLineWidth).attr("selected",true);
                curOutLineColor = annotation.OutLineColor;
                if(curOutLineColor.indexOf("#") != -1)
                    $("#_outlineColor").html(curOutLineColor.substring(1));
                else
                    $("#_outlineColor").html(curOutLineColor);
                $("#_outlineColor").css("background",curOutLineColor);
            }
            if(!classOne.in_array(annotation.Type))
            {
                curFillColor = annotation.FillColor;
                
                if(curFillColor.indexOf("#") != -1)
                    $("#_fillColor").html(curFillColor.substring(1));
                else
                    $("#_fillColor").html(curFillColor);
                if (curFillColor == "none" || curFillColor == "#none")
                    $("#_fillColor").html("No Color");
                $("#_fillColor").css("background",curFillColor);
            }
            if (classFour.in_array(annotation.Type) || annotation.Type == "dimension") {
                if (annotation.Type == "dimension")
                    curFontColor = annotation.TxtFontColor || "#000000";
                 else
                    curFontColor = annotation.TxtFontColor || "red";
             
                if (curFontColor.indexOf("#") != -1)
                    $("#_fontColor").html(curFontColor.substring(1));
                else
                    $("#_fontColor").html(curFontColor);
                $("#_fontColor").css("background", curFontColor);
                if (annotation.Type == "stamp") {
                    if (annotation.STID == "")
                        $("#_stamptext").val(annotation.ShowedText);
                    $("#_outlineWidth").val(parseInt(annotation.OutLineWidth + 0.5)).attr("selected", true);
                }
                else if (annotation.Type == "textbox") {
                    $("#_fontsize").find("option[value='" + (annotation.TxtFontSize || 12) + "']").attr("selected", true);
                    $("#_outlineWidth").val(parseInt(annotation.OutLineWidth+0.5)).attr("selected", true);
                } else if (annotation.Type == "text") {
                  //  $("#_fontsize").find("option[value='" + (annotation.TxtFontSize || 12) + "']").attr("selected", true);
                    $("#_fontname").val(annotation.TxtFont || "Arial").attr("selected", true);
                    $("#_fontsize").val((annotation.TxtFontSize || 12)).attr("selected", true);
                    //$("#_fontname").find("option[value='" + (annotation.TxtFont) + "']").attr("selected", true);
                }
            }

            $("#_transparency").val(annotation.Transparency).attr("selected",true);
        }
        else
        {
            showRedactProps(curAnnoInfo);
        }
    }
};

var annoCommentPanel = {
    text:"Show/Hide Comment Panel",
    func:function()
    {
        //var src = getImagesFolder() + "arrow.png";
        if(rightSideShow)
        {
            rightSideShow = false;
            $("#_rImg").addClass("rightArrowEn");
            $("#_rImg").removeClass("rightArrowDis");
            //$("#_rImg").css("background","url('" + src + "') no-repeat -2px 0px");   
            $("#wdp_RightSidebar").hide();
            contentWidth += rightSidebarWidth;
            contentWidth +=0;
            rightSidebarWidth = 0;
        }
        else
        {
            rightSideShow = true;
            $("#_rImg").addClass("rightArrowDis");
            $("#_rImg").removeClass("rightArrowEn");
            //$("#_rImg").css("background","url('" + src + "') no-repeat -71px 0px");
            $("#wdp_RightSidebar").show();
            rightSidebarWidth = 246;
            contentWidth -= rightSidebarWidth;
            contentWidth -= 0;
        }
        var docWidth = contentWidth - 25;
        _docWidth = docWidth - 17;
        $("#wdp_Viewer").width(contentWidth+"px");
        $("#wdp_Content").width((contentWidth-25)+"px");
        $("#draw_canvas").width(_docWidth+"px");
        if(_fid != null && _fid !="")
	    {
	        _fileDocument[curFileId].ChangeState();
            var curPg = parseInt(_curCorrectPageId);
            actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
            var viewer = _fileDocument[curFileId].Viewers[actualIndex];
            Adaptive(viewer);
		    var curPosi = $("#wdp_Content").scrollTop();
		    ChangeViewerPosition(actualIndex);
		    resizeDocViewerByCSS3("imgBig",actualIndex);
		    $("#wdp_Content").scrollTop(curPosi);
		    ImageViewerAnnotationResize(actualIndex);
		    changePosition();
       }
    }
};

var annoMenuAct = [[annoProp, annoDelete, annoCommentPanel]];
var annoMenuActDimension = [[annoProp, annoRefresh,annoDelete, annoCommentPanel]];
var annoMenuActNoProp = [[annoDelete, annoCommentPanel]];
var annoMenuActFileattach = [[annoDownload, annoDelete,annoCommentPanel]];
var annoMenuActRedactText = [[annoProp, redactTextPanel , annoDelete, annoCommentPanel]];
var annoMenuActRedactPage = [[annoProp, annoDelete,annoCommentPanel]];
var annoMenuActRedactArea = [[annoProp, redactMore , annoDelete, annoCommentPanel]];

var redactAnnoNum = 0;
function AddAnnoToCommentsPanel(actualIndex,annoType,annoIndex,date)
{
    //var iconUrl = getImagesFolder() + "Icon-small.png";
    //var ImgPosi = "no-repeat ";
    //var urlArray = annoUrl.split("|");
    var iconclass = "";
    if(annoType == "redact")
    {
       // iconUrl = getImagesFolder() + "Icon-small.png";
        //ImgPosi = " no-repeat -430px -7px;";
        iconclass = "smallicon_redact";
        redactAnnoNum++;
    } else if (annoType == "stamp") {
        //iconUrl = getImagesFolder() + "stampicon.png";
       // ImgPosi = " no-repeat;background-size:;";
        iconclass = "smallicon_stamp2";
    }
    else
    {
        iconclass = "smallicon_" + annoType;
        //for (var i = 0; i < urlArray.length; i++) {
        //    if (urlArray[i].indexOf(annoType) != -1) {
        //        ImgPosi += urlArray[i].split(":")[1] + " -8px";
        //        break;
        //    }
        //}
    }
    var commentInfo = "<div id='comment_"+actualIndex+"_"+annoIndex+"' style='cursor:default;font-size:12px;width:100%;height:35px;border-bottom:1px solid #ffffff;background:#565656;color:#ffffff;'></div>";
    $("#_commentsPanel").append(commentInfo);
    var commentTitle = $("#_commentList").html();
    var startPosi = commentTitle.indexOf("(");
    if(startPosi == -1)
        $("#_commentList").html("<span style='padding-left:15px;'>Comments  List (1) </span>");
    else 
    {
        var tempTitle = commentTitle.substring(startPosi+1);
        var annoNum = tempTitle.substring(0,tempTitle.indexOf(")"));
        $("#_commentList").html("<span style='padding-left:15px;'>Comments  List (" + (parseInt(annoNum) + 1) + ")</span>");
    }
 
    var imgDiv = "<div class='" + iconclass + "' style='margin-top:4px;margin-left:5px;margin-right:10px;width:25px;height:25px;float:left;'></div>";
    $("#comment_" + actualIndex + "_" + annoIndex).append(imgDiv);
    var gindex = _fileDocument[curFileId].GetShowIndex(actualIndex)+1;
  

    var txtDiv = "<div id='" + actualIndex + "_" + annoIndex + "_pg' class='commemnt_showpage' style='float:left;line-height:35px;'>Page " + (gindex) + "</div>"
    txtDiv += "<div style='float:left;line-height:35px;margin-left:10px;'>"+date+"</div>";
    $("#comment_"+actualIndex+"_"+annoIndex).append(txtDiv);
    $("#comment_" + actualIndex + "_" + annoIndex).bind("click", function () { JumpToTheAnno(actualIndex, annoIndex); });

    if (annoType == "stamp") {
        $("#comment_" + actualIndex + "_" + annoIndex).smartMenu(annoMenuActNoProp, { name: annoIndex });
    } else if (annoType == "fileattach") {
        $("#comment_" + actualIndex + "_" + annoIndex).smartMenu(annoMenuActFileattach, { name: annoIndex });
    } else {
        $("#comment_"+actualIndex+"_"+annoIndex).smartMenu(annoMenuAct,{name:annoIndex});
    }
    if(annoType == "notes" || annoType == "replaceText")
    {
        CreateNoteFrame(actualIndex,annoIndex,date,true);
        if(annoType == "notes")
        {
            var noteAnno = document.getElementById("div_"+annoIndex);
	        noteAnno.ondblclick = function(){showNoteFrame(noteAnno);};
	        NoteHover("#div_"+annoIndex);
        }
    }
}

function removeAnnoFromCommentsPanel(annoType)
{
    var commentTitle = $("#_commentList").html();
    var startPosi = commentTitle.indexOf("(");
    if(startPosi == -1)
        return;
    else 
    {
        var tempTitle = commentTitle.substring(startPosi+1);
        var annoNum = parseInt(tempTitle.substring(0,tempTitle.indexOf(")")));
        if(annoNum == 1)
            $("#_commentList").html("<span style='padding-left:15px;'>Comments  List </span>");
        else
            $("#_commentList").html("<span style='padding-left:15px;'>Comments  List (" + (annoNum - 1) + ") </span>");
    }
}

function JumpToTheAnno(actualIndex,annoIndex)
{
    var annotation = _fileDocument[curFileId].Viewers[actualIndex].Annotations[annoIndex];
    if(annotation == null)
        return;
    else
    {

        var scrollLeft = annotation.ShowLeft - 20 > 0 ? (annotation.ShowLeft - 20) : 0;
        $("#wdp_Content").scrollLeft(scrollLeft);
        var showindex=_fileDocument[curFileId].GetShowIndex(actualIndex)
        var goheight = PreCountHeight(showindex);

        var scrollTop = annotation.ShowTop - 20 > 0 ? (annotation.ShowTop - 20) : 0;
        $("#wdp_Content").scrollTop(scrollTop + goheight);
    }
}

function drawAnnotationWithSVG(Anno,annoTag,actualIndex,isThumb,isShadow)
{
    var AnnoStr = "";
    if(Anno.Type == "notes")
    {
        if(isThumb)
        {
            AnnoStr += "<div class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' style='width:" + Anno.ThumbShowWidth + "px;height:" + Anno.ThumbShowHeight + "px;opacity:" + Anno.Transparency + ";background:" + Anno.FillColor + "'></div>";
        }
        else
        {
            var tempWidth = noteImgWidth * zoomValue;
            var tempHeight = noteImgHeight * zoomValue;
            var imgTop = 0; 
            var imgLeft = 0;
		    if(zoomValue >= 1)
		    {
		        imgTop = noteImgWidth * (zoomValue-1)/2+3;
		        imgLeft = noteImgHeight * (zoomValue-1)/2+3;
             }

		  
		    if (Anno.FillColor == "")
		        Anno.FillColor = "#FFF000";
		    AnnoStr += "<div annotype='stamp' class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' style='width:" + tempWidth + "px;height:" + tempHeight + "px;opacity:" + Anno.Transparency + ";border:3px solid " + Anno.FillColor + ";'><div class='noteimage' id='" + annoTag + "noteimg_" + Anno.Index + "' style='position:absolute;width:28px;height:28px;top:"+imgTop+"px;left:"+imgLeft+"px;'></div>";
               ;
		    if (isShadow)
		        AnnoStr += "<svg class='annotation' id='svg_" + Anno.Index + "' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'><rect class='shadow shadow_" + Anno.Index + "' width='" + tempWidth * zoomValue + "' height='" + tempHeight * zoomValue + "' style='fill: none; stroke: rgb(0, 0, 255); stroke-width: 3; stroke-opacity: 0.5; '></rect></svg></div>"
                else
		    AnnoStr +="</div>"
		    $("#noteFrame_" + actualIndex + "_" + Anno.Index).css("background", Anno.FillColor);
        }
        return AnnoStr;
    } else if (Anno.Type == "fileattach") {
        if (isThumb) {
            AnnoStr += "<div annotype='fileattach' class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' style='width:" + Anno.ThumbShowWidth + "px;height:" + Anno.ThumbShowHeight + "px;opacity:" + Anno.Transparency + ";background:" + Anno.FillColor + "'></div>";
        }
        else {
            var tempWidth = noteImgWidth * zoomValue;
            var tempHeight = noteImgHeight * zoomValue;
            var imgTop = 0;
            var imgLeft = 0;
            if (zoomValue >= 1) {
                imgTop = noteImgWidth * (zoomValue - 1) / 2 + 3;
                imgLeft = noteImgHeight * (zoomValue - 1) / 2 + 3;
            }
            if (Anno.FillColor==null || typeof(Anno.FillColor) == "undefined" || Anno.FillColor == "")
                Anno.FillColor = "none";
            var fillcolor = "#FF9900";
            if (Anno.FillColor != "none")
                fillcolor = Anno.FillColor;
            AnnoStr += "<div class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "'  title='" + Anno.Attachname + "' style='width:" + tempWidth + "px;height:" + tempHeight + "px;opacity:" + Anno.Transparency + ";border:3px solid " + fillcolor + ";'><div class='attachicon' id='" + annoTag + "fileattachimg_" + Anno.Index + "' style='height:" + tempWidth + "px;width:" + tempHeight + "px'></div>";
            
            if (isShadow)
                AnnoStr += "<svg class='annotation' id='svg_" + Anno.Index + "' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'><rect class='shadow shadow_" + Anno.Index + "' width='" + tempWidth + "' height='" + tempHeight + "' style='fill: none; stroke: rgb(0, 0, 255); stroke-width: 3; stroke-opacity: 0.5; '></rect></svg></div>"
            else
                AnnoStr += "</div>"
        }
        return AnnoStr;
    }

    AnnoStr = "<svg id='svg_" + Anno.Index + "' class='svg' width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
    var offsetWidth = Anno.OutLineWidth / 2 * zoomValue + 3;
    var annotFillColor = Anno.FillColor;
    if (Anno.FillColor == "none" || Anno.FillColor == "#none" || Anno.FillColor == "#No Color")
        annotFillColor = "rgba(0,0, 0, 0)";
    if(Anno.Type == "rectangle")
    {
        if(isThumb)
		{
			AnnoStr += "<rect class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "' width='" + Anno.ThumbShowWidth + "' height='" + Anno.ThumbShowHeight + "' style='fill:"+annotFillColor+";stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth/3 + ";opacity:" + Anno.Transparency + "'/>";
		}
		else
		{
		    var outlineWidth = parseInt(Anno.OutLineWidth * zoomValue);
		    outlineWidth = outlineWidth < 1 ? 1 : outlineWidth;
		    if(isShadow)
		    {
		        AnnoStr += "<rect class='shadow shadow_"+ Anno.Index +"'  x='"+offsetWidth+"' y='"+offsetWidth+"' width='" + Anno.ShowWidth + "' height='" + Anno.ShowHeight + "' style='fill:"+annotFillColor+";stroke:#0000ff;stroke-width:" + (outlineWidth+6) + ";stroke-opacity:0.5;opacity:" + Anno.Transparency + "'/>";
		    }
	        AnnoStr += "<rect class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "'x='"+offsetWidth+"' y='"+offsetWidth+"' width='" + Anno.ShowWidth + "' height='" + Anno.ShowHeight + "' style='fill:"+annotFillColor+";stroke:" + Anno.OutLineColor + ";stroke-width:" + outlineWidth + ";opacity:" + Anno.Transparency + "'/>";	
		}
    }
    else if(Anno.Type == "line")
    {
        strPoints = "";
		if(isThumb)
		{
			strPoints = Anno.ThumbRelativePoints;
			AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth/3 + ";opacity:" + Anno.Transparency  + "' />";
		}
		else
		{		
			strPoints = Anno.RelativePoints;
			var pageOutLineWidth = parseInt(zoomValue * Anno.OutLineWidth);
			pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;
			if(isShadow)
			{   
                AnnoStr += "<polyline class='shadow shadow_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:#0000ff;stroke-width:" + (pageOutLineWidth+6)+";stroke-opacity:0.5;opacity:"+ Anno.Transparency  + "'/>";	
            }
			AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency  + "'/>";	
		}
    }
    else if(Anno.Type == "arrow")
    {
        strPoints = "";
		if(isThumb)
		{
			strPoints = Anno.ThumbRelativePoints.split(" ");
		    var linePoints = strPoints[0] + " " + strPoints[1];
    		AnnoStr += "<polyline class='"+annoTag+"'  id='" + annoTag + "_" + Anno.Index + "' points='" + linePoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth/3 + ";opacity:" + Anno.Transparency  + "' />";	
    		var arrowPoints;
    		if (Anno.linestartstyle == 0 && Anno.lineendstyle > 0)
    		    arrowPoints = strPoints[2] + " " + strPoints[1] + " " + strPoints[3];
    		else
    		    arrowPoints = strPoints[2] + " " + strPoints[0] + " " + strPoints[3];
		    AnnoStr += "<polygon class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "_arrow' points='" + arrowPoints + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + 1 + ";'/>";
		}
		else
		{
			strPoints = Anno.RelativePoints.split(" ");
			var pageOutLineWidth = parseInt(zoomValue* Anno.OutLineWidth);
			pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;
			var linePoints = strPoints[0] + " " + strPoints[1];
			var arrowPoints ;
			if (Anno.linestartstyle == 0 && Anno.lineendstyle > 0)
			    arrowPoints=  strPoints[2] + " " + strPoints[1] + " " + strPoints[3];
			else 
			    arrowPoints=  strPoints[2] + " " + strPoints[0] + " " + strPoints[3];
			if(isShadow)
			{
			    AnnoStr += "<polyline class='shadow shadow_"+Anno.Index+"' id='shadow_" + Anno.Index + "' points='" + linePoints + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth+6) + ";opacity:" + Anno.Transparency  + "'  />";
	            AnnoStr += "<polyline class='shadow shadow_"+Anno.Index+"'  id='shadow_" + Anno.Index + "_arrow' points='" + arrowPoints + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth+6) + ";opacity:" + Anno.Transparency +"';'/>";
			}
    		AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + linePoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency  + "'  />";
		    AnnoStr += "<polyline class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "_arrow' points='" + arrowPoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency +"';'/>";
		}		
    } else if (Anno.Type == "dimension") {
        strPoints = "";
        if (isThumb) {
            strPoints = Anno.ThumbRelativePoints.split(" ");
            var linePoints = strPoints[0] + " " + strPoints[1];
            AnnoStr += "<polyline class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "' points='" + linePoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth / 3 + ";opacity:" + Anno.Transparency + "' />";
            var arrowPoints;
                arrowPoints = strPoints[2] + " " + strPoints[1] + " " + strPoints[3];
                AnnoStr += "<polygon class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "_leftarrow' points='" + arrowPoints + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + 1 + ";'/>";
                arrowPoints = strPoints[4] + " " + strPoints[0] + " " + strPoints[5];
                AnnoStr += "<polygon class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "_rightarrow' points='" + arrowPoints + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + 1 + ";'/>";
        }
        else {
            strPoints = Anno.RelativePoints.split(" ");
            var pageOutLineWidth = parseInt(zoomValue * Anno.OutLineWidth);
            pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;
            var linePoints = strPoints[0] + " " + strPoints[1];

            var arrowPoints1;
            var arrowPoints2;
            var slide1;
            var slide2;

            arrowPoints1 = strPoints[2] + " " + strPoints[1] + " " + strPoints[3] + " " + strPoints[2];
            arrowPoints2 = strPoints[4] + " " + strPoints[0] + " " + strPoints[5] + " " + strPoints[4];
            slide1 = strPoints[6] + " " + strPoints[7];
            slide2 = strPoints[8] + " " + strPoints[9];

            if (isShadow) {
                AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='shadow shadow_" + Anno.Index + "' id='shadow_" + Anno.Index + "' points='" + linePoints + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "'  />";
                AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='shadow shadow_" + Anno.Index + "'  id='shadow_" + Anno.Index + "_arrow1' points='" + arrowPoints1 + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "';'/>";
                AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='shadow shadow_" + Anno.Index + "'  id='shadow_" + Anno.Index + "_arrow2' points='" + arrowPoints2 + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "';'/>";
                AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='shadow shadow_" + Anno.Index + "'  id='shadow_" + Anno.Index + "_slide1' points='" + slide1 + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "';'/>";
                AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='shadow shadow_" + Anno.Index + "'  id='shadow_" + Anno.Index + "_slide2' points='" + slide2 + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "';'/>";
            }
            linePoints = strPoints[11] + " " + strPoints[16];
            arrowPoints1 = strPoints[13] + " " + strPoints[16] + " " + strPoints[14] + " " + strPoints[13];
            arrowPoints2 = strPoints[18] + " " + strPoints[11] + " " + strPoints[19] + " " + strPoints[18];
            slide1 = strPoints[10] + " " + strPoints[12];
            slide2 = strPoints[15] + " " + strPoints[17];
            AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + linePoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "' />";
            AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "_arrow1' points='" + arrowPoints1 + "' style='fill:" + Anno.OutLineColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "' />";
            AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "_arrow2' points='" + arrowPoints2 + "' style='fill:" + Anno.OutLineColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "' />";

            AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "_slide2' points='" + slide1 + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "'/>";
            AnnoStr += "<polyline  annotype='" + Anno.Type + "' class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "_slide2' points='" + slide2 + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "'/>";

            var fontcolor = Anno.TxtFontColor || "#000000";
            var countText = countDimensionTextAndLocation(strPoints[11], strPoints[16]);
            if (isAutoResizeDimension || Anno.ShowedText == "" || Anno.ShowedText == null || typeof (Anno.ShowedText) == "undefined") {
                    Anno.ShowedText = countText.text;
            }
            AnnoStr += "<text  annotype='" + Anno.Type + "' class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "_text' x='" + countText.x + "' y='" + countText.y + "' fill='" + fontcolor + "'  font-size='" + (dimensionAnnoStyle.TxtFontSize * zoomValue) + "' font-family='Arial'>" + Anno.ShowedText + "</text>";

        }
        
    } else if (Anno.Type == "stamp") {
        var outlineWidth = parseInt((Anno.OutLineWidth || 1) * zoomValue);
        outlineWidth = outlineWidth < 1 ? 1 : outlineWidth;
        var showWidth = Anno.ShowWidth||1;
        var showHeight = Anno.ShowHeight||1;
        var annoTag = "annotationStamp";
        if (isThumb) {
            outlineWidth = 1;
            //  AnnoStr += "<rect class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "' width='" + Anno.ThumbShowWidth + "' height='" + Anno.ThumbShowHeight + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth / 3 + ";opacity:" + Anno.Transparency + "'/>";
            //AnnoStr += "<image  class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "' xlink:href='" + Anno.Apparence + "' width='" + Anno.ThumbShowWidth + "' height='" + Anno.ThumbShowHeight + "'/> ";
            annoTag = "annotationThumbStamp";
            showWidth = Anno.ThumbShowWidth;
            showHeight = Anno.ThumbShowHeight;
            var tgpath = getCacheFolder();
            var goborder = outlineWidth || 5;
            var position = goborder;
            if (Anno.STID == "")
                AnnoStr += '<rect id="' + annoTag + 'Rect_' + Anno.Index + '" x="' + position + '" y="' + position + '" rx="' + 0 + '" ry="' + 0 + '" width="' + (showWidth - goborder * 2) + '" height="' + (showHeight - goborder * 2) + '"  style="fill:none;stroke:' + Anno.OutLineColor + ';stroke-width:' + goborder + 'px;fill-opacity:0;stroke-opacity:' + Anno.Transparency + '"/>"';
            else
                AnnoStr += "<image class='stamp' id='" + annoTag + "Text_" + Anno.Index + "'x='" + 0 + "' y='" + 0 + "' width='" + (showWidth - 0 * 2) + "' height='" + (showHeight - 0 * 2) + "'xlink:href='" + tgpath + Anno.Apparence + "' />";
        } else { 

        if (isShadow) {
            // AnnoStr += "<rect class='shadow shadow_" + Anno.Index + "'  x='" + offsetWidth + "' y='" + offsetWidth + "' width='" + showWidth + "' height='" + showHeight + "' style='fill:" + annotFillColor + ";stroke:#0000ff;stroke-width:" + (outlineWidth + 6) + ";stroke-opacity:0.5;opacity:" + Anno.Transparency + "'/>";
        }
        //AnnoStr += "<image  class='" + annoTag + "'  id='" + annoTag + "_" + Anno.Index + "' xlink:href=" + Anno.Apparence + " width='" + Anno.ThumbShowWidth + "' height='" + Anno.ThumbShowHeight + "'/> ";
        if (Anno.STID == "") {
            if (Anno.CStamp) {
                var tgpath = getCustomStampFolder();
                var tp = "stim_" + annoTag + Anno.Index;
                //AnnoStr += "<defs><pattern id='" + tp + "' width='100%' height='100%'  viewBox='0 0 " + showWidth + " " + showHeight + "'><image width='" + showWidth + "' height='" + showHeight + "' xlink:href='" + tgpath + Anno.CStampid + "'/></pattern></defs>";
                //AnnoStr += "<rect class='stamp' id='" + annoTag + "Text_" + Anno.Index + "' x='0' y='0' width='" + (showWidth) + "' height='" + (showHeight) + "' fill=url(#" + tp + ") />";
                $("#" + tp).remove();
                AnnoStr = "<div id='" + tp + "' style='position:absolute;top:0;z-index:-1;'><img  width='" + showWidth + "' height='" + showHeight + "' src='" + tgpath + Anno.CStampid + "'/></div>" + AnnoStr
               // AnnoStr += "<image class='stamp' id='" + annoTag + "Text_" + Anno.Index + "'x='0' y='0' width='" + (showWidth ) + "' height='" + (showHeight ) + "'xlink:href='" + tgpath + Anno.CStampid + "' />";
            } else { 
            var rgo = (3 + 10 * Anno.OutLineWidth / 5) * zoomValue;
            var rheight = Anno.Height;
            if (isThumb) {
                rgo = 3;
            }
            else if (rheight < 100)
                rgo = 8 * zoomValue;
            else if (rheight < 50)
                rgo = 5 * zoomValue;
            else if (rheight <= 32)
                rgo = 3 * zoomValue;

            AnnoStr += "<g transform='translate(0,0)' class='" + annoTag + "' id='" + annoTag + "Text_" + Anno.Index + "' width='" + showWidth + "' height='" + showHeight + "'>";
            var goborder = outlineWidth || 5;
            var position = goborder;
            AnnoStr += '<rect id="' + annoTag + 'Rect_' + Anno.Index + '" x="' + position + '" y="' + position + '" rx="' + rgo + '" ry="' + rgo + '" width="' + (showWidth - goborder * 2) + '" height="' + (showHeight - goborder*2) + '"  style="fill:none;stroke:' + Anno.OutLineColor + ';stroke-width:' + goborder + 'px;fill-opacity:0;stroke-opacity:' + Anno.Transparency + '"/>"';
            var canvas = document.createElement("canvas");
            context = canvas.getContext("2d");
            var pageFontSize;
            var transformContent = "";
            var transformTime = "";
            pageFontSize = showWidth / Anno.ShowedText.length;
            var hasTime = (typeof (Anno.STime) != "undefined" && Anno.STime != "");
            if (hasTime) {
                if (Anno.ShowedText.length < Anno.STime.length)
                    pageFontSize = showWidth / Anno.STime.length;

            }
            if (pageFontSize > showHeight)
                pageFontSize = showHeight;
            if (pageFontSize < 1)
                pageFontSize = 1;
            font = "bold " + pageFontSize + "px Arial";
            context.font = font;
            metrics = context.measureText(Anno.ShowedText);
            tempWidth = context.measureText("A").width;
          //  tempHeight = context.measureText("A").height;

            offWidth = (showWidth - metrics.width) / 2 ;
            var offTimeHeight = 0;
            var transformTime;
            if (hasTime) {
                offHeight = (showHeight + (goborder) + tempWidth) * 4 / 11;
                offTimeHeight = (showHeight + (goborder) + pageFontSize) * 7 / 11;
                var metricsTime = context.measureText(Anno.STime);
                var offTimeWidth = (showWidth - metricsTime.width) / 2 ;
                transformTime = "matrix(1,0,0,1," + offTimeWidth + "," + offTimeHeight + ")";
            } else {

                offHeight = (showHeight - (goborder) + tempWidth) / 2;
            }

            transformContent = "matrix(1,0,0,1," + offWidth + "," + offHeight + ")";
            if (!isThumb) 
                Anno.TxtFontSize = pageFontSize / zoomValue / 3 * 2*1.15;// (_zoomRatio * _zoomIndex);
            Anno.TxtFontColor = Anno.TxtFontColor || "red";
            AnnoStr += "<text id='" + annoTag + "Text_" + Anno.Index + "' transform='" + transformContent + "' fill='" + Anno.TxtFontColor + "' font-family='Arial' font-size='" + (pageFontSize) + "' opacity='" + Anno.Transparency + "'";
            AnnoStr += ">" + Anno.ShowedText + "</text>";
            if (hasTime)
                AnnoStr += "<text id='" + annoTag + "TextTime_" + Anno.Index + "' transform='" + transformTime + "' fill='" + Anno.TxtFontColor + "' font-family='Arial' font-size='" + (pageFontSize) + "' opacity='" + Anno.Transparency + "'>" + Anno.STime + "</text>";
            AnnoStr += "</g>";
            }
        } else {
            var tgpath = getCacheFolder();// getCacheFileFolder(_fid);
            var juswidth = -1.9 * zoomValue;
            var jusheight = -2.8 * zoomValue;
            AnnoStr += "<image class='stamp' id='" + annoTag + "Text_" + Anno.Index + "'x='" + juswidth + "' y='" + jusheight + "' width='" + (showWidth - juswidth * 2) + "' height='" + (showHeight - jusheight * 2) + "'xlink:href='" + tgpath + Anno.Apparence + "' />";
        }
        }
        
    }
    else if(Anno.Type == "polygon")
    {
        strPoints = "";
		if(isThumb)
		{
			strPoints = Anno.ThumbRelativePoints;
			AnnoStr += "<polygon  class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth/3 + ";opacity:" + Anno.Transparency + "'/>";
		}
		else
		{
			strPoints = Anno.RelativePoints;
			var pageOutLineWidth = parseInt(zoomValue * Anno.OutLineWidth);
			pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;
			if(isShadow)
			{
			    AnnoStr += "<polyline class='shadow shadow_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth+6) + ";opacity:" + Anno.Transparency + "'/>";
			}
			AnnoStr += "<polyline  class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + strPoints + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "'/>";
		}
    }
    else if(Anno.Type  == "Polygonlines" )
    {
        strPoints = "";
		if(isThumb)
		{
			strPoints = Anno.ThumbRelativePoints;
			AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth/3 + ";opacity:" + Anno.Transparency  + "' />";
		}
		else
		{
			strPoints = Anno.RelativePoints;
			var pageOutLineWidth = parseInt(zoomValue * Anno.OutLineWidth);
			pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;
			if(isShadow)
			{
			    AnnoStr += "<polyline class='shadow shadow_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth+6) + ";opacity:" + Anno.Transparency  + "' />";
			}
			AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + strPoints + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency  + "' />";
		}	
    } else if (Anno.Type == "freehand") {
        strPoints = "";
        if (isThumb) {
            strPoints = Anno.ThumbRelativePoints;
            var pointArrList = this.strPoints.split("|");
            for (var go = 0; go < pointArrList.length; go++) {
                AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + pointArrList[go] + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth / 3 + ";opacity:" + Anno.Transparency + "' />";
            }
        }
        else {
            strPoints = Anno.RelativePoints;
            var pageOutLineWidth = parseInt(zoomValue * Anno.OutLineWidth);
            pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;

            var pointArrList = this.strPoints.split("|");
            for (var go = 0; go < pointArrList.length; go++) {
                if (isShadow) {
                    AnnoStr += "<polyline class='shadow shadow_" + Anno.Index + "' points='" + pointArrList[go] + "' style='fill:none;stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "' />";
                }
                AnnoStr += "<polyline class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' points='" + pointArrList[go] + "' style='fill:none;stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "' />";
            }
        }
    }
    else if (Anno.Type == "circle") {
        if (isThumb) {
            AnnoStr += "<ellipse class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' cx='" + Anno.ThumbShowWidth / 2 + "' cy='" + Anno.ThumbShowHeight / 2 + "' rx='" + Anno.ThumbShowWidth / 2 + "' ry='" + Anno.ThumbShowHeight / 2 + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + Anno.OutLineWidth / 3 + ";opacity:" + Anno.Transparency + "'/>";
        }
        else {
            var pageOutLineWidth = parseInt(Anno.OutLineWidth * zoomValue);
            pageOutLineWidth = pageOutLineWidth < 1 ? 1 : pageOutLineWidth;
            if (isShadow) {
                AnnoStr += "<ellipse class='shadow shadow_" + Anno.Index + "' cx='" + parseInt(Anno.ShowWidth / 2 + offsetWidth) + "' cy='" + parseInt(Anno.ShowHeight / 2 + offsetWidth) + "' rx='" + Anno.ShowWidth / 2 + "' ry='" + Anno.ShowHeight / 2 + "' style='fill:" + annotFillColor + ";stroke:#0000ff;stroke-opacity:0.5;stroke-width:" + (pageOutLineWidth + 6) + ";opacity:" + Anno.Transparency + "'/>";
            }
            AnnoStr += "<ellipse class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' cx='" + parseInt(Anno.ShowWidth / 2 + offsetWidth) + "' cy='" + parseInt(Anno.ShowHeight / 2 + offsetWidth) + "' rx='" + Anno.ShowWidth / 2 + "' ry='" + Anno.ShowHeight / 2 + "' style='fill:" + annotFillColor + ";stroke:" + Anno.OutLineColor + ";stroke-width:" + pageOutLineWidth + ";opacity:" + Anno.Transparency + "'/>";
        }
    }
    else if (Anno.Type == "textbox") {
        if (isThumb) {
            var viewer = _fileDocument[curFileId].Viewers[actualIndex];
            var thumbFontSize = 4;// viewer.thumbShowWidth/_docWidth*defaultTextFontSize;
            AnnoStr = "<textarea class='text_edit' id='text_" + Anno.Index + "' style='font-family:" + defaultTextFont + ";width:" + (Anno.ThumbShowWidth) + "px;height:" + (Anno.ThumbShowHeight) + "px;font-size:" + thumbFontSize + "px'>" + Anno.ShowedText + "</textarea>";
            if (Anno.IsFlatten)
                AnnoStr = "";
            src = createTextAnnoWidthCanvas(Anno.ShowedText, { fontSize: thumbFontSize, textColor: defaultTextColor, fontName: defaultTextFont, fillColor: annotFillColor, outLineWidth: Anno.OutLineWidth, outLineColor: Anno.OutLineColor, width: Anno.ThumbShowWidth, height: Anno.ThumbShowHeight, transparency: Anno.Transparency });
            AnnoStr = "<img  class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' src='" + src + "' style='z-index:1;' />";
        }
        else {
            var outlineWidth = Anno.OutLineWidth || 0;
            Anno.TxtFontSize = (Anno.TxtFontSize || 12);
            var pageFontSize = zoomValue * Anno.TxtFontSize;
            Anno.TxtFontColor = (Anno.TxtFontColor || "red");
            var fontcolor = Anno.TxtFontColor;
            var defaulttextfam = "Arial";
            var heightmodify = 3.5 * zoomValue;
            var widthmodify = 1 * zoomValue;
            var outshowWidth = Anno.ShowWidth- zoomValue * outlineWidth;
            var outshowHeight = Anno.ShowHeight- zoomValue * outlineWidth;
            if (outshowHeight <= 0)
                outshowHeight = 1;
            var paddingHeight = 2.5 * zoomValue ;
            var paddingWidth = 2.5 * zoomValue;
            
            var lineheight = 1 + zoomValue * 0.10;
            //var tempStr = "<textarea class='text_edit' id='text_" + Anno.Index + "' style='margin:" + (zoomValue * outlineWidth * 2) + "px;overflow:hidden;line-height:" + lineheight + ";padding-left:2px;padding-top:" + paddingHeight + "px;padding-right:" + (zoomValue * outlineWidth) + "px;color:" + fontcolor + ";font-family:" + defaulttextfam + ";width:" + (textshowWidth) + "px;height:" + (textshowHeight) + "px;font-size:" + pageFontSize + "pt;' onkeyup='textAutoWarpHeight(" + Anno.Index + "," + actualIndex + ")'>" + Anno.ShowedText + "</textarea>";
            var tempStr = "<textarea class='text_edit' id='text_" + Anno.Index + "' style='margin:" + (outlineWidth * zoomValue) / 2 + "px " + (outlineWidth * zoomValue) + "px " + (outlineWidth * zoomValue) + "px " + (outlineWidth * zoomValue) / 2 + "px ; padding-top:" + (paddingHeight + heightmodify) + "px;padding-left:" + (paddingWidth + widthmodify) + "px;border:solid " + (Anno.OutLineWidth) + "px " + (Anno.OutLineColor == "0" ? "red" : Anno.OutLineColor) + ";fill:" + annotFillColor + ";overflow:hidden;line-height:" + lineheight + ";color:" + fontcolor + ";font-family:" + defaulttextfam + ";width:" + (outshowWidth - widthmodify) + "px;height:" + (outshowHeight - heightmodify) + "px;font-size:" + pageFontSize + "pt;' onkeyup='textAutoWarpHeight(" + Anno.Index + "," + actualIndex + ")'>" + Anno.ShowedText + "</textarea>";
            if (Anno.IsFlatten)
                tempStr = "";
            AnnoStr = tempStr + AnnoStr;
            //AnnoStr += "<rect class='shadow'  id='shadow_" + Anno.Index + "'  x='" + outlineWidth + "' y='" + outlineWidth + "' width='" + showWidth + "' height='" + showHeight + "' style='fill:" + annotFillColor + ";stroke:#0000ff;stroke-width:" + (outlineWidth + 1) + ";stroke-opacity:0.5;opacity:" + Anno.Transparency + "'/>";
            outshowWidth += zoomValue * outlineWidth*2.5;
            outshowHeight += zoomValue * outlineWidth*2.5;
            AnnoStr += "<g transform='translate(0,0)' class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' width='" + outshowWidth + "' height='" + outshowHeight + "' title='double click to edit'><rect id='" + annoTag + "_" + Anno.Index + "_rect' x='" + (outlineWidth) + "' y='" + (outlineWidth) + "' width='" + (outshowWidth) + "' height='" + (outshowHeight) + "' style='cursor: move;stroke-width:" + (Anno.OutLineWidth) + ";stroke:" + (Anno.OutLineColor == "0" ? "red" : Anno.OutLineColor) + ";fill:" + annotFillColor + ";opacity:" + Anno.Transparency + "'/>";
            AnnoStr += "<text id='" + annoTag + "_" + Anno.Index + "_text' fill='" + fontcolor + "' font-family='" + defaulttextfam + "' font-size='" + pageFontSize + "pt'>" + GetTspanSvg(Anno) + "</text></g>";
        }
    } else if (Anno.Type == "text") {
        if (isThumb) {
            var viewer = _fileDocument[curFileId].Viewers[actualIndex];
            Anno.TxtFontColor = (Anno.TxtFontColor || "blank");
            var thumbFontSize = 4;//viewer.thumbShowWidth / _docWidth * defaultTextFontSize;
            AnnoStr = "<textarea class='text_edit' id='text_" + Anno.Index + "' style='font-family:" + defaultTextFont + ";width:" + (Anno.ThumbShowWidth) + "px;height:" + (Anno.ThumbShowHeight) + "px;font-size:" + thumbFontSize + "px'>" + Anno.ShowedText + "</textarea>";
            if (Anno.IsFlatten)
                AnnoStr = "";
            src = createTextAnnoWidthCanvas(Anno.ShowedText, { fontSize: thumbFontSize, textColor: Anno.TxtFontColor, fontName: defaultTextFont, fillColor: "transparent", outLineWidth: Anno.OutLineWidth, outLineColor: Anno.OutLineColor, width: Anno.ThumbShowWidth, height: Anno.ThumbShowHeight, transparency: Anno.Transparency });
            AnnoStr = "<img  class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' src='" + src + "' style='z-index:1;' />";
        }
        else {

            Anno.TxtFontSize = (Anno.TxtFontSize || 12);
            var pageFontSize = zoomValue * Anno.TxtFontSize;
            Anno.TxtFontColor = (Anno.TxtFontColor || "blank");
            var fontcolor = Anno.TxtFontColor;
            var defaulttextfam = (Anno.TxtFont || "Arial");
            var lineheight = 1 + 0.11 * zoomValue;
            var paddingHeight = 5 * zoomValue;
            var paddingWidth = 0;
            //transparent
            var tempStr = "<textarea class='text_edit' id='text_" + Anno.Index + "' style='background:#FFFFFF;verflow:hidden; padding-top:" + paddingHeight + "px;padding-left:" + paddingWidth + "px;color:" + fontcolor + ";font-family:" + defaulttextfam + ";width:" + (Anno.ShowWidth) + "px;height:" + (Anno.ShowHeight) + "px;font-size:" + pageFontSize + "pt;line-height:" + lineheight + ";' onkeyup='textAutoWarpTextarea(" + Anno.Index + "," + actualIndex + ")'>" + Anno.ShowedText + "</textarea>";
            if (Anno.IsFlatten)
                tempStr = "";
            AnnoStr = tempStr + AnnoStr;
            AnnoStr += "<rect class='shadow shadow_" + Anno.Index + "'  id='shadow_" + Anno.Index + "'  x='0' y='0' width='" + Anno.ShowWidth + "' height='" + Anno.ShowHeight + "' style='fill:none;stroke:#0000ff;stroke-width:" + (1) + ";stroke-opacity:0.5;opacity:" + Anno.Transparency + "'/>";
            AnnoStr += "<g transform='translate(0,0)' class='" + annoTag + "' id='" + annoTag + "_" + Anno.Index + "' width='" + Anno.ShowWidth + "' height='" + Anno.ShowHeight + "' title='double click to edit'><rect id='" + annoTag + "_" + Anno.Index + "_rect' x='0' y='0' width='" + (Anno.ShowWidth) + "' height='" + (Anno.ShowHeight) + "' style='fill:white;cursor: move;opacity:0'/>";
            AnnoStr += "<text id='" + annoTag + "_" + Anno.Index + "_text' fill='" + fontcolor + "' font-family='" + defaulttextfam + "' font-size='" + pageFontSize + "pt'>" + GetTspanSvgNoBreak(Anno) + "</text></g>";
        }
    }
    AnnoStr += "</svg>";
    return AnnoStr;
}

function GetTspanSvg(annotation)
{
    var pageFontSize = zoomValue * (annotation.TxtFontSize || 12);
    var text = annotation.ShowedText || "";
    var resultSvg = "";
    var lines = text.split("\n");
    var lineNum = 1;
    var defaulttextfam = "Arial";
	var canvas = document.createElement("canvas")
	context = canvas.getContext("2d");
	var font = pageFontSize + "pt " + defaulttextfam;
	pageFontSize *= 4 / 3;
	context.font = font;
	var tempWidth = context.measureText("A").width;
	var paddingWidth = (annotation.OutLineWidth * 2) + 1 * zoomValue;
	var paddingHeight =  (annotation.OutLineWidth * 2)+5*zoomValue;
    var spaceWidth = context.measureText(" ").width
    var width = annotation.ShowWidth - paddingWidth * 2;
    var height = annotation.ShowHeight;
    var linespaceing = 1.8*zoomValue;
    if (width < 0 || height < 0 || pageFontSize > height)
        return "";
    if (width < 20 && height < 20)
        return "";
    var id = "annotation_" + annotation.Index + "_tspan";
    var canput = false;
 
    for (var i = 0; i < lines.length; i++) 
    {
      
        var line = lines[i];
        var lineLen = 0;
        var lineStr = "";
        var totalWidth = context.measureText(line).width;

        for(var j=0;j<line.length;j++)
        {
           
            var goy = (parseInt(lineNum * pageFontSize) + linespaceing * (lineNum - 1) + paddingHeight);
            
            if(line.charCodeAt(j) == 32)
            {
                if (spaceWidth<width&& lineLen + spaceWidth > width)
                {
                    
                    
                    resultSvg += "<tspan id='" + id + "' x='" + paddingWidth + "' y='" + goy + "'>" + htmlEscape(lineStr) + "</tspan>";
                    lineStr = "";
                    lineLen = 0;
                    //j--;
                    lineNum++;
                }
                else
                {
                    lineStr += " ";
                    lineLen += spaceWidth;
                    var tmpStr = line.substring(j + 1);
                    var tmpWidth = 0;
                    var position = tmpStr.indexOf(" ");
                    if(position == -1)
                        tmpWidth = context.measureText(tmpStr).width;
                    else
                        tmpWidth = context.measureText(tmpStr.substring(0,position)).width;
                    if(lineLen + tmpWidth > width)
                    {
                        resultSvg += "<tspan id='" + id + "' x='" + paddingWidth + "' y='" + goy + "'>" + htmlEscape(lineStr) + "</tspan>";
                        lineStr = "";
                        lineLen = 0;
                        lineNum++;
                    }
                }
            }
            else
            {
                var charWidth = context.measureText(line[j]).width;
                lineLen += charWidth;
                if(!canput&&lineLen > width)
                {
                    resultSvg += "<tspan id='" + id + "' x='" + paddingWidth + "' y='" + goy + "'>" + htmlEscape(lineStr) + "</tspan>";
                    lineStr = "";
                    lineLen = 0;
                    j--;
                    canput = true;
                    lineNum++;
                }
                else
                {
                    canput = false;
                    lineStr += line[j];  
                }
            }
        }
        if(lineStr != "")
            resultSvg += "<tspan id='" + id + "' x='" + paddingWidth + "' y='" + goy + "' xml:space='preserve'>" + htmlEscape(lineStr) + "</tspan>";
        lineNum++;
    }
   
    return resultSvg;
}

function GetTspanSvgNoBreak(annotation) {
    var pageFontSize = zoomValue * (annotation.TxtFontSize || 12);
    var text = annotation.ShowedText || "";
    var resultSvg = "";
    var lines = text.split("\n");
    var defaulttextfam = (annotation.TxtFont || "Arial");
    var id = "annotation_" + annotation.Index + "_tspan";
    var canput = false;
    var linespaceing = 6 * zoomValue;
    annotation.OutLineWidth = annotation.OutLineWidth || 0;
    var paddingWidth = (annotation.OutLineWidth * 2) + 1 * zoomValue;
    var paddingHeight = (annotation.OutLineWidth * 2) + 15 * zoomValue;
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        var goy = (parseInt((i + 1) * pageFontSize) + linespaceing * (i - 1) + paddingHeight);
        resultSvg += "<tspan id='" + id + "' x='" + paddingWidth + "' y='" + goy + "'>" + htmlEscape(line) + "</tspan>";
    }
  
    return resultSvg;
}

function htmlEscape(text) {
    if (text == null || typeof (text) == "undefined" || text=="")
        return "";
    return text.replace(/[<>"&]/g, function (match, pos, originalText) {
        switch (match) {
            case "<": return "&lt;";
            case ">": return "&gt;";
            case "&": return "&amp;";
            case "\"": return "&quot;";
        }
    });
}

function createTextAnnoWidthCanvas(text, opt) 
{
    var defaultOptions = {
        fontStyle: "normal", //normal, bold, italic
        fontName: "Arial",
        fontSize: 4, 
        fillColor: "darkblue",
        textColor: "Red",
        padding: 0,
        width: 100,
		height: 80,
		outLineWidth : 3,
		outLineColor : "dark",
		transparency: 0.5,
		rotate: 0,
    };
	function cutString(str, leng)
	{
	    var len = str.length, tlen = len, nlen = 0;
		for(var x = 0; x < len; x++)
		{
		    if(str.charCodeAt(x) > 128)
			{
			    if(nlen + options.fontSize < leng)
				    nlen += options.fontSize;
				else
				{
					tlen = x;
					break;
				}
			}
			else
			{
				if(nlen + options.fontSize/2 < leng)
					nlen += options.fontSize/2;
				else
				{
					tlen = x;
					break;
				}
			}
		}
		return tlen;
	}

    options = $.extend(defaultOptions, opt);              
    var canvas = document.createElement("canvas"),
    context = canvas.getContext("2d");    
    var font = "bold " + options.fontSize + "px " + options.fontName;                        
    var w = options.width; 
	if(w<options.fontSize)
	{w=2*options.fontSize;}
	var h = options.height;
	if(h<options.fontSize)
	{h=2*options.fontSize;}
    canvas.width = w;
    canvas.height = h;
    context.beginPath();                
    context.rect(0, 0, w, h);
                
    context.globalAlpha = options.transparency;
    context.fillStyle = options.fillColor;
    context.fill();
    context.lineWidth = options.outLineWidth*2;
    context.strokeStyle = options.outLineColor;
    context.stroke();
    context.globalAlpha = 1;
                
	context.rotate(options.rotate*90*Math.PI/180);                        
    context.textAlign = "left";
    context.fillStyle = options.textColor;
    context.font = font;
	var lines = text.split("\n");
	var lineNum = 1;
    var charWidth = context.measureText("A").width;
    for (var i = 0; i < lines.length; i++) 
    {
        var line = lines[i];
        var lineCharNum = parseInt(w/charWidth);
        if(lineCharNum == 0)
            lineCharNum = 1;
        var lineStr = "";
        for(var j=1;j<=line.length;j++)
        {   
            if(j%lineCharNum == 0 && lineStr != "")
            {
                context.fillText(lineStr,0,parseInt(lineNum * options.fontSize)+5);
                lineNum++;
                lineStr = "";
            }   
            else
                lineStr += line[j-1];
        }
        if(lineStr != "")
            context.fillText(lineStr,0,parseInt(lineNum * options.fontSize)+5);
            lineNum++;
   }
   return canvas.toDataURL();
}

function BindImageViewerAnnotationClick(type,annoIndex)
{
    var parent_left = $("#wdp_Content").offset().left;
    var parent_top = $("#wdp_Content").offset().top;
    var _isResizeAnnotation = false;
    var pageId = "";
    var MouseDownChangeSize = function(e)
    {
        e = e||window.event;
        selectId = (e.target.id);
        _isResizeAnnotation = true;
        if(isCtrlDown == false)
            selectDiv = new Array();
        selectDiv.push(annoIndex);
    };
    
    var MouseMoveChangeSize = function(e)
    {
        if(_isResizeAnnotation)
        {
            selectId = annoIndex;
            if(isNaN(selectId)){return false;}
            
            var nScrollLeft = $("#wdp_Content")[0].scrollLeft;
            var nScrollTop = $("#wdp_Content")[0].scrollTop;
            var annotation = null;
            for(var i=0;i<_fileDocument[curFileId].Viewers.length;i++)
            {
                var viewer = _fileDocument[curFileId].Viewers[i];
                if(viewer == null || viewer.ShowIndex == null)
                {continue;}
                if(viewer.Annotations[annoIndex] != null)
                {
                    pageId = i;
                    annotation = _fileDocument[curFileId].Viewers[pageId].Annotations[selectId];
                    reDrawDiv = $("#div_"+selectId);
                    break;
                }
                else if(viewer.Links[annoIndex] != null)
                {
                    pageId = i;
                    annotation = _fileDocument[curFileId].Viewers[pageId].Links[selectId];
                    reDrawDiv = $("#link_"+selectId);
                    break;
                }
            }
            
            if(annotation == null){return false;}
            var borderWidth = (annotation.OutLineWidth / 2 * zoomValue + 3) || 3;
            if (annotation.Type == "stamp" || annotation.Type == "fileattach" || annotation.Type == "notes") {
                borderWidth = 0;
            }
            var viewer=_fileDocument[curFileId].Viewers[pageId];
            reDraw_left = reDrawDiv.offset().left - parent_left + nScrollLeft + borderWidth - viewer.GetRefreshBlankLeft();
            reDraw_top = reDrawDiv.offset().top - parent_top + nScrollTop + borderWidth - PreCountHeight(pageId);
            if(reDrawDiv.width() == 0 || reDrawDiv.height() == 0)
            {
                reDraw_width = 1;
                reDraw_height = 1;
            }
            else
            {
                reDraw_width = reDrawDiv.width() - 2*borderWidth;
                reDraw_height = reDrawDiv.height() - 2*borderWidth;
            }
            AnnoIsChanged(selectId, pageId);
            annotation.ReSetSize(reDraw_left,reDraw_top,reDraw_width,reDraw_height);
            resizeAnnotationWithSVG("#"+type+"_",annotation,pageId,false);
        }
    };

    var MouseUpChangeSize = function (e) {
        _isResizeAnnotation = false;
    }
    if(type == "link")
    {
        //$("#link_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lRightDown_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lLeftDown_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lRightUp_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lLeftUp_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lRight_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lLeft_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lUp_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#lDown_" + annoIndex).bind("mousedown", MouseDownChangeSize);

	    $("#lRightDown_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lLeftDown_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lRightUp_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lLeftUp_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lRight_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lLeft_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lUp_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#lDown_" + annoIndex).bind("mouseup", MouseUpChangeSize);


	    $("#link_" + annoIndex).bind("mousemove", MouseMoveChangeSize);
	    $("#link_" + annoIndex).bind("mouseup", MouseUpChangeSize);
    }
    else if(type == "annotation")
    {
        //$("#div_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rRightDown_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rLeftDown_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rRightUp_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rLeftUp_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rRight_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rLeft_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rUp_"+annoIndex).bind("mousedown",MouseDownChangeSize);
	    $("#rDown_" + annoIndex).bind("mousedown", MouseDownChangeSize);

	    $("#rRightDown_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rLeftDown_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rRightUp_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rLeftUp_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rRight_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rLeft_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rUp_" + annoIndex).bind("mouseup", MouseUpChangeSize);
	    $("#rDown_" + annoIndex).bind("mouseup", MouseUpChangeSize);


	    $("#div_" + annoIndex).bind("mousemove", MouseMoveChangeSize);
	    $("#div_" + annoIndex).bind("mouseup", MouseUpChangeSize);
    }
}

var ImageContinueDown;
var ImageContinueMove;
var ImageContinueUp;
var resizeAnnoIndex;
var resizePg;
var reiszeId;
var resizeDown = false;
function BindResize(annoIndex,annoType)
{
    if (annoType == "line" || annoType == "arrow" || annoType == "dimension")
    {
        var fileDoc = _fileDocument[curFileId];
        var ImageContinueDown = function(e)
        {
            resizeId = this.id;
            resizeAnnoIndex = resizeId.substring(resizeId.indexOf("_")+1);
            for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
            {
                var pageId = fileDoc.ViewerPageIndex[i];
                var viewer = _fileDocument[curFileId].Viewers[pageId];
                if(viewer.Annotations[resizeAnnoIndex] != null)
                {
                    resizePg = pageId;
                    break;
                }
            }
            if(resizePg == null)
                return;
            var viewer = _fileDocument[curFileId].Viewers[resizePg];
            var annotation = _fileDocument[curFileId].Viewers[resizePg].Annotations[resizeAnnoIndex];
            annotation.IsChanged = true;
            var strPoints = annotation.ShowPoints.split(";");
            for(var i=0;i<strPoints.length;i++)
            {
                var point = strPoints[i].split(",");
                if(typeof(point) != 'undefined')
                {
                    x_points[i] = parseInt(point[0]) + viewer.GetRefreshBlankLeft();
                    y_points[i] = parseInt(point[1]) + PreCountHeight(resizePg);
                }
            }
            parent_left=$("#wdp_Content").offset().left;
		    parent_top=$("#wdp_Content").offset().top;
		    nScrollLeft=$("#wdp_Content")[0].scrollLeft;
		    nScrollTop=$("#wdp_Content")[0].scrollTop;
		    $(".showByDrag").unbind("mousedown",dragImageMouseDown);
	        $(".showByDrag").unbind("mousemove",dragImageMouseMove);
            $(".showByDrag").unbind("mouseup",dragImageMouseUp);
            $("#draw_canvas").bind("mousemove",ImageContinueMove);
		    $("#draw_canvas").bind("mouseup",ImageContinueUp);
		    resizeDown = true;
        }
        var ImageContinueMove = function(e)
        {
            if(resizeDown)
            {
                e = e || window.event;
                $("#div_"+resizeAnnoIndex).remove();
                x=e.pageX-parent_left + nScrollLeft;
                y=e.pageY-parent_top + nScrollTop;
                var viewer = _fileDocument[curFileId].Viewers[resizePg];
                var annotation = viewer.Annotations[resizeAnnoIndex];
                if(resizeId.substring(0,resizeId.indexOf("_")) == "top")
                {
                    x_points[0] = x;
                    y_points[0] = y;
                }
                else
                {
                    x_points[1] = x;
                    y_points[1] = y;
                }

                var content = "";
                if(annotation.Type == "arrow")
                {
                    var arrowPoints = new Array();
                    arrowPoints = getArrowKeypoints(x_points[1],y_points[1],x_points[0],y_points[0],annotation.OutLineWidth);
                    x_points[2] = arrowPoints[0];
			        y_points[2] = arrowPoints[1];
			        x_points[3] = arrowPoints[2];
			        y_points[3] = arrowPoints[3];
			        x_points = x_points.slice(0, 4);
			        y_points = y_points.slice(0, 4);
                } else if (annotation.Type == "dimension") {
                    x_points = x_points.slice(0, 2);
                    y_points = y_points.slice(0, 2);
                    var dimensionpoints = getDimensionLocation(x_points[0], y_points[0], x_points[1], y_points[1], annotation.OutLineWidth, annotation.LeaderLength, annotation.LeaderExtend, annotation.LeaderOffset);
                    // start end point 
                    x_points[0] = dimensionpoints[1].x;
                    y_points[0] = dimensionpoints[1].y;
                    x_points[1] = dimensionpoints[6].x;
                    y_points[1] = dimensionpoints[6].y;
                    // arrow 1 top botom
                    x_points[2] = dimensionpoints[3].x;
                    y_points[2] = dimensionpoints[3].y;
                    x_points[3] = dimensionpoints[4].x;
                    y_points[3] = dimensionpoints[4].y;
                    // arrow 2 top botom
                    x_points[4] = dimensionpoints[8].x;
                    y_points[4] = dimensionpoints[8].y;
                    x_points[5] = dimensionpoints[9].x;
                    y_points[5] = dimensionpoints[9].y;
                    // line 1 top botom
                    x_points[6] = dimensionpoints[0].x;
                    y_points[6] = dimensionpoints[0].y;
                    x_points[7] = dimensionpoints[2].x;
                    y_points[7] = dimensionpoints[2].y;
                    // line 2 top botom
                    x_points[8] = dimensionpoints[5].x;
                    y_points[8] = dimensionpoints[5].y;
                    x_points[9] = dimensionpoints[7].x;
                    y_points[9] = dimensionpoints[7].y;

                    for (var go = 0; go < 10; go++) {
                        x_points[go + 10] = dimensionpoints[go].x + dimensionpoints[10].x * zoomValue;
                        y_points[go + 10] = dimensionpoints[go].y + dimensionpoints[10].y * zoomValue;
                    }

                    //var arrowPoints = new Array();
                    //arrowPoints = getArrowKeypoints(x_points[1], y_points[1], x_points[0], y_points[0], annotation.OutLineWidth);
                    //x_points[point_index + 2] = parseInt(arrowPoints[0]);
                    //y_points[point_index + 2] = parseInt(arrowPoints[1]);
                    //x_points[point_index + 3] = parseInt(arrowPoints[2]);
                    //y_points[point_index + 3] = parseInt(arrowPoints[3]);
                    //arrowPoints = getArrowKeypoints(x_points[0], y_points[0], x_points[1], y_points[1], annotation.OutLineWidth);
                    //x_points[point_index + 4] = parseInt(arrowPoints[0]);
                    //y_points[point_index + 4] = parseInt(arrowPoints[1]);
                    //x_points[point_index + 5] = parseInt(arrowPoints[2]);
                    //y_points[point_index + 5] = parseInt(arrowPoints[3]);
                    //arrowPoints = getDimensionLeftRight(x_points[0], y_points[0], x_points[1], y_points[1], annotation.OutLineWidth, annotation.LeaderLength, annotation.LeaderExtend, annotation.LeaderOffset);
                    //x_points[point_index + 6] = parseInt(arrowPoints[0]);
                    //y_points[point_index + 6] = parseInt(arrowPoints[1]);
                    //x_points[point_index + 7] = parseInt(arrowPoints[2]);
                    //y_points[point_index + 7] = parseInt(arrowPoints[3]);
                    //arrowPoints = getDimensionLeftRight(x_points[1], y_points[1], x_points[0], y_points[0], annotation.OutLineWidth, annotation.LeaderLength, annotation.LeaderExtend, annotation.LeaderOffset);
                    //x_points[point_index + 8] = parseInt(arrowPoints[0]);
                    //y_points[point_index + 8] = parseInt(arrowPoints[1]);
                    //x_points[point_index + 9] = parseInt(arrowPoints[2]);
                    //y_points[point_index + 9] = parseInt(arrowPoints[3]);

                } else {
                    x_points = x_points.slice(0, 2);
                    y_points = y_points.slice(0, 2);
                }
                var x_min = x_points.min();
                var y_min = y_points.min();
                var x_max = x_points.max();
                var y_max = y_points.max();
                var width_max = x_max - x_min;
                var height_max = y_max - y_min;
                strPoints = "";
                for(var i=0;i<x_points.length;i++)
                    strPoints += x_points[i] + "," + y_points[i] + ";";
                strPoints = strPoints.substring(0,strPoints.length-1);
                var docAnno = new Annotation({ OnPageIndex: resizePg, Type: annotation.Type, Index: resizeAnnoIndex, ShowLeft: x_min, ShowTop: y_min, ShowPoints: strPoints, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
                docAnno.OutLineWidth = annotation.OutLineWidth;
                docAnno.LeaderExtend = annotation.LeaderExtend;
                docAnno.LeaderOffset = annotation.LeaderOffset;
                docAnno.LeaderLength = annotation.LeaderLength;
                docAnno.ShowedText = annotation.ShowedText;
                docAnno.TxtFontColor = annotation.TxtFontColor;

                var borderWidth = docAnno.OutLineWidth / 2 * zoomValue + 3;

                var content = "<div class='new_rect' id='div_"+resizeAnnoIndex+"' style='left:"+(x_min-borderWidth)+"px;top:"+(y_min-borderWidth)+"px;"+"width:"+(width_max+2*borderWidth)+"px;height:"+(height_max+2*borderWidth)+"px'>";
	            content += drawAnnotationWithSVG(docAnno,"annotation",resizePg, false,false);
	            content += "</div>";
	            //$("#docannotation_" + resizePg).append(content);
		        $("#draw_canvas").append(content); 
            }
        }
        ImageContinueUp = function(e)
        {
            var annotation = _fileDocument[curFileId].Viewers[resizePg].Annotations[resizeAnnoIndex];
            annotation.IsChanged = true;
            $("#draw_canvas").unbind("mousemove",ImageContinueMove);
		    $("#draw_canvas").unbind("mouseup",ImageContinueUp);
		    $(".showByDrag").bind("mousedown",dragImageMouseDown);
		    $(".showByDrag").bind("mousemove",dragImageMouseMove);
		    $(".showByDrag").bind("mouseup",dragImageMouseUp);
            $("#div_"+resizeAnnoIndex).remove();
            $("#thumbImg_" + resizeAnnoIndex).remove();
            var options = new Object();
            options.OutLineWidth = annotation.OutLineWidth;
            options.LeaderExtend = annotation.LeaderExtend;
            options.LeaderOffset = annotation.LeaderOffset;
            options.LeaderLength = annotation.LeaderLength;
            options.FontColor = annotation.TxtFontColor;
            options.ShowedText = annotation.ShowedText;
            addImageViewerAnnotation(resizePg, resizeAnnoIndex, 0, 0, 0, 0, annotation.Type, nScrollLeft, nScrollTop, true, options);
		    x_points = new Array();
		    y_points = new Array();
		    point_index=0;
		    addThumbViewerAnnotation(_fileDocument[curFileId].Viewers[resizePg].Annotations[resizeAnnoIndex], resizePg);    
		    addDragAction(resizeAnnoIndex,annotation.OnPageIndex,"");
		    resizeDown = false;
        }
        $("#top_"+annoIndex).bind("mousedown",ImageContinueDown);
	    $("#bottom_"+annoIndex).bind("mousedown",ImageContinueDown);
    }
    else if (annoType == "text")
    {
        return;
    }
    else
    {
        if (annoType == "link") {
            var rs = new Resize("link_" + annoIndex + "", { Max: true, mxContainer: "imgBig" });
            rs.Set("lRightDown_" + annoIndex + "", "right-down");
            rs.Set("lLeftDown_" + annoIndex + "", "left-down");
            rs.Set("lRightUp_" + annoIndex + "", "right-up");
            rs.Set("lLeftUp_" + annoIndex + "", "left-up");
            rs.Set("lRight_" + annoIndex + "", "right");
            rs.Set("lLeft_" + annoIndex + "", "left");
            rs.Set("lUp_" + annoIndex + "", "up");
            rs.Set("lDown_" + annoIndex + "", "down");
        }
        else {
            var rs = new Resize("div_" + annoIndex + "", { Max: true, mxContainer: "imgBig" });
            rs.Set("rRightDown_" + annoIndex + "", "right-down");
            rs.Set("rLeftDown_" + annoIndex + "", "left-down");
            rs.Set("rRightUp_" + annoIndex + "", "right-up");
            rs.Set("rLeftUp_" + annoIndex + "", "left-up");
            rs.Set("rRight_" + annoIndex + "", "right");
            rs.Set("rLeft_" + annoIndex + "", "left");
            rs.Set("rUp_" + annoIndex + "", "up");
            rs.Set("rDown_" + annoIndex + "", "down");
        }
    }
}

function resizeAnnotationWithSVG(annoId,Anno,pageIndex,isThumb)
{
    if (Anno.Type == "rectangle" || Anno.Type == "notes")
    {
        if(isThumb)
        {
            $(annoId+Anno.Index).attr("width",Anno.ThumbShowWidth);
            $(annoId+Anno.Index).attr("height",Anno.ThumbShowHeight);
        }
        else
        {
            if (Anno.Type == "notes") {
                Anno.ShowWidth = noteImgWidth;
                Anno.ShowHeight = noteImgHeight;
                if (zoomValue < 1) {
                    Anno.ShowWidth = noteImgWidth * zoomValue;
                    Anno.ShowHeight = noteImgHeight * zoomValue;
                }
                $(".shadow_" + Anno.Index).attr("width", Anno.ShowWidth*zoomValue);
                $(".shadow_" + Anno.Index).attr("height", Anno.ShowHeight * zoomValue);
            } else {

                $(".shadow_" + Anno.Index).attr("width", Anno.ShowWidth);
                $(".shadow_" + Anno.Index).attr("height", Anno.ShowHeight);
            }
            $(annoId+Anno.Index).attr("width",Anno.ShowWidth);
            $(annoId+Anno.Index).attr("height",Anno.ShowHeight);
          
        }
    } else if (Anno.Type == "stamp") {

        $("#thumbImg_" + Anno.Index).attr("style", "width:" + Anno.ThumbShowWidth + "px;height:" + Anno.ThumbShowHeight + "px;top:" + Anno.ThumbShowTop + "px;left:" + Anno.ThumbShowLeft + "px;");
            //$("#thumbImg_" + Anno.Index).attr("width", Anno.ThumbShowWidth);
            //$("#thumbImg_" + Anno.Index).attr("height", Anno.ThumbShowHeight);
            //$("#thumbImg_" + Anno.Index).attr("top", Anno.ThumbShowTop);
            //$("#thumbImg_" + Anno.Index).attr("left",Anno.ThumbShowLeft);


        $("#div_" + Anno.Index).attr("width", Anno.ShowWidth);
        $("#div_" + Anno.Index).attr("height", Anno.ShowHeight);
            var svgContentThumb = drawAnnotationWithSVG(Anno, "annotation", Anno.OnPageIndex, true, true);
            $("#thumbImg_" + Anno.Index).html(svgContentThumb);
            $("#div_" + Anno.Index+" #svg_" + Anno.Index).remove();
            $("#div_" + Anno.Index + " #svg_" + Anno.Index).remove();
            var svgContent = drawAnnotationWithSVG(Anno, "annotation", Anno.OnPageIndex, false, true);
            $("#div_" + Anno.Index).append(svgContent);
        

    }
    else if(Anno.Type == "link")
    {
        $(annoId+Anno.Index).attr("width",Anno.ShowWidth);
        $(annoId+Anno.Index).attr("height",Anno.ShowHeight);
    }
    else if(Anno.Type == "circle")
    {
        var offsetWidth = Anno.OutLineWidth/2 * zoomValue + 3;
		if(isThumb)
		{
			$(annoId+Anno.Index).attr("cx",Anno.ThumbShowWidth/2);
			$(annoId+Anno.Index).attr("cy",Anno.ThumbShowHeight/2);
			$(annoId+Anno.Index).attr("rx",Anno.ThumbShowWidth/2);
			$(annoId+Anno.Index).attr("ry",Anno.ThumbShowHeight/2);
		}
		else
		{
			$(annoId+Anno.Index).attr("cx",parseInt(Anno.ShowWidth/2 + offsetWidth));
			$(annoId+Anno.Index).attr("cy",parseInt(Anno.ShowHeight/2 + offsetWidth));
			$(annoId+Anno.Index).attr("rx",Anno.ShowWidth/2);
			$(annoId+Anno.Index).attr("ry",Anno.ShowHeight/2);
			$(".shadow_"+Anno.Index).attr("cx",parseInt(Anno.ShowWidth/2 + offsetWidth));
			$(".shadow_"+Anno.Index).attr("cy",parseInt(Anno.ShowHeight/2 + offsetWidth));
			$(".shadow_"+Anno.Index).attr("rx",Anno.ShowWidth/2);
			$(".shadow_"+Anno.Index).attr("ry",Anno.ShowHeight/2);
		}
    }
    else if(Anno.Type == "line")
    {
        if(isThumb)
        {
            $(annoId+Anno.Index).attr("points",Anno.ThumbRelativePoints);
        }
        else
        {
            $(annoId+Anno.Index).attr("points",Anno.RelativePoints);
            $(".shadow_"+Anno.Index).attr("points",Anno.RelativePoints);
        }
    }
    else if(Anno.Type == "arrow")
    {
        if(isThumb)
		{
		    strPoints = Anno.ThumbRelativePoints.split(" ");
			var linePoints = strPoints[0] + " " + strPoints[1];	
			var arrowPoints;
			if (Anno.linestartstyle == 0 && Anno.lineendstyle > 0)
			    arrowPoints = strPoints[2] + " " + strPoints[1] + " " + strPoints[3];
			else
			    arrowPoints = strPoints[2] + " " + strPoints[0] + " " + strPoints[3];
			$(annoId+Anno.Index).attr("points",linePoints);
			$(annoId+Anno.Index+"_arrow").attr("points",arrowPoints);
		}
		else
		{
		    strPoints = Anno.RelativePoints.split(" ");
		    var linePoints = strPoints[0] + " " + strPoints[1];
		    var arrowPoints;
		    if (Anno.linestartstyle == 0 && Anno.lineendstyle > 0)
		        arrowPoints = strPoints[2] + " " + strPoints[1] + " " + strPoints[3];
		    else
		        arrowPoints = strPoints[2] + " " + strPoints[0] + " " + strPoints[3];
			$(annoId+Anno.Index).attr("points",linePoints);
			$(annoId+Anno.Index+"_arrow").attr("points",arrowPoints);
			$("#shadow_"+Anno.Index).attr("points",linePoints);
			$("#shadow"+Anno.Index+"_arrow").attr("points",arrowPoints);
		} 
    } else if (Anno.Type == "dimension") {
        if (isThumb) {
            strPoints = Anno.ThumbRelativePoints.split(" ");
            var linePoints = strPoints[0] + " " + strPoints[1];
            var arrowPoints= strPoints[2] + " " + strPoints[0] + " " + strPoints[3];
            $(annoId + Anno.Index).attr("points", linePoints);
            $(annoId + Anno.Index + "_arrow").attr("points", arrowPoints);
        }
        else {
            strPoints = Anno.RelativePoints.split(" ");
            var linePoints = strPoints[0] + " " + strPoints[1];
            var arrowPoints;
            if (Anno.linestartstyle == 0 && Anno.lineendstyle > 0)
                arrowPoints = strPoints[2] + " " + strPoints[1] + " " + strPoints[3];
            else
                arrowPoints = strPoints[2] + " " + strPoints[0] + " " + strPoints[3];
            //$(annoId + Anno.Index).attr("points", linePoints);
            //$(annoId + Anno.Index + "_arrow").attr("points", arrowPoints);
            //$("#shadow_" + Anno.Index).attr("points", linePoints);
            //$("#shadow" + Anno.Index + "_arrow").attr("points", arrowPoints);
        }
    }
    else if(Anno.Type == "freehand" || Anno.Type == "Polygonlines" || Anno.Type == "polygon")
    {
        if(isThumb)
		{
			$(annoId+Anno.Index).attr("points",Anno.ThumbRelativePoints);
		}
		else
		{
			$(annoId+Anno.Index).attr("points",Anno.RelativePoints);
			$(".shadow_" + Anno.Index).attr("points", Anno.RelativePoints);
			if (Anno.Type == "freehand") {
			   
			    if (!Anno.IsChanged && typeof (Anno.Apparence) != "undefined" && Anno.Apparence != "") {
			        $("#annotationtextapp_" + Anno.Index).remove();
			        $("#div_" + Anno.Index).append("<div id='annotationtextapp_" + Anno.Index + "'></div>");
			        var img = '<img id="annotationTextImg_' + Anno.Index + '" src="' + getCacheFolder() + Anno.Apparence + '"  height="100%" width="100%" style="position:absolute;top:0;left:0;"/>';
			        $("#annotationtextapp_" + Anno.Index).append(img);
			        $("#svg_" + Anno.Index).hide();
			    } else {
			        $("#annotationtextapp_" + Anno.Index).remove();
			        $("#svg_" + Anno.Index).show();
			    }
			}
		}
    }
    else if(Anno.Type == "textbox")
	{
        if(isThumb)
        {
            var viewer = _fileDocument[curFileId].Viewers[pageIndex];
            var thumbFontSize = viewer.thumbShowWidth/_docWidth*24;
            src = createTextAnnoWidthCanvas(Anno.ShowedText, {fontSize:thumbFontSize,textColor:defaultTextColor,fontName:defaultTextFont,fillColor: Anno.FillColor, outLineWidth:Anno.OutLineWidth,outLineColor:Anno.OutLineColor,width: Anno.ThumbShowWidth, height: Anno.ThumbShowHeight, transparency: Anno.Transparency, rotate: Anno.Rotate});
            $(annoId+Anno.Index).attr("src",src);
        }
        else
        {
            var pageFontSize = zoomValue * defaultTextFontSize;
            var tempwidth = Anno.ShowWidth - 8 - Anno.OutLineWidth / 2;
            var tempheight = Anno.ShowHeight - 8 - Anno.OutLineWidth / 2;
            if (tempwidth <= 0)
                tempwidth = 1;
            if (tempheight <= 0)
                tempheight = 1;

            if (Anno.ShowWidth <= 0)
                Anno.ShowWidth = 1;
            if (Anno.ShowHeight <= 0)
                Anno.ShowHeight = 1;
           document.getElementById("text_" + Anno.Index).style.width = (tempwidth) + "px";
           document.getElementById("text_" + Anno.Index).style.height = (tempheight) + "px";
            $(annoId+Anno.Index).css({
                "width":Anno.ShowWidth,
                "height":Anno.ShowHeight
            });
            $("#text_" + Anno.Index).remove();
            $("#svg_" + Anno.Index).remove();
            var textAnno = document.getElementById("annotation_" + Anno.Index);
            $("#div_" + Anno.Index).dblclick(function () {
                EditText(textAnno);
                EditText($("#div_" + Anno.Index));
                if (event.preventDefault)
                    event.preventDefault();
                if (event.returnValue)
                    event.returnValue = false;
            });
			var svgContent = drawAnnotationWithSVG(Anno, "annotation", Anno.OnPageIndex, false, true);
			$("#div_" + Anno.Index).append(svgContent);
			if (!Anno.IsChanged && typeof (Anno.Apparence) != "undefined" && Anno.Apparence != "") {
			    $("#annotationtextapp_" + Anno.Index).remove();
			    $("#div_" + Anno.Index).append("<div id='annotationtextapp_" + Anno.Index + "'></div>");
			
			    if (Anno.IsRichText) {
			        var content = '<div id="annotationTextContent_' + Anno.Index + '" style="position:absolute;top:0;left:0;bottom:0;right:0;border: ' + (Anno.OutLineWidth > 0 ? Anno.OutLineWidth : 1) + 'px ' + (Anno.OutLineColor == 0 ? "red" : Anno.OutLineColor) + ' solid ;">' + Anno.RichText + '</div>'
			        $("#annotationtextapp_" + Anno.Index).append(content);
			    } else {
			        var img = '<img id="annotationTextImg_' + Anno.Index + '" src="' + getCacheFolder() + Anno.Apparence + '"  height="100%" width="100%" style="position:absolute;top:0;left:0;"/>';
			        $("#annotationtextapp_" + Anno.Index).append(img);
			    }
			    $("#svg_" + Anno.Index).hide();
			} else {
			    $("#annotationtextapp_" + Anno.Index).remove();
			}
            var textAnno = document.getElementById("annotation_"+Anno.Index+"");
			textAnno.ondblclick = function(event)
			{
			    EditText(textAnno);
			    if (event.preventDefault)
			        event.preventDefault();
			    if (event.returnValue)
			        event.returnValue = false;
			}; 
		}		
	}
}

var tempNum = 0;
var tempAnnoArray = new Array();
function xmlToDrawAnnotations(xml)
{
    var fileDoc = _fileDocument[curFileId];
    for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
    {
        var pageId = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[pageId];
        viewer.GetViewerLeftTop();
        $($(xml).find("page"+pageId)).find("annotation").each(function(j){
            var annoIndex = tempNum++;
            var annotation = $(this);
            var modifiedDate = $(annotation).attr("modifiedDate");
            var type = $(annotation).attr("type");
            var left = parseFloat($(annotation).attr("left"));
            var top = parseFloat($(annotation).attr("top"));
            var width = parseFloat($(annotation).attr("width"));
            var height = parseFloat($(annotation).attr("height"));
            var points = $(annotation).attr("points");
            var lineColor = $(annotation).attr("lineColor");
            var lineWidth = parseFloat($(annotation).attr("lineWidth")) || 0;
            var fillColor = $(annotation).attr("fillColor");
            var showedText = $(annotation).attr("showdText");
            var transparency = parseFloat($(annotation).attr("opacity"));
            var apparence = $(annotation).attr("apparence");
            var id = $(annotation).attr("id");
            var stid = $(annotation).attr("stid") || "";
            var isRichText = ($(annotation).attr("isrichtext")=="1");
            var richText = $(annotation).find("richtext").text();
            var fontsize = $(annotation).attr("fontsize");
            var fontcolor = $(annotation).attr("fontcolor");
            var linestartstyle = parseInt($(annotation).attr("linestartstyle"));
            var lineendstyle = parseInt($(annotation).attr("lineendstyle"));
            var leaderextend = parseFloat($(annotation).attr("leaderextend"));
            var leaderoffset = parseFloat($(annotation).attr("leaderoffset"));
            var leaderlength = parseFloat($(annotation).attr("leaderlength"));
            var attachpath = $(annotation).attr("attachpath");
            var attachname = $(annotation).attr("attachname");
            var fontname = $(annotation).attr("fontname");
            var artist = $(annotation).attr("artist");
            var annooptions = null;
            try {
                annooptions=$(annotation).html();
            } catch (e) {
                annooptions = $(annotation)[0].textContent;
            }

            var docAnno = new Annotation({
                Id: id,
                Apparence: apparence,
                IsRichText: isRichText,
                RichText:richText,
                OnPageIndex:pageId,
                Type:type, 
                Index:annoIndex,
                ModifiedDate:modifiedDate,
                ShowLeft:0,
                ShowTop:0,
                ShowWidth:0,
                ShowHeight:0,
                Left:left,
                Top:top,
                Width:width,
                Height:height,  
                Points:points,
                OutLineWidth:lineWidth||0,
               // Transparency:transparency,
                ZoomValue:zoomValue,
                ViewerLeft: viewer.GetRefreshBlankLeft(),
                ViewerTop:viewer.Top,
                ViewerWidth:viewer.ActualWidth,
                ViewerHeight:viewer.ActualHeight,
                ViewerScaleX:viewer.ScaleX,
                ViewerScaleY:viewer.ScaleY,
                ThumbViewerScaleX:viewer.ThumbScaleX,
                ThumbViewerScaleY:viewer.ThumbScaleY,
                ViewerOne2OneWidth:viewer.OneToOne_Width,
                ViewerOne2OneHeight:viewer.OneToOne_Height  
            });
            docAnno.Artist = artist;
            docAnno.TxtFontColor = fontcolor;
            docAnno.TxtFontSize = fontsize;
           docAnno.OutLineColor = lineColor;
           docAnno.OutLineWidth = lineWidth;
           docAnno.FillColor = fillColor;
           docAnno.Transparency = transparency;
           docAnno.ShowedText = showedText;
           docAnno.STID = stid;
           if (docAnno.Type == "arrow") {
               docAnno.linestartstyle = linestartstyle;
               docAnno.lineendstyle = lineendstyle;
           } else if (docAnno.Type == "dimension") {
               docAnno.LeaderLength = leaderlength;
               docAnno.LeaderOffset = leaderoffset;
               docAnno.LeaderExtend = leaderextend;
               docAnno.TxtFontColor = dimensionAnnoStyle.TxtFontColor;
           } else if (docAnno.Type == "fileattach") {
               docAnno.Attachpath = attachpath;
               docAnno.Attachname = attachname;
           } else if (docAnno.Type == "text") {
               docAnno.TxtFont = fontname;
               docAnno.OutLineWidth = 0;
               docAnno.Height += 10;
           }

           if (docAnno.Type != "textbox" && docAnno.Type != "freehand"&&docAnno.Type!="stamp")
               docAnno.IsChanged = true;
           var  reghex = new RegExp(/^[a-f0-9]+$/);
           if(fillColor == "False")
                docAnno.FillColor = "none";
           else
           {      
                if(fillColor.length == 8 && reghex.exec(fillColor) != null)
                    docAnno.FillColor = "#" + fillColor.substring(2);
                else
                    docAnno.FillColor = fillColor;
           }
           if(lineColor.length == 8 && reghex.exec(lineColor) != null)
                docAnno.OutLineColor = "#" + lineColor.substring(2);
           else
                docAnno.OutLineColor = lineColor;
           if(type == "notes" && docAnno.FillColor == "")
                docAnno.FillColor = "#fff000";
           if(type == "underLine" || type == "strike" || type == "replaceText" || type == "highText")
            {
                if(type == "highText")
                    docAnno.FillColor = docAnno.OutLineColor;
                docAnno.OutLineWidth = 1.0;
                var strPoints = points.split(";");
                var tempLeft = new Array();
                var tempTop = new Array();
                var tempWidth = new Array();
                var tempHeight = new Array();
                var lineRectangle = new Array();
                for(var k=0;k<strPoints.length-1;k++)
                {
                    var lineR = strPoints[k].split(",");
                    tempLeft.push(parseFloat(lineR[0]));
                    tempTop.push(parseFloat(lineR[1]));
                    tempWidth.push(parseFloat(lineR[2]));
                    tempHeight.push(parseFloat(lineR[3]));
                }
                lineRectangle.push(tempLeft);
                lineRectangle.push(tempTop);
                lineRectangle.push(tempWidth);
                lineRectangle.push(tempHeight);
                docAnno.selectTextRectangle = lineRectangle;
                var startX = tempLeft[0];
                var startY = tempTop[0];
                var endX = tempLeft[tempLeft.length - 1] + tempWidth[tempWidth.length - 1];
                var endY = tempTop[tempTop.length - 1] + tempHeight[tempHeight.length - 1];
                docAnno.Points = points;
                docAnno.EndLeft = endX;
                docAnno.EndTop = endY;
                if (RotateArray[pageId] != null) {
                    docAnno.MarkupDirection = RotateArray[pageId];
                } else { 
                    docAnno.MarkupDirection = 0;
                }
           }

           if (docAnno.Type == "redact") {
               if (annooptions != null) { 
                   var redactoptions = eval('(' + annooptions + ')');
                   if (redactoptions.AreaFillColor.Name != null) {
                       if (redactoptions.AreaFillColor.Name.length == 8)
                           docAnno.MarkFillColor = "#" + redactoptions.AreaFillColor.Name.substring(2);
                       else if (redactoptions.AreaFillColor.Name.length == 7)
                           docAnno.MarkFillColor = redactoptions.AreaFillColor.Name;
                       else if (redactoptions.AreaFillColor.Name.length == 6)
                           docAnno.MarkFillColor = "#" + redactoptions.AreaFillColor.Name;
                          
                   }
                   if (lineColor == 8)
                       docAnno.MarkOutlineColor = "#" + lineColor.substring(2);
                   else if (lineColor == 7)
                       docAnno.MarkOutlineColor = lineColor;
                   else if (lineColor == 6)
                       docAnno.MarkOutlineColor = "#" + lineColor;
               docAnno.IsOverlayTxt = redactoptions.EnableOverlayText;
               docAnno.ShowedText = redactoptions.OverlayText;
               docAnno.TextFont = redactoptions.OverlayTextFont.FontFamily;
               docAnno.TextSize = redactoptions.OverlayTextFont.Size;
               docAnno.TextColor = redactoptions.OverlayTextColor
               docAnno.TextAlign = "left";
               if (redactoptions.OverlayTextAlignment == 1)
                   docAnno.TextAlign = "center";
               else if (redactoptions.OverlayTextAlignment == 2)
                   docAnno.TextAlign = "right";
               docAnno.IsRepeat = redactoptions.IsRepeat;
               }
               if (typeof (points) != "undefined" && points != null && points != "") {
                   var strPoints = points.split(";");
                   var tempLeft = new Array();
                   var tempTop = new Array();
                   var tempWidth = new Array();
                   var tempHeight = new Array();
                   var lineRectangle = new Array();
                   for (var k = 0; k < strPoints.length - 1; k++) {
                       var lineR = strPoints[k].split(",");
                       tempLeft.push(parseFloat(lineR[0]));
                       tempTop.push(parseFloat(lineR[1]));
                       tempWidth.push(parseFloat(lineR[2]));
                       tempHeight.push(parseFloat(lineR[3]));
                   }
                   lineRectangle.push(tempLeft);
                   lineRectangle.push(tempTop);
                   lineRectangle.push(tempWidth);
                   lineRectangle.push(tempHeight);
                   docAnno.selectTextRectangle = lineRectangle;
                   docAnno.Points = points;
                   docAnno.EndLeft = endX;
                   docAnno.EndTop = endY;
                   docAnno.redactArea = false;
                   docAnno.redactPage = false;
               } else { 
                   docAnno.redactArea = true;
                   docAnno.redactPage = false;
               }
               
           }
           docAnno.GetShowPosition();
           tempAnnoArray.push(docAnno);
        })
    }  
   
    for(var i=0;i<tempAnnoArray.length;i++)
    {
        var pageId = tempAnnoArray[i].OnPageIndex;
        var annoIndex = tempAnnoArray[i].Index;
        if(_fileDocument[curFileId].Viewers[pageId] == null){continue;}
            _fileDocument[curFileId].Viewers[pageId].Annotations[annoIndex] = tempAnnoArray[i]; 
    }   
    var fileDoc = _fileDocument[curFileId];
    for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
    {
        var pageIndex = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        for (var index in viewer.Annotations)
	    {		
		    var annotation = viewer.Annotations[index];
		    if(annotation != null && annotation.Index != null)
		    {
		        drawImageViewerAnnotation(annotation);
		        addThumbViewerAnnotation(annotation, pageIndex);
		        AddAnnoToCommentsPanel(pageIndex, annotation.Type, annotation.Index, annotation.ModifiedDate);

		    }
	    }
    }
    noSelectAnno();
    num = tempNum;
}


function textAutoWarpHeight(id, actualIndex) {
    var target = $("#text_" + id)[0];
    if (target == null)//text element
        return;
 //   target.attr('defaultHeight') || 0;
  //  if (!dh) {
  // var     dh = target.clientHeight;
  //      $(target).attr('defaultHeight', dh);
  //  }
    var sizest = $("#annotation_" + id + "_text").attr("font-size");
    if (typeof (sizest) == "undefined" || sizest == "")
        sizest = "12pt";

    var sizenumber = 12;
    try {
        sizenumber = parseFloat(sizest.substring(0, sizest.length - 2));
    } catch (e) {
        sizenumber = 12;
    }
    var annot = _fileDocument[curFileId].Viewers[actualIndex].Annotations[id];
    //target.style.height = dh + 'px';
    var clientHeight = target.clientHeight;
    var scrollHeight = target.scrollHeight;
    if (clientHeight < scrollHeight) {
        scrollHeight += sizenumber * 4 / 3;
        target.style.height = scrollHeight + "px";
        var parrent = $("#div_" + id)[0];
        if (parrent != null)
            parrent.style.height = (scrollHeight+10) + "px";

        annot.ReSetSize(annot.ShowLeft, annot.ShowTop, annot.ShowWidth, scrollHeight);

        //resizeAnnotationWithSVG("#textbox_", annot, pageId, false);
    }
    annot.ShowedText = $("#text_" + id).val();
}



function textAutoWarpTextarea(id, actualIndex) {
    var target = $("#text_" + id)[0];
    if (target == null)
        return;


    var annot = _fileDocument[curFileId].Viewers[actualIndex].Annotations[id];
    var sizest = annot.TxtFontSize;
    var fontname = annot.TxtFont;
    if (typeof (fontname) == "undefined" || fontname == "")
        fontname = "Arial";

    if (typeof (sizest) == "undefined" || sizest == "")
        sizest = 12;


    sizest *= zoomValue;
    var clientWidth = target.clientWidth;
    var scrollWidth = target.scrollWidth;

    var canvas = document.createElement("canvas")
    context = canvas.getContext("2d");
    var font = sizest + "pt " + fontname;
    context.font = font;
    var lines = $("#text_" + id).val().split("\n");
    var maxline = lines[0];
    for (var go = 0; go < lines.length; go++) {
        if (maxline.length < lines[go].length)
            maxline = lines[go];
    }

    var tempWidth = context.measureText(maxline+"AA").width + 10;

    target.style.width = tempWidth + "px";

    var parrent = $("#div_" + id)[0];
    if (parrent != null)
        parrent.style.width = (tempWidth) + "px";

    //target.style.height = dh + 'px';

    var scrollHeight = parseInt((lines.length + 1) * sizest) + 2.5 * zoomValue * (lines.length - 1) + 5 * zoomValue;

    target.style.height = scrollHeight + "px";
    var parrent = $("#div_" + id)[0];
    if (parrent != null)
        parrent.style.height = (scrollHeight + 10) + "px";



    annot.ReSetSize(annot.ShowLeft, annot.ShowTop, tempWidth, scrollHeight);

    annot.ShowedText = $("#text_" + id).val();
}

function countDimensionTextAndLocation(point1,point2){
 
    var startpoint = point1.split(',');
    var endpoint = point2.split(',');

    var centerX = (parseFloat(startpoint[0]) + parseFloat(endpoint[0])) / 2;
    var centerY = (parseFloat(startpoint[1]) + parseFloat(endpoint[1])) / 2;

    var targetW = parseFloat(Math.abs(startpoint[0] - endpoint[0]));
    var targetH = parseFloat(Math.abs(startpoint[1] - endpoint[1]));
    var pointdimension = (Math.pow((targetW * targetW + targetH * targetH), 0.5) / zoomValue).toFixed(2);

    var c = document.createElement("canvas");
    var ctx = c.getContext("2d");
    fontsize = dimensionAnnoStyle.TxtFontSize * zoomValue;
    ctx.font = fontsize + "px Arial";
   
    var dpi=getDPI();
    if (dimensionformat.format == "px") {
        pointdimension = pointdimension;
    }else  if(dimensionformat.format == "pt") {
        pointdimension = pointdimension / dpi[0] * 72;
    } else if (dimensionformat.format == "in") {
        pointdimension = pointdimension / dpi[0];
    } else if (dimensionformat.format == "cm") {
        pointdimension = pointdimension / dpi[0] *2.54;
    } else if (dimensionformat.format == "mm") {
        pointdimension = pointdimension / dpi[0] *2.54*10;
    }

    if (isNaN(dimensionformat.float))
        dimensionformat.float = 2;
    var txt = parseFloat(pointdimension).toFixed(dimensionformat.float) + " " + dimensionformat.text;

    var width = ctx.measureText(txt).width;
    //if (width > targetW) {
    //    width /= 2;
    //    fontsize /= 2;
    //}
        
    var re = new Object();
    re.x = centerX - width / 2;
    re.y = centerY;//;
    re.text = txt;
    re.sz = fontsize;
    return re;
}

function getDPI() {
    var arrDPI = new Array();
    if (window.screen.deviceXDPI != undefined) {
        arrDPI[0] = window.screen.deviceXDPI;
        arrDPI[1] = window.screen.deviceYDPI;
    }
    else {
        var tmpNode = document.createElement("DIV");
        tmpNode.style.cssText = "width:1in;height:1in;position:absolute;left:0px;top:0px;z-index:99;visibility:hidden";
        document.body.appendChild(tmpNode);
        arrDPI[0] = parseInt(tmpNode.offsetWidth);
        arrDPI[1] = parseInt(tmpNode.offsetHeight);
        tmpNode.parentNode.removeChild(tmpNode);
    }
    return arrDPI;
}
;
///<jscompress sourcefile="EditorFuncLib.js" />
var currentCreateIndex = 0;
var thumbCreateIndex = 0;

function CreateThumbImages()
{
    return;
   var createEndIndex=thumbCreateIndex + 30;
   while(createEndIndex >= initialPageCount)
   {
        createEndIndex--;
   } 
   var str = {action : "CreateThumbImages", fid: _fid ,fileName: _fileName,password:"",startIndex:thumbCreateIndex,endIndex:createEndIndex,thumbScale:$.toJSON(_thumbScale),addFile:addFileName};	
   var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:true,
		data: str, 
        success: function(response) {   
            for(var i=thumbCreateIndex;i<=createEndIndex;i++)
            {
                var viewer = _fileDocument[curFileId].Viewers[i];
                if(viewer == null || viewer.ShowIndex == null){continue;}
                _fileDocument[curFileId].Viewers[i].ThumbImageIsExist = true;
           }
           if(createEndIndex != initialPageCount-1)
           {
                thumbCreateIndex = createEndIndex+1;
                setTimeout(function(){
		            CreateThumbImages();
		        },1000*10);
           }                            
       },
       error: function(err) {}  
   }
   $.ajax(options);
}
       
function CreateSvgFile()
{
    return;
    var createEndIndex=currentCreateIndex + 20;
    while(createEndIndex >= initialPageCount)
    {
        createEndIndex--;
    }
    var str = {action : "CreateDocSvg", fid: _fid, fileName: _fileName,password:"",startIndex:currentCreateIndex,endIndex:createEndIndex,addFile:addFileName};	
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:true,
		data: str, 
        success: function(response) {   
            for(var i=currentCreateIndex;i<=createEndIndex;i++)
            {
                var viewer = _fileDocument[curFileId].Viewers[i];
                if(viewer == null || viewer.ShowIndex == null){continue;}
                _fileDocument[curFileId].Viewers[i].DocImageIsExist = true;
            }
            if(createEndIndex != initialPageCount-1)
            {
                currentCreateIndex = createEndIndex+1;
                setTimeout(function(){
		            CreateSvgFile();
		        },1000*10);
            }  
            else
	            CreateThumbImages();                      
       },
       error: function(err) {}  
    }
    $.ajax(options);	 
}


var minIndex = 4;
var maxIndex = 7;
var _zoomListIndex = 17;

function setZoomValue()
{
    _zoomListIndex = parseInt($(this).get(0).selectedIndex);

    if (_zoomListIndex == 16 || _zoomListIndex == -1) {
        $(".zoomchange_value").text(parseInt(zoomRectRate * 100) + "%");
        $(".zoomList").val(parseInt(zoomRectRate * 100) + "%");
    } else {
        $(".zoomchange_value").text(_zoomItems[16]);
        $(".zoomList").val(_zoomItems[_zoomListIndex]);
    }
    var pageIndex = parseInt(_curCorrectPageId);	
	var actualIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
	var viewer = _fileDocument[curFileId].Viewers[actualIndex];
			
	if (_zoomListIndex >= 0 && _zoomListIndex < (_zoomItems.length - 3)) {
	    var length = _zoomItems[_zoomListIndex].length;
	    var multiple = _zoomItems[_zoomListIndex].substring(0, length - 1);
	    _pageSizeType = 2;
	    if (_zoomListIndex == _zoomItems.length - 4)
	        zoomValue = zoomRectRate;
	    else
	        zoomValue = parseFloat(multiple) / 100;
	    ChangeViewerPosition(actualIndex);
	    resizeDocViewerByCSS3("imgBig", actualIndex);
	    ImageViewerAnnotationResize(actualIndex);
	    resetImageDragZoomInPage(actualIndex);
	    CSSZoomInOrOut();
	}
    else
    {
	    map();
	    refreshSearchReact();
    }
    noSelectAnno();
    noSelectLink();
    $(".zoomList").blur();
    ChangePg(pageIndex, true);
  
}

function RectifyZoom()
{
    if(_zoomListIndex < minIndex)
        _actualZoomIndex = minIndex;
    else
        _actualZoomIndex = _zoomListIndex;
}

function map()
{
    var OneToOneWidth = "";
    var OneToOneHeight = "";
    var pageIndex = parseInt(_curCorrectPageId);	
	pageIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
    var viewer = _fileDocument[curFileId].Viewers[pageIndex];
    var OneToOneWidth = viewer.OneToOne_Width;
    var OneToOneHeight = viewer.OneToOne_Height;
    if(_viewerMode != "single")
        OneToOneWidth = WidthArray.max() + addWidth;
    switch(_zoomListIndex)
    {
        case 17:
            btnOneToOne();
            _zoomListIndex = 8;
            zoomValue = 1;
            break;
        case 18:
            var percent = (_docHeight/OneToOneHeight*100).toFixed(2);
            _zoomListIndex = setPercentPosition(percent);
            zoomValue = percent/100;
            btnBestFit(percent);
            break;
         case 19:
             var percent = parseInt(_docWidth / OneToOneWidth * 100);
            _zoomListIndex = setPercentPosition(percent);
            zoomValue = percent / 100;
            btnFitWidth(percent);
            break;  
    } 
}
        
function setPercentPosition(percent)
{
    var _comlength = _zoomItems.length;
    for(var i=0;i< _comlength - 3;i++)
    {
        var length = _zoomItems[i].length;
        var multiple = parseInt(_zoomItems[i].substring(0,length-1));
        if(parseFloat(percent)>= parseFloat(multiple))
            return i;
    }
    return _comlength - 4;
}

var _zoomInFlag = true;
var _zoomOutFlag = true;
function CSSZoomInOrOut()
{


	//var icoUrl1 = getImagesFolder() + "IconB.png";
	if(_zoomListIndex == 0)
	{   
	   // $(".navi_zoomIn").css("background", "url('" + icoUrl1 + "') no-repeat -522px -13px");
	    $(".navi_zoomIn").addClass("toolNavZoomInIconDis");
	    $(".navi_zoomIn").removeClass("toolNavZoomInIconEn");
		TargetHover(".navi_zoomIn",false);
		if(_zoomInFlag)
		{
		    $(".navi_zoomIn").removeAttr("onClick");
		    $(".navi_zoomIn").unbind("click");
		    _zoomInFlag = false;
		}
	}
	else if(_zoomListIndex == (_zoomItems.length-5))
	{
	    //$(".navi_zoomOut").css("background", "url('" + icoUrl1 + "') no-repeat -557px -13px");
	    $(".navi_zoomOut").addClass("toolNavZoomOutIconDis");
	    $(".navi_zoomOut").removeClass("toolNavZoomOutIconEn");
		TargetHover(".navi_zoomOut",false);
		if(_zoomOutFlag)
		{
            $(".navi_zoomOut").removeAttr("onClick");
            $(".navi_zoomOut").unbind("click");
		    _zoomOutFlag = false;
		}
	}
	else
	{
	    //iconUrl1 = getImagesFolder() + "IconA.png";
		if(!_zoomInFlag)
		{
		   // $(".navi_zoomIn").css("background", "url('" + iconUrl1 + "') no-repeat -522px -15px");
		    $(".navi_zoomIn").addClass("toolNavZoomInIconEn");
		    $(".navi_zoomIn").removeClass("toolNavZoomInIconDis");
		    TargetHover(".navi_zoomIn",true);
		    $(".navi_zoomIn").bind("click",btnZoomIn);
		    _zoomInFlag = true;
		}
		if(!_zoomOutFlag)
		{
		   // $(".navi_zoomOut").css("background", "url('" + iconUrl1 + "') no-repeat -557px -15px");
		    $(".navi_zoomOut").addClass("toolNavZoomOutIconEn");
		    $(".navi_zoomOut").removeClass("toolNavZoomOutIconDis");
		    TargetHover(".navi_zoomOut",true);
		    $(".navi_zoomOut").bind("click",btnZoomOut);
		    _zoomOutFlag = true;
		}
	}
	refreshSearchReact();
}

var sym;
function InitBtnCss()
{
    sym = new Array(false,false);
    //var icoUrl1 = getImagesFolder() + "IconB.png";
    //$(".navi_first").css("background","url('" + icoUrl1 + "') no-repeat -304px -13px");
    //TargetHover(".navi_first",false);
    //$(".navi_pre").css("background","url('" + icoUrl1 + "') no-repeat -339px -13px");
    //TargetHover(".navi_pre",false);
    //$(".navi_ne").css("background","url('" + icoUrl1 + "') no-repeat -376px -13px");
    //TargetHover(".navi_ne",false);
    //$(".navi_last").css("background","url('" + icoUrl1 + "') no-repeat -412px -13px");
    //TargetHover(".navi_last", false);


    $(".navi_first").removeClass("toolNavFirstIconEn");
    $(".navi_first").addClass("toolNavFirstIconDis");
    TargetHover(".navi_first", false);

   
    $(".navi_pre").removeClass("toolNavPreIconEn");
    $(".navi_pre").addClass("toolNavPreIconDis");
    TargetHover(".navi_pre", false);

 
    $(".navi_ne").removeClass("toolNavNeIconEn");
    $(".navi_ne").addClass("toolNavNeIconDis");
    TargetHover(".navi_ne", false);

    
    $(".navi_last").removeClass("toolNavLastIconEn");
    $(".navi_last").addClass("toolNavLastIconDis");
    TargetHover(".navi_last", false);

}

function ChangeBtnStyle()
{
    var curPg = parseInt(_curCorrectPageId);
	if(curPg == 0)
	{
	    if(sym[0])
		{
		    //var icoUrl1 = getImagesFolder() + "IconB.png";
		    //$(".navi_first").css("background","url('" + icoUrl1 + "') no-repeat -304px -13px");
		    TargetHover(".navi_first",false);
		    $(".navi_first").unbind("click");
		    //$(".navi_pre").css("background","url('" + icoUrl1 + "') no-repeat -339px -13px");
		    TargetHover(".navi_pre",false);
		    $(".navi_pre").unbind("click");

		    $(".navi_first").removeClass("toolNavFirstIconEn");
		    $(".navi_first").addClass("toolNavFirstIconDis");
	

		    $(".navi_pre").removeClass("toolNavPreIconEn");
		    $(".navi_pre").addClass("toolNavPreIconDis");


		    sym[0]=false;
		}
		if(!sym[1])
		{
		   // icoUrl1 = getImagesFolder() + "IconA.png";
		   // $(".navi_ne").css("background","url('" + icoUrl1 + "') no-repeat -376px -15px");
		    TargetHover(".navi_ne",true);
		    $(".navi_ne").bind("click",DownPage);
		    //$(".navi_last").css("background","url('" + icoUrl1 + "') no-repeat -412px -15px");
		    TargetHover(".navi_last",true);
		    $(".navi_last").bind("click", LastPage);

		    $(".navi_last").removeClass("toolNavLastIconDis");
		    $(".navi_last").addClass("toolNavLastIconEn");

		    $(".navi_ne").removeClass("toolNavNeIconDis");
		    $(".navi_ne").addClass("toolNavNeIconEn");


		    sym[1]=true; 
		}
	}
	else if(curPg == _totalPageCount-1)
	{
		if(sym[1])
		{
		     //icoUrl1 = getImagesFolder() + "IconB.png";
		     //$(".navi_ne").css("background","url('" + icoUrl1 + "') no-repeat -376px -13px");
		     TargetHover(".navi_ne",false);
		     $(".navi_ne").unbind("click");
		     //$(".navi_last").css("background","url('" + icoUrl1 + "') no-repeat -412px -13px");
		     TargetHover(".navi_last",false);
		     $(".navi_last").unbind("click");
		     sym[1] = false;
		     $(".navi_last").removeClass("toolNavLastIconEn");
		     $(".navi_last").addClass("toolNavLastIconDis");

		     $(".navi_ne").removeClass("toolNavNeIconEn");
		     $(".navi_ne").addClass("toolNavNeIconDis");
		}
		if(!sym[0])
		{
		    //var icoUrl1 = getImagesFolder() + "IconA.png";
		   // $(".navi_first").css("background","url('" + icoUrl1 + "') no-repeat -304px -15px");
		    TargetHover(".navi_first",true);
		    $(".navi_first").bind("click",FirstPage);
		   // $(".navi_pre").css("background","url('" + icoUrl1 + "') no-repeat -339px -15px");
		    TargetHover(".navi_pre",true);
		    $(".navi_pre").bind("click",UpPage);
		    sym[0] = true;

		    $(".navi_pre").removeClass("toolNavPreIconDis");
		    $(".navi_pre").addClass("toolNavPreIconEn");

		    $(".navi_first").removeClass("toolNavFirstIconDis");
		    $(".navi_first").addClass("toolNavFirstIconEn");
		}
	}
	else
	{
		if(!sym[0])
		{
		     //var icoUrl1 = getImagesFolder() + "IconA.png";
		    // $(".navi_first").css("background","url('" + icoUrl1 + "') no-repeat -304px -15px");
		     TargetHover(".navi_first",true);
		     $(".navi_first").bind("click",FirstPage);
		   //  $(".navi_pre").css("background","url('" + icoUrl1 + "') no-repeat -339px -15px");
		     TargetHover(".navi_pre",true);
		     $(".navi_pre").bind("click",UpPage);
		     sym[0] = true;
		     $(".navi_first").removeClass("toolNavFirstIconDis");
		     $(".navi_first").addClass("toolNavFirstIconEn");
		     $(".navi_pre").removeClass("toolNavPreIconDis");
		     $(".navi_pre").addClass("toolNavPreIconEn");
		}
		if(!sym[1])
		{
		    // icoUrl1 = getImagesFolder() + "IconA.png";
		    // $(".navi_ne").css("background","url('" + icoUrl1 + "') no-repeat -376px -15px");
		     TargetHover(".navi_ne",true);
		     $(".navi_ne").bind("click",DownPage);
		    // $(".navi_last").css("background","url('" + icoUrl1 + "') no-repeat -412px -15px");
		     TargetHover(".navi_last",true);
		     $(".navi_last").bind("click",LastPage);
		     sym[1] = true;

		     $(".navi_last").removeClass("toolNavLastIconDis");
		     $(".navi_last").addClass("toolNavLastIconEn");

		     $(".navi_ne").removeClass("toolNavNeIconDis");
		     $(".navi_ne").addClass("toolNavNeIconEn");
		}
	} 
}
		
function ChangeItem()
{
    var changeValue = $(this).val()-1;
	var curPg = _fileDocument[curFileId].GetPageIndex(changeValue);
	var isUp = true;
	if(changeValue > parseInt(_curCorrectPageId))
	{
	    isUp = false;
	}
	ChangeThumbScrollBar(changeValue, isUp);
    ChangePg(curPg); 
    $(".pageIdList").blur();
}

function ChangeThumbScrollBar(toShowId,isUp,isForce)
{
    if (isForce) { }
    else if (currentActivePanel != 0)
        return;
    var divOuterHeight = $(".rethumbnail").outerHeight(true);
    var sTop = $("#_plcImgsThumbs").scrollTop();
    var sHeight = $("#_plcImgsThumbs")[0].scrollHeight;
    var thumbHeight = $("#_plcImgsThumbs").height();
    var newValue = toShowId * divOuterHeight;

    if (newValue >= sTop && newValue <= (sTop + thumbHeight - divOuterHeight)) { }
    else
    {
        if (newValue < 0)
            $("#_plcImgsThumbs").scrollTop(0);
        else if (newValue > sHeight)
            $("#_plcImgsThumbs").scrollTop(sHeight);
        else {
            if (isUp)
                $("#_plcImgsThumbs").scrollTop(newValue);
            else {
                if (newValue < (sTop + thumbHeight) && newValue > sTop) {
                    newValue = $("#_plcImgsThumbs").scrollTop() + divOuterHeight;
                    $("#_plcImgsThumbs").scrollTop(newValue);
                }
                else
                    $("#_plcImgsThumbs").scrollTop(newValue);
            }
        }
    }

}

function ChangeViewerPosition(pageIndex)
{
    if (pageIndex === undefined) {
        var countHeight = $("#wdp_Content").scrollTop();
        var intNum = PrePageCount(countHeight);
        pageIndex = _fileDocument[curFileId].GetPageIndex(intNum);
    }
    _fileDocument[curFileId].Viewers[pageIndex].GetViewerLeftTop();
	var bigWidth = _fileDocument[curFileId].Viewers[pageIndex].BigWidth;
	var bigHeight = _fileDocument[curFileId].Viewers[pageIndex].BigHeight;
	//if(bigWidth < _docWidth)
	//    bigWidth = _docWidth;
	//if(bigHeight < _docHeight)
	//    bigHeight = _docHeight;	
	$("#draw_canvas").css({"width":bigWidth+"px","height":bigHeight+"px"});
}

function resizeDocViewerByCSS3(target,pageIndex)
{
    var widthPageIndex;
    var heightPageIndex;
    $("#" + addcomponentsId).removeAttr("style");
    $("#" + annotContainerId).removeAttr("style");
    var shadowWidth = 3;
    var marHeight = 5;
    var goborder = 1;
	if(_viewerMode == "single")
	{
	    _fileDocument[curFileId].Viewers[pageIndex].GetFirstViewerLeftTop();
		$("#"+target).css({"width":_fileDocument[curFileId].Viewers[pageIndex].FirstActualWidth+"px","height":_fileDocument[curFileId].Viewers[pageIndex].FirstActualHeight+"px"}); 
		$("#"+target).css({"top":_fileDocument[curFileId].Viewers[pageIndex].FirstTop+"px","left":_fileDocument[curFileId].Viewers[pageIndex].FirstLeft+"px","position":"absolute"});
		$(".docImages").css({ "width": (_fileDocument[curFileId].Viewers[pageIndex].FirstActualWidth + widthprefix) + "px", "height": _fileDocument[curFileId].Viewers[pageIndex].FirstActualHeight + "px" });
		$(".docannotations").css({ "width": _fileDocument[curFileId].Viewers[pageIndex].FirstActualWidth * zoomValue + "px", "height": _fileDocument[curFileId].Viewers[pageIndex].FirstActualHeight * zoomValue + "px" });
		$("#page_" + pageIndex).css({ "left": "0px", "top": "0px" });
		$("#docannotation_" + pageIndex).css({ "left":  goborder * zoomValue+"px", "top": goborder * zoomValue+"px" });
		
	}
	else
	{
	   
	    widthPageIndex = WidthArray.indexOf(_maxWidth);
		heightPageIndex = HeightArray.indexOf(_maxHeight);
		var firstActualWidth = 0;
		var firstActualHeight = 0;
		var firstLeft = 0;
		var firstTop = 0;		
		if(widthPageIndex == heightPageIndex)
		{
		    _fileDocument[curFileId].Viewers[widthPageIndex].GetFirstViewerLeftTop();
			firstActualWidth = _fileDocument[curFileId].Viewers[widthPageIndex].FirstActualWidth;
			firstActualHeight = _fileDocument[curFileId].Viewers[widthPageIndex].FirstActualHeight;
			firstLeft = _fileDocument[curFileId].Viewers[widthPageIndex].FirstLeft;
			firstTop = _fileDocument[curFileId].Viewers[widthPageIndex].FirstTop;
		}
		else
		{
			_fileDocument[curFileId].Viewers[widthPageIndex].GetFirstViewerLeftTop();
			_fileDocument[curFileId].Viewers[heightPageIndex].GetFirstViewerLeftTop();
			firstActualWidth = _fileDocument[curFileId].Viewers[widthPageIndex].FirstActualWidth;
			firstActualHeight = _fileDocument[curFileId].Viewers[heightPageIndex].FirstActualHeight;
			firstLeft = _fileDocument[curFileId].Viewers[widthPageIndex].FirstLeft;
			firstTop = _fileDocument[curFileId].Viewers[heightPageIndex].FirstTop;
		}
		$("#"+target).css({"width":firstActualWidth+"px","height":firstActualHeight+"px"}); 
		$("#" + target).css({ "top": firstTop + "px", "left": firstLeft + "px", "position": "absolute" });
		$("#" + addcomponentsId).css({ "width": firstActualWidth * zoomValue + "px", "height": firstActualHeight * zoomValue + "px" });
		$("#" + addcomponentsId).css({ "top": firstTop + "px", "left": firstLeft + "px" });
		$(".docImages").css({ "width": (firstActualWidth + widthprefix )+ "px", "height": firstActualHeight + "px" });
		$(".docannotations").css({ "width": firstActualWidth * zoomValue + "px", "height": firstActualHeight * zoomValue + "px" });
		var fileDoc = _fileDocument[curFileId];
		var gotop = goborder * zoomValue;
        for(var i=0;i<fileDoc.ViewerPageIndex.length;i++)
        {
            var pageId = fileDoc.ViewerPageIndex[i];
            if (WidthArray[pageId] != _maxWidth) {
                _fileDocument[curFileId].Viewers[pageId].GetFirstViewerLeftTop();
                $("#page_" + pageId).css({ "width": _fileDocument[curFileId].Viewers[pageId].FirstActualWidth + "px" });
                $("#page_" + pageId).css({ "left": (_fileDocument[curFileId].Viewers[pageId].FirstLeft - firstLeft) + "px" });
                $("#docannotation_" + pageId).css({ "width": _fileDocument[curFileId].Viewers[pageId].FirstActualWidth * zoomValue + "px" });
                $("#docannotation_" + pageId).css({ "left": (_fileDocument[curFileId].Viewers[pageId].FirstLeft - firstLeft + goborder) * zoomValue + "px" });

            } else {
                $("#docannotation_" + pageId).css({ "left": (goborder) * zoomValue + "px" });
            }
            $("#docannotation_" + pageId).css({ "display": "block"});
			if(HeightArray[pageId] != _maxHeight)
			{
			    $("#page_" + pageId).css({ "height": _fileDocument[curFileId].Viewers[pageId].FirstActualHeight + "px" });
			    $("#docannotation_" + pageId).css({ "height": _fileDocument[curFileId].Viewers[pageId].FirstActualHeight * zoomValue + "px" });

			}
			$("#docannotation_" + pageId).css({ "top": gotop + "px" });
			gotop += (_fileDocument[curFileId].Viewers[pageId].FirstActualHeight + goborder * 2  + marHeight) * zoomValue;
			
        }
      
    }
	target = document.getElementById(target);
	var translateX = 0;
	var translateY = 0;

	var degree = 0;
	if(_viewerMode == "single")
	{
	    translateY = (_fileDocument[curFileId].Viewers[pageIndex].BigHeight - _docHeight)/(2*zoomValue);
		translateX = (_fileDocument[curFileId].Viewers[pageIndex].BigWidth - _docWidth)/(2*zoomValue);
		degree = _fileDocument[curFileId].Viewers[pageIndex].Rotate * 90;

    }
    else
    {
        if(heightPageIndex != pageIndex)
            _fileDocument[curFileId].Viewers[heightPageIndex].GetViewerLeftTop();
        if(widthPageIndex != pageIndex)
            _fileDocument[curFileId].Viewers[widthPageIndex].GetViewerLeftTop();
        translateX = (_fileDocument[curFileId].Viewers[widthPageIndex].BigWidth- _docWidth)/(2*zoomValue);
        if(_fileDocument[curFileId].Viewers[heightPageIndex].BigHeight == _docHeight)
		    translateY = (_fileDocument[curFileId].Viewers[heightPageIndex].ActualHeight - _docHeight)/(2*zoomValue);
		else
            translateY = (_fileDocument[curFileId].Viewers[heightPageIndex].BigHeight - _docHeight) / (2 * zoomValue);
	}

	
	if (degree == 90) {
	    newTranslateX = translateY;
	    newTranslateY = -(translateX + addHeight);
	    translateX = newTranslateX;
	    translateY = newTranslateY;
	}
	else if (degree == 180) {
	    newTranslateX = -(translateX + shadowWidth);
	    newTranslateY = -(translateY + addHeight);
	    translateX = newTranslateX;
	    translateY = newTranslateY;
	}
	else if (degree == 270) {
	    newTranslateX = -(translateY + addHeight - (marHeight - shadowWidth));
	    newTranslateY = translateX;
	    translateX = newTranslateX;
	    translateY = newTranslateY;
    }

	if (target.style.msTransform !== undefined) { // IE
        target.style.msTransform = 'rotate(' + degree + 'deg) scale(' + zoomValue + ') translateX(' + translateX + 'px) translateY(' + translateY + 'px)';	
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = 'rotate(' + degree + 'deg) scale(' + zoomValue + ') translateX(' + translateX + 'px) translateY(' + translateY + 'px)';
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = 'rotate(' + degree + 'deg) scale(' + zoomValue + ') translateX(' + translateX + 'px) translateY(' + translateY + 'px)';
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = 'rotate(' + degree + 'deg) scale(' + zoomValue + ') translateX(' + translateX + 'px) translateY(' + translateY + 'px)';
    } else {
        target.style.transform = 'rotate(' + degree + 'deg) scale(' + zoomValue + ') translateX(' + translateX + 'px) translateY(' + translateY + 'px)';
    }
	var temp = target.style;
	
	if (_viewerMode == "multi") {
	    var showIndex = _fileDocument[curFileId].GetShowIndex(pageIndex);
	    var countHeight = PreCountHeight(showIndex);
	    $("#wdp_Content").scrollTop(Math.ceil(countHeight));
	    addShowDocIds(false);
	    target = document.getElementById(addcomponentsId);
	    //target.style = temp.cssText;
	    $("#" + addcomponentsId).attr("style", temp.cssText);
	    target = document.getElementById(annotContainerId);
	    setTransform(target, 'scale(' + 1 / zoomValue + ')');
	} else {
	    target = document.getElementById(addcomponentsId);
	    //target.style = temp.cssText;
	    $("#" + addcomponentsId).attr("style", temp.cssText);
	    target = document.getElementById(annotContainerId);
        setTransform(target, 'scale(' + 1/zoomValue + ')');
	    
	}
	ChangeLoadingImage();
}

function setTransform(target, content) {
    if (target == null)
        return;
    if (target.style.msTransform !== undefined) { // IE
        target.style.msTransform = content;
    } else if (target.style.MozTransform !== undefined) {  // Mozilla
        target.style.MozTransform = content;
    } else if (target.style.OTransform !== undefined) {   // Opera
        target.style.OTransform = content;
    } else if (target.style.webkitTransform !== undefined) { // Chrome Safari
        target.style.webkitTransform = content;
    } else {
        target.style.transform = content;
    }

}

function rotateAnnotations(Pg, rotateId) {
    thumbViewerWidth = _fileDocument[curFileId].Viewers[Pg].ThumbWidth;
    thumbViewerHeight = _fileDocument[curFileId].Viewers[Pg].ThumbHeight;

    if (rotateId == 1 || rotateId == 3) {
        $("#thumbDiv_" + Pg).width(thumbViewerHeight).height(thumbViewerWidth);
    }
    else {
        $("#thumbDiv_" + Pg).width(thumbViewerWidth).height(thumbViewerHeight);
    }

    var TempAnnotations = new Array();
    for (index in _fileDocument[curFileId].Viewers[Pg].Annotations) {
        TempAnnotations[index] = _fileDocument[curFileId].Viewers[Pg].Annotations[index]
        if (TempAnnotations[index] != null && TempAnnotations[index].Index != null) {
            if (TempAnnotations[index].Type == "pageRedact") {
                var annotation = TempAnnotations[index];
                $("#div_" + annotation.Index).remove();
                drawRedactPage(TempAnnotations[index]);
            }
            else if (TempAnnotations[index].Type == "TextRedacts") {
                var tempLeft = new Array();
                var tempTop = new Array();
                var tempWidth = new Array();
                var tempHeight = new Array();
                var redactRects = new Array();
                redactRects = TempAnnotations[index].RedactRects.curPageRectRedacts;
                for (var i = 0; i < redactRects.length; i++) {
                    redactRects[i].ReSetRotate(rotateId);
                    tempLeft.push(redactRects[i].ShowLeft);
                    tempTop.push(redactRects[i].ShowTop);
                    tempWidth.push(redactRects[i].ShowWidth + redactRects[i].ShowLeft);
                    tempHeight.push(redactRects[i].ShowHeight);
                }
                firstRect = redactRects[0];
                lastRect = redactRects[redactRects.length - 1];
                var annotation = TempAnnotations[index];
                annotation.ReSetRotate(rotateId);
                var borderWidth = annotation.OutLineWidth / 2 * zoomValue;
                $("#div_" + annotation.Index).css("top", annotation.ShowTop - borderWidth);
                $("#div_" + annotation.Index).css("left", annotation.ShowLeft - borderWidth);
                $("#div_" + annotation.Index).width(annotation.ShowWidth + 2 * borderWidth);
                $("#div_" + annotation.Index).height(annotation.ShowHeight + 2 * borderWidth);
                resizeAnnotationWithSVG("#annotation_", annotation, Pg, false);
            }
            else {
                TempAnnotations[index].ReSetRotate(rotateId);
                var annotation = TempAnnotations[index];
                resizeAnnotationWithSVG("#annotation_", annotation, Pg, false);
                var borderWidth = annotation.OutLineWidth / 2 * zoomValue;
                $("#div_" + annotation.Index).css("top", annotation.ShowTop - borderWidth);
                $("#div_" + annotation.Index).css("left", annotation.ShowLeft - borderWidth);
                $("#div_" + annotation.Index).width(annotation.ShowWidth + 2 * borderWidth).height(annotation.ShowHeight + 2 * borderWidth);

                resizeAnnotationWithSVG("#thumbAnnotation_", annotation, Pg, true);

                $("#thumbImg_" + annotation.Index).css("top", annotation.ThumbShowTop);
                $("#thumbImg_" + annotation.Index).css("left", annotation.ThumbShowLeft);
                $("#thumbImg_" + annotation.Index).width(annotation.ThumbShowWidth).height(annotation.ThumbShowHeight);
            }
        }
    }
}

function ChangeLoadingImage()
{
    if(zoomValue > 1)
    {
        for(var i=0;i<_totalPageCount;i++)
        {
            if(!_showDocSrc.in_array(i))
            {
                var viewer = _fileDocument[curFileId].Viewers[i];
                if (viewer == null)
                    continue;
                var pageWidth = viewer.FirstActualWidth * zoomValue;
                var pageHeight = viewer.FirstActualWidth * zoomValue;
                var marginLeft = (pageWidth - loadWidth)/(2 * zoomValue);
                var marginTop =  (pageHeight - loadHeight)/(2 * zoomValue);
                if(i==0 && contentHeight < (pageHeight/2 + loadHeight))
                    marginTop = (contentHeight - loadHeight)/(2*zoomValue);
                $("#pageImg"+i).css({"width":(loadWidth)+"px","height":(loadHeight)+"px"});
                $("#pageImg"+i).css({"margin-left":(marginLeft)+"px","margin-top":(marginTop)+"px"});
            }
        }
        ChangeEHandler(zoomValue);
    }
    else
    {
        ChangeEHandler(1);
    }
}

function ChangeEHandler()
{
    $(".eRightDown").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eLeftDown").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eLeftUp").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eRightUp").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eRight").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eLeft").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eUp").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
    $(".eDown").css({"width":(6/zoomValue)+"px","height":(6/zoomValue)+"px"});
}

function sendToChangeHTML()
{
    showLoading();
    var isChangeHTML = false;
    if(editPages.length != 0)
    {
        isChangeHTML = true;
        var htmlDoc = new HTMLDoc();
        var _pageIndex =  "noChange";
        var update = "false";
        for(var i=0;i<editPages.length;i++)
        {
            if(i == 0)
                update = "true";
            else
                update = "false";
            _pageIndex = editPages[i];
            if(_pageIndex == "noChange")
                continue;
            var pre = $("#RE_" + _pageIndex).html();
            if (pre == null || pre.length <= 0) {
                if (sourcecontent != null && sourcecontent[_pageIndex] != null)
                    $("#RE_" + _pageIndex).html(sourcecontent[_pageIndex]);
            }

            var page_content = $("#page_" + _pageIndex).html();
           
            var tempContent = "<!DOCTYPE HTML><html>" + page_content;
            var posi = tempContent.indexOf("</style>");
            if(tempContent.indexOf("</style>"))
            {
                var prePart = tempContent.substring(0,posi+8);
                var lastPart = "<body id=\"RE_page"+_pageIndex+"\">" + tempContent.substring(posi+8) + "</body></html>";
                tempContent = prePart + lastPart;
            }
            var options = {
                type: "POST",
                url: getServerHandlerUrl(),
                async:false,
                data: {action:"ChangeHTMLs",isUpdate:update,pageIndex:_pageIndex,htmlContent:tempContent,fid:_fid}, 
                success: function(response) {},
                error: function(err) {}  
           }
           $.ajax(options);
        }
    }
    return isChangeHTML;
}

function PrintFile(_addIndex,_extractIndex)
{
    $("#wdp_print_div").empty();
    showLoading();
    var isChangeHTML = sendToChangeHTML();
    var includeAnnotation = document.getElementById("checkboxAnno").checked;
    var applyRedactions = document.getElementById("checkboxRedact").checked;
    var isCreateFile = false;
    //CreatePrintFile
    //annotation && redaction
    var annoInfo = "";
   // if(includeAnnotation || applyRedactions)
        annoInfo = GetJsonDoc(true,false);
    //page design
    var designMes = $.toJSON(_pdfPageDesign);
    var str = {action: "CreatePrintFile",_isChangeHTML:isChangeHTML,fid: _fid, fileName:_fileName,actualName:_actualName,password:curDocPassWord,burnAnnos:includeAnnotation,applyRedacts:applyRedactions,addIndex:_addIndex,jsonDoc:annoInfo,pageDesign:designMes};
	var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:false,
        data: str, 
        success: function(response) {isCreateFile = true;},
        error: function(err){}  
    }
    $.ajax(options);
    var index = 0;
    tempgo = "";
    SynLoadSvg(index);


}




function SynLoadSvg(index,isCreateFile)
{
    if (index == _fileDocument[curFileId].ViewerPageIndex.length)
    {
        setTimeout(function () {
            hideLoading();
            HideAllPropanel();
            window.print();
            $("#wdp_print_div").empty();
        }, 1000);
      
    }
    else
    {
        var pageIndex = _fileDocument[curFileId].ViewerPageIndex[index];
        var svgContent = GetPrintPageSvg(pageIndex);
        $("#wdp_print_div").append("<div id='print_" + pageIndex + "'>" + svgContent + "</div>");
        var images = $("#wdp_print_div #print_"+pageIndex+" svg").find("image");
		if(images.length != 0)
		{
		    var i = 0;
		   LoadSvgImage(images,i,index);
		}
		else
		    SynLoadSvg(index+1);
    }
}


function LoadSvgImage(images,imgIndex,index)
{
    var img = new Image();
	img.src = $(images[imgIndex]).attr("xlink:href");
	img.onload = function()
	{
	    imgIndex++;
		if(imgIndex == images.length)
		    SynLoadSvg(index + 1);
		else
            LoadSvgImage(images,imgIndex,index);          
	}
}

function GetPrintPageSvg(pageIndex)
{
    var result = "";
    var viewer = CopyData(pageIndex);
    var str = {action:"GetPrintPageSvg",fid:_fid,Index:pageIndex,jsonViewer:$.toJSON(viewer)};
    var options = {
        type:"POST",
        url:getServerHandlerUrl(),
        async:false,
        data: str,
        dataType: "text",
        //dataType:"html",
        success:function(response){
            if(response.indexOf("<?xml version") != -1)
                result = response;
        },
        error:function(data,status,e){
            alert(e);
        } 
    }
    $.ajax(options);
    return result;
}

function SaveFile(_addIndex,_extractIndex,pdfOptimizer)
{		
    var isChangeHTML = sendToChangeHTML();
    var includeAnnotation;
    var applyRedactions;
        includeAnnotation = document.getElementById("checkboxAnno").checked;
        applyRedactions = document.getElementById("checkboxRedact").checked;

    var isLinks = _fileDocument[curFileId].IsLinks();
    if (!isaddFile && !bookmarkHasModified && _addIndex == "" && _extractIndex == "" && !includeAnnotation && !applyRedactions && !isChangeMetaData && !isChangeHTML && settingUserPs == "" && settingOwnerPs == "" && removeAllPs == "" && pdfOptimizer == "" && _pdfPageDesign.HeadAndFoot.length == 0 && _pdfPageDesign.Background.length == 0 && _pdfPageDesign.Watermark.length == 0 && !isLinks&&!ischangelinks)
    {
        $("#loading").hide();
        // window.open(_cacheFolder + "/" + _fid + "/input/" + _fileName);
        if (isSharePoint)
            alert(i18n['content']['SaveFileOk'] || "Have been saved successfully!");
        else
            window.open(getFolder("input")  + _fileName);
    }
    else
    {
        //PDFMetadata
        var jsonPDFData = "";
        if(isChangeMetaData)
            jsonPDFData = $.toJSON(_pdfMetaData);
        //OwnerPassword setting
        var newRestriction = "";
        if(settingRestriction != "")
            newRestriction = $.toJSON(settingRestriction);
        //PDF Optimizer
        if(pdfOptimizer != "")
            pdfOptimizer = $.toJSON(pdfOptimizer);
        //annotation && redaction
        var annoInfo = "";
        if(includeAnnotation || applyRedactions)
            annoInfo = GetJsonDoc(true,true);
        else
            annoInfo = GetJsonDoc(false,true);
        //page design
        var designMes = $.toJSON(_pdfPageDesign);
        var bookmarks = getFinalBookmarkJson();

        var str = { action: "SaveFile", _isChangeHTML: isChangeHTML, fid: _fid, fileName: _actualName, tempName: _fileName, password: curDocPassWord, docOwnerPs: curDocOwnerPs, burnAnnos: includeAnnotation, applyRedacts: applyRedactions, addIndex: _addIndex, extractIndex: _extractIndex, pdfMetaData: jsonPDFData, userPs: settingUserPs, ownerPs: settingOwnerPs, newRestrict: newRestriction, removePs: removeAllPs, jsonDoc: annoInfo, optimizer: pdfOptimizer, pageDesign: designMes, bookmarks: bookmarks, bkchange: bookmarkHasModified };
	    var options = {
            type: "POST",
            url: getServerHandlerUrl(),
            async:true,
            data: str, 
            success: function(response) {  
                $("#loading").hide(); 
		        var arr = eval('(' + response + ')'); 
			    if(arr.state == "success")
			    {
			        saveFile = arr.msg;
			        if (isSharePoint)
			            alert(i18n['content']['SaveFileOk'] || "Have been saved successfully!");
			        else
			            window.open(getCacheFileFolder(_fid) + saveFile);
				   // window.open(_cacheFolder + "/" + _fid + "/" + saveFile);           
                }
			    else
			    {
				    alert(arr.msg);
			    }
           },
           error: function(err) {$("#loading").hide();}  
       }
       $.ajax(options);
    }
}


function ExportTo(operation,_addIndex,_extractIndex,_imgOptions)
{   
    var isChangeHTML = sendToChangeHTML();
    var _type = "";
    var _htmlType = "";
    var _xfdf = false;
    if (operation == "option_tiff")
        _type = "Tiff";
    else if (operation == "option_img")
        _type = "Images";
    else if (operation == "option_html5") {
        _type = "Html5";
        _htmlType = $('input:radio[name="htmlType"]:checked').val();
    }
    else if (operation == "option_docx")
        _type = "Word";
    else if (operation == "option_annotation") { 
        _type = "Annotation";
        _xfdf = document.getElementById("usexfdf").checked;
    }
    var includeAnnotation = document.getElementById("checkboxAnno").checked;
    var applyRedactions = document.getElementById("checkboxRedact").checked;
    showLoading();	
    var jsonPDFData = "";
    if(isChangeMetaData)
        jsonPDFData = $.toJSON(_pdfMetaData);
    var annoInfo = "";
    if(includeAnnotation || applyRedactions) 
        annoInfo = GetJsonDoc(true,false);
    if(_imgOptions != "")
        _imgOptions = $.toJSON(_imgOptions);
    var designMes = $.toJSON(_pdfPageDesign);
    var bookmarks = getFinalBookmarkJson();


    var str = { action: "ExportTo", _isChangeHTML: isChangeHTML, fid: _fid, xfdf: _xfdf, fileName: _actualName, tempName: _fileName, password: curDocPassWord, burnAnnos: includeAnnotation, applyRedacts: applyRedactions, addIndex: _addIndex, extractIndex: _extractIndex, pdfMetaData: jsonPDFData, type: _type, imgOptions: _imgOptions, htmlType: _htmlType, jsonDoc: annoInfo, pageDesign: designMes, bookmarks: bookmarks, bkchange: bookmarkHasModified };
	var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async:true,
        data: str, 
        success: function(response) {     
            $("#loading").hide();
		    var arr = eval('(' + response + ')'); 
			if(arr.state == "success")
			{
			    saveFile = arr.msg;
			    if (isSharePoint)
			        alert(i18n['content']['SaveFileOk'] || "Have been saved successfully!");
			    else {
			        var saveFile = getFolder("output") + encodeURIComponent(saveFile);
			        window.open(saveFile);
			    }
            }
			else
			{
				alert(arr.msg);
			}
       },
       error: function(err) {$("#loading").hide();}  
   }
   $.ajax(options);
}

function RotateSave() {
    var _addIndex = "";
    var _extractIndex = "";
    var pdfOptimizer = "";
    var isChangeHTML = sendToChangeHTML();
    var includeAnnotation=true;
    var applyRedactions=false;


    var isLinks = _fileDocument[curFileId].IsLinks();
  
        //PDFMetadata
        var jsonPDFData = "";
        if (isChangeMetaData)
            jsonPDFData = $.toJSON(_pdfMetaData);
        //OwnerPassword setting
        var newRestriction = "";
        if (settingRestriction != "")
            newRestriction = $.toJSON(settingRestriction);
        //PDF Optimizer
        if (pdfOptimizer != "")
            pdfOptimizer = $.toJSON(pdfOptimizer);
        //annotation && redaction
        var annoInfo = "";
        if (includeAnnotation || applyRedactions)
            annoInfo = GetJsonDoc(true, true);
        else
            annoInfo = GetJsonDoc(false, true);
        $("#_rotatePopbox").hide();
        //page design
        var designMes = $.toJSON(_pdfPageDesign);
        var bookmarks = getFinalBookmarkJson();
        var str = { action: "SaveFile", _isChangeHTML: isChangeHTML, fid: _fid, fileName: _actualName, tempName: _fileName, password: curDocPassWord, docOwnerPs: curDocOwnerPs, burnAnnos: includeAnnotation, applyRedacts: applyRedactions, addIndex: _addIndex, extractIndex: _extractIndex, pdfMetaData: jsonPDFData, userPs: settingUserPs, ownerPs: settingOwnerPs, newRestrict: newRestriction, removePs: removeAllPs, jsonDoc: annoInfo, optimizer: pdfOptimizer, pageDesign: designMes, bookmarks: bookmarks, bkchange: bookmarkHasModified };
        var options = {
            type: "POST",
            url: getServerHandlerUrl(),
            async: true,
            data: str,
            success: function (response) {
             
                var arr = eval('(' + response + ')');
                if (arr.state == "success") {
                    saveFile = arr.msg;
                    var path = getRootPath();
             
                    if (path.indexOf("/") == 0)
                        path = window.location.host + path;
                    if (path.indexOf("http") != 0)
                        path = window.location.protocol + "//" + path;
                    if (path.lastIndexOf("/") == path.length - 1)
                        path = path.substr(0, path.length - 1);
                  
                    var relUrl = location.href

                    if (relUrl.indexOf("?") != -1) {
                        relUrl = relUrl.split("?")[0];
                    }
                    if (relUrl.lastIndexOf("/") == relUrl.length - 1)
                        relUrl = relUrl.substr(0, relUrl.length - 1);
                    location.href = relUrl + "?RasterEdgeSFid=" + _fid + "&src=" + path + getCacheFileFolder(_fid) + saveFile;
                   //     window.open(getCacheFileFolder(_fid) + saveFile);
                    // window.open(_cacheFolder + "/" + _fid + "/" + saveFile);           
                }
                else {
                    alert(arr.msg);
                }
            },
            error: function (err) { $("#loading").hide(); }
        }
        setTimeout(function () {
            $.ajax(options);
        }, 250);
        
}




function GetJsonDoc(isCopyAnnos,isCopyLinks)
{
    var DocDataArray = new Array();
    var DocData = new DocumentData({Index:curFileId});
    DocDataArray[curFileId] = DocData;
    for(var i=0;i<_fileDocument[curFileId].Viewers.length;i++)
    {
        DocDataArray[curFileId].Viewers[i] = CopyData(i,isCopyAnnos,isCopyLinks);
    }
    return $.toJSON(DocDataArray[curFileId]);
}

function ChangeDivCssClass(Pg)
{
    $("div").removeClass("thumb_select");       
    selectId = "#lbl_" + Pg;
    $(selectId).addClass("thumb_select");
}

function changePosition()
{
    if($(".zoomList").val() == "Fit Page")
    {
        var pageIndex = parseInt(_curCorrectPageId);	
		pageIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];

        var percent = (_docHeight/viewer.OneToOne_Height*100).toFixed(2);
        _zoomListIndex = setPercentPosition(percent);
        zoomValue = percent /100; 
    } 
    else if($(".zoomList").val() == "Fit Width")
    {
        var pageIndex = parseInt(_curCorrectPageId);	
	    pageIndex = _fileDocument[curFileId].GetPageIndex(pageIndex);
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];

        var percent = parseInt(_docWidth/viewer.OneToOne_Width*100);
        _zoomListIndex = setPercentPosition(percent);
        zoomValue = percent/100;
    }
}

function TargetHover(target,isHover)
{
    if(!isHover)
    {
        $(target).unbind("mouseenter").unbind("mouseleave");
        $(target).css("cursor","text")
    }
    else
    {
        $(target).hover
		(
		    function()
		    {
		        $(this).css("cursor","pointer");
		    },
		    function()
		    {
		    }
		)
	} 
}

var OnceShow = false;
function FileNotFound()
{
   if(!OnceShow)
   {
        OnceShow = true;
        alert(i18n['content']['FileNotFound'] || "Content can not be found,Please re-open this file!!");
        var location = window.document.location.href;
        window.location.href= location;
        OnceShow = false;
   } 
}

window.onresize = function()
{
    if (isFillBrowser) {
        browserWidth = document.body.offsetWidth-1;

        browserHeight = window.innerHeight;
        if (typeof (browserWidth) == "undefined") {
            browserWidth = window.innerWidth;
        }
    }
    browserWidth -= (frameMargin[0] + frameMargin[2]);
    browserHeight -= (frameMargin[1] + frameMargin[3]);
    /*
    var fix = 0;
    if(leftSidebarWidth>40)
        fix=5;
    //if (document.documentElement.clientHeight < document.documentElement.offsetHeight) 
        contentWidth = browserWidth - (leftSidebarWidth+fix) - rightSidebarWidth - 17;
   // else
    //    contentWidth = browserWidth - leftSidebarWidth - rightSidebarWidth - 3;
    //contentWidth = browserWidth - leftSidebarWidth - rightSidebarWidth;
    contentHeight = browserHeight - toolbarHeight - footerbarHeight;
    var docWidth = contentWidth - 25;
    _docWidth = docWidth - 17;
    _docHeight = contentHeight - 17;
   
    $("#_toolbarPanel").width((browserWidth-20)+"px");
    $("#wdp_Viewer").width(contentWidth+"px");
    $("#wdp_Content").width((contentWidth-25)+"px");
    $("#draw_canvas").width(_docWidth+"px");
    */
    contentHeight = browserHeight - toolbarHeight - footerbarHeight;
    _docHeight = contentHeight;

    contentWidth = browserWidth  -leftSidebarWidth;
    if (rightSidebarWidth)
        contentWidth = contentWidth - rightSidebarWidth;
    if (!leftSideShow)
        contentWidth = contentWidth + leftSidebarWidth;

        
    //set the width wheather the broswer is full screen
    if (isFillBrowser) {
        if (document.body.clientHeight <= document.body.offsetWidth) {

        }
    }
    LoadingCss(browserWidth, browserHeight);
    var docWidth = contentWidth - 25;
    _docWidth = docWidth - 17; //for scrollbar width

    $("#wdp_Viewer").width(contentWidth + "px");
    $("#wdp_Content").width(docWidth + "px");
    $("#draw_canvas").width(_docWidth + "px");
    $("#_toolbarPanel").width((browserWidth -17)+ "px");
    footerContentOffset();
    var footerWidth = browserWidth - (leftOffset + rightOffset)-2;//-17;
    $("#_footerImg").css({"width":footerWidth+"px","padding":"0px "+rightOffset+"px 0px "+leftOffset+"px"});

    $("#wdp_LeftSidebar").height(contentHeight+"px");
    $("#_leftSidePanel").height(contentHeight+"px");
    $("#wdp_Viewer").height(contentHeight+"px");
    $("#wdp_Content").height(contentHeight+"px");
    $("#wdp_RightSidebar").height(contentHeight+"px");
    $("#_rightSidePanel").height(contentHeight+"px");
    $(".ui-tabs-vertical .ui-tabs-nav").height((contentHeight-1)+"px");
    $("#_plcImgsThumbs").height(contentHeight+"px");
    $("#_outlineResize").height(contentHeight+"px");
    $("#_commentsPanel").height((contentHeight - 29)+"px");
    

    if(_fid != null && _fid !="")
	{
	    _fileDocument[curFileId].ChangeState();
        var curPg = parseInt(_curCorrectPageId);
        actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        if (viewer != null) {
            Adaptive(viewer);
            ChangeViewerPosition(actualIndex);
            resizeDocViewerByCSS3("imgBig", actualIndex);
            ImageViewerAnnotationResize(actualIndex);
            changePosition();
        }
        resetCommentShowPage();
        refreshSearchReact();
    }
 
    
}
function resetCommentShowPage() {
    var fileDoc = _fileDocument[curFileId];
    for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
        var viewer = _fileDocument[curFileId].Viewers[i];
        if (viewer == null || viewer.ShowIndex == null)
        { continue; }
        var pageIndex = viewer.PageIndex;
        $("#thumbPgId_" + pageIndex).text((parseInt(fileDoc.Viewers[pageIndex].ShowIndex) + 1));
       
        
            for (var index = 0; index < viewer.Annotations.length; index++) {
                if (viewer.Annotations[index] == null) { continue; }
                var annotation = viewer.Annotations[index];
                $("#" + pageIndex + "_" + annotation.Index + "_pg").html("Page " + (parseInt(fileDoc.Viewers[pageIndex].ShowIndex) + 1));
            }
        

    }
 
}


var isDragIn = false;
var dragImageMouseDown = function(e)
{
    isDragIn = true;
    divScrollLeft = $("#wdp_Content")[0].scrollLeft;
    divScrollTop = $("#wdp_Content")[0].scrollTop;
    divScrollWidth = $("#wdp_Content")[0].scrollWidth;
    divScrollHeight = $("#wdp_Content")[0].scrollHeight;
    e = e || window.event;
    xDown = e.pageX;
    yDown = e.pageY;
    if(selectTextPages.length != 0)
	{
	    for(var i=0;i<selectTextPages.length;i++)
        {
            $("#reSelectTextSvg").remove();
        }
	    selectTextPages = new Array();
	}
    return false;
}

var dragImageMouseMove = function(e)
{
    if(isDragIn)
    {
        e = e||window.event;
        xMove = e.pageX;
        yMove = e.pageY;
        move_x = xMove - xDown;
        move_y = yMove - yDown;
        moveLeft = divScrollLeft - (move_x);
        moveTop = divScrollTop - (move_y);
        if(moveLeft>0 && moveLeft<divScrollWidth)
            $("#wdp_Content")[0].scrollLeft = moveLeft;
        if(moveTop>0 && moveTop<divScrollHeight);
			$("#wdp_Content")[0].scrollTop = moveTop;
	    return false;
    }
}

var dragImageMouseUp = function(e)
{
    isDragIn = false;
    return false;
}

var pagesredact = false;
function SelectAreaEvent(type, redactpages) {
    if (isReadOnly()) {
        return;
    }
    down_flag = false;
    curAnnoType = type;
    pagesredact = redactpages | false;
    $(".showByDrag").unbind("mousedown", dragImageMouseDown);
    $(".showByDrag").unbind("mousemove", dragImageMouseMove);
    $(".showByDrag").unbind("mouseup", dragImageMouseUp);
    $(".showByDrag").removeClass("mouseStyleMove");
    $(".showByDrag").addClass("mouseStyleSelect");
    if (stamp_add) {
        $("#draw_canvas").trigger("mouseup");
    }
    $("#draw_canvas").unbind("mousedown");
    $("#draw_canvas").unbind("mousemove");
    $("#draw_canvas").unbind("mouseup");
    //if(!isBindSelectEvent)
    //{
    $("#draw_canvas").bind("mousedown", selectAreaDown);
    $("#draw_canvas").bind("mousemove", selectAreaMove);
    $("#draw_canvas").bind("mouseup", selectAreaUp);
    isBindSelectEvent = true;
    if (type=="getsize")
    AddIconBorder("#re_func_selectarea");
    for (var i = 0; i < draggableNumArray.length; i++)
        $(draggableNumArray[i]).draggable("disable");
}



var selectAreaDown = function (e) {
    if (e.button == 2) {
        $(".reSelectTextSvg").remove();

        $("#draw_canvas").unbind("mousedown");
        $("#draw_canvas").unbind("mousemove");
        $("#draw_canvas").unbind("mouseup");
        $(".showByDrag").bind("mousedown", dragImageMouseDown);
        $(".showByDrag").bind("mousemove", dragImageMouseMove);
        $(".showByDrag").bind("mouseup", dragImageMouseUp);
        $(".showByDrag").removeClass("mouseStyleAnnotation");
        $(".showByDrag").addClass("mouseStyleMove");
        HandleEvent();
        return;
    }
    down_flag = true;
    parent_left = $("#wdp_Content").offset().left;
    parent_top = $("#wdp_Content").offset().top;
    nScrollLeft = $("#wdp_Content")[0].scrollLeft;
    nScrollTop = $("#wdp_Content")[0].scrollTop;
    e = e || window.event;
    selectXDown = e.pageX - parent_left + nScrollLeft;
    selectYDown = e.pageY - parent_top + nScrollTop;
    if (_viewerMode == "multi")
        drawPageIndex = PrePageCount(selectYDown);
    else
        drawPageIndex = parseInt(_curCorrectPageId);
    drawActualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
        $(".reSelectTextSvg").remove();
    
}

var selectAreaMove = function (e) {
    if (down_flag) {
        act = "move";
        end_xpoint = e.pageX - parent_left + nScrollLeft;
        end_ypoint = e.pageY - parent_top + nScrollTop;
        start_xpoint = selectXDown;
        start_ypoint = selectYDown;
        if (end_ypoint < start_ypoint) {
            start_ypoint = end_ypoint;
            end_ypoint = selectYDown;
        }
        if (end_xpoint < start_xpoint) {
            start_xpoint = end_xpoint;
            end_xpoint = selectXDown;
        }
        $(".reSelectTextSvg").remove();

        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
            viewer.GetViewerLeftTop();
            var viewerLeft = viewer.GetRefreshBlankLeft();
            var viewerTop = viewer.Top;
            if (_viewerMode == "multi")
                viewerTop += PreCountHeight(_fileDocument[curFileId].GetShowIndex(actualIndex));
            var gowidth = Math.abs(start_xpoint - end_xpoint);// addWidth * zoomValue;
            var goheight = Math.abs(start_ypoint - end_ypoint);// addWidth * zoomValue;
            if (gowidth <= 0)
                gowidth = 0;
            var hightContent = "<div class='reSelectTextSvg' style='left:" + start_xpoint + "px;top:" + start_ypoint + "px;width:" + (gowidth) + "px;height:" + (goheight) + "px;'>";
            hightContent += "<svg width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'><rect width='100%' height='100%' style='fill:#0000ff;stroke-width:2;opacity:0.75'/></svg></div>";
            //$("#docannotation_" + actualIndex).append(hightContent);
            $("#draw_canvas").append(hightContent);
        
    }
}

var selectAreaUp = function (e) {
    if (curAnnoType == "redact" && isInRedactHover)
        return;
    e=e||window.event;
    
    act = "up";
    down_flag = false;
    end_xpoint = e.pageX - parent_left + nScrollLeft;
    end_ypoint = e.pageY - parent_top + nScrollTop;
    start_xpoint = selectXDown;
    start_ypoint = selectYDown;
    if (start_xpoint == end_xpoint && start_ypoint == end_ypoint)
        return;
    if (end_ypoint < start_ypoint) {
        start_ypoint = end_ypoint;
        end_ypoint = selectYDown;
    }
    if (end_xpoint < start_xpoint) {
        start_xpoint = end_xpoint;
        end_xpoint = selectXDown;
    }
    $(".reSelectTextSvg").remove();

    $("#draw_canvas").unbind("mousedown");
    $("#draw_canvas").unbind("mousemove");
    $("#draw_canvas").unbind("mouseup");
    $(".showByDrag").bind("mousedown", dragImageMouseDown);
    $(".showByDrag").bind("mousemove", dragImageMouseMove);
    $(".showByDrag").bind("mouseup", dragImageMouseUp);
    $(".showByDrag").removeClass("mouseStyleAnnotation");
    $(".showByDrag").addClass("mouseStyleMove");
    if (e.button == 2) {
        HandleEvent();
        return;
    }
    markupArea();
    if (curAnnoType == "redact" && continueDrawRedact) {
        SelectAreaEvent("redact", false);
    } else {
        HandleEvent();
    }
}

function markupArea() {

   // var curPg = parseInt(_curCorrectPageId);
    // actualIndex = _fileDocument[curFileId].GetPageIndex(curPg);
    actualIndex = drawActualIndex;
    if (curAnnoType == "zoom") {
        changeZoomByArea(start_xpoint, start_ypoint, end_xpoint, end_ypoint, actualIndex);
        return;
    }
   
    getMarkSize(start_xpoint, start_ypoint, end_xpoint, end_ypoint, actualIndex);
    if (curAnnoType == "getsize")
        return;
    var lineRectangle = new Array();

    lineRectangle.push(start_xpoint);
    lineRectangle.push(start_ypoint);
    lineRectangle.push(Math.abs(start_xpoint - end_xpoint));
    lineRectangle.push(Math.abs(start_ypoint - end_ypoint));

    var gopagenumbers=[actualIndex];
    if (pagesredact) {
        if (redactpagesnumber == null || typeof (redactpagesnumber) == "undefined") {
        } else {
            redactpagesnumber = unique(redactpagesnumber);
            if (redactpagesnumber.length > 0) {
                for (var i = 0 ; i < redactpagesnumber.length ; i++) {
                    try{
                        gopagenumbers[i] = parseInt(redactpagesnumber[i]) - 1;
                        if (gopagenumbers[i] < 0)
                            gopagenumbers[i] = null;
                    }catch(e){
                        gopagenumbers[i]=null;
                    }
                }
            }
        }
    }
   



    for (var goi = 0; goi < gopagenumbers.length; goi++) {
        var gopage = gopagenumbers[goi];
        if (gopage == null || gopage < 0 || gopage > _fileDocument[curFileId].Viewers.length)
            continue;
        var viewer = _fileDocument[curFileId].Viewers[gopage];
        var tempRedactAnno=null;
        if (viewer.Annotations.length > 0) {
            for (var sourceAnnot in viewer.Annotations) {
                if (sourceAnnot.redactArea) {
                    tempRedactAnno = sourceAnnot;
                    break;
                }
            }
        }
        var fixleft = viewer.GetRefreshBlankLeft() - 1 * zoomValue;
        var countHeight = 0;
        if (_viewerMode == "single") {
            countHeight = viewer.Top;
        } else {
            countHeight = PreCountHeight(actualIndex);
        }

        var fixtop = countHeight + 1 * zoomValue;

        var docAnno = new Annotation({ OnPageIndex: gopage, Type: curAnnoType, Index: num, ZoomValue: zoomValue, ViewerLeft: viewer.GetRefreshBlankLeft(), ViewerTop: viewer.Top, ViewerWidth: viewer.ActualWidth, ViewerHeight: viewer.ActualHeight, ViewerScaleX: viewer.ScaleX, ViewerScaleY: viewer.ScaleY, ThumbViewerScaleX: viewer.ThumbScaleX, ThumbViewerScaleY: viewer.ThumbScaleY, ViewerOne2OneWidth: viewer.OneToOne_Width, ViewerOne2OneHeight: viewer.OneToOne_Height });
        docAnno.redactArea = true;
        docAnno.selectTextRectangle = lineRectangle;
        _fileDocument[curFileId].Viewers[gopage].Annotations[num] = docAnno;
        var startX = start_xpoint;
        var startY = start_ypoint;
        var endX = end_xpoint;
        var endY = end_ypoint;
        var borderwidth = 1;
        docAnno.ShowTop =  startY - fixtop - borderwidth * zoomValue;//+ PreCountHeight(gopage);
        docAnno.ShowLeft = startX - fixleft-borderwidth * zoomValue ;
        docAnno.ShowWidth = Math.abs(start_xpoint - end_xpoint);
        docAnno.ShowHeight = Math.abs(start_ypoint - end_ypoint);
        if (tempRedactAnno != null) {
            docAnno.FillColor = tempRedactAnno.FillColor;
            docAnno.MarkOutlineColor = tempRedactAnno.MarkOutlineColor;
            docAnno.MarkFillColor = tempRedactAnno.MarkFillColor;
            docAnno.Transparency = tempRedactAnno.Transparency;
            docAnno.isOverlayTxt = tempRedactAnno.isOverlayTxt;
            docAnno.TxtFont = tempRedactAnno.TxtFont;
            docAnno.TxtFontSize = tempRedactAnno.TxtFontSize;
            docAnno.ShowedText = tempRedactAnno.ShowedText;
            docAnno.TxtFontColor = tempRedactAnno.TxtFontColor;
            docAnno.TxtAlignment = tempRedactAnno.TxtAlignment;
            docAnno.IsRepeat = tempRedactAnno.IsRepeat;
        }
        docAnno.GetActualPosition();
        drawTextActSvg(docAnno);
        var date = getTimeString();
        _fileDocument[curFileId].Viewers[gopage].Annotations[num].ModifiedDate = date;
        AddAnnoToCommentsPanel(gopage, curAnnoType, num, date);
        num++;
    }
    if (!continueDrawRedact) { 
        redactpagesnumber = null;
    }
    
}

function unique(arr) {
    var result = [], hash = {};
    for (var i = 0, elem; (elem = arr[i]) != null; i++) {
        if (!hash[elem]) {
            result.push(elem);
            hash[elem] = true;
        }
    }
    return result;
 
}

var curAnnoType = "";
var isBindSelectEvent = false;
var isBindHandEvent = false;
function SelectTextEvent(type)
{
    down_flag = false;
    isNote = false;
    curAnnoType = type;
    $(".showByDrag").unbind("mousedown",dragImageMouseDown);
	$(".showByDrag").unbind("mousemove",dragImageMouseMove);
	$(".showByDrag").unbind("mouseup",dragImageMouseUp);
	$(".showByDrag").removeClass("mouseStyleMove");
	$(".showByDrag").addClass("mouseStyleSelect");
	if (stamp_add) {
	    $("#draw_canvas").trigger("mouseup");
	} 
	$("#draw_canvas").unbind("mousedown");
	$("#draw_canvas").unbind("mousemove");
	$("#draw_canvas").unbind("mouseup");
	//if(!isBindSelectEvent)
	//{
	    $("#draw_canvas").bind("mousedown",selectDown);
	    $("#draw_canvas").bind("mousemove",selectMove);
	    $("#draw_canvas").bind("mouseup",selectUp); 
	    isBindSelectEvent = true;
	//}
	    if (curAnnoType != "select" && curAnnoType != "redact" && curAnnoType != "redactArea")
	{
	    if(selectTextPages.length != 0)
	    {
	        for(var i=0;i<selectTextPages.length;i++)
            {
                $("#reSelectTextSvg").remove();
            }
	        markupText();
	        selectTextPages = new Array();
	    }
	}
	for(var i=0;i<draggableNumArray.length;i++)
        $(draggableNumArray[i]).draggable("disable");
}

var selectXDown;
var selectYDown;
var start_xpoint = 0;
var start_ypoint = 0;
var end_xpoint = 0;
var end_ypoint = 0;
var down_flag = false;
var act = "";
var selectDown = function(e)
{
    if (isReadOnly()) {
        return;
    }
    if (e.button == 2) {
        if (curAnnoType != "redact") {
            if (curCursorStyle == "move")
                HandleEvent();
            else if (curCursorStyle == "select") {
                ArrowEvent();
                curAnnoType = "select";
            }
        } else {
            HandleEvent();
        }
    }
    down_flag = true;
    parent_left = $("#wdp_Content").offset().left;
    parent_top = $("#wdp_Content").offset().top;
    nScrollLeft = $("#wdp_Content")[0].scrollLeft;
    nScrollTop = $("#wdp_Content")[0].scrollTop;
    e = e || window.event;
    selectXDown = e.pageX - parent_left + nScrollLeft;
    selectYDown = e.pageY - parent_top + nScrollTop;
    for(var i=0;i<selectTextPages.length;i++)
    {
        $("#reSelectTextSvg").remove();
    }
    if(curAnnoType == "redact" && isInRedactHover)
        down_flag = false;
}

var selectMove = function(e)
{
    if(down_flag)
    {
        act = "move";
        end_xpoint = e.pageX - parent_left + nScrollLeft;
        end_ypoint = e.pageY - parent_top + nScrollTop;
        start_xpoint = selectXDown;
        start_ypoint = selectYDown;
        if(end_ypoint < start_ypoint)
        {
            start_xpoint = end_xpoint;
            start_ypoint = end_ypoint;
            end_xpoint = selectXDown;
            end_ypoint = selectYDown;
        }
        $(".reSelectTextSvg").remove();
        SelectText(zoomValue);
        for(var i=0;i<selectTextPages.length;i++)
        {
            var viewer = _fileDocument[curFileId].Viewers[selectTextPages[i]];
            viewer.GetViewerLeftTop();
            var viewerLeft = viewer.GetRefreshBlankLeft()-1*zoomValue;
            var viewerTop = viewer.Top;
            if(_viewerMode == "multi")
                viewerTop += PreCountHeight(_fileDocument[curFileId].GetShowIndex(selectTextPages[i]));
            var gowidth = viewer.ActualWidth - addWidth * zoomValue;
            if (gowidth <= 0)
                gowidth = 0;
            var hightContent = "<div class='reSelectTextSvg' style='left:"+viewerLeft+"px;top:"+viewerTop+"px;width:"+(gowidth)+"px;height:"+(viewer.ActualHeight-(addHeight+1)*zoomValue)+"px;'>";
            hightContent += "<svg width='100%' height='100%' version='1.1' xmlns='http://www.w3.org/2000/svg'>";
            hightContent += selectSvgArray[i] + "</svg></div>";
            //$("#docannotation_" + selectTextPages[i]).append(hightContent);
            $("#draw_canvas").append(hightContent);
        }
    }
}

var selectUp = function(e)
{
    if(curAnnoType == "redact" && isInRedactHover)
        return;
    if (isReadOnly()) {
        down_flag = false;
        return;
    }
    act = "up";
    down_flag = false;
    end_xpoint = e.pageX - parent_left + nScrollLeft;
    end_ypoint = e.pageY - parent_top + nScrollTop;
    start_xpoint = selectXDown;
    start_ypoint = selectYDown;
    if(start_xpoint == end_xpoint && start_ypoint == end_ypoint)
        return;
    if(end_ypoint < start_ypoint)
    {
        start_xpoint = end_xpoint;
        start_ypoint = end_ypoint;
        end_xpoint = selectXDown;
        end_ypoint = selectYDown;
    }
    $(".reSelectTextSvg").remove();
    SelectText(1);
    if(curAnnoType == "select")
    {
        for(var i=0;i<selectTextPages.length;i++)
        {
            //   $("#RE_"+selectTextPages[i]).append(selectSvgArray[i]);
            $("#page_" + selectTextPages[i]).append(selectSvgArray[i]);
            
        }
        $("#textCopy").remove();
        var str = "<div id='textCopy' class='reCopyText' style='background:#ffffff;'>"+selectTextString.Append("</span>").ToString()+"</div>";
        $("body").append(str);
        if(document.selection) //IE9 -
        {
            document.selection.empty();
            var range = document.body.createTextRange();
            range.moveToElmentText(document.getElementById("textCopy"));
            range.select();
        }
        else if(window.getSelection) //IE9 +,FireFox,Safari,Chrome
        {
            window.getSelection().removeAllRanges();
            var range = document.createRange();
            range.selectNode(document.getElementById("textCopy"));
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
        }
    }
    else
        markupText();
}

function markupText()
{
    var pageSelects = selectPosiString.split("|");
    for(var i=0;i<selectTextPages.length;i++)
    {
        var actualIndex = selectTextPages[i];
        var viewer = _fileDocument[curFileId].Viewers[actualIndex];
        viewer.GetViewerLeftTop();
                       
        var pageSelect = pageSelects[i + 1];
        var lineSelects = pageSelect.split(";");
        var tempLeft = new Array();
        var tempTop = new Array();
        var tempWidth = new Array();
        var tempHeight = new Array();
        var lineRectangle = new Array();
        for(var j=0;j<lineSelects.length-1;j++)
        {
            var posi = lineSelects[j].split(",");
            tempLeft.push(parseFloat(posi[0]));
            tempTop.push(parseFloat(posi[1]));
            tempWidth.push(parseFloat(posi[2]));
            tempHeight.push(parseFloat(posi[3]));
        }
        lineRectangle.push(tempLeft);
        lineRectangle.push(tempTop);
        lineRectangle.push(tempWidth);
        lineRectangle.push(tempHeight);
        var docAnno = new Annotation({OnPageIndex:actualIndex,Type:curAnnoType,Index:num,ZoomValue:zoomValue,ViewerLeft:viewer.GetRefreshBlankLeft(),ViewerTop:viewer.Top,ViewerWidth:viewer.ActualWidth,ViewerHeight:viewer.ActualHeight,ViewerScaleX:viewer.ScaleX,ViewerScaleY:viewer.ScaleY,ThumbViewerScaleX:viewer.ThumbScaleX,ThumbViewerScaleY:viewer.ThumbScaleY,ViewerOne2OneWidth:viewer.OneToOne_Width,ViewerOne2OneHeight:viewer.OneToOne_Height});
        docAnno.selectTextRectangle = lineRectangle;
        if (RotateArray[actualIndex] != null) {
            docAnno.MarkupDirection = RotateArray[actualIndex];
        } else {
            docAnno.MarkupDirection = 0;
        }
        if (docAnno.Type != "replaceText") {
            var text = "";
            if (selectTextString != null && selectTextString._strings.length > 0) {
                for (var ti = 0; ti < selectTextString._strings.length; ti++) {
                    text += selectTextString._strings[ti];
                }
            }
            docAnno.redactText = text;
        }
        if (linefirstblank) {
            docAnno.STime = " ";
            linefirstblank = false;
        }
        _fileDocument[curFileId].Viewers[actualIndex].Annotations[num] = docAnno;
        var startX = tempLeft[0];
        var startY = tempTop[0];
        var endX = tempLeft[tempLeft.length - 1] + tempWidth[tempWidth.length - 1];
        var endY = tempTop[tempTop.length - 1] + tempHeight[tempHeight.length - 1];
        docAnno.Points = pageSelect.substring(0,pageSelect.length - 1);
        docAnno.EndLeft = endX;
        docAnno.EndTop = endY;
        drawTextActSvg(docAnno);
        var date = getTimeString();
        _fileDocument[curFileId].Viewers[actualIndex].Annotations[num].ModifiedDate = date;
        AddAnnoToCommentsPanel(actualIndex,curAnnoType,num,date);
        num++;
   }
   selectTextPages = new Array();
   if (curAnnoType != "redact") {
       if (continueDrawAnnotation) {
           return;
       } else {
           curAnnoType = "";
       }
       if (curCursorStyle == "move")
           HandleEvent();
       else if (curCursorStyle == "select") {
           ArrowEvent();
           curAnnoType = "select";
       }
   } else {
       if (continueDrawRedact) {
           return;
       }
       HandleEvent();
   }
}

var selectTextPages = new Array();
var selectSvgArray = new Array();
var selectTextString = new StringBuilder("<span>");
var selectPosiString = "";
function SelectText(zoomNum)
{
    if(start_xpoint == "undefined" || start_ypoint == "undefined" || end_xpoint == "undefined" || end_ypoint == "undefined")
        return;
    selectTextString = new StringBuilder("<span>");
    curPageStyle = null;
    curStyleId = null;
    selectTextPages = new Array();
    selectSvgArray = new Array();
    selectPosiString = "";
    var drawPageIndexMin = PrePageCount(start_ypoint);
    var drawPageIndexMax = PrePageCount(end_ypoint);
    GetPageActualPosition(drawPageIndexMin,start_xpoint,start_ypoint,"start");
    GetPageActualPosition(drawPageIndexMax,end_xpoint,end_ypoint,"end");
    if(_viewerMode == "multi")
    {
        if(drawPageIndexMin == drawPageIndexMax)
            SelectInOnePage(drawPageIndexMin,zoomNum);
        else
            SelectInPages(drawPageIndexMin,drawPageIndexMax,zoomNum);
    }
    else
    {
        drawPageIndex = parseInt(_curCorrectPageId);
        SelectInOnePage(drawPageIndex,zoomNum);
    }
}


function SelectInOnePage(drawPageIndex,zoomNum)
{
    var actualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var pageChars = _fileDocument[curFileId].ViewerChars[actualIndex];
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    if(pageChars == null)
        return;
    if(typeof(pageChars) == "undefined")
    {
        alert(i18n['content']['TextTransferred'] || "Text information is being transferred,Please wait!!");
        down_flag = false;
        return;
    }
    if(typeof(pageChars) == "string")
    {
        alert(pageChars);
        down_flag = false;
        return; 
    }

    if (viewer==null || viewer.SourceRotate==null||viewer.SourceRotate == 0 || viewer.SourceRotate == 180) {
        var lineStartIndex = GetLineStartIndex(pageChars.Lines);
        //    alert()
        if (lineStartIndex == "undefined")
            return;
        var lineEndIndex = GetLineEndIndex(pageChars.Lines, lineStartIndex);
        if (lineEndIndex == "undefined")
            return;
        SelectTextInOnePage(actualIndex, zoomNum, lineStartIndex, lineEndIndex, false, false);
    } else {
        SelectTextFromRotatePage(actualIndex, pageChars, viewer.SourceRotate, zoomNum);
    }

}
function SelectTextFromRotatePage(actualIndex, pageLines, rotate, zoomNum) {
    var rightbd = new Array();
    var start = new Object();
    var end = new Object();
    if (start_xpoint == "undefined" || start_ypoint == "undefined" || end_xpoint == "undefined" || end_ypoint == "undefined")
        return false;
  
    if (start_xpoint > end_xpoint) {
        start.x = end_xpoint;
        start.y = end_ypoint;
        end.x = start_xpoint;
        end.y = start_ypoint;

    } else {
        start.x =  start_xpoint;
        start.y = start_ypoint;
        end.x = end_xpoint;
        end.y =  end_ypoint;
    }
    for (var i = 0; i < pageLines.Lines.length; i++) {
        var currenline = pageLines.Lines[i].CharBoundaryLst;
        for (var j = 0; j < currenline.length; j++) {
            var bd = [currenline[j].X , currenline[j].Y , currenline[j].X  + currenline[j].W , currenline[j].Y  + currenline[j].H ];
            if (inRotateSelectBox(start, end, bd)) {
                rightbd.push(currenline[j]);
            }
        }
    }
    if (rightbd.length > 0) {
        var reorder = makeline(rightbd);
        drawSelectHighlight(actualIndex, reorder, zoomNum);
    }
}
function makeline(rightbd) {
    var lineSxArray = [];
    var lineStore = [];
    for (var i = 0 ; i < rightbd.length; i++) {
        var index = $.inArray(rightbd[i].X, lineSxArray)
       if (index >= 0) {
           lineStore[index].push(rightbd[i]);
       } else {
           lineSxArray.push(rightbd[i].X);
           var newarray = [];
           newarray.push(rightbd[i]);
           lineStore.push(newarray);
       }
    }
    for (var i = 0 ; i < lineStore.length; i++) {
        var goreorder = lineStore[i];
        lineStore[i]=goreorder.sort(function (a, b) {
            return a.Y - b.Y;
        })
        
    }

    var finalline = [];
    for (var i = 0 ; i < lineStore.length; i++) {
        var goreorder = lineStore[i];
        var newline = [];
        newline.push(goreorder[0])
        for (var j = 1; j < goreorder.length; j++) {
            if (goreorder[j - 1].Y + goreorder[j - 1].H + 0.2 > goreorder[j].Y) {
                newline.push(goreorder[j]);
            }
            else {
                finalline.push(newline);
                newline = [];
                newline.push(goreorder[j])
            }
        }
        finalline.push(newline);
    }
    return finalline;
}


function inRotateSelectBox(start, end, boundry) {
    // boundry[x0,y0,x1,y1]
    var dash = boundry[2] - boundry[0];
    var hor = boundry[3] - boundry[1];
    if (boundry[0]+dash*0.5 < start.x)
        return false;
    if (boundry[2]-dash*0.5 > end.x)
        return false;
    if (boundry[0] < start.x && start.x < boundry[2] && boundry[1] - hor > start.y)
        return false;
    if (boundry[0] < end.x && end.x < boundry[2] && boundry[3] + hor < end.y)
        return false;
    return true;
}

function drawSelectHighlight(actualIndex, finalLines, zoomNum) {
    var rects = "";
    selectPosiString = "|";
    for (var i = 0; i < finalLines.length; i++) {
        var currentLine = finalLines[i]
        var locate = currentLine[0];
        var allHeight = locate.H + (currentLine[currentLine.length - 1].Y - locate.Y);
        if (act == "move")
            rects += "<rect x='" + locate.X * zoomNum + "' y='" + locate.Y * zoomNum + "' width='" + locate.W * zoomNum + "' height='" + allHeight * zoomNum + "'></rect>";
        else if (act == "up")
            rects += "<div class='copyText' style='left:" + locate.X * zoomNum + "px;top:" + locate.Y * zoomNum + "px;width:" + locate.W * zoomNum + "px;height:" + allHeight * zoomNum + "px;'></div>";
        selectPosiString += locate.X + "," + locate.Y + "," + locate.W + "," + allHeight + ";";
    }
    if (act == "move")
        rects = "<g id='reSelectTextSvg' fill='#0000FF' fill-opacity='0.5'>" + rects + "</g>";
    else if (act == "up")
        rects = "<div id='reSelectTextSvg' class='cTDiv_" + actualIndex + "' style='/*transform: rotate(0deg)*/' >" + rects + "</div>";
    selectTextPages.push(actualIndex);
    selectSvgArray.push(rects);
}

function GetLineStartIndex(pageLines)
{
    var lineStartIndex = "undefined";
    if(start_ypoint < pageLines[0].MinHeight || start_ypoint >= pageLines[0].MinHeight && pageLines[0].MaxHeight >= start_ypoint)
    {
        lineStartIndex = 0;
        var lineChars = pageLines[lineStartIndex].CharBoundaryLst;
        var xMin = lineChars[0].X;
        var xMax = lineChars[lineChars.length - 1].X + lineChars[lineChars.length - 1].W;
        if(start_xpoint >= xMin && xMax >= start_xpoint || start_xpoint < xMin){return lineStartIndex;}
        else{lineStartIndex = "undefined";}
    }
    for(var i=1;i<pageLines.length;i++)
    {
        if(start_ypoint >= pageLines[i].MinHeight && pageLines[i].MaxHeight >= start_ypoint || start_ypoint >= pageLines[i-1].MaxHeight && pageLines[i].MaxHeight >= start_ypoint)
        {
            lineStartIndex = i;
            var lineChars = pageLines[lineStartIndex].CharBoundaryLst;
            var xMin = lineChars[0].X;
            var xMax = lineChars[lineChars.length-1].X + lineChars[lineChars.length-1].W;
            if(start_xpoint >= xMin && xMax >= start_xpoint || start_xpoint < xMin)
                break;
        }
    }
    return lineStartIndex;
}

function GetLineEndIndex(pageLines,lineStartIndex)
{
    var lineEndIndex = "undefined";
    if(end_ypoint < pageLines[0].MinHeight){}
    else 
    {
        if(lineStartIndex == 0)
        {
            if(end_ypoint >= pageLines[0].MinHeight && pageLines[0].MaxHeight >= end_ypoint)
            {
                lineEndIndex = 0;
                var lineChars = pageLines[lineEndIndex].CharBoundaryLst;
                var xMin = lineChars[0].X;
                var xMax = lineChars[lineChars.length - 1].X + lineChars[lineChars.length-1].W;
                if(end_xpoint >= xMin && xMax >= end_xpoint || end_xpoint > xMax){return lineEndIndex;}
            }
            lineStartIndex = 1;
        }
        for(var i=lineStartIndex;i<pageLines.length;i++)
        {
            if(end_ypoint >= pageLines[i].MinHeight && pageLines[i].MaxHeight >= end_ypoint || end_ypoint >= pageLines[i-1].MaxHeight && pageLines[i].MaxHeight >= end_ypoint)
            {
                lineEndIndex = i;
                var lineChars = pageLines[lineEndIndex].CharBoundaryLst;
                var xMin = lineChars[0].X;
                var xMax = lineChars[lineChars.length - 1].X + lineChars[lineChars.length-1].W;
                if(end_xpoint >= xMin && xMax >= end_xpoint || end_xpoint > xMax)
                    break;
            }
        }   
    }
    return lineEndIndex;
}

function SelectTextInOnePage(actualIndex,zoomNum,lineStartIndex,lineEndIndex,startFlag,endFlag)
{
    var rects = "";
    selectPosiString += "|";
    var pageChars = _fileDocument[curFileId].ViewerChars[actualIndex];
    var pageLines = pageChars.Lines;
    
    //charStartIndex
    var lineChars = pageLines[lineStartIndex].CharBoundaryLst;
    var charStartIndex = GetCharStartIndex(lineChars,startFlag);
    
    //charEndIndex
    lineChars = pageLines[lineEndIndex].CharBoundaryLst;
    var charEndIndex = GetCharEndIndex(lineChars,endFlag);
    
    if(lineStartIndex == lineEndIndex)
    {
        if(charEndIndex == -1 || charStartIndex == lineChars.length)
            return;
        if(charStartIndex == -1)
            charStartIndex = 0;
        if(charEndIndex == lineChars.length)
            charEndIndex = lineChars.length - 1;
        rects += GetLineSelect(actualIndex,zoomNum,pageLines[lineStartIndex],charStartIndex,charEndIndex+1);
    }
    else
    {
        lineChars = pageLines[lineStartIndex].CharBoundaryLst;
        if(charStartIndex == -1)
            charStartIndex = 0;
        rects += GetLineSelect(actualIndex,zoomNum,pageLines[lineStartIndex],charStartIndex,lineChars.length);
        for(var i=lineStartIndex+1;i<lineEndIndex;i++)
        {
            lineChars = pageLines[i].CharBoundaryLst;
            rects += GetLineSelect(actualIndex,zoomNum,pageLines[i],0,lineChars.length);
        }
        lineChars = pageLines[lineEndIndex].CharBoundaryLst;
        if(charEndIndex == -1){}
        else
        {
            if(charEndIndex == lineChars.length)
                charEndIndex = lineChars.length - 1;
            rects += GetLineSelect(actualIndex,zoomNum,pageLines[lineEndIndex],0,charEndIndex+1);
        }
    }
    if(act == "move")
        rects = "<g id='reSelectTextSvg' fill='#0000FF' fill-opacity='0.5'>" + rects + "</g>";
    else if(act == "up")
        rects = "<div id='reSelectTextSvg' class='cTDiv_"+actualIndex+"'>" + rects + "</div>";
    selectTextPages.push(actualIndex);
    selectSvgArray.push(rects);
}

function GetCharStartIndex(lineChars,startFlag)
{
    var charStartIndex = "undefined";
    if(startFlag)
        charStartIndex = 0;
    else
    {
        if(start_xpoint < lineChars[0].X)
            charStartIndex = -1;
        else if(start_xpoint > lineChars[lineChars.length - 1].X + lineChars[lineChars.length -1].W)
            charStartIndex = lineChars.length;
        else
        {
            if(start_xpoint >= lineChars[0].X && lineChars[0].X + lineChars[0].W >= start_xpoint)
                charStartIndex = 0;
            else
            {
                for(var i=1;i<lineChars.length;i++)
                {
                    if(start_xpoint >= lineChars[i].X && (lineChars[i].X + lineChars[i].W) >= start_xpoint || start_xpoint > (lineChars[i-1].X + lineChars[i-1].W) && start_xpoint < lineChars[i].X)
                    {
                        charStartIndex = i;
                        break;
                    }
                } 
            }
        }
    }
    return charStartIndex;
}

function GetCharEndIndex(lineChars,endFlag)
{
    var charEndIndex = "undefined";
    if(endFlag)
        charEndIndex = lineChars.length - 1 ;
    else
    {
        if(end_xpoint <lineChars[0].X)
            charEndIndex = -1;
        else if(end_xpoint > lineChars[lineChars.length - 1].X + lineChars[lineChars.length -1].W)
            charEndIndex = lineChars.length;
        else 
        {
            if(end_xpoint >= lineChars[lineChars.length - 1].X && lineChars[lineChars.length - 1].X + lineChars[lineChars.length - 1].W >= end_xpoint)
                charEndIndex = lineChars.length - 1;
            else
            {
                for(var i=0;i<lineChars.length-1;i++)
                {
                    if(end_xpoint >= lineChars[i].X && lineChars[i].X + lineChars[i].W >= end_xpoint || end_xpoint> lineChars[i].X + lineChars[i].W && end_xpoint < lineChars[i+1].X)
                    {
                        charEndIndex = i;
                        break;
                    }
                 }
             }
         } 
     }
     return charEndIndex;
}

function SelectInPages(drawPageIndexMin,drawPageIndexMax,zoomNum)
{
    var pageChars = new Array();
    var actualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndexMin);
    pageChars = _fileDocument[curFileId].ViewerChars[actualIndex];
    if(pageChars == null)
        return;
    if(typeof(pageChars) == "undefined")
    {
        alert(i18n['content']['TextTransferred'] || "Text information is being transferred,Please wait!!");
        down_flag = false;
        return;
    }
    if(typeof(pageChars) == "string")
    {
        alert(pageChars);
        down_flag = false;
        return;
    }
    var pageLines = pageChars.Lines;
    
    if(start_ypoint < pageLines[0].MinHeight)
         globalPageContent(actualIndex,zoomValue);
    else if(start_ypoint > pageLines[pageLines.length - 1].MaxHeight){}
    else
    {
        var lineStartIndex = GetLineStartIndex(pageLines);
        if(lineStartIndex == "undefined")
            return;
        var lineEndIndex = pageLines.length - 1;
        SelectTextInOnePage(actualIndex,zoomValue,lineStartIndex,lineEndIndex,false,true);
    }
                   
    //middle pages
    for(var i=drawPageIndexMin+1;i<drawPageIndexMax;i++)
    {
        actualIndex = _fileDocument[curFileId].GetPageIndex(i);
        globalPageContent(actualIndex,zoomValue);
   }
            
   //lastPage lineEndIndex
   actualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndexMax);
   pageChars = _fileDocument[curFileId].ViewerChars[actualIndex];
   if(typeof(pageChars) == "undefined")
   {
       alert(i18n['content']['TextTransferred'] || "Text information is being transferred,Please wait!!");
        down_flag = false;
        return;
   }
   if(typeof(pageChars) == "string")
   {
        alert(pageChars);
        down_flag = false;
        return;
   }
   pageLines = pageChars.Lines;
            
   if(end_ypoint < pageLines[0].MinHeight){}
   else if(end_ypoint > pageLines[pageLines.length - 1].MaxHeight)
        globalPageContent(actualIndex,zoomValue);
   else
   {
        var lineStartIndex = 0;
        var lineEndIndex = GetLineEndIndex(pageLines,lineStartIndex);
        if(lineEndIndex == "undefined")
            return;
        SelectTextInOnePage(actualIndex,zoomValue,lineStartIndex,lineEndIndex,true,false);
   }
}

function globalPageContent(actualIndex,zoomNum)
{
    var svgRect = "";
    var pageChars = new Array();
    pageChars = _fileDocument[curFileId].ViewerChars[actualIndex];
    var pageLines = pageChars.Lines;
            
    for(var i=0;i<pageLines.length;i++)
    {
        lineChars = pageLines[i].CharBoundaryLst;
        svgRect += GetLineSelect(actualIndex,i,zoomValue,pageLines[i],0,lineChars.length);
    }
    selectTextPages.push(actualIndex);
    if(act == "move")
        svgRect = "<g id='reSelectTextSvg' fill='#0000FF' fill-opacity='0.5'>" + svgRect + "</g>";
    else if(act == "up")
        svgRect = "<div id='reSelectTextSvg' class='cTDiv_"+actualIndex+"'>" + svgRect + "</div>";
    selectSvgArray.push(svgRect);
}

var curPageStyle = null;
var curStyleId = null;
var linefirstblank = false;
function GetLineSelect(actualIndex,zoomNum,lineCharsInfo,startIndex,endIndex)
{
    linefirstblank = false;
    var rects = "";
    var pageChars = _fileDocument[curFileId].ViewerChars[actualIndex];
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    var lineChars = lineCharsInfo.CharBoundaryLst;
    if(typeof(lineChars[startIndex]) == "undefined" || typeof(lineChars[endIndex-1]) == "undefined")
        return rects;
    var width = lineChars[endIndex - 1].X + lineChars[endIndex - 1].W - lineChars[startIndex].X;
    if (width < 0)
        width = 0;
    if(act == "move")
        rects += "<rect x='"+lineChars[startIndex].X*zoomNum+"' y='"+lineChars[startIndex].Y*zoomNum+"' width='"+width*zoomNum+"' height='"+lineChars[startIndex].H*zoomNum+"'></rect>";
    else if(act == "up")
        rects += "<div class='copyText' style='left:"+lineChars[startIndex].X*zoomNum+"px;top:"+lineChars[startIndex].Y*zoomNum+"px;width:"+width*zoomNum+"px;height:"+lineChars[startIndex].H*zoomNum+"px;'></div>";
    selectPosiString += lineChars[startIndex].X + "," + lineChars[startIndex].Y + "," + width + "," + lineChars[startIndex].H + ";";
    if (lineCharsInfo.StringVale[startIndex] == " ")
        linefirstblank = true;
    for(var i=startIndex;i<endIndex;i++)
    {
        var charItem = lineChars[i];
        if(actualIndex != curPageStyle)
        {
            curPageStyle = actualIndex;
            curStyleId = charItem.StyleId;
            var curStyle = pageChars.CharStyleLst[curStyleId];
            var style = GetStyle(curStyle);
            selectTextString.Append("</span><span style='"+style+"'>" + lineCharsInfo.StringVale[i]);
        }
        else
        {
            if(charItem.StyleId == curStyleId)
                selectTextString.Append(lineCharsInfo.StringVale[i]);
            else
            {
                 curStyleId = charItem.StyleId;
                 var curStyle = pageChars.CharStyleLst[curStyleId];
                 var style = GetStyle(curStyle);
                 selectTextString.Append("</span><span style='"+style+"'>"+lineCharsInfo.StringVale[i]);
            }
        }
    }
    selectTextString.Append("<br/>");
    return rects;
}

function GetStyle(curStyle)
{
    var style = "font-family:"+curStyle.Fn+";font-size:"+curStyle.Sz+"pt;color:#"+curStyle.C+";";
    if(curStyle.B)
        style += "font-weight:Bold;";
    if(curStyle.I)
        style += "font-style:italic;";
    if(curStyle.S  || curStyle.U)
    {
        style += "text-decoration:";
        var decoration = "";
        if(curStyle.S)
            decoration += "line-through";
        if(curStyle.U)
        {
            if(decoration == "")
                decoration += "underline";
            else
                decoration += " underline";
        }
        decoration += ";";
        style += decoration;
     }
     return style;
}
        

function GetPageActualPosition(drawPageIndex,x_point,y_point,type)
{
    var actualIndex = _fileDocument[curFileId].GetPageIndex(drawPageIndex);
    var viewer = _fileDocument[curFileId].Viewers[actualIndex];
    viewer.GetViewerLeftTop();
    var actualTop = y_point;
    var viewerTop = viewer.Top;
    if(_viewerMode  == "multi")
    {
        var countHeight = PreCountHeight(drawPageIndex);
        actualTop = y_point - countHeight;
        viewerTop = boxWidth * zoomValue;
        x_point = (x_point - viewer.GetRefreshBlankLeft()) * viewer.ScaleX/zoomValue;
        y_point = (actualTop - viewerTop) * viewer.ScaleY/zoomValue;
    }
    else
    {
        x_point = (x_point - viewer.GetRefreshBlankLeft()) * viewer.ScaleX /zoomValue;
        y_point = (actualTop - viewerTop) * viewer.ScaleY /zoomValue;
    }
    if(type == "start")
    {
        start_xpoint = x_point;
        start_ypoint = y_point;
    }
    else
    {
        end_xpoint = x_point;
        end_ypoint = y_point;
    }
}
function getRootPath() {
    if (typeof (_rootpath) == "undefined")
        return "";
    if (_rootpath.length > 0 && _rootpath[_rootpath.length - 1] == "/")
        return _rootpath;
    return _rootpath+"/";
    //if (typeof(_projectRootPath) == "undefined" || _projectRootPath == null) {
    //    var curWwwPath = window.document.location.href;
    //    var position = curWwwPath.indexOf("?");
    //    if(position != -1)
    //    {
    //        curWwwPath = curWwwPath.substring(0,position);
    //    }
    //    position = curWwwPath.lastIndexOf("/");
    //    curWwwPath = curWwwPath.substring(0, position);

    //    return curWwwPath+"/";
    //} else {
    //    if (_projectRootPath[_projectRootPath.length-1]=="/")
    //        return _projectRootPath;
    //    else
    //        return _projectRootPath+"/";
    //}
}

function getCurrentAspx() {
    if (_WDPApp._serverUrl.indexOf("://") < 0) {
        var rootPath = getRootPath() + _WDPApp._serverUrl; //_WDPApp._defaultPage;
        if (rootPath.indexOf("//") == 0)
            rootPath = rootPath.substring(1);
        return rootPath;
    }
    return _WDPApp._serverUrl;
}

function getServerHandlerUrl() {
    if (_WDPApp._serverUrl.indexOf("://") < 0) {
        var handler = getRootPath() + _WDPApp._serverUrl;
        if (handler.indexOf("//") == 0)
            handler = handler.substring(1);
        return handler;
    }
    return _WDPApp._serverUrl;
}

//function getProjectName()
//{		    
//    var pathName = window.document.location.pathname;
//	var position = pathName.lastIndexOf("/");
//	pathName = pathName.substring(0,position);
//	return pathName;
//}

//function getResourceFolder() {
//    var complex = getRootPath() + _resourceFolder;
//    if (complex.indexOf("//") == 0)
//        complex=complex.substring(1);
//    return complex + "/";
//}

//function getImagesFolder() {
//    return getResourceFolder() + "images/";
//}

function getCustomStampFolder() {
    if (_customStampFolder.indexOf("/") == 0)
        _customStampFolder = _customStampFolder.substring(1);
    var complex = getRootPath() + _customStampFolder;

    if (complex.indexOf("//") == 0)
        complex = complex.substring(1);
    return complex + "/";
}

function getCacheFolder() {
    if (_cacheFolder.indexOf("/") == 0)
        _cacheFolder = _cacheFolder.substring(1);
    var complex = getRootPath() + _cacheFolder;
 
    if (complex.indexOf("//") == 0)
        complex=complex.substring(1);
    return complex + "/";
}

function getCacheCombineFolder(id) {
    return getCacheFolder() + "combine/" + id + "/";
}

function getCacheFileFolder(id) {
    return getCacheFolder() + "ufor/" + id + "/";
}

function getCacheBaseFolder(md5) {
    return getCacheFolder() + "base/" + md5 + "/";
}


function getFolder(folder) {
    if (folder == "input" || folder == "thumb" || folder == "page")
        return getCacheBaseFolder(_filemd5) + folder+"/";
    return getCacheFileFolder(_fid) + folder + "/";
}

function getAddedFolder(folder, md5) {
    if (folder == "input" || folder == "thumb" || folder == "page")
        return getCacheBaseFolder(md5) + folder + "/";
    return getCacheFileFolder(_fid) + folder + "/";
}


function unpack(src) 
{
    var selectCharsInfo=new Object();
	if (src.length < 2) return null;
	selectCharsInfo.IsCellBoundry=src[1];
	var styles=new Array();
	var srcStyles=src[2];
	for (var i=1; i<srcStyles.length;i++ )
	{			
		var style=srcStyles[i];
		styles[i-1]=new Object();
		styles[i-1].Fn=style[0];
		styles[i-1].Sz=style[1];
		styles[i-1].C=style[2];
		styles[i-1].B=style[3];
		styles[i-1].I=style[4];
		styles[i-1].U=style[5];
		styles[i-1].S=style[6];
	}
	selectCharsInfo.CharStyleLst=styles;
	if(selectCharsInfo.IsCellBoundry){
		selectCharsInfo.Lines=null;
		selectCharsInfo.Cells=unpackCell(src[3]);
	}else{
		selectCharsInfo.Lines=unpackline(src[3]);
		selectCharsInfo.Cells=null;
	}
	return selectCharsInfo;
}

function unpackline(src) 
{
    var allLines = new Array();
    if (src.length < 2) return null;

    for (var i = 1; i < src.length; i++) {
        var pageLine = src[i];
        var objLine = new Object();
        objLine.StringVale = pageLine[0];
        objLine.MinHeight = pageLine[1];
        objLine.MaxHeight = pageLine[2];
        objLine.CharBoundaryLst = new Array();
        if(typeof(pageLine[3]) != "undefind")
        {
            for (var cindex = 0; cindex < pageLine[3].length; cindex++) 
            {
                objLine.CharBoundaryLst[cindex] = new Object();
                objLine.CharBoundaryLst[cindex].X = pageLine[3][cindex][0];
                objLine.CharBoundaryLst[cindex].Y = pageLine[3][cindex][1];
                objLine.CharBoundaryLst[cindex].W = pageLine[3][cindex][2];
                objLine.CharBoundaryLst[cindex].H = pageLine[3][cindex][3];
				objLine.CharBoundaryLst[cindex].StyleId = pageLine[3][cindex][4];
            }
            allLines[i - 1] = objLine;
       }
   }
   return allLines;
}
       
function unpackCell(src)
{
   var cellPacks = new Array();
   if (src.length < 1) return null;
   for (var i = 1; i < src.length; i++) 
   {
        var oneCell = src[i];
        var objCell = new Object();
        if (oneCell.length > 0) 
        {
            objCell.X = oneCell[0];
            objCell.Y = oneCell[1];
            objCell.Width = oneCell[2];
            objCell.Height = oneCell[3];
			objCell.CellBoundaryLst = unpackline(oneCell[4]);			
			if(typeof(objCell.CellBoundaryLst) == "undefined" || objCell.CellBoundaryLst == null)
			objCell.CellBoundaryLst=new Array();
		}
        cellPacks[i - 1] = objCell;
   }
   return cellPacks;
}
       
function unpackSearch(src) 
{
    var suls = new Array();
    if (src.length < 1) return suls;
    for (var i = 1; i < src.length; i++)
    {
        var oneItem = src[i];
        var objItem = new Object();
        objItem.MatchedString = oneItem[0];
        objItem.ContextString = oneItem[1];
        objItem.KeywordOffset = oneItem[2];
        objItem.KeywordLength = oneItem[3];
        objItem.CharResults = new Array();
        objItem.CombinedResultArea = new Array();
        if (typeof(oneItem[4]) != "undefined") 
        {
            for (var j = 0; j < oneItem[4].length; j++) 
            {
                var oneChar = oneItem[4][j];
                var objChar = new Object();
                objChar.PageIndex = oneChar[0];
                objChar.CharValue = oneChar[1];
                objChar.CharIndex = oneChar[2];
                objChar.IndexAtPage = oneChar[3];
				if(oneChar[4]==1)
                    objChar.IsSystemFont = true;
				else
                    objChar.IsSystemFont = false;
                objChar.Rec = unpackREReactangle(oneChar[5]);
                objItem.CharResults[j] = objChar;
             }
         }
         if (typeof(oneItem[5]) != "undefined") 
         {
             for (var j = 0; j < oneItem[5].length; j++) 
             {
                 var onelocation = oneItem[5][j];
                 var objlocation = new Object();
                 objlocation.PageIndex = onelocation[0];
                 objlocation.Area = unpackREReactangle(onelocation[1]);
                 objItem.CombinedResultArea[j] = objlocation;
             }
          }
          suls[i - 1] = objItem;
    }
    return suls;
}

function unpackREReactangle(rect) 
{
    if (typeof(rect) == "undefined") return null;
    var retan = new Object();
    retan.X = new Object();
    retan.X.Unit = 5;
    retan.X.Value = rect[0];
    retan.Y = new Object();
    retan.Y.Unit = 5;
    retan.Y.Value = rect[1];
    retan.Width = new Object();
    retan.Width.Unit = 5;
    retan.Width.Value = rect[2];
    retan.Height = new Object();
    retan.Height.Unit = 5;
    retan.Height.Value = rect[3];
    return retan;
}

var ToolbarItem = Class.create();
ToolbarItem.prototype = 
{
	initialize: function(options) 
	{
		this.SetOptions(options);
		this.CssClass = this.options.CssClass;
		this.CssId = this.options.CssId;
		this.Title = this.options.Title;
		this.Event = this.options.Event;	
	},
		
	SetOptions: function(options) 
	{
		this.options = 
		{
			CssClass:   "",
			CssId:			"",			
			Title:			"",
			Event:	        "",
		};
		Extend(this.options, options || {});
    },
	
	CreateHtml: function()
	{			
		var html = "<div ";
		html += "class='" + this.CssClass + "' ";
		html += "id='" + this.CssId + "' ";
		html += "title='" + this.Title + "' ";
		html += "onclick='" + this.Event + "' ";
		html += "></div>";
		return html;
	},
};

var WDPOnlineApplication = Class.create();
WDPOnlineApplication.prototype = 
{
	initialize: function(options) 
	{
		this.SetOptions(options);
        this._serverUrl = this.options._serverUrl;
        this._defaultPage = this.options._defaultPage;
		this._leftPanelDefaultShow = this.options._leftPanelDefaultShow;
	    this._initialPercent = this.options._initialPercent;
	    this._initialViewerMode = this.options._initialViewerMode;
	},
		
	SetOptions: function(options) 
	{
		this.options = 
		{
		    _serverUrl:         "",
		    _defaultPage:       "Default.aspx",
			_leftPanelDefaultShow:     false,
			_initialPercent:    "RE_default",
			_initialViewerMode: "multi",
		};
		Extend(this.options, options || {});
    },
};

var DocumentData = Class.create();
DocumentData.prototype = 
{
    initialize:function(options)
    {
        this.SetOptions(options);
        this.Index = this.options.Index;
        this.Viewers = this.options.Viewers;
    },
    
    SetOptions:function(options)
    {
        this.options = 
        {
            Index: 0,
            Viewers: new Array(),
        };
        Extend(this.options,options||{});
    },
}

var ViewerData = Class.create();
ViewerData.prototype = 
{
    initialize:function(options)
    {
        this.SetOptions(options);
        this.PageIndex = this.options.PageIndex;
        this.ShowIndex = this.options.ShowIndex;
        this.OneToOne_Width = this.options.OneToOne_Width;
        this.OneToOne_Height = this.options.OneToOne_Height;
        this.Annotations = this.options.Annotations;
        this.Links = this.options.Links;
    },
    
    SetOptions:function(options)
    {
        this.options = 
        {
            PageIndex:      0,
            ShowIndex:      0,
            OneToOne_Width: 0,
            OneToOne_Height:    0, 
            Annotations: new Array(),
            Links: new Array()
        };
        Extend(this.options,options || {});
    },
}

var AnnotationData = Class.create();
AnnotationData.prototype = 
{
    initialize:function(options)
    {
        this.SetOptions(options);

        this.OnPageIndex = this.options.OnPageIndex;
        this.Type = this.options.Type;
        this.Left = this.options.Left;
        this.Top = this.options.Top;
        this.Width = this.options.Width;
        this.Height = this.options.Height;
        this.Points = this.options.Points;
        this.OutLineColor = this.options.OutLineColor;
        this.OutLineWidth = this.options.OutLineWidth;
        this.FillColor = this.options.FillColor;
        this.ShowedText = this.options.ShowedText;
        this.Transparency = this.options.Transparency;
        this.MarkFillColor = this.options.MarkFillColor;
        this.MarkOutlineColor = this.options.MarkOutlineColor;
        this.RedactPage = this.options.RedactPage;
        this.RedactArea = this.options.RedactArea;
        this.isOverlayTxt = this.options.isOverlayTxt;
        this.TextFont = this.options.TextFont;
        this.TextSize = this.options.TextSize;
        this.TextColor = this.options.TextColor;
        this.TextAlign = this.options.TextAlign;
        this.IsRepeat = this.options.IsRepeat;
        this.IsChanged = this.options.IsChanged;
        this.Id = this.options.Id;
    },
    
    SetOptions:function(options)
    {
        this.options = 
        {
            OnPageIndex: 0,
            Id:"",
            IsChanged:false,
            Type:       "",
            Left:       0,
            Top:        0,
            Width:      0,
            Height:     0,
            Points:     "",
            OutLineColor: "",
            OutLineWidth:   0,
            FillColor:    "",
            ShowedText:     "",
            Transparency:   0.4, 
            MarkFillColor:  "",
            MarkOutlineColor: "",
            RedactPage:     false,
            isOverlayTxt:   false,
            TextFont:        "",
            TextSize:    "",
            TextColor:   "",
            TextAlign:   "",
            IsRepeat:   false
        };
        Extend(this.options,options ||{});
    }
}

function CopyData(i,isCopyAnnos,isCopyLinks)
{
    var tempViewer = _fileDocument[curFileId].Viewers[i];
    if(tempViewer == null || tempViewer.ShowIndex == null)
    {
        return null;
    }
    var viewerData = new ViewerData();
    viewerData.PageIndex = tempViewer.PageIndex;
    viewerData.ShowIndex = tempViewer.ShowIndex;
    viewerData.OneToOne_Width = tempViewer.OneToOne_Width;
    viewerData.OneToOne_Height = tempViewer.OneToOne_Height;
    viewerData.AFid = tempViewer.InsertFid || "";
    viewerData.SourcePageIndex = tempViewer.SourcePageIndex;
    viewerData.IsInsert = tempViewer.IsInsertPage || false;
    viewerData.Rotate = tempViewer.Rotate||0;
    if(isCopyAnnos)
    {
        for(var j=0;j<tempViewer.Annotations.length;j++)
        {
            var tempAnnotation = tempViewer.Annotations[j];
            if(tempAnnotation == null)
            {
               // viewerData.Annotations[j] = null;
                continue;
            }
            if(tempAnnotation.Type == "notes" || tempAnnotation.Type == "replaceText")
                tempAnnotation.ShowedText = $("#content_"+tempAnnotation.Index).val();
            var annoData = {};
            annoData.Id = tempAnnotation.Id;
            annoData.IsCg = tempAnnotation.IsChanged;
            //annoData.OnPageIndex = tempAnnotation.OnPageIndex;
            annoData.TP = tempAnnotation.Type;
            annoData.L = tempAnnotation.Left;
            annoData.T = tempAnnotation.Top;
            annoData.W = tempAnnotation.Width;
            annoData.H = tempAnnotation.Height;
            annoData.PTS = tempAnnotation.Points;
            annoData.OLC = tempAnnotation.OutLineColor;
            annoData.OLW = tempAnnotation.OutLineWidth || 0;
            annoData.FC = tempAnnotation.FillColor;
            annoData.STXT = tempAnnotation.ShowedText;
            annoData.TSP = tempAnnotation.Transparency;
            annoData.MOC = tempAnnotation.MarkOutlineColor;
            annoData.MFC = tempAnnotation.MarkFillColor;
            annoData.RTP = tempAnnotation.redactPage;
            annoData.RTA = tempAnnotation.redactArea;
            annoData.IsOT = tempAnnotation.isOverlayTxt;
            annoData.TXTF = tempAnnotation.TxtFont || "Arial";
            annoData.TXTC = tempAnnotation.TxtFontColor;
            annoData.TXTS = tempAnnotation.TxtFontSize;
            annoData.TXTA = tempAnnotation.TxtAlignment;
            annoData.IsFt = tempAnnotation.IsFlatten;
            annoData.IsRp = tempAnnotation.IsRepeat;
            annoData.STID = tempAnnotation.STID || "";
            annoData.STime = tempAnnotation.STime || "";
            annoData.CStp = tempAnnotation.CStamp || false;
            annoData.CSti = tempAnnotation.CStampid || "";
            annoData.Date = tempAnnotation.ModifiedDate || "";
            annoData.ATHP = tempAnnotation.Attachpath || "";
            annoData.ATHN = tempAnnotation.Attachname || "";
            annoData.MUDR = tempAnnotation.MarkupDirection || 0;
            annoData.Ast = tempAnnotation.Artist || "RasterEdge";
            if (typeof (tempAnnotation.linestartstyle) != "undefined")
                annoData.LSS = tempAnnotation.linestartstyle;
            else
                annoData.LSS = 0;
            if (typeof (tempAnnotation.lineendstyle) != "undefined")
                annoData.LES = tempAnnotation.lineendstyle;
            else
                annoData.LES = 4;


            if (typeof (tempAnnotation.LeaderExtend) != "undefined")
                annoData.LDE = tempAnnotation.LeaderExtend;
            else
                annoData.LDE = 0;
            if (typeof (tempAnnotation.LeaderOffset) != "undefined")
                annoData.LDO = tempAnnotation.LeaderOffset;
            else
                annoData.LDO = 4;
            if (typeof (tempAnnotation.LeaderLength) != "undefined")
                annoData.LDL = tempAnnotation.LeaderLength;
            else
                annoData.LDL = 4;
            //if (tempAnnotation.Type == "textbox") {
            //    var offset= (tempAnnotation.OutLineWidth||0)*2;
            //    annoData.Left -= offset;
            //    annoData.Top -= offset;
            //    annoData.Width += offset;
            //    annoData.Height += offset;

            //}
            viewerData.Annotations.push(annoData);// = annoData;
        }

    }
    if(isCopyLinks)
    {
        for(var j=0;j<tempViewer.Links.length;j++)
        {
            var tempLink = tempViewer.Links[j];
            if(tempLink == null)
            {
               // viewerData.Links[j] = null;
                continue;
            }
            var linkData = {};
            linkData.L = tempLink.Left;
            linkData.T = tempLink.Top;
            linkData.W = tempLink.Width;
            linkData.H = tempLink.Height;
            linkData.HLS = tempLink.HighStyle;
            linkData.BDS = tempLink.LineStyle;
            linkData.BDC = tempLink.OutLineColor;
            linkData.IsVi = tempLink.IsVisible;
            if(tempLink.IsVisible)
                linkData.BDW = tempLink.OutLineWidth;
            else 
                linkData.BDW = 0;
            linkData.IsLk = tempLink.IsLock;
            linkData.Actions = [];
            for(var k=0;k<tempLink.LinkActions.length;k++)
            {
                var tempLinkAction = tempLink.LinkActions[k];
                var linkActionData = new LinkAction();
                linkActionData.AT = tempLinkAction.ActionType;
                linkActionData.Act = tempLinkAction.Action;
                linkData.Actions[k] = linkActionData;
            }
            viewerData.Links.push(linkData);//[j] = linkData;
        }

    }
    return viewerData;
}

function SortPage(item)
{            
    var idPre = "";
    var preShowIndex = null;
    if (item != null) { 
        var draggableItemId = item.attr("id");
    idPosition = draggableItemId.indexOf("_");
    var draggableIndex = draggableItemId.substring(idPosition+1);
    idPre = draggableItemId.substring(0, idPosition);
     preShowIndex = _fileDocument[curFileId].GetShowIndex(draggableIndex);
    _fileDocument[curFileId].ViewerPageIndex.remove(draggableIndex);
    }
   var childrenDivs = "";
   var thumbExchange = false;
   if(idPre == "sortNail")
   {
        childrenDivs = $("#_ordPanel").children("div");
        thumbExchange = true;
   }    
   else
        childrenDivs = $("#_thumbImg").children("div");
   var pageIndexOrder = new Array();
   var showIndexOrder = new Array();
   var newIndex = "";
   for(index in childrenDivs)
   {				
        var divId=childrenDivs.eq(index).attr("id");
        if(divId != null)
        {                    
            idPosition=divId.indexOf("_");
            var id=divId.substring(idPosition+1);
            pageIndexOrder[index] = id; 
            showIndexOrder[id] = index;  
            if(id == draggableIndex)
                _fileDocument[curFileId].ViewerPageIndex.insertAt(index,id);
        }
   }
   _fileDocument[curFileId].SortPage(showIndexOrder);
   var newShowIndex = _fileDocument[curFileId].GetShowIndex(draggableIndex);
   if (preShowIndex!=null&&preShowIndex != newShowIndex)
       ExchangeOrder(draggableIndex, newShowIndex, thumbExchange);
   window.onresize();
}
        
function ExchangeOrder(curPageIndex,showIndex,thumbExchange)
{
    var copyDom = $("#page_"+curPageIndex).clone();
    $("#page_"+curPageIndex).remove();
    var copyThumbDom = "";
    if(thumbExchange)
    {
        copyThumbDom = $("#lbl_"+curPageIndex).clone();
        $("#lbl_"+curPageIndex).remove();
    }
    else
    {
        if(!sortPgsCreate)
            CreateThumbSortNails();
        copyThumbDom = $("#sortNail_"+curPageIndex).clone();
        $("#sortNail_"+curPageIndex).remove();
    }
    if(showIndex == _totalPageCount-1)
    {   
        var preShowIndex = showIndex - 1;
        var pageIndex = _fileDocument[curFileId].GetPageIndex(preShowIndex);
        $("#page_"+pageIndex).after(copyDom);
        if(thumbExchange)
            $("#lbl_"+pageIndex).after(copyThumbDom);
        else
            $("#sortNail_"+pageIndex).after(copyThumbDom);
    }
    else
    {
        var afterShowIndex = showIndex + 1;
        var pageIndex = _fileDocument[curFileId].GetPageIndex(afterShowIndex);
        $("#page_"+pageIndex).before(copyDom);
        if(thumbExchange)
            $("#lbl_"+pageIndex).before(copyThumbDom);
        else
            $("#sortNail_"+pageIndex).before(copyThumbDom);
    }
    if(_viewerMode == "multi")
      ImageViewerAnnotationResize();
}

function HideAllPropanel()
{
    if(optionPanelShow)
    {
        $("#_optionsPanel").hide();
        optionPanelShow = false;
    }
    else if(showTableColor)
    {
        $("#_tableColor").hide();
        showTableColor = false;
    }
    else if(actionsPanelShow)
    {
        $("#_actionsPanel").hide();
        actionsPanelShow = false;
    }
}

document.onkeydown = function(e) {
    e = e || window.event;
    if(e.keyCode == 40)
    {
        $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() + 10 * zoomValue);
    }
    else if(e.keyCode == 38)
    {
        $("#wdp_Content").scrollTop($("#wdp_Content").scrollTop() - 10 * zoomValue);
    }
    else if(e.keyCode == 37)
    {
        $("#wdp_Content").scrollLeft($("#wdp_Content").scrollLeft() - 10 * zoomValue);
    }
    else if(e.keyCode == 39)
    {
        $("#wdp_Content").scrollLeft($("#wdp_Content").scrollLeft() + 10 * zoomValue);
    }
};

var Sys = {};
function JudgeBrowser()
{
    var ua = navigator.userAgent.toLowerCase();
    var s;
    (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] :   0;
    (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] :  0;
    (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] :   0;
    (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;       
    if (Sys.ie) return "IE";
    if (Sys.firefox) return "FireFox";
    if (Sys.chrome) return "Chrome";
    if (Sys.safari) return "Safari";
}

var isCtrlDown=false;
$(document).keydown(function(event)
{
    if (event.ctrlKey) {
        isCtrlDown = true;
        if (document.all)
            k = event.keyCode;
        else
            k = event.which;
        if (k == 86) { }//Ctrl + v
        if (k == 67)//Ctrl + c
        {
            if (_pdfDocRestrictions.isCopy == "Allowed") {
                if (addImgEditId != "" || curEditImageId != "" || addImgEditId != "") {
                    if (addImgEditId != "")
                        currentId = addImgEditId;
                    else
                        currentId = curEditImageId;
                    window.getSelection().removeAllRanges();
                    var range = document.createRange();
                    range.selectNode(document.getElementById(currentId));
                    window.getSelection().removeAllRanges();
                    window.getSelection().addRange(range);
                    document.execCommand("copy");
                }
                else if (window.getSelection() != "" && isEditPdfText) {
                    var selection = window.getSelection();
                    curSelectRange = selection.getRangeAt(0);
                    writeStyleToXml();
                    xmlSelectRange = selection.getRangeAt(0);
                    document.execCommand("copy");
                    selection.removeAllRanges();
                    selection.addRange(curSelectRange);
                    return false;
                }
            }
            else if (_pdfDocRestrictions.isCopy == "Not Allowed")
                return false;
        }
    } else {
        isCtrlDown = false;
    }
});
        
$(document).keyup(function(event)
{
    isCtrlDown=false;
});

window.onblur = function () {
    isCtrlDown = false;
    window.onfocus = function () {
    }
};

Array.prototype.max = function(){   
 return Math.max.apply({},this); 
};

Array.prototype.min = function(){   
 return Math.min.apply({},this);
};

Array.prototype.S=String.fromCharCode(2);
Array.prototype.in_array=function(e){
    var r=new RegExp(this.S+e+this.S);
    return (r.test(this.S+this.join(this.S)+this.S));
};
Array.prototype.insertAt = function(index, obj) {  
    this.splice(index, 0, obj);  
}

Array.prototype.indexOf = function(val) {
    for (var i = 0; i < this.length; i++) {
        if (this[i] == val) return i;
    }
    return -1;
};
Array.prototype.remove = function(val) {
    var index = this.indexOf(val);
    if (index > -1) {
        this.splice(index, 1);
    }
};

function StringBuilder(args)    
{    
    this._strings = [];    
    this._isBuild=false;
    this._string="";   
    for(var i=0;i<arguments.length ;i++)
    {
        this._strings.push(arguments[0]);
    }    
}    

StringBuilder.prototype.Append = function(str)    
{    
    this._strings.push(str);    
    this._isBuild=false ;
    return this;    
}

StringBuilder.prototype.ToString = function()    
{   
    if(!this._isBuild){
        this._string=this._strings.join("");
    } 
    return this._string;
}

function getTimeString() {
    var dateNow = new Date();
    var year = dateNow.getFullYear();
    var month = dateNow.getMonth() + 1;
    var day = dateNow.getDate();
    var hour = dateNow.getHours();
    var min = dateNow.getMinutes();
    var sec=dateNow.getSeconds();
    var date = month + "/" + day + "/" + year + " " + (hour < 10 ? "0" : "") + hour + ":" + (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "")+sec;
    return date;
}
function writeStyleToXml()
{
    var range=window.getSelection().getRangeAt(0);
    $("#textCopy").remove();
    var str = "<div id='textCopy' class='reCopyText' style='background:#ffffff;'></div>";
    $("body").append(str);
    $("#textCopy").append(range.cloneContents());
    var copyContent = $("#textCopy").html();

    var idNames = new Array();
    var classNames = new Array();
    var styleNames = new Array("font-family","font-size","color","font-style","font-weight");
    if(copyContent.indexOf("id") == -1 && copyContent.indexOf("class") == -1)
    {
        var tempClassName = $("#"+curEditTextId).attr("class");
        tempClassName = tempClassName.substring(tempClassName.indexOf(" ")+1);
        classNames.push(tempClassName);
        idNames.push(curEditTextId);
    }
    else
    {
        var tempCopyContent = copyContent;
        var posi = tempCopyContent.indexOf("id=\"");
        while(posi != -1)
        {
            tempCopyContent = tempCopyContent.substring(posi+4);
            var tempPosi = tempCopyContent.indexOf("\"");
            var idName = tempCopyContent.substring(0,tempPosi);
            idNames.push(idName);
            var tempClassName = $("#"+idName).attr("class");
            tempClassName = tempClassName.substring(tempClassName.indexOf(" ")+1);
            classNames.push(tempClassName);
            posi = tempCopyContent.indexOf("id=\"");
        }
    }
    for(var i=0;i<classNames.length;i++)
    {
        var className = classNames[i];
        var transform = $("#"+idNames[i]).css("transform");
        var isItalic = (transform == "matrix(1, 0, -0.3333, 1, 0, 0)");
        for(var j=0;j<styleNames.length;j++)
        {
            var styleName = styleNames[j];
            var styleValue = $("."+className).css(styleName);
            if(styleName == "font-style" && isItalic)
                styleValue = "italic";
            if(classNames.length == 1)
                $("#textCopy").css(styleName,styleValue);
            else
                $("#textCopy #"+idNames[i]).css(styleName,styleValue);
        }
    }
    window.getSelection().removeAllRanges();
    range = document.createRange();
    range.selectNode(document.getElementById("textCopy"));
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(range);
}

function bindPageDragEvent() {
    $(".showByDrag").bind("mousedown", dragImageMouseDown);
    $(".showByDrag").bind("mousemove", dragImageMouseMove);
    $(".showByDrag").bind("mouseup", dragImageMouseUp);
   
}

function unbindPageDragEvent() {
    $(".showByDrag").unbind("mousedown", dragImageMouseDown);
    $(".showByDrag").unbind("mousemove", dragImageMouseMove);
    $(".showByDrag").unbind("mouseup", dragImageMouseUp);
}

function getTotalEditItemCount(item, pageindex) {
    var itemname = "#RE_" + item + "Total_" + pageindex;
    if ($(itemname).length > 0) {
        return (parseInt($(itemname).html()) || 0);
    }
   return 0;
}

// txt ,img,canvas
function setTotalEditItemCount(item, pageindex, count) {
    var itemname = "RE_" + item + "Total_" + pageindex;
    if ($("#"+itemname).length == 0) {
        $("#RE_" + pageindex).append("<div id='" + itemname + "'  style='display:none;'>" + count + "</div>");
    } else {
        $("#"+itemname).html(count);
    }
}
;
///<jscompress sourcefile="EditorContent.js" />

var InsertPswordButtons = [{ text: "Submit", click: function () { ParseInsertDocWithPassWord(); } },
                       { text: "Cancel", click: function () { $(this).dialog("close"); } }];
var insertName = "";

function getInsertFileMD5(fid) {
    if (addmappingmd5[fid] != null)
        return addmappingmd5[fid];
    return "";
}

var formerInsertURL = "";
function InsertFFPage() {
    showLoading();
    var current = $("#FileToInsert").val();
    if (current == "")
        return;
    $.ajaxFileUpload
	(
	    {
	        url: getCurrentAspx(),
	        secureuri: false,
	        fileElementId: 'FileToInsert',
	        dataType: 'json',
	        data: { add: "file", fid: _fid },
	        success: function (data, status) {
	            if (typeof (data.error) != 'undefined') { }
	            else
	            {
	                if (data.indexOf("hasPassword") != -1) {
	                    InsertType = "insert";
	                    insertName = data.split(";")[0].trim();
	                    $("#loading_div").hide();
	                    $("#content").empty();
	                    var passWordContent = "<div style='font-size:13px;font-weight:bold;'>Document '" + insertName + "' protected, enter 'Document Open Password'</div><br/>";
	                    passWordContent += "<div>Enter password:&nbsp;&nbsp;<input id='_insertPsword' type='password' style='font-size:12px;width:300px;height:25px;' onkeydown='return InsertPassword(event)'></input></div>";
	                    $("#content").append(passWordContent);
	                    $("#dialog").dialog({
	                        autoOpen: false,
	                        title: "Password",
	                        minWidth: 500,
	                        height: 230,
	                        resizable: true
	                    });
	                    $("#dialog").dialog("option", "buttons", InsertPswordButtons);
	                    var widthCenter = (browserWidth - 500) / 2;
	                    var heightCenter = (browserHeight - 230) / 2;
	                    window.scrollTo(0, 0);
	                    $("#dialog").dialog({ position: [widthCenter, heightCenter] });
	                    $("#dialog").dialog("open");
	                    dialogOpen = true;
	                }
	                else if (data.indexOf("hasOwnerPsword") != -1) {
	                    jAlert((i18n['content']['FileProtected'] || "The file " + data.split(";")[0].trim() + " is protected.It cannot be used for this command."), i18n['title']['RasterEdge'] || "RasterEdge Application", function () {
	                        $("#re_func_insertFF").trigger("click");
	                    });
	                }
	                else {
	                    var info = data.split(";");
	                    var name = info[0].trim();
	                    var isHasAnnos = info[1].trim();
	                    var insertFileCount = info[2];
	                    var pageSize = info[3];
	                    var insertMD5 = info[4].trim();
	                    var insertFid = info[5].trim();
	                    var pageRotate = info[6].trim();
	                    addmappingmd5[insertFid] = insertMD5;
	                    isaddFile = true;
	                    ShowInsertPopBox(name, isHasAnnos, insertFileCount, pageSize,pageRotate, insertFid);
	                }
	            }
	            hideLoading();
	            $("#FileToInsert").val("");
	        },
	        error: function (data, status, e) {
	            alert(e);
	        }
	    }
	)
    return false;
}

function ShowInsertPopBox(name, isHasAnnos, insertFileCount, pageSize,pageRotate, insertFid) {
    $("#_insertPopbox").show();
    $("#insertOkButton").unbind("click");
    $("#insertOkButton").bind("click", function () { InsertFilePages(name, isHasAnnos, insertFileCount, pageSize,pageRotate, insertFid); });
    $("#loading").show();
    $("#loading_div").hide();
    $(".loadingImg").css("opacity", "0.4");
    SignPanelPosition("#_insertPopbox");
    $("#_insertTitle").html(name);
    $("#_insertPg").val(_curCorrectPageId + 1);
    $("#_insertPgCount").html(_totalPageCount);
}

var addFileName = false;
function InsertFilePages(name, isHasAnnos, insertFileCount, pageSize, pageRotate,insertFid) {
    var sizeArray = pageSize.split("|");
    var page = $('input:radio[name="page"]:checked').val();
    var showIndex = 0;
    if (page == "First")
        showIndex = 1;
    else if (page == "Last")
        showIndex = _totalPageCount;
    else if (page == "Page") {
        showIndex = $("#_insertPg").val();
        var regEx = new RegExp(/^[0-9]*$/);
        if (regEx.exec(showIndex) == null || page <= 0 || page > _totalPageCount) {
            alert((i18n['content']['ErrorNumberInPage'] || "There is no page  in this document numbered " )+ showIndex);
            return;
        }
    }
    hideInsertPopBox();
    showIndex = showIndex - 1;
    var pageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
    var curPageIndex = pageIndex;
    var location = $('input:radio[name="location"]:checked').val();
    if (location == "after")
        showIndex = showIndex + 1;
    var sourcepageinde = 0;
    _fileDocument[curFileId].AddPage(showIndex, sourcepageinde, insertFid);
    var addPageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
    var gotoPageIndex = addPageIndex;
    var pageWidth = Math.round(sizeArray[0].split(",")[0]);
    var pageHeight = Math.round(sizeArray[0].split(",")[1]);
 
    
    WidthArray[addPageIndex] = pageWidth;
    HeightArray[addPageIndex] = pageHeight;
    if (pageRotate != null) {
        var oneRotate = Math.round(pageRotate.split(",")[0]);
        RotateArray[addPageIndex] = oneRotate;
    }
    _fileDocument[curFileId].Viewers[addPageIndex].GetInitialSize();
    // var src = getImagesFolder() + "upload.gif";
    var addDoc = "";//"<div class='pagecontainer' id='pagecontainer_" + addPageIndex + "'>"

    addDoc += "<div class='docImages' id='page_" + addPageIndex + "' style='width:" +( pageWidth + widthprefix )+ "px;height:" + pageHeight + "px;background:#ffffff;'>";
    addDoc += "<div id='pageImg" + addPageIndex + "' style='margin-left:" + (pageWidth - loadWidth) / 2 + "px;margin-top:" + (pageHeight - loadHeight) / 2 + "px;width:" + loadWidth + "px;height:" + loadHeight + "px;' class='uploadbackgroud'/></div>";

    addDoc += "</div>";

    var beforeannotId = "#docannotation_" + pageIndex;
    var annotpanel = "<div class='docannotations' id='docannotation_" + addPageIndex + "' style='width:auto;height:auto;'><div class='showByDrag pagedrag'/></div>";


    beforeId = "#page_" + pageIndex;
    if (location == "before") {
        $(beforeId).before(addDoc);
        $(beforeannotId).before(annotpanel);
    }
    else if (location == "after") {
        $(beforeId).after(addDoc);
        $(beforeannotId).after(annotpanel);
    }
    $("#page_" + addPageIndex).css("border", "1px solid #000000");
    $("#page_" + addPageIndex).css("box-shadow", "3px 3px 0px #000000");

    //Thumbnail
    var insertThumbScale = "";
    var addThumb = "<div class='rethumbnail' id='lbl_" + addPageIndex + "' onclick='ChangePg(" + addPageIndex + ")'>";
    addThumb += "<div class='thumbDiv' id='thumbDiv_" + addPageIndex + "' style='width:" + _thumbWidth + "px;height:" + _thumbHeight + "px;background:#ffffff;'></div>";
    addThumb += "<div id='thumbPgId_" + addPageIndex + "' class='thumbPgId'>" + (showIndex + 1) + "</div></div>";
    beforeId = "#lbl_" + pageIndex;
    if (location == "before")
        $(beforeId).before(addThumb);
    else if (location == "after")
        $(beforeId).after(addThumb);
    CreateThumbImage("#thumbDiv_" + addPageIndex, addPageIndex);
    $("#lbl_" + addPageIndex).smartMenu(ThumbMenuData, { name: "thb_"+addPageIndex });
    var viewer = _fileDocument[curFileId].Viewers[addPageIndex];
    viewer.ThumbWidth = _thumbWidth;
    viewer.ThumbHeight = _thumbHeight;
    viewer.ThumbScaleX = _thumbWidth / pageWidth;
    viewer.ThumbScaleY = _thumbHeight / pageHeight;
    insertThumbScale += viewer.ThumbScaleX.toFixed(2) + ";";

    if (insertFileCount == 1) { }
    else
    {
        for (var i = 1; i < insertFileCount; i++) {
            pageIndex = addPageIndex;
            showIndex = showIndex + 1;
            sourcepageinde++;
            _fileDocument[curFileId].AddPage(showIndex, sourcepageinde, insertFid);
            addPageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
            pageWidth = Math.round(sizeArray[i].split(",")[0]);
            pageHeight = Math.round(sizeArray[i].split(",")[1]);
            if (pageRotate != null) {
                var oneRotate = Math.round(pageRotate.split(",")[i]);
                RotateArray[addPageIndex] = oneRotate;
            }
            WidthArray[addPageIndex] = pageWidth;
            HeightArray[addPageIndex] = pageHeight;
            _fileDocument[curFileId].Viewers[addPageIndex].GetInitialSize();
            addDoc = "";// "<div class='pagecontainer' id='pagecontainer_" + addPageIndex + "'>"

            addDoc += "<div class='docImages' id='page_" + addPageIndex + "' style='width:" +( pageWidth + widthprefix) + "px;height:" + pageHeight + "px;background:#ffffff;'>";
            addDoc += "<img id='pageImg" + addPageIndex + "' style='margin-left:" + (pageWidth - loadWidth) / 2 + "px;margin-top:" + (pageHeight - loadHeight) / 2 + "px;width:" + loadWidth + "px;height:" + loadHeight + "px;' class='uploadbackgroud'/></div>";

            addDoc += "</div>";

            beforeId = "#page_" + pageIndex;
            $(beforeId).after(addDoc);
            var beforeannotId = "#docannotation_" + pageIndex;

            var annotpanel = "<div class='docannotations' id='docannotation_" + addPageIndex + "' style='width:auto;height:auto;'><div class='showByDrag pagedrag'/></div>";
            $(beforeannotId).after(annotpanel);


            $("#page_" + addPageIndex).css("border", "1px solid #000000");
            $("#page_" + addPageIndex).css("box-shadow", "3px 3px 0px #000000");

            //Thumbnails
            addThumb = "<div class='rethumbnail' id='lbl_" + addPageIndex + "' onclick='ChangePg(" + addPageIndex + ")'>";
            addThumb += "<div class='thumbDiv' id='thumbDiv_" + addPageIndex + "' style='width:" + _thumbWidth + "px;height:" + _thumbHeight + "px;background:#ffffff;'></div>";
            addThumb += "<div id='thumbPgId_" + addPageIndex + "' class='thumbPgId'>" + (showIndex + 1) + "</div></div>";
            beforeId = "#lbl_" + pageIndex;
            $(beforeId).after(addThumb);
            $("#lbl_" + addPageIndex).smartMenu(ThumbMenuData, { name: "thb_"+addPageIndex });
            CreateThumbImage("#thumbDiv_" + addPageIndex, addPageIndex);

            viewer = _fileDocument[curFileId].Viewers[addPageIndex];
            viewer.ThumbWidth = _thumbWidth;
            viewer.ThumbHeight = _thumbHeight;
            viewer.ThumbScaleX = _thumbWidth / pageWidth;
            viewer.ThumbScaleY = _thumbHeight / pageHeight;
            insertThumbScale += viewer.ThumbScaleX.toFixed(2) + ";";
        }
    }

    $(".pageIdList").empty();
    for (var i = 1; i <= _totalPageCount; i++) {
        var text = i + " / " + _totalPageCount;
        var value = i;
        $(".pageIdList").append($('<option></option>').val(value).html(text));
    }

    addFileName = true;

    var tempName = name;
    if (isHasAnnos == "yes")
        tempName = "Temp_" + name;
    _maxWidth = WidthArray.max();
    _maxHeight = HeightArray.max();
    //appendDocument
    AppendInsertFile(tempName, gotoPageIndex, insertFileCount, name, insertThumbScale, curPageIndex, location, isHasAnnos, insertFid);
}



function GetInsertAnnoXmls(name, gotoPageIndex, insertFileCount, insertFid, sourceStartPage) {
    var fileName = name.substring(0, name.lastIndexOf("."));
    var md5 = getInsertFileMD5(insertFid)
    var xmlFile = getAddedFolder("input", md5) + "anno.xml";
    $.ajax({
        url: xmlFile,
        dataType: 'xml',
        type: 'GET',
        timeout: 2000,
        asyn: false,
        success: function (xml) {
            xmlToDrawInsertAnnos(xml, gotoPageIndex, insertFileCount, sourceStartPage,false);
        },
        error: function () {
            alert(i18n['content']['AnnotationFileError'] || "Annotation file failed to load");
        }
    });
}

function xmlToDrawInsertAddedAnnos(xml) {
    var fileDoc = _fileDocument[curFileId];
    xmlToDrawInsertAnnos(xml, 0, fileDoc.Viewers.length,0,true);
}

function xmlToDrawInsertAnnos(xml, gotoPageIndex, insertFileCount, sourceStartPage,isfdf) {
    var fileDoc = _fileDocument[curFileId];
    var tempAnnoArray = new Array();
    if (sourceStartPage == null || typeof (sourceStartPage) == "undefined")
        sourceStartPage = 0;
    for (var i = 0; i < insertFileCount; i++) {
       
        var pageId = gotoPageIndex + i;
        var viewer = _fileDocument[curFileId].Viewers[pageId];
        if (isfdf) {
            sourceStartPage = _fileDocument[curFileId].GetPageIndex(i);
            viewer = _fileDocument[curFileId].Viewers[sourceStartPage];
        }
        $($(xml).find("page" + sourceStartPage)).find("annotation").each(function (j) {
           
            viewer.GetViewerLeftTop();
            var annoIndex = num++;
            var annotation = $(this);
            var modifiedDate = $(annotation).attr("modifiedDate");
            var type = $(annotation).attr("type");
            var left = parseFloat($(annotation).attr("left"));
            var top = parseFloat($(annotation).attr("top"));
            var width = parseFloat($(annotation).attr("width"));
            var height = parseFloat($(annotation).attr("height"));
            var points = $(annotation).attr("points");
            var lineColor = $(annotation).attr("lineColor");
            var lineWidth = parseFloat($(annotation).attr("lineWidth"));
            var fillColor = $(annotation).attr("fillColor");
            var showedText = $(annotation).attr("showdText");
            var transparency = parseFloat($(annotation).attr("opacity"));
            var apparence = $(annotation).attr("apparence");
            var id = $(annotation).attr("id");
            var stid = $(annotation).attr("stid") || "";
            var isRichText = ($(annotation).attr("isrichtext") == "1");
            var richText = $(annotation).find("richtext").text();
            var fontsize = $(annotation).attr("fontsize");
            var fontcolor = $(annotation).attr("fontcolor");
            var linestartstyle = parseInt($(annotation).attr("linestartstyle"));
            var lineendstyle = parseInt($(annotation).attr("lineendstyle"));
            var attachpath = $(annotation).attr("attachpath");
            var attachname = $(annotation).attr("attachname");
            var leaderextend = parseFloat($(annotation).attr("leaderextend"));
            var leaderoffset = parseFloat($(annotation).attr("leaderoffset"));
            var leaderlength = parseFloat($(annotation).attr("leaderlength"));
            var fontname = $(annotation).attr("fontname");
            var artist = $(annotation).attr("artist");
            var annooptions = null;
            try {
                annooptions = $(annotation).html();
            } catch (e) {
                annooptions = $(annotation)[0].textContent;
            }
            var docAnno = new Annotation({
                Id: id,
                Apparence: apparence,
                IsRichText: isRichText,

                RichText: richText,
                OnPageIndex: pageId,
                Type: type,
                Index: annoIndex,
                ModifiedDate: modifiedDate,
                ShowLeft: 0,
                ShowTop: 0,
                ShowWidth: 0,
                ShowHeight: 0,
                Left: left,
                Top: top,
                Width: width,
                Height: height,
                Points: points,
                OutLineWidth: lineWidth,
                // Transparency:transparency,
                ZoomValue: zoomValue,
                ViewerLeft: viewer.GetRefreshBlankLeft(),
                ViewerTop: viewer.Top,
                ViewerWidth: viewer.ActualWidth,
                ViewerHeight: viewer.ActualHeight,
                ViewerScaleX: viewer.ScaleX,
                ViewerScaleY: viewer.ScaleY,
                ThumbViewerScaleX: viewer.ThumbScaleX,
                ThumbViewerScaleY: viewer.ThumbScaleY,
                ViewerOne2OneWidth: viewer.OneToOne_Width,
                ViewerOne2OneHeight: viewer.OneToOne_Height
            });
            docAnno.Artist = artist;
            docAnno.TxtFontColor = fontcolor;
            docAnno.TxtFontSize = fontsize;
            docAnno.OutLineColor = lineColor;
            docAnno.OutLineWidth = lineWidth;
            docAnno.FillColor = fillColor;
            docAnno.Transparency = transparency;
            docAnno.ShowedText = showedText;
            docAnno.STID = stid;
            if (docAnno.Type == "arrow") {
                docAnno.linestartstyle = docAnno.linestartstyle;
                docAnno.lineendstyle = docAnno.lineendstyle;
            } else if (docAnno.Type == "dimension") {
                docAnno.LeaderLength = leaderlength;
                docAnno.LeaderOffset = leaderoffset;
                docAnno.LeaderExtend = leaderextend;
                docAnno.TxtFontColor = dimensionAnnoStyle.TxtFontColor;
            } else if (docAnno.Type == "fileattach") {
                docAnno.Attachpath = attachpath;
                docAnno.Attachname = attachname;
            } else if (docAnno.Type == "text") {
                docAnno.TxtFont = fontname;
                docAnno.OutLineWidth = 0;
                docAnno.Height += 10;
            }

           // if (docAnno.Type != "stamp" && docAnno.Type != "textbox" && docAnno.Type != "freehand")
               docAnno.IsChanged = true;
            var reghex = new RegExp(/^[a-f0-9]+$/);
            if (fillColor == "False")
                docAnno.FillColor = "none";
            else {
                if (fillColor.length == 8 && reghex.exec(fillColor) != null)
                    docAnno.FillColor = "#" + fillColor.substring(2);
                else
                    docAnno.FillColor = fillColor;
            }
            if (lineColor.length == 8 && reghex.exec(lineColor) != null)
                docAnno.OutLineColor = "#" + lineColor.substring(2);
            else
                docAnno.OutLineColor = lineColor;
            if (type == "notes" && docAnno.FillColor == "")
                docAnno.FillColor = "#fff000";
            if (type == "underLine" || type == "strike" || type == "replaceText" || type == "highText" || type == "redact") {
                if (type == "highText")
                    docAnno.FillColor = docAnno.OutLineColor;
                docAnno.OutLineWidth = 1.0;
                var strPoints = points.split(";");
                var tempLeft = new Array();
                var tempTop = new Array();
                var tempWidth = new Array();
                var tempHeight = new Array();
                var lineRectangle = new Array();
                for (var k = 0; k < strPoints.length - 1; k++) {
                    var lineR = strPoints[k].split(",");
                    tempLeft.push(parseFloat(lineR[0]));
                    tempTop.push(parseFloat(lineR[1]));
                    tempWidth.push(parseFloat(lineR[2]));
                    tempHeight.push(parseFloat(lineR[3]));
                }
                lineRectangle.push(tempLeft);
                lineRectangle.push(tempTop);
                lineRectangle.push(tempWidth);
                lineRectangle.push(tempHeight);
                docAnno.selectTextRectangle = lineRectangle;
                var startX = tempLeft[0];
                var startY = tempTop[0];
                var endX = tempLeft[tempLeft.length - 1] + tempWidth[tempWidth.length - 1];
                var endY = tempTop[tempTop.length - 1] + tempHeight[tempHeight.length - 1];
                docAnno.Points = points;
                docAnno.EndLeft = endX;
                docAnno.EndTop = endY;
                if (RotateArray[pageId] != null) {
                    docAnno.MarkupDirection = RotateArray[pageId];
                } else {
                    docAnno.MarkupDirection = 0;
                }
            }
            if (docAnno.Type == "redact") {
                if (annooptions != null) {
                    var redactoptions = eval('(' + annooptions + ')');
                    if (redactoptions.AreaFillColor.Name != null) {
                        if (redactoptions.AreaFillColor.Name.length == 8)
                            docAnno.MarkFillColor = "#" + redactoptions.AreaFillColor.Name.substring(2);
                        else if (redactoptions.AreaFillColor.Name.length == 7)
                            docAnno.MarkFillColor = redactoptions.AreaFillColor.Name;
                        else if (redactoptions.AreaFillColor.Name.length == 6)
                            docAnno.MarkFillColor = "#" + redactoptions.AreaFillColor.Name;

                    }
                    if (lineColor == 8)
                        docAnno.MarkOutlineColor = "#" + lineColor.substring(2);
                    else if (lineColor == 7)
                        docAnno.MarkOutlineColor = lineColor;
                    else if (lineColor == 6)
                        docAnno.MarkOutlineColor = "#" + lineColor;
                    docAnno.IsOverlayTxt = redactoptions.EnableOverlayText;
                    docAnno.ShowedText = redactoptions.OverlayText;
                    docAnno.TextFont = redactoptions.OverlayTextFont.FontFamily;
                    docAnno.TextSize = redactoptions.OverlayTextFont.Size;
                    docAnno.TextColor = redactoptions.OverlayTextColor
                    docAnno.TextAlign = "left";
                    if (redactoptions.OverlayTextAlignment == 1)
                        docAnno.TextAlign = "center";
                    else if (redactoptions.OverlayTextAlignment == 2)
                        docAnno.TextAlign = "right";
                    docAnno.IsRepeat = redactoptions.IsRepeat;
                }
                if (typeof (points) != "undefined" && points != null && points != "") {
                    var strPoints = points.split(";");
                    var tempLeft = new Array();
                    var tempTop = new Array();
                    var tempWidth = new Array();
                    var tempHeight = new Array();
                    var lineRectangle = new Array();
                    for (var k = 0; k < strPoints.length - 1; k++) {
                        var lineR = strPoints[k].split(",");
                        tempLeft.push(parseFloat(lineR[0]));
                        tempTop.push(parseFloat(lineR[1]));
                        tempWidth.push(parseFloat(lineR[2]));
                        tempHeight.push(parseFloat(lineR[3]));
                    }
                    lineRectangle.push(tempLeft);
                    lineRectangle.push(tempTop);
                    lineRectangle.push(tempWidth);
                    lineRectangle.push(tempHeight);
                    docAnno.selectTextRectangle = lineRectangle;
                    docAnno.Points = points;
                    docAnno.EndLeft = endX;
                    docAnno.EndTop = endY;
                    docAnno.redactArea = false;
                    docAnno.redactPage = false;
                } else {
                    docAnno.redactArea = true;
                    docAnno.redactPage = false;
                }

            }
            docAnno.GetShowPosition();
            tempAnnoArray.push(docAnno);
        })
        sourceStartPage++;
    }
    $(".new_rect").remove();
    for (var i = 0; i < tempAnnoArray.length; i++) {
        var pageId = tempAnnoArray[i].OnPageIndex;
        var annoIndex = tempAnnoArray[i].Index;
        if (_fileDocument[curFileId].Viewers[pageId] == null) { continue; }
        _fileDocument[curFileId].Viewers[pageId].Annotations[annoIndex] = tempAnnoArray[i];
    }

    for (var i = 0; i < insertFileCount; i++) {
        var pageIndex = gotoPageIndex + i;
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        for (var index = 0; index < viewer.Annotations.length; index++) {
            var annotation = viewer.Annotations[index];
            if (annotation != null && annotation.Index != null) {
                drawImageViewerAnnotation(annotation);
                addThumbViewerAnnotation(annotation, pageIndex);
                AddAnnoToCommentsPanel(pageIndex, annotation.Type, annotation.Index, annotation.ModifiedDate);
            }
        }
    }
    noSelectAnno();
}

function CreateInsertSortNails(curPageIndex, location, startIndex, insertFileCount) {
    //insert the first page
    var pgIndex = startIndex;
    var viewer = _fileDocument[curFileId].Viewers[pgIndex];
    
    var str = "<div class='ordThumbnail' id='sortNail_" + pgIndex + "' style='width:" + viewer.ThumbWidth + "px;height:" + (viewer.ThumbHeight + 15) + "px;border:1px solid #000000;padding:5px;margin:5px;float:left;'>";
    str += "<div style='width:100%;height:" + viewer.ThumbHeight + "px;position:relative;background:#ffffff;margin:auto;'><img id='ordImg_" + pgIndex + "'  src=''/></div>";
    str += "<div style='text-align:center;margin-top:5px;'>" + (viewer.ShowIndex + 1) + "</div>";
    if (location == "before")
        $("#sortNail_" + curPageIndex).before(str);
    else if (location == "after")
        $("#sortNail_" + curPageIndex).after(str);
    ordPageHeight = viewer.ThumbHeight + 20;
    //insert the rest pages
    for (var i = 1; i < insertFileCount; i++) {
        var pgIndex = startIndex + i;
        var viewer = _fileDocument[curFileId].Viewers[pgIndex];

        var str = "<div class='ordThumbnail' id='sortNail_" + pgIndex + "' style='width:" + viewer.ThumbWidth + "px;height:" + (viewer.ThumbHeight + 15) + "px;border:1px solid #000000;padding:5px;margin:5px;float:left;'>";
        str += "<div style='width:100%;height:" + viewer.ThumbHeight + "px;position:relative;background:#ffffff;margin:auto;'><img id='ordImg_" + pgIndex + "'  src=''/></div>";
        str += "<div style='text-align:center;margin-top:5px;'>" + (viewer.ShowIndex + 1) + "</div>";
        $("#sortNail_" + curPageIndex).after(str);
        ordPageHeight = viewer.ThumbHeight + 20;
    }
}


function CreateThumbSortNails() {
    $("#_ordPanel").empty();
    var fileDoc = _fileDocument[curFileId];
    for (var i = 0; i < fileDoc.ViewerPageIndex.length; i++) {
        var pageIndex = fileDoc.ViewerPageIndex[i];
        var viewer = _fileDocument[curFileId].Viewers[pageIndex];
        if (viewer == null)
            continue;
        var isEmptyPage = viewer.isEmptyPage;
        CreateThumbSortNail(pageIndex, viewer.ShowIndex, isEmptyPage, viewer.ThumbWidth, viewer.ThumbHeight);
    }
    orderShowIds = new Array();
    $("#_ordPanel").addClass("select");
    $("#_ordPanel").sortable({ stop: function (event, ui) { /*SortPage(ui.item); */} });
    var showSortnail=null;
    $("#_ordPanel").scroll(function () {
        if (showSortnail)
        {
            clearTimeout(showSortnail);
        }
        showSortnail = setTimeout(function () {
            OrdAddShowPageIds();
        }, 1000);
    });
    sortPgsCreate = true;
}



function SetInsertThumbWH(curPageIndex, startIndex, insertFileCount) {
    var viewerMode = _fileDocument[curFileId].Viewers[curPageIndex];
    for (var i = 0; i < insertFileCount; i++) {
        var pgIndex = startIndex + i;
        var viewer = _fileDocument[curFileId].Viewers[pgIndex];
        viewer.ThumbWidth = viewerMode.ThumbWidth;
        viewer.ThumbHeight = viewerMode.ThumbHeight;
    }
}

var addmappingmd5 = [];
var isaddFile = false;
function AppendInsertFile(tempName, gotoPageIndex, insertFileCount, name, insertThumbScale, curPageIndex, location, isHasAnnos, insertFid) {
    showLoading();
    tempName = tempName.substring(0, tempName.lastIndexOf(".")) + ".pdf";
    var _addIndex = "0";
    if (gotoPageIndex != initialPageCount)
        _addIndex = gotoPageIndex - 1;

    var str = { action: "AppendInsertFile", fid: _fid, fileName: _fileName, password: "", addIndex: _addIndex, insertName: tempName, insertPsword: insertPassword, fileMD5: curFileMD5, addFid: insertFid, curPageCount: _fileDocument[curFileId].Viewers.length};
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) {
            $("#loading").hide();
            result = eval('(' + response + ')');
            if (result.state == "success") {
                if (_addIndex != "") {
                    var addEmptyNum = _addIndex - initialPageCount + 1;
                    initialPageCount += addEmptyNum;
                }
                initialPageCount += parseInt(insertFileCount);
               
                ChangePg(gotoPageIndex);
                ImageViewerAnnotationResize();
                ChangeBtnStyle();


                

                //create New file html
                CreateInsertThumbImages(tempName, gotoPageIndex, insertFileCount, insertThumbScale, insertFid);
                var addDocIds = new Array();
                for (var i = 0; i < insertFileCount; i++)
                    addDocIds.push(gotoPageIndex + i);
                refreshPageViewers(addDocIds);
                if (isHasAnnos == "yes")
                    GetInsertAnnoXmls(name, gotoPageIndex, insertFileCount,insertFid,0);

                RefreshCacheSearchFile();
                //create new sort nails
                SetInsertThumbWH(curPageIndex, gotoPageIndex, insertFileCount);
                if (sortPgsCreate)
                    CreateInsertSortNails(curPageIndex, location, gotoPageIndex, insertFileCount);
                addmappingmd5[insertFid] = result.msg.md5;
               //ChangePg(gotoPageIndex);
                HandleEvent();
               // GetSvgAddedFontInfo(insertFid);
               // resizeDocViewerByCSS3("imgBig", gotoPageIndex);
                window.onresize();

                startAutoPageLoad();
               
            }
        },
        error: function (err) { $("#loading").hide(); }
    }
    $.ajax(options);
}

function AppendReplaceFile() {
    showLoading();
        var insertFid = $("#_replaceafid").html();
    if (insertFid == null) {
        hideLoading();
        return;
    }

    var showStart = parseInt($("#_origFrom").val())-1;
    var showEnd = parseInt($("#_origTo").val())-1;
    var replaceStart = parseInt($("#_replFrom").val()) - 1;
    var isHasAnnos = $("#_repisHasAnno").text();
    var replaceCount = showEnd - showStart+1;
    var str = { action: "AppendReplaceFile", fid: _fid, addFid: insertFid, replacecount: replaceCount };
    var gotoPageIndex = -1;
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) {
            $("#loading").hide();
            result = eval('(' + response + ')');
            if (result.state == "success") {
                // get the target show page to delete
                var currentShowOrginPageIndex = [];
                for (var i = showStart; i <= showEnd; i++) {
                    var deletepage = _fileDocument[curFileId].GetPageIndex(i);
                    currentShowOrginPageIndex.push(deletepage);
                }
                var sizeArrayhtml = $("#_pageSizes").html();
                var rotateArrayhtml = $("#_pageRotates").html();
                var sizeArray = sizeArrayhtml.split("|");
                // to add the new page
                var insertShowStart = showStart;
                var replaceSourcePageCount = replaceCount;
                var insertThumbScale = 1;
                for (var i = 0; i < replaceSourcePageCount; i++) {
                    var targetPageindex=replaceStart+i;
                    _fileDocument[curFileId].AddPage(insertShowStart, targetPageindex, insertFid);
                    var addPageIndex = _fileDocument[curFileId].GetPageIndex(insertShowStart);
                    if (gotoPageIndex <= -1)
                        gotoPageIndex = addPageIndex;
                    insertShowStart++;
                    pageIndex = addPageIndex;
                    showIndex = showIndex + 1;
         
                    pageWidth = Math.round(sizeArray[targetPageindex].split(",")[0]);
                    pageHeight = Math.round(sizeArray[targetPageindex].split(",")[1]);

                    if (rotateArrayhtml != null) {
                        var rot = Math.round(rotateArrayhtml[targetPageindex].split(",")[0]);
                        RotateArray[addPageIndex] = rot;
                    }

                    WidthArray[addPageIndex] = pageWidth;
                    HeightArray[addPageIndex] = pageHeight;
                    _fileDocument[curFileId].Viewers[addPageIndex].GetInitialSize();
                    addDoc = "";// "<div class='pagecontainer' id='pagecontainer_" + addPageIndex + "'>"

                    addDoc += "<div class='docImages' id='page_" + addPageIndex + "' style='width:" +( pageWidth + widthprefix) + "px;height:" + pageHeight + "px;background:#ffffff;'>";
                    addDoc += "<img id='pageImg" + addPageIndex + "' style='margin-left:" + (pageWidth - loadWidth) / 2 + "px;margin-top:" + (pageHeight - loadHeight) / 2 + "px;width:" + loadWidth + "px;height:" + loadHeight + "px;' class='uploadbackgroud'/></div>";

                    addDoc += "</div>";

                    beforeId = "#page_" + (currentShowOrginPageIndex[0]);
                    $(beforeId).before(addDoc);
                    var beforeannotId = "#docannotation_" + (addPageIndex-1);

                    var annotpanel = "<div class='docannotations' id='docannotation_" + addPageIndex + "' style='width:auto;height:auto;'><div class='showByDrag pagedrag'/></div>";
                    $(beforeannotId).after(annotpanel);


                    $("#page_" + addPageIndex).css("border", "1px solid #000000");
                    $("#page_" + addPageIndex).css("box-shadow", "3px 3px 0px #000000");

                    //Thumbnails
                    addThumb = "<div class='rethumbnail' id='lbl_" + addPageIndex + "' onclick='ChangePg(" + addPageIndex + ")'>";
                    addThumb += "<div class='thumbDiv' id='thumbDiv_" + addPageIndex + "' style='width:" + _thumbWidth + "px;height:" + _thumbHeight + "px;background:#ffffff;'></div>";
                    addThumb += "<div id='thumbPgId_" + addPageIndex + "' class='thumbPgId'>" + (showIndex + 1) + "</div></div>";
                    beforeId = "#lbl_" + (currentShowOrginPageIndex[0]);
                    $(beforeId).before(addThumb);
                    CreateThumbImage("#thumbDiv_" + addPageIndex, addPageIndex);
                    $("#lbl_" + addPageIndex).smartMenu(ThumbMenuData, { name: "thb_" + addPageIndex });
                    viewer = _fileDocument[curFileId].Viewers[addPageIndex];
                    viewer.ThumbWidth = _thumbWidth;
                    viewer.ThumbHeight = _thumbHeight;
                    viewer.ThumbScaleX = _thumbWidth / pageWidth;
                    viewer.ThumbScaleY = _thumbHeight / pageHeight;
                    insertThumbScale += viewer.ThumbScaleX.toFixed(2) + ";";

                }
               
                addFileName = true;


                _maxWidth = WidthArray.max();
                _maxHeight = HeightArray.max();

               
                //if (_addIndex != "") {
                //    var addEmptyNum = _addIndex - initialPageCount + 1;
                //    initialPageCount += addEmptyNum;
                //}
                //initialPageCount += parseInt(insertFileCount);
               
                ChangePg(gotoPageIndex);
                ImageViewerAnnotationResize();
                ChangeBtnStyle();




                //create New file html
                // CreateInsertThumbImages(tempName, gotoPageIndex, insertFileCount, insertThumbScale, insertFid);
                var addDocIds = new Array();
                for (var i = 0; i < replaceCount; i++)
                    addDocIds.push(gotoPageIndex + i);
                refreshPageViewers(addDocIds);
                if (isHasAnnos == "yes")
                    GetInsertAnnoXmls(name, gotoPageIndex, replaceCount, insertFid, replaceStart);

                RefreshCacheSearchFile();
                //create new sort nails
                //SetInsertThumbWH(curPageIndex, gotoPageIndex, insertFileCount);
                //if (sortPgsCreate)
                //    CreateInsertSortNails(curPageIndex, location, gotoPageIndex, insertFileCount);
                
                //ChangePg(gotoPageIndex);
                HandleEvent();
                //GetSvgAddedFontInfo(insertFid);
                // resizeDocViewerByCSS3("imgBig", gotoPageIndex);
                window.onresize();

                //startAutoPageLoad();
         
                // delete real replace page

                for (var i = 0; i < currentShowOrginPageIndex.length; i++) {
                    var deletepage = _fileDocument[curFileId].GetShowIndex(currentShowOrginPageIndex[i]) + 1;
                    DeletePages(deletepage, deletepage);
                }
                SortPage($("#lbl_" + gotoPageIndex));
            }
            
            
        },
        error: function (err) { $("#loading").hide(); }
    }
    $.ajax(options);
}



function AddEmptyPage() {
    var page = $('input:radio[name="page"]:checked').val();
    var showIndex = 0;
    if (page == "First")
        showIndex = 1;
    else if (page == "Last")
        showIndex = _totalPageCount;
    else if (page == "Page") {
        showIndex = $("#_insertPg").val();
        var regEx = new RegExp(/^[0-9]*$/);
        if (regEx.exec(showIndex) == null || page <= 0 || page > _totalPageCount) {
            alert((i18n['content']['ErrorNumberInPage'] || "There is no page  in this document numbered ") + showIndex);
            return;
        }
    }
    hideInsertPopBox();
    showIndex = showIndex - 1;
    var pageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
    var pageWidth = WidthArray[pageIndex];
    var pageHeight = HeightArray[pageIndex];
    var location = $('input:radio[name="location"]:checked').val();
    if (location == "after")
        showIndex = showIndex + 1;
    _fileDocument[curFileId].AddPage(showIndex,0,"");
    var addPageIndex = _fileDocument[curFileId].GetPageIndex(showIndex);
    var viewer = _fileDocument[curFileId].Viewers[addPageIndex];

    WidthArray[addPageIndex] = pageWidth;
    HeightArray[addPageIndex] = pageHeight;
    _fileDocument[curFileId].Viewers[addPageIndex].GetInitialSize();
    var addDoc = "";// "<div class='pagecontainer' id='pagecontainer_" + addPageIndex + "'>";

    addDoc += "<div class='docImages' id='page_" + addPageIndex + "' style='width:" + (pageWidth + widthprefix )+ "px;height:" + pageHeight + "px;background:#ffffff;'>";

    str += "</div>";


    var beforeannotId = "#docannotation_" + pageIndex;
    var annotpanel = "<div class='docannotations' id='docannotation_" + addPageIndex + "'  style='width:" + pageWidth+ + "px;height:" + pageHeight + "px;'><div class='showByDrag pagedrag'/></div>";


    beforeId = "#page_" + pageIndex;
    if (location == "before") {
        $(beforeId).before(addDoc);
        $(beforeannotId).before(annotpanel);
    }
    else if (location == "after") {
        $(beforeId).after(addDoc);
        $(beforeannotId).after(annotpanel);
    }


    $("#page_" + addPageIndex).css("border", "1px solid #000000");
    $("#page_" + addPageIndex).css("box-shadow", "3px 3px 0px #000000");
    _showDocSrc.push(addPageIndex);

    //Thumbnail
    var addThumb = "<div class='rethumbnail' id='lbl_" + addPageIndex + "' onclick='ChangePg(" + addPageIndex + ")'>";
    addThumb += "<div class='thumbDiv' id='thumbDiv_" + addPageIndex + "' style='width:" + _thumbWidth + "px;height:" + _thumbHeight + "px;background:#ffffff;'></div>";
    addThumb += "<div id='thumbPgId_" + addPageIndex + "' class='thumbPgId'>" + (showIndex + 1) + "</div></div>";
    beforeId = "#lbl_" + pageIndex;
    if (location == "before")
        $(beforeId).before(addThumb);
    else if (location == "after")
        $(beforeId).after(addThumb);
    $("#lbl_" + addPageIndex).smartMenu(ThumbMenuData, { name: "thb_" + addPageIndex });
    $(".pageIdList").empty();
    for (var i = 1; i <= _totalPageCount; i++) {
        var text = i + " / " + _totalPageCount;
        var value = i;
        $(".pageIdList").append($('<option></option>').val(value).html(text));
    }
    ChangePg(addPageIndex);
    ChangeBtnStyle();

    var viewerMode = _fileDocument[curFileId].Viewers[pageIndex];
  
    viewer.ThumbWidth = viewerMode.ThumbWidth;
    viewer.ThumbHeight = viewerMode.ThumbHeight;
    viewer.ThumbScaleX = _thumbWidth / pageWidth;
    viewer.ThumbScaleY = _thumbHeight / pageHeight;
    viewer.isEmptyPage = true;

    if (sortPgsCreate) {
        var str = "<div class='ordThumbnail' id='sortNail_" + addPageIndex + "' style='width:" + viewer.ThumbWidth + "px;height:" + (viewer.ThumbHeight + 15) + "px;border:1px solid #000000;padding:5px;margin:5px;float:left;'>";
        str += "<div style='width:100%;height:" + viewer.ThumbHeight + "px;position:relative;background:#ffffff;margin:auto;'></div>";
        str += "<div style='text-align:center;margin-top:5px;'>" + (addPageIndex + 1) + "</div>";
        if (location == "before")
            $("#sortNail_" + pageIndex).before(str);
        else if (location == "after")
            $("#sortNail_" + pageIndex).after(str);
        ordPageHeight = viewer.ThumbHeight + 20;
    }
    window.onresize();
}


function CreateInsertSvgFile(name, startIndex, insertFileCount, insertThumbScale, insertFid) {
    return;
    var str = { action: "CreateInsertDocSvg", fid: _fid, fileName: name, insertPsword: insertPassword, index: startIndex, pageCount: insertFileCount };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) {
            for (var i = 0; i < insertFileCount; i++) {
                var pgIndex = i;//startIndex + i;
                var viewer = _fileDocument[curFileId].Viewers[pgIndex];
                if (viewer == null || viewer.ShowIndex == null) { continue; }
                _fileDocument[curFileId].Viewers[pgIndex].DocImageIsExist = true;
            }
            CreateInsertThumbImages(name, startIndex, insertFileCount, insertThumbScale, insertFid);
        },
        error: function (err) { }
    }
    $.ajax(options);
}

function CreateInsertThumbImages(name, startIndex, insertFileCount, insertThumbScale, insertFid) {
    return;
    var str = { action: "CreateInsertThumbImages", fid: _fid, fileName: name, insertPsword: insertPassword, index: startIndex, pageCount: insertFileCount, thumbScale: $.toJSON(insertThumbScale), addFid: insertFid };
    var options = {
        type: "POST",
        url: getServerHandlerUrl(),
        async: true,
        data: str,
        success: function (response) {
            for (var i = 0; i < insertFileCount; i++) {
                var pgIndex =  i; // startIndex+ i
                var viewer = _fileDocument[curFileId].Viewers[pgIndex];
                if (viewer == null || viewer.ShowIndex == null) { continue; }
                _fileDocument[curFileId].Viewers[pgIndex].ThumbImageIsExist = true;
            }
        },
        error: function (err) { }
    }
    $.ajax(options);
}


function emptyAllAnnotaions() {

    $(".new_rect").remove();
    $(".thumb_rect").remove();
    $("#_commentsPanel").empty();
    $("#_commentList").html("<span style='padding-left:15px;'>Comments  List </span>");
    for (var i = 0; i < _fileDocument[curFileId].Viewers.length; i++) {
        var viewer = _fileDocument[curFileId].Viewers[i];
        if (viewer == null)
        { continue; }
        _fileDocument[curFileId].Viewers[i].Annotations = [];
    }
    num = 0;
    redactAnnoNum = 0;
    window.onresize();
}

;
///<jscompress sourcefile="FileDocument.js" />
var PDFMetaData = Class.create();
PDFMetaData.prototype = 
{
    initialize: function(options) 
	{
		this.SetOptions(options);
		this.file = this.options.file;
		this.title = this.options.title;
		this.author = this.options.author;
		this.subject = this.options.subject;
		this.keywords = this.options.keywords;
		this.createDate = this.options.createDate;
		this.modifiedDate = this.options.modifiedDate;
		this.producer = this.options.producer;
	},
		
	SetOptions: function(options) 
	{
		this.options = 
		{
			file:           "",
			title:          "",
			author:         "",
			subject:        "",
			keywords:       "",
			createDate:     "",	
		    modifiedDate:   "",
		    producer:       ""
		};
		Extend(this.options, options || {});
    },
}

var PDFOptimizer = Class.create();
PDFOptimizer.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.ColorDownSample = this.options.ColorDownSample;
        this.ColorTargetPPi = this.options.ColorTargetPPi;
        this.ColorMaxPPi = this.options.ColorMaxPPi;
        this.ColorCompression = this.options.ColorCompression;
        this.ColorQuality = this.options.ColorQuality;
        this.GrayDownSample = this.options.GrayDownSample;
        this.GrayTargetPPi = this.options.GrayTargetPPi;
        this.GrayMaxPPi = this.options.GrayMaxPPi;
        this.GrayCompression = this.options.GrayCompression;
        this.GrayQuality = this.options.GrayQuality;
        this.MonoDownSample = this.options.MonoDownSample;
        this.MonoTargetPPi = this.options.MonoTargetPPi;
        this.MonoMaxPPi = this.options.MonoMaxPPi;
        this.MonoCompression = this.options.MonoCompression;
        this.MonoQuality = this.options.MonoQuality;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    ColorDownSample : "Bicubic Downsampling to",
		    ColorTargetPPi  : "150",
		    ColorMaxPPi     : "225",
		    ColorCompression: "JBIG2",
		    ColorQuality    : "Medium",
		    GrayDownSample  : "Bicubic Downsampling to",
		    GrayTargetPPi   : "150",
		    GrayMaxPPi      : "225",
		    GrayCompression : "JBIG2",
		    GrayQuality     : "Medium",
		    MonoDownSample  : "Bicubic Downsampling to",
		    MonoTargetPPi   : "150",
		    MonoMaxPPi      : "225",
		    MonoCompression : "JBIG2",
		    MonoQuality     : "Medium"
		};
		Extend(this.options, options || {});
    },
}

var ImageOutOptions = Class.create();
ImageOutOptions.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.imgType = this.options.imgType;
		this.colorSpace = this.options.colorSpace;
		this.compressMode = this.options.compressMode;
		this.resolution = this.options.resolution;
		this.interlace = this.options.interlace;
		this.filter = this.options.filter;
		this.blockSize = this.options.blockSize;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    imgType:             "",
			colorSpace:          "",
			compressMode:        "",
			resolution:          "",
			interlace:           "",
			filter:              "",
			blockSize:           "",
		};
		Extend(this.options, options || {});
    },
}

var PDFRestrictions = Class.create();
PDFRestrictions.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.isPrint = this.options.isPrint;
		this.isModify = this.options.isModify;
		this.isAssemble = this.options.isAssemble;
		this.isCopy = this.options.isCopy;
		this.isExtract = this.options.isExtract;
		this.isAnnot = this.options.isAnnot;
		this.isFillForm = this.options.isFillForm;
		this.hasOwnerPss = this.options.hasOwnerPass;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
			isPrint:           "Allowed",
			isModify:          "Allowed",
			isAssemble:         "Allowed",
			isCopy:        "Allowed",
			isExtract:       "Allowed",
			isAnnot:     "Allowed",	
		    isFillForm:   "Allowed",
		    hasOwnerPss:  false
		};
		Extend(this.options, options || {});
    },
}

var PDFPageDesign = Class.create();
PDFPageDesign.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.HeadAndFoot = this.options.HeadAndFoot;
        this.Background = this.options.Background;
        this.Watermark = this.options.Watermark;
        this.LastDesign = this.options.LastDesign;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    HeadAndFoot : new Array(),
		    Background : new Array(),
		    Watermark : new Array(),
		    LastDesign  : ""
		};
		Extend(this.options, options || {});
    },
}

var DesignPageRange = Class.create();
DesignPageRange.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.PageRange = this.options.PageRange;
        this.Subset = this.options.Subset;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
            PageRange : "",
            Subset    : ""
		};
		Extend(this.options, options || {});
    },
}

var PageAndDateFormat = Class.create();
PageAndDateFormat.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.DateFormat = this.options.DateFormat;
        this.PageFormat = this.options.PageFormat;
        this.StartPageNum = this.options.StartPageNum;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    DateFormat : "m/d", //HFDateF
		    PageFormat : "1",   //HFPageF
		    StartPageNum:   1   //HFStartId
		};
		Extend(this.options, options || {});
    },
}

var PDFSaveSetting = Class.create();
PDFSaveSetting.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.Name = this.options.Name;
        this.Settings = this.options.Settings;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    Name : "",
		    Settings : ""
		};
		Extend(this.options, options || {});
    },
}

var savePDFHeadFoot = new Array();//HFSaveSettings
var PDFHeadFoot = Class.create();
PDFHeadFoot.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.FontName = this.options.FontName;
        this.FontSize = this.options.FontSize;
        this.IsUnderline = this.options.IsUnderline;
        this.FontColor = this.options.FontColor;
        this.MarginTop = this.options.MarginTop;
        this.MarginBottom = this.options.MarginBottom;
        this.MarginLeft = this.options.MarginLeft;
        this.MarginRight = this.options.MarginRight;
        this.LeftHText = this.options.LeftHText;
        this.CenterHText = this.options.CenterHText;
        this.RightHText = this.options.RightHText;
        this.LeftFText = this.options.LeftFText;
        this.CenterFText = this.options.CenterFText;
        this.RightFText = this.options.RightFText;
        this.PageRange = this.options.PageRange;
        this.Subset = this.options.Subset;
        this.PageIndexs = this.options.PageIndexs;
        this.PageDateFormat = this.options.PageDateFormat;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    FontName:   "Arial",    //HFFont
		    FontSize:   "8",        //HFSize
		    IsUnderline:  "false",  //HFStyle
		    FontColor:  "#000000",  //HFColor
		    MarginTop:  0.5,        //topMargin
		    MarginBottom:   0.5,    //botMargin
		    MarginLeft: 0.5,        //leftMargin
		    MarginRight:    0.5,    //rightMargin
		    LeftHText:  "",         //leftHTxt
		    CenterHText:    "",     //centerHTxt
		    RightHText:     "",     //rightHTxt
		    LeftFText:  "",         //leftFTxt
		    CenterFText:    "",     //centerFTxt
		    RightFText:     "",     //rightFTxt
		    PageRange:  "All Pages",//HFRange[HFPageAll/HFPageFrom:HFFrom/HFTo]
		    Subset :  "All pages in range", //HFSubset
		    PageIndexs : new Array(),
		    PageDateFormat: new PageAndDateFormat()    
		};
		Extend(this.options, options || {});
    },
}

var SourceFromFile = Class.create();
SourceFromFile.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.Path = this.options.Path;
        this.FileMD5 = this.options.FileMD5;
        this.PageNum = this.options.PageNum;
        this.AbScale = this.options.AbScale;
        this.PageCount = this.options.PageCount;
        this.PageSize = this.options.PageSize;
    },
    SetOptions: function(options) 
	{
		this.options =          
		{                       //BGFromFile,WMFromFile
		    Path : "<No source file selected>",  //BGFile,WMFile
		    FileMD5: "",
		    PageNum : 1,        //BGFileNumber,WMFileNumber
		    AbScale : 0,         //BGFileScale,WMFileScale
		    PageCount : 1,
		    PageSize : ""
		};
		Extend(this.options, options || {});
    },
}

var savePDFBackground = new Array();   //BGSaveSettings
var PDFBackground = Class.create();
PDFBackground.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.Source = this.options.Source;
        this.SourceFile = this.options.SourceFile;
        this.SourceColor = this.options.SourceColor;
        this.Rotation = this.options.Rotation;
        this.Opacity = this.options.Opacity;
        this.ScaleRela = this.options.ScaleRela;
        this.VDistance = this.options.VDistance;
        this.VertAlign = this.options.VertAlign;
        this.HDistance = this.options.HDistance;
        this.HorAlign = this.options.HorAlign;
        this.PageRange = this.options.PageRange;
        this.Subset = this.options.Subset;
        this.PageIndexs = this.options.PageIndexs;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    Source : "Color",   //BGFromColor
		    SourceFile :  new SourceFromFile(),
		    SourceColor  : "#ffffff", //BGColor
		    Rotation : 0,       //BGRotate
		    Opacity : 1,        //BGOpacity
		    ScaleRela : 1,      //BGRelaScale
		    VDistance : 0,      //BGVerD
		    VertAlign : "Center", //
		    HDistance : 0,      //BGHorD
		    HorAlign  : "Center",
            PageRange : "All Pages",  //Name:BGRange,Value:BGAll/BGPart[BGFrom/BGTo]
            Subset  : "All pages in range",   //BGSubset
            PageIndexs : new Array()
		};
		Extend(this.options, options || {});
    },
}

var SourceFromText = Class.create();
SourceFromText.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.Text = this.options.Text;
        this.FontName = this.options.FontName;
        this.FontSize = this.options.FontSize;
        this.IsUnderline = this.options.IsUnderline;
        this.FontColor = this.options.FontColor;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
		    Text : "",              //WMText,name:WMSource,Value:WMText
		    FontName : "Arial",     //WMFont
		    FontSize : " ",           //WMSize
		    IsUnderline : "false",  //WMStyle
		    FontColor : "#000000"   //WMColor
		};
		Extend(this.options, options || {});
    },
}

var savePDFWatermark = new Array(); //WMSaveSettings
var PDFWatermark = Class.create();
PDFWatermark.prototype = 
{
    initialize: function(options)
    {
        this.SetOptions(options);
        this.Source = this.options.Source;
        this.SourceText = this.options.SourceText;
        this.SourceFile = this.options.SourceFile;
        this.Rotation = this.options.Rotation;
        this.Opacity = this.options.Opacity;
        this.ScaleRela = this.options.ScaleRela;
        this.Location = this.options.Location;
        this.VDistance = this.options.VDistance;
        this.VertAlign = this.options.VertAlign;
        this.HDistance = this.options.HDistance;
        this.HorAlign = this.options.HorAlign;
        this.PageRange = this.options.PageRange;
        this.Subset = this.options.Subset;
        this.PageIndexs = this.options.PageIndexs;
    },
    SetOptions: function(options) 
	{
		this.options = 
		{
            Source : "Text",    
            SourceText : new SourceFromText(),
            SourceFile : new SourceFromFile(),
            Rotation : "WMNone",  //name:WMRotation[WMC45,WMNone,WM45,WMCustom[WMCustomD]]
            Opacity : 1,        //WMOpacity
            ScaleRela : 0.5,    //WMRelaScale
            Location  : "WMTop",    //name:WMLocation[WMBehind,WMTop]
            VDistance : 0,      //WMVerD
            VertAlign : "Center",   //
            HDistance : 0,      //WMHorD
            HorAlign  : "Center", //
            PageRange : "All Pages",    //name:WMRange[value:WMAll,WMPart[WMFrom,WMTo]]
            Subset  : "All pages in range",    //WMSubset
            PageIndexs : new Array()
		};
		Extend(this.options, options || {});
    },
}

var HTMLDoc = Class.create();
HTMLDoc.prototype = 
{
    initialize: function(options) 
	{
		this.SetOptions(options);
		this.htmlContents = this.options.htmlContents;
	},
		
	SetOptions: function(options) 
	{
		this.options = 
		{
			htmlContents : new Array()
		};
		Extend(this.options, options || {});
    },
}

var FileDocument = Class.create();
FileDocument.prototype =
{
    initialize: function (options) {
        this.SetOptions(options);
        this.Index = this.options.Index;
        this.Name = this.options.Name;
        this.ViewerPageIndex = this.options.ViewerPageIndex;
        this.Viewers = this.options.Viewers;
        this.ViewerChars = this.options.ViewerChars;
        this.ViewerSvgContent = this.options.ViewerSvgContent;
    },

    SetOptions: function (options) {
        this.options =
		{
		    Index: 0,
		    Name: "",
		    ViewerPageIndex: new Array(),
		    Viewers: new Array(),
		    ViewerChars: new Array(),
		    ViewerSvgContent: new Array(),
		};
        Extend(this.options, options || {});
    },

    GetPageIndex: function (showIndex) {
        if (this.ViewerPageIndex.length == 0)
            return null;
        else
            return this.ViewerPageIndex[showIndex];
    },

    GetShowIndex: function (pageIndex) {
        for (var i = 0; i < this.ViewerPageIndex.length; i++) {
            if (this.ViewerPageIndex[i] == pageIndex)
                return i;
        }
        return null;
    },
    ChangeState: function () {
        for (var i = 0; i < this.Viewers.length; i++) {
            if (this.Viewers[i] == null || this.Viewers[i].ShowIndex == null)
            { continue; }
            this.Viewers[i].isChange = true;
        }
    },
    IsAnnos: function () {
        for (var i = 0; i < this.Viewers.length; i++) {
            if (this.Viewers[i] == null || this.Viewers[i].ShowIndex == null)
            { continue; }
            if (this.Viewers[i].IsAnnos()) {
                _IsAnnos = true;
                return;
            }
        }
        _IsAnnos = false;
    },
    IsLinks: function () {
        for (var i = 0; i < this.ViewerChars.length; i++) {
            if (this.Viewers[i] == null || this.Viewers[i].ShowIndex == null)
            { continue; }
            if (this.Viewers[i].IsLinks()) {
                return true;
            }
        }
        return false;
    },
    DeleteAnno: function (annoIndex) {
        for (var i = 0; i < this.Viewers.length; i++) {
            if (this.Viewers[i] == null || this.Viewers[i].ShowIndex == null)
            { continue; }
            if (this.Viewers[i].DeleteAnno(annoIndex)) {
                return i;
            }
        }
    },
    AddPage: function (showIndex,sourcepageindex,insertfid) {
        for (var i = 0; i < this.Viewers.length; i++) {
            if (this.Viewers[i] == null || this.Viewers[i].ShowIndex == null)
            { continue; }
            if (this.Viewers[i].ShowIndex >= showIndex) {
                this.Viewers[i].ShowIndex++;
                $("#thumbPgId_" + this.Viewers[i].PageIndex).text((parseInt(this.Viewers[i].ShowIndex) + 1));
            }
        }
        _totalPageCount++;
        var pageIndex = _pageCountFlag++;
        var viewer = new Viewer({ PageIndex: pageIndex, IsInsertPage: true, SourcePageIndex: sourcepageindex, InsertFid: insertfid });
        viewer.ShowIndex = showIndex;
        this.Viewers[pageIndex] = viewer;
        this.ViewerPageIndex.insertAt(showIndex, pageIndex);
    },
    DeletePage: function (showIndex) {
        var pageIndex = this.GetPageIndex(showIndex);
        this.Viewers[pageIndex].DeleteAnnos();
        this.Viewers[pageIndex] = null;
    },
    SortPage: function (showIndexOrder) {
        for (var i = 0; i < this.Viewers.length; i++) {
            if (this.Viewers[i] == null || this.Viewers[i].ShowIndex == null)
            { continue; }

            this.Viewers[i].ShowIndex = showIndexOrder[this.Viewers[i].PageIndex];
            $("#thumbPgId_" + this.Viewers[i].PageIndex).text(parseInt(this.Viewers[i].ShowIndex) + 1);
        }
    }
};

;
///<jscompress sourcefile="jquery.alerts.js" />
// jQuery Alert Dialogs Plugin
//
// Version 1.0
//
// Cory S.N. LaViska
// A Beautiful Site (http://abeautifulsite.net/)
// 29 December 2008
//
// Visit http://abeautifulsite.net/notebook/87 for more information
//
// Usage:
//		jAlert( message, [title, callback] )
//		jConfirm( message, [title, callback] )
//		jPrompt( message, [value, title, callback] )
// 
// History:
//
//		1.00 - Released (29 December 2008)
//
// License:
// 
//		This plugin is licensed under the GNU General Public License: http://www.gnu.org/licenses/gpl.html
//
(function($) {
	
	$.alerts = {
		
		// These properties can be read/written by accessing $.alerts.propertyName from your scripts at any time
		
		verticalOffset: -75,                // vertical offset of the dialog from center screen, in pixels
		horizontalOffset: 0,                // horizontal offset of the dialog from center screen, in pixels/
		repositionOnResize: true,           // re-centers the dialog on window resize
		overlayOpacity: .01,                // transparency level of overlay
		overlayColor: '#FFF',               // base color of overlay
		draggable: true,                    // make the dialogs draggable (requires UI Draggables plugin)
		okButton: '&nbsp;OK&nbsp;',         // text for the OK button
		cancelButton: '&nbsp;Cancel&nbsp;', // text for the Cancel button
		dialogClass: null,                  // if specified, this class will be applied to all dialogs
		
		// Public methods
		
		alert: function(message, title, callback) {
			if( title == null ) title = 'Alert';
			$.alerts._show(title, message, null, 'alert', function(result) {
				if( callback ) callback(result);
			});
		},
		
		confirm: function(message, title, callback) {
			if( title == null ) title = 'Confirm';
			$.alerts._show(title, message, null, 'confirm', function(result) {
				if( callback ) callback(result);
			});
		},
			
		prompt: function(message, value, title, callback) {
			if( title == null ) title = 'Prompt';
			$.alerts._show(title, message, value, 'prompt', function(result) {
				if( callback ) callback(result);
			});
		},
		
		// Private methods
		
		_show: function(title, msg, value, type, callback) {
			
			$.alerts._hide();
			$.alerts._overlay('show');
			
			$("BODY").append(
			  '<div id="popup_container">' +
			    '<h1 id="popup_title"></h1>' +
			    '<div id="popup_content">' +
			      '<div id="popup_message"></div>' +
				'</div>' +
			  '</div>');
			
			if( $.alerts.dialogClass ) $("#popup_container").addClass($.alerts.dialogClass);
			
			// IE6 Fix
			var pos = ('undefined' == typeof(document.body.style.maxHeight)) ? 'absolute' : 'fixed'; 
			
			$("#popup_container").css({
				position: pos,
				zIndex: 99999,
				padding: 0,
				margin: 0
			});
			
			$("#popup_title").text(title);
			$("#popup_content").addClass(type);
			$("#popup_message").text(msg);
			$("#popup_message").html( $("#popup_message").text().replace(/\n/g, '<br />') );
			
			$("#popup_container").css({
				minWidth: $("#popup_container").outerWidth(),
				maxWidth: $("#popup_container").outerWidth()
			});
			
			$.alerts._reposition();
			$.alerts._maintainPosition(true);
			
			switch( type ) {
				case 'alert':
					$("#popup_message").after('<div id="popup_panel"><input type="button" value="' + $.alerts.okButton + '" id="popup_ok" /></div>');
					$("#popup_ok").click( function() {
						$.alerts._hide();
						callback(true);
					});
					$("#popup_ok").focus().keypress( function(e) {
						if( e.keyCode == 13 || e.keyCode == 27 ) $("#popup_ok").trigger('click');
					});
				break;
				case 'confirm':
					$("#popup_message").after('<div id="popup_panel" style="margin-left:130px;"><input type="button"   value="' + $.alerts.okButton + '" id="popup_ok" /> <input type="button" value="' + $.alerts.cancelButton + '" id="popup_cancel" /></div>');
					$("#popup_ok").click( function() {
						$.alerts._hide();
						if( callback ) callback(true);
					});
					$("#popup_cancel").click( function() {
						$.alerts._hide();
						if( callback ) callback(false);
					});
					$("#popup_ok").focus();
					$("#popup_ok, #popup_cancel").keypress( function(e) {
						if( e.keyCode == 13 ) $("#popup_ok").trigger('click');
						if( e.keyCode == 27 ) $("#popup_cancel").trigger('click');
					});
				break;
				case 'prompt':
					$("#popup_message").append('<br /><input type="text" size="30" id="popup_prompt" />').after('<div id="popup_panel"><input type="button" value="' + $.alerts.okButton + '" id="popup_ok" /> <input type="button" value="' + $.alerts.cancelButton + '" id="popup_cancel" /></div>');
					$("#popup_prompt").width( $("#popup_message").width() );
					$("#popup_ok").click( function() {
						var val = $("#popup_prompt").val();
						$.alerts._hide();
						if( callback ) callback( val );
					});
					$("#popup_cancel").click( function() {
						$.alerts._hide();
						if( callback ) callback( null );
					});
					$("#popup_prompt, #popup_ok, #popup_cancel").keypress( function(e) {
						if( e.keyCode == 13 ) $("#popup_ok").trigger('click');
						if( e.keyCode == 27 ) $("#popup_cancel").trigger('click');
					});
					if( value ) $("#popup_prompt").val(value);
					$("#popup_prompt").focus().select();
				break;
			}
			
			// Make draggable
			if( $.alerts.draggable ) {
				try {
					$("#popup_container").draggable({ handle: $("#popup_title") });
					$("#popup_title").css({ cursor: 'move' });
				} catch(e) { /* requires jQuery UI draggables */ }
			}
		},
		
		_hide: function() {
			$("#popup_container").remove();
			$.alerts._overlay('hide');
			$.alerts._maintainPosition(false);
		},
		
		_overlay: function(status) {
			switch( status ) {
				case 'show':
					$.alerts._overlay('hide');
					$("BODY").append('<div id="popup_overlay"></div>');
					$("#popup_overlay").css({
						position: 'absolute',
						zIndex: 99998,
						top: '0px',
						left: '0px',
						width: '100%',
						height: $(document).height(),
						background: $.alerts.overlayColor,
						opacity: $.alerts.overlayOpacity
					});
				break;
				case 'hide':
					$("#popup_overlay").remove();
				break;
			}
		},
		
		_reposition: function() {
			var top = (($(window).height() / 2) - ($("#popup_container").outerHeight() / 2)) + $.alerts.verticalOffset;
			var left = (($(window).width() / 2) - ($("#popup_container").outerWidth() / 2)) + $.alerts.horizontalOffset;
			if( top < 0 ) top = 0;
			if( left < 0 ) left = 0;
			
			// IE6 fix
			if( 'undefined' == typeof(document.body.style.maxHeight)) top = top + $(window).scrollTop();
			
			$("#popup_container").css({
				top: top + 'px',
				left: left + 'px'
			});
			$("#popup_overlay").height( $(document).height() );
		},
		
		_maintainPosition: function(status) {
			if( $.alerts.repositionOnResize ) {
				switch(status) {
					case true:
						$(window).bind('resize', function() {
							$.alerts._reposition();
						});
					break;
					case false:
						$(window).unbind('resize');
					break;
				}
			}
		}
		
	}
	
	// Shortuct functions
	jAlert = function(message, title, callback) {
		$.alerts.alert(message, title, callback);
	}
	
	jConfirm = function(message, title, callback) {
		$.alerts.confirm(message, title, callback);
	};
		
	jPrompt = function(message, value, title, callback) {
		$.alerts.prompt(message, value, title, callback);
	};
	
})(jQuery);;
///<jscompress sourcefile="jquery.json.js" />
/**
 * jQuery JSON plugin 2.4.0
 *
 * @author Brantley Harris, 2009-2011
 * @author Timo Tijhof, 2011-2012
 * @source This plugin is heavily influenced by MochiKit's serializeJSON, which is
 *         copyrighted 2005 by Bob Ippolito.
 * @source Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
 *         website's http://www.json.org/json2.js, which proclaims:
 *         "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 *         I uphold.
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 */
(function ($) {
	'use strict';

	var escape = /["\\\x00-\x1f\x7f-\x9f]/g,
		meta = {
			'\b': '\\b',
			'\t': '\\t',
			'\n': '\\n',
			'\f': '\\f',
			'\r': '\\r',
			'"' : '\\"',
			'\\': '\\\\'
		},
		hasOwn = Object.prototype.hasOwnProperty;

	/**
	 * jQuery.toJSON
	 * Converts the given argument into a JSON representation.
	 *
	 * @param o {Mixed} The json-serializable *thing* to be converted
	 *
	 * If an object has a toJSON prototype, that will be used to get the representation.
	 * Non-integer/string keys are skipped in the object, as are keys that point to a
	 * function.
	 *
	 */
	$.toJSON = typeof JSON === 'object' && JSON.stringify ? JSON.stringify : function (o) {
		if (o === null) {
			return 'null';
		}

		var pairs, k, name, val,
			type = $.type(o);

		if (type === 'undefined') {
			return undefined;
		}

		// Also covers instantiated Number and Boolean objects,
		// which are typeof 'object' but thanks to $.type, we
		// catch them here. I don't know whether it is right
		// or wrong that instantiated primitives are not
		// exported to JSON as an {"object":..}.
		// We choose this path because that's what the browsers did.
		if (type === 'number' || type === 'boolean') {
			return String(o);
		}
		if (type === 'string') {
			return $.quoteString(o);
		}
		if (typeof o.toJSON === 'function') {
			return $.toJSON(o.toJSON());
		}
		if (type === 'date') {
			var month = o.getUTCMonth() + 1,
				day = o.getUTCDate(),
				year = o.getUTCFullYear(),
				hours = o.getUTCHours(),
				minutes = o.getUTCMinutes(),
				seconds = o.getUTCSeconds(),
				milli = o.getUTCMilliseconds();

			if (month < 10) {
				month = '0' + month;
			}
			if (day < 10) {
				day = '0' + day;
			}
			if (hours < 10) {
				hours = '0' + hours;
			}
			if (minutes < 10) {
				minutes = '0' + minutes;
			}
			if (seconds < 10) {
				seconds = '0' + seconds;
			}
			if (milli < 100) {
				milli = '0' + milli;
			}
			if (milli < 10) {
				milli = '0' + milli;
			}
			return '"' + year + '-' + month + '-' + day + 'T' +
				hours + ':' + minutes + ':' + seconds +
				'.' + milli + 'Z"';
		}

		pairs = [];

		if ($.isArray(o)) {
			for (k = 0; k < o.length; k++) {
				pairs.push($.toJSON(o[k]) || 'null');
			}
			return '[' + pairs.join(',') + ']';
		}

		// Any other object (plain object, RegExp, ..)
		// Need to do typeof instead of $.type, because we also
		// want to catch non-plain objects.
		if (typeof o === 'object') {
			for (k in o) {
				// Only include own properties,
				// Filter out inherited prototypes
				if (hasOwn.call(o, k)) {
					// Keys must be numerical or string. Skip others
					type = typeof k;
					if (type === 'number') {
						name = '"' + k + '"';
					} else if (type === 'string') {
						name = $.quoteString(k);
					} else {
						continue;
					}
					type = typeof o[k];

					// Invalid values like these return undefined
					// from toJSON, however those object members
					// shouldn't be included in the JSON string at all.
					if (type !== 'function' && type !== 'undefined') {
						val = $.toJSON(o[k]);
						pairs.push(name + ':' + val);
					}
				}
			}
			return '{' + pairs.join(',') + '}';
		}
	};

	/**
	 * jQuery.evalJSON
	 * Evaluates a given json string.
	 *
	 * @param str {String}
	 */
	$.evalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {
		/*jshint evil: true */
		return eval('(' + str + ')');
	};

	/**
	 * jQuery.secureEvalJSON
	 * Evals JSON in a way that is *more* secure.
	 *
	 * @param str {String}
	 */
	$.secureEvalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {
		var filtered =
			str
			.replace(/\\["\\\/bfnrtu]/g, '@')
			.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
			.replace(/(?:^|:|,)(?:\s*\[)+/g, '');

		if (/^[\],:{}\s]*$/.test(filtered)) {
			/*jshint evil: true */
			return eval('(' + str + ')');
		}
		throw new SyntaxError('Error parsing JSON, source is not valid.');
	};

	/**
	 * jQuery.quoteString
	 * Returns a string-repr of a string, escaping quotes intelligently.
	 * Mostly a support function for toJSON.
	 * Examples:
	 * >>> jQuery.quoteString('apple')
	 * "apple"
	 *
	 * >>> jQuery.quoteString('"Where are we going?", she asked.')
	 * "\"Where are we going?\", she asked."
	 */
	$.quoteString = function (str) {
		if (str.match(escape)) {
			return '"' + str.replace(escape, function (a) {
				var c = meta[a];
				if (typeof c === 'string') {
					return c;
				}
				c = a.charCodeAt();
				return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
			}) + '"';
		}
		return '"' + str + '"';
	};

}(jQuery));

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2006, 2014 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD (Register as an anonymous module)
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var pluses = /\+/g;

    function encode(s) {
        return config.raw ? s : encodeURIComponent(s);
    }

    function decode(s) {
        return config.raw ? s : decodeURIComponent(s);
    }

    function stringifyCookieValue(value) {
        return encode(config.json ? JSON.stringify(value) : String(value));
    }

    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            // This is a quoted cookie as according to RFC2068, unescape...
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
        }

        try {
            // Replace server-side written pluses with spaces.
            // If we can't decode the cookie, ignore it, it's unusable.
            // If we can't parse the cookie, ignore it, it's unusable.
            s = decodeURIComponent(s.replace(pluses, ' '));
            return config.json ? JSON.parse(s) : s;
        } catch (e) { }
    }

    function read(s, converter) {
        var value = config.raw ? s : parseCookieValue(s);
        return $.isFunction(converter) ? converter(value) : value;
    }

    var config = $.cookie = function (key, value, options) {

        // Write

        if (arguments.length > 1 && !$.isFunction(value)) {
            options = $.extend({}, config.defaults, options);

            if (typeof options.expires === 'number') {
                var days = options.expires, t = options.expires = new Date();
                t.setMilliseconds(t.getMilliseconds() + days * 864e+5);
            }

            return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path ? '; path=' + options.path : '',
				options.domain ? '; domain=' + options.domain : '',
				options.secure ? '; secure' : ''
            ].join(''));
        }

        // Read

        var result = key ? undefined : {},
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling $.cookie().
			cookies = document.cookie ? document.cookie.split('; ') : [],
			i = 0,
			l = cookies.length;

        for (; i < l; i++) {
            var parts = cookies[i].split('='),
				name = decode(parts.shift()),
				cookie = parts.join('=');

            if (key === name) {
                // If second argument (value) is a function it's a converter...
                result = read(cookie, value);
                break;
            }

            // Prevent storing a cookie that we couldn't decode.
            if (!key && (cookie = read(cookie)) !== undefined) {
                result[name] = cookie;
            }
        }

        return result;
    };

    config.defaults = {};

    $.removeCookie = function (key, options) {
        // Must not alter options, thus extending a fresh object...
        $.cookie(key, '', $.extend({}, options, { expires: -1 }));
        return !$.cookie(key);
    };

}));;
///<jscompress sourcefile="jquery-smartMenu.js" />
 
(function($) {
	var D = $(document).data("func", {});	
	$.smartMenu = $.noop;
	$.fn.smartMenu = function(data, options) {
		var B = $("body"), defaults = {
			name: "",
			offsetX: 10,
			offsetY: 10,
			textLimit: 25,
			beforeShow: $.noop,
			afterShow: $.noop,
		};
		var params = $.extend(defaults, options || {});
		
		var htmlCreateMenu = function(datum) {
			var dataMenu = datum || data, nameMenu = datum? Math.random().toString(): params.name, htmlMenu = "", htmlCorner = "", clKey = "smart_menu_";
			if ($.isArray(dataMenu) && dataMenu.length) {
				htmlMenu = '<div id="smartMenu_'+ nameMenu +'" class="'+ clKey +'box">' +
								'<div class="'+ clKey +'body">' +
									'<ul class="'+ clKey +'ul">';
									
				$.each(dataMenu, function(i, arr) {
					if (i) {
						htmlMenu = htmlMenu + '<li class="'+ clKey +'li_separate">&nbsp;</li>';	
					}
					if ($.isArray(arr)) {
						$.each(arr, function(j, obj) {
						    var text = obj.text, htmlMenuLi = "", strTitle = "", rand = Math.random().toString().replace(".", "");
						    var disable = obj.readonly || false;
						    var addClass= "";
						    if (disable) {
						        addClass = "disabled";
						    }

							if (text) {
								if (text.length > params.textLimit) {
									text = text.slice(0, params.textLimit)	+ "...";
									strTitle = ' title="'+ obj.text +'"';
								}
								if ($.isArray(obj.data) && obj.data.length) {
									htmlMenuLi = '<li class="'+ clKey +'li" data-hover="true">' + htmlCreateMenu(obj.data) +
										'<a href="javascript:" class="'+addClass+' '+ clKey +'a"'+ strTitle +' data-key="'+ rand +'"><i class="'+ clKey +'triangle"></i>'+ text +'</a>' + 
									'</li>';
								} else {
									htmlMenuLi = '<li class="'+ clKey +'li">' +
										'<a href="javascript:" class="' + addClass + ' ' + clKey + 'a"' + strTitle + ' data-key="' + rand + '">' + text + '</a>' +
									'</li>';
								}
								
								htmlMenu += htmlMenuLi;
								
								var objFunc = D.data("func");
								objFunc[rand] = obj.func;
								D.data("func", objFunc);
							}
						});	
					}
				});
				
				htmlMenu = htmlMenu + '</ul>' +
									'</div>' +
								'</div>';
			}
			return htmlMenu;
		}, funSmartMenu = function() {
			var idKey = "#smartMenu_", clKey = "smart_menu_", jqueryMenu = $(idKey + params.name);
			if (!jqueryMenu.size()) {
				$("body").append(htmlCreateMenu());
				
				//事件
				$(idKey + params.name +" a").bind("click", function(e) {
					var key = $(this).attr("data-key");
						callback = D.data("func")[key];
					if ($.isFunction(callback)) {
						callback.call(D.data("trigger"),e);	
					}
					$.smartMenu.hide();
					return false;
				});
				$(idKey + params.name +" li").each(function() {
					var isHover = $(this).attr("data-hover"), clHover = clKey + "li_hover";
					
					$(this).hover(function() {
						var jqueryHover = $(this).siblings("." + clHover);
						jqueryHover.removeClass(clHover).children("."+ clKey +"box").hide();
						jqueryHover.children("."+ clKey +"a").removeClass(clKey +"a_hover");
						
						if (isHover) {					
							$(this).addClass(clHover).children("."+ clKey +"box").show();
							$(this).children("."+ clKey +"a").addClass(clKey +"a_hover");	
						}
						
					});
					
				});
				return $(idKey + params.name);
			} 
			return jqueryMenu;
		};
		
		$(this).each(function() {
		    {
		        this.oncontextmenu = function(e) {
				   
				    if ($.isFunction(params.beforeShow)) {
					    params.beforeShow.call(this);	
				    }
				    e = e || window.event;
				
				    e.cancelBubble = true;
				    if (e.stopPropagation) {
					    e.stopPropagation();
				    }
				  
				    $.smartMenu.remove();
				    var st = D.scrollTop();
				    var jqueryMenu = funSmartMenu();
				    var tempLeft = e.clientX + params.offsetX;
				    var tempTop = e.clientY + st + params.offsetY;
				    if(tempLeft+182 > browserWidth)
				        tempLeft = browserWidth - 182;
				    if(tempTop+95 > browserHeight)
				        tempTop = browserHeight - 95;
				    if (jqueryMenu) {
					    jqueryMenu.css({
						    display: "block",
						    left: tempLeft,
						    top: tempTop
					    });
					    D.data("target", jqueryMenu);
					    D.data("trigger", this);
					  
					    if ($.isFunction(params.afterShow)) {
						    params.afterShow.call(this);	
					    }
					    return false;
				    }
			    };
		    }
		});
		if (!B.data("bind")) {
			B.bind("click", $.smartMenu.hide).data("bind", true);
		}
	};
	$.extend($.smartMenu, {
		hide: function() {
			var target = D.data("target");
			if (target && target.css("display") === "block") {
				target.hide();
			}		
		},
		remove: function(id) {
		    var target = D.data("target");
			if (target) {
			    target.remove();
			} 
		}
	});
})(jQuery);;
///<jscompress sourcefile="jquery-ui.js" />
/*! jQuery UI - v1.10.4 - 2014-05-25
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function( $, undefined ) {

var uuid = 0,
	runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.10.4",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	scrollParent: function() {
		var scrollParent;
		if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		}

		return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.extend( $.ui, {
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var i,
				set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
				return;
			}

			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},

	// only used by resizable
	hasScroll: function( el, a ) {

		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	}
});

})( jQuery );
(function( $, undefined ) {

var uuid = 0,
	slice = Array.prototype.slice,
	_cleanData = $.cleanData;
$.cleanData = function( elems ) {
	for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
		try {
			$( elem ).triggerHandler( "remove" );
		// http://bugs.jquery.com/ticket/8235
		} catch( e ) {}
	}
	_cleanData( elems );
};

$.widget = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),
		// track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.widget.extend( basePrototype, {
		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	});

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );
};

$.widget.extend = function( target ) {
	var input = slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.widget.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} )._init();
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",
	options: {
		disabled: false,

		// callbacks
		create: null
	},
	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = uuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;
		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}

		this._create();
		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			// 1.9 BC for #7810
			// TODO remove dual storage
			.removeData( this.widgetName )
			.removeData( this.widgetFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.widgetFullName ) );
		this.widget()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetFullName + "-disabled " +
				"ui-state-disabled" );

		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "ui-state-hover" );
		this.focusable.removeClass( "ui-state-focus" );
	},
	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		}

		return this;
	},

	enable: function() {
		return this._setOption( "disabled", false );
	},
	disable: function() {
		return this._setOption( "disabled", true );
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			// accept selectors, DOM elements
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^(\w+)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-focus" );
			}
		});
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

})( jQuery );
(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function() {
	mouseHandled = false;
});

$.widget("ui.mouse", {
	version: "1.10.4",
	options: {
		cancel: "input,textarea,button,select,option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.bind("mousedown."+this.widgetName, function(event) {
				return that._mouseDown(event);
			})
			.bind("click."+this.widgetName, function(event) {
				if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
					$.removeData(event.target, that.widgetName + ".preventClickEvent");
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind("."+this.widgetName);
		if ( this._mouseMoveDelegate ) {
			$(document)
				.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one widget handle mouseStart
		if( mouseHandled ) { return; }

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = (event.which === 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				that.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
			$.removeData(event.target, this.widgetName + ".preventClickEvent");
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return that._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return that._mouseUp(event);
		};
		$(document)
			.bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
			.bind("mouseup."+this.widgetName, this._mouseUpDelegate);

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
			return this._mouseUp(event);
		}

		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		$(document)
			.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
			.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target === this._mouseDownEvent.target) {
				$.data(event.target, this.widgetName + ".preventClickEvent", true);
			}

			this._mouseStop(event);
		}

		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(/* event */) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(/* event */) {},
	_mouseDrag: function(/* event */) {},
	_mouseStop: function(/* event */) {},
	_mouseCapture: function(/* event */) { return true; }
});

})(jQuery);
(function( $, undefined ) {

$.ui = $.ui || {};

var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: isWindow ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !$.support.offsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			}
			else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
			else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

}( jQuery ) );
(function( $, undefined ) {

$.widget("ui.draggable", $.ui.mouse, {
	version: "1.10.4",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,
		drgZoomValue:1,
		pageScale: 1,

		// callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
			this.element[0].style.position = "relative";
		}
		if (this.options.addClasses){
			this.element.addClass("ui-draggable");
		}
		if (this.options.disabled){
			this.element.addClass("ui-draggable-disabled");
		}

		this._mouseInit();

	},

	_destroy: function() {
		this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
		this._mouseDestroy();
	},

	_mouseCapture: function(event) {

		var o = this.options;

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle) {
			return false;
		}

		$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
			$("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
			.css({
				width: this.offsetWidth+"px", height: this.offsetHeight+"px",
				position: "absolute", opacity: "0.001", zIndex: 1000
			})
			.css($(this).offset())
			.appendTo("body");
		});
        
		return true;

	},

	_mouseStart: function(event) {
	    if (isReadOnly())
	        return;
		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("ui-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent();
		this.offsetParent = this.helper.offsetParent();
		this.offsetParentCssPosition = this.offsetParent.css( "position" );

		//The element's absolute position on the page minus margins
		this.offset = this.positionAbs = this.element.offset();
		this.offset = {
			top: (this.offset.top - this.margins.top),
			left: (this.offset.left - this.margins.left)
		};
		//Reset scroll cache
		this.offset.scroll = false;

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: (event.pageX - this.offset.left),
				top: (event.pageY - this.offset.top)
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;
		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if(this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}


		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart(this, event);
		}

		return true;
	},

	_mouseDrag: function (event, noPropagation) {
	    var o = this.options;
		// reset any necessary cached properties (see #5009)
		if ( this.offsetParentCssPosition === "fixed" ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.position.left /= o.pageScale;
		this.position.top /= o.pageScale;
		this.positionAbs = this._convertPositionTo("absolute");
	
		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if(this._trigger("drag", event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}
		if(!this.options.axis || this.options.axis !== "y") {
		    this.helper[0].style.left = this.position.left  + "px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
		    this.helper[0].style.top = this.position.top  + "px";
		}
		
		if($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			dropped = $.ui.ddmanager.drop(this, event);
		}

		//if a drop comes from outside (a sortable)
		if(this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}

		//if the original element is no longer in the DOM don't bother to continue (see #8269)
		if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
			return false;
		}

		if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if(that._trigger("stop", event) !== false) {
					that._clear();
				}
			});
		} else {
			if(this._trigger("stop", event) !== false) {
				this._clear();
			}
		}
		return false;
	},

	_mouseUp: function(event) {
		//Remove frame helpers
		$("div.ui-draggable-iframeFix").each(function() {
			this.parentNode.removeChild(this);
		});

		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop(this, event);
		}
		return $.ui.mouse.prototype._mouseUp.call(this, event);
	},

	cancel: function() {

		if(this.helper.is(".ui-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function(event) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

		if(!helper.parents("body").length) {
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
		}

		if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
			helper.css("position", "absolute");
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		//This needs to be actually done for all browsers, since pageX/pageY includes this information
		//Ugly IE fix
		if((this.offsetParent[0] === document.body) ||
			(this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {
		if(this.cssPosition === "relative") {
			var p = this.element.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"),10) || 0),
			top: (parseInt(this.element.css("marginTop"),10) || 0),
			right: (parseInt(this.element.css("marginRight"),10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var over, c, ce,
			o = this.options;
		if ( !o.containment ) {
			this.containment = null;
			return;
		}
		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document") {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if( !ce ) {
			return;
		}

		over = c.css( "overflow" ) !== "hidden";
		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ) ,
			(over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) * o.drgZoomValue - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
			(over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) * o.drgZoomValue - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom
		];
		this.relative_container = c;
	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;

		//Cache the scroll
		if (!this.offset.scroll) {
			this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
		}

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top ) * mod )
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left ) * mod )
			)
		};

	},

	_generatePosition: function(event) {

		var containment, co, top, left,
			o = this.options,
			scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent,
			pageX = event.pageX,
			pageY = event.pageY;
		//Cache the scroll
		if (!this.offset.scroll) {
			this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( this.originalPosition ) {
			if ( this.containment ) {
				if ( this.relative_container ){
					co = this.relative_container.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				}
				else {
					containment = this.containment;
				}

				if(event.pageX - this.offset.click.left < containment[0]) {
					pageX = containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < containment[1]) {
					pageY = containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > containment[2]) {
					pageX = containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > containment[3]) {
					pageY = containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																	// The absolute mouse position
				this.offset.click.top	-												// Click offset (relative to the element)
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top )
			),
			left: (
				pageX -																	// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left )
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("ui-draggable-dragging");
		if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function(type, event, ui) {
		ui = ui || this._uiHash();
		$.ui.plugin.call(this, type, [event, ui]);
		//The absolute position has to be recalculated after plugins
		if(type === "drag") {
			this.positionAbs = this._convertPositionTo("absolute");
		}
		return $.Widget.prototype._trigger.call(this, type, event, ui);
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.ui.plugin.add("draggable", "connectToSortable", {
	start: function(event, ui) {

		var inst = $(this).data("ui-draggable"), o = inst.options,
			uiSortable = $.extend({}, ui, { item: inst.element });
		inst.sortables = [];
		$(o.connectToSortable).each(function() {
			var sortable = $.data(this, "ui-sortable");
			if (sortable && !sortable.options.disabled) {
				inst.sortables.push({
					instance: sortable,
					shouldRevert: sortable.options.revert
				});
				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
				sortable._trigger("activate", event, uiSortable);
			}
		});

	},
	stop: function(event, ui) {

		//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
		var inst = $(this).data("ui-draggable"),
			uiSortable = $.extend({}, ui, { item: inst.element });

		$.each(inst.sortables, function() {
			if(this.instance.isOver) {

				this.instance.isOver = 0;

				inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
				this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

				//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
				if(this.shouldRevert) {
					this.instance.options.revert = this.shouldRevert;
				}

				//Trigger the stop of the sortable
				this.instance._mouseStop(event);

				this.instance.options.helper = this.instance.options._helper;

				//If the helper has been the original item, restore properties in the sortable
				if(inst.options.helper === "original") {
					this.instance.currentItem.css({ top: "auto", left: "auto" });
				}

			} else {
				this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
				this.instance._trigger("deactivate", event, uiSortable);
			}

		});

	},
	drag: function(event, ui) {

		var inst = $(this).data("ui-draggable"), that = this;

		$.each(inst.sortables, function() {

			var innermostIntersecting = false,
				thisSortable = this;

			//Copy over some variables to allow calling the sortable's native _intersectsWith
			this.instance.positionAbs = inst.positionAbs;
			this.instance.helperProportions = inst.helperProportions;
			this.instance.offset.click = inst.offset.click;

			if(this.instance._intersectsWith(this.instance.containerCache)) {
				innermostIntersecting = true;
				$.each(inst.sortables, function () {
					this.instance.positionAbs = inst.positionAbs;
					this.instance.helperProportions = inst.helperProportions;
					this.instance.offset.click = inst.offset.click;
					if (this !== thisSortable &&
						this.instance._intersectsWith(this.instance.containerCache) &&
						$.contains(thisSortable.instance.element[0], this.instance.element[0])
					) {
						innermostIntersecting = false;
					}
					return innermostIntersecting;
				});
			}


			if(innermostIntersecting) {
				//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
				if(!this.instance.isOver) {

					this.instance.isOver = 1;
					//Now we fake the start of dragging for the sortable instance,
					//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
					//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
					this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
					this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
					this.instance.options.helper = function() { return ui.helper[0]; };

					event.target = this.instance.currentItem[0];
					this.instance._mouseCapture(event, true);
					this.instance._mouseStart(event, true, true);

					//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
					this.instance.offset.click.top = inst.offset.click.top;
					this.instance.offset.click.left = inst.offset.click.left;
					this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
					this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

					inst._trigger("toSortable", event);
					inst.dropped = this.instance.element; //draggable revert needs that
					//hack so receive/update callbacks work (mostly)
					inst.currentItem = inst.element;
					this.instance.fromOutside = inst;

				}

				//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
				if(this.instance.currentItem) {
					this.instance._mouseDrag(event);
				}

			} else {

				//If it doesn't intersect with the sortable, and it intersected before,
				//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
				if(this.instance.isOver) {

					this.instance.isOver = 0;
					this.instance.cancelHelperRemoval = true;

					//Prevent reverting on this forced stop
					this.instance.options.revert = false;

					// The out event needs to be triggered independently
					this.instance._trigger("out", event, this.instance._uiHash(this.instance));

					this.instance._mouseStop(event, true);
					this.instance.options.helper = this.instance.options._helper;

					//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
					this.instance.currentItem.remove();
					if(this.instance.placeholder) {
						this.instance.placeholder.remove();
					}

					inst._trigger("fromSortable", event);
					inst.dropped = false; //draggable revert needs that
				}

			}

		});

	}
});

$.ui.plugin.add("draggable", "cursor", {
	start: function() {
		var t = $("body"), o = $(this).data("ui-draggable").options;
		if (t.css("cursor")) {
			o._cursor = t.css("cursor");
		}
		t.css("cursor", o.cursor);
	},
	stop: function() {
		var o = $(this).data("ui-draggable").options;
		if (o._cursor) {
			$("body").css("cursor", o._cursor);
		}
	}
});

$.ui.plugin.add("draggable", "opacity", {
	start: function(event, ui) {
		var t = $(ui.helper), o = $(this).data("ui-draggable").options;
		if(t.css("opacity")) {
			o._opacity = t.css("opacity");
		}
		t.css("opacity", o.opacity);
	},
	stop: function(event, ui) {
		var o = $(this).data("ui-draggable").options;
		if(o._opacity) {
			$(ui.helper).css("opacity", o._opacity);
		}
	}
});

$.ui.plugin.add("draggable", "scroll", {
	start: function() {
		var i = $(this).data("ui-draggable");
		if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
			i.overflowOffset = i.scrollParent.offset();
		}
	},
	drag: function( event ) {

		var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

		if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

			if(!o.axis || o.axis !== "x") {
				if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
				}
			}

			if(!o.axis || o.axis !== "y") {
				if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if(!o.axis || o.axis !== "x") {
				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}
			}

			if(!o.axis || o.axis !== "y") {
				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}
			}

		}

		if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(i, event);
		}

	}
});

$.ui.plugin.add("draggable", "snap", {
	start: function() {

		var i = $(this).data("ui-draggable"),
			o = i.options;

		i.snapElements = [];

		$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
			var $t = $(this),
				$o = $t.offset();
			if(this !== i.element[0]) {
				i.snapElements.push({
					item: this,
					width: $t.outerWidth(), height: $t.outerHeight(),
					top: $o.top, left: $o.left
				});
			}
		});

	},
	drag: function(event, ui) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			inst = $(this).data("ui-draggable"),
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (i = inst.snapElements.length - 1; i >= 0; i--){

			l = inst.snapElements[i].left;
			r = l + inst.snapElements[i].width;
			t = inst.snapElements[i].top;
			b = t + inst.snapElements[i].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if(inst.snapElements[i].snapping) {
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = false;
				continue;
			}

			if(o.snapMode !== "inner") {
				ts = Math.abs(t - y2) <= d;
				bs = Math.abs(b - y1) <= d;
				ls = Math.abs(l - x2) <= d;
				rs = Math.abs(r - x1) <= d;
				if(ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if(bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
				}
				if(ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
				}
				if(rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
				}
			}

			first = (ts || bs || ls || rs);

			if(o.snapMode !== "outer") {
				ts = Math.abs(t - y1) <= d;
				bs = Math.abs(b - y2) <= d;
				ls = Math.abs(l - x1) <= d;
				rs = Math.abs(r - x2) <= d;
				if(ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
				}
				if(bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if(ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
				}
				if(rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
				}
			}

			if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		}

	}
});

$.ui.plugin.add("draggable", "stack", {
	start: function() {
		var min,
			o = this.data("ui-draggable").options,
			group = $.makeArray($(o.stack)).sort(function(a,b) {
				return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
			});

		if (!group.length) { return; }

		min = parseInt($(group[0]).css("zIndex"), 10) || 0;
		$(group).each(function(i) {
			$(this).css("zIndex", min + i);
		});
		this.css("zIndex", (min + group.length));
	}
});

$.ui.plugin.add("draggable", "zIndex", {
	start: function(event, ui) {
		var t = $(ui.helper), o = $(this).data("ui-draggable").options;
		if(t.css("zIndex")) {
			o._zIndex = t.css("zIndex");
		}
		t.css("zIndex", o.zIndex);
	},
	stop: function(event, ui) {
		var o = $(this).data("ui-draggable").options;
		if(o._zIndex) {
			$(ui.helper).css("zIndex", o._zIndex);
		}
	}
});

})(jQuery);
(function( $, undefined ) {

function isOverAxis( x, reference, size ) {
	return ( x > reference ) && ( x < ( reference + size ) );
}

$.widget("ui.droppable", {
	version: "1.10.4",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",
		activeClass: false,
		addClasses: true,
		greedy: false,
		hoverClass: false,
		scope: "default",
		tolerance: "intersect",

		// callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction(accept) ? accept : function(d) {
			return d.is(accept);
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {
				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {
				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
		$.ui.ddmanager.droppables[o.scope].push(this);

		(o.addClasses && this.element.addClass("ui-droppable"));

	},

	_destroy: function() {
		var i = 0,
			drop = $.ui.ddmanager.droppables[this.options.scope];

		for ( ; i < drop.length; i++ ) {
			if ( drop[i] === this ) {
				drop.splice(i, 1);
			}
		}

		this.element.removeClass("ui-droppable ui-droppable-disabled");
	},

	_setOption: function(key, value) {

		if(key === "accept") {
			this.accept = $.isFunction(value) ? value : function(d) {
				return d.is(value);
			};
		}
		$.Widget.prototype._setOption.apply(this, arguments);
	},

	_activate: function(event) {
		var draggable = $.ui.ddmanager.current;
		if(this.options.activeClass) {
			this.element.addClass(this.options.activeClass);
		}
		if(draggable){
			this._trigger("activate", event, this.ui(draggable));
		}
	},

	_deactivate: function(event) {
		var draggable = $.ui.ddmanager.current;
		if(this.options.activeClass) {
			this.element.removeClass(this.options.activeClass);
		}
		if(draggable){
			this._trigger("deactivate", event, this.ui(draggable));
		}
	},

	_over: function(event) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return;
		}

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) {
				this.element.addClass(this.options.hoverClass);
			}
			this._trigger("over", event, this.ui(draggable));
		}

	},

	_out: function(event) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return;
		}

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) {
				this.element.removeClass(this.options.hoverClass);
			}
			this._trigger("out", event, this.ui(draggable));
		}

	},

	_drop: function(event,custom) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return false;
		}

		this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
			var inst = $.data(this, "ui-droppable");
			if(
				inst.options.greedy &&
				!inst.options.disabled &&
				inst.options.scope === draggable.options.scope &&
				inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
				$.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
			) { childrenIntersection = true; return false; }
		});
		if(childrenIntersection) {
			return false;
		}

		if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.activeClass) {
				this.element.removeClass(this.options.activeClass);
			}
			if(this.options.hoverClass) {
				this.element.removeClass(this.options.hoverClass);
			}
			this._trigger("drop", event, this.ui(draggable));
			return this.element;
		}

		return false;

	},

	ui: function(c) {
		return {
			draggable: (c.currentItem || c.element),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	}

});

$.ui.intersect = function(draggable, droppable, toleranceMode) {

	if (!droppable.offset) {
		return false;
	}

	var draggableLeft, draggableTop,
		x1 = (draggable.positionAbs || draggable.position.absolute).left,
		y1 = (draggable.positionAbs || draggable.position.absolute).top,
		x2 = x1 + draggable.helperProportions.width,
		y2 = y1 + draggable.helperProportions.height,
		l = droppable.offset.left,
		t = droppable.offset.top,
		r = l + droppable.proportions().width,
		b = t + droppable.proportions().height;

	switch (toleranceMode) {
		case "fit":
			return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
		case "intersect":
			return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half
				x2 - (draggable.helperProportions.width / 2) < r && // Left Half
				t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half
				y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
		case "pointer":
			draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);
			draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);
			return isOverAxis( draggableTop, t, droppable.proportions().height ) && isOverAxis( draggableLeft, l, droppable.proportions().width );
		case "touch":
			return (
				(y1 >= t && y1 <= b) ||	// Top edge touching
				(y2 >= t && y2 <= b) ||	// Bottom edge touching
				(y1 < t && y2 > b)		// Surrounded vertically
			) && (
				(x1 >= l && x1 <= r) ||	// Left edge touching
				(x2 >= l && x2 <= r) ||	// Right edge touching
				(x1 < l && x2 > r)		// Surrounded horizontally
			);
		default:
			return false;
		}

};

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function(t, event) {

		var i, j,
			m = $.ui.ddmanager.droppables[t.options.scope] || [],
			type = event ? event.type : null, // workaround for #2317
			list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

		droppablesLoop: for (i = 0; i < m.length; i++) {

			//No disabled and non-accepted
			if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
				continue;
			}

			// Filter out elements in the current dragged item
			for (j=0; j < list.length; j++) {
				if(list[j] === m[i].element[0]) {
					m[i].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[i].visible = m[i].element.css("display") !== "none";
			if(!m[i].visible) {
				continue;
			}

			//Activate the droppable if used directly from draggables
			if(type === "mousedown") {
				m[i]._activate.call(m[i], event);
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });

		}

	},
	drop: function(draggable, event) {

		var dropped = false;
		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

			if(!this.options) {
				return;
			}
			if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
				dropped = this._drop.call(this, event) || dropped;
			}

			if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call(this, event);
			}

		});
		return dropped;

	},
	dragStart: function( draggable, event ) {
		//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
			if( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		});
	},
	drag: function(draggable, event) {

		//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
		if(draggable.options.refreshPositions) {
			$.ui.ddmanager.prepareOffsets(draggable, event);
		}

		//Run through all droppables and check their positions based on specific tolerance options
		$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

			if(this.options.disabled || this.greedyChild || !this.visible) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = $.ui.intersect(draggable, this, this.options.tolerance),
				c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
			if(!c) {
				return;
			}

			if (this.options.greedy) {
				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents(":data(ui-droppable)").filter(function () {
					return $.data(this, "ui-droppable").options.scope === scope;
				});

				if (parent.length) {
					parentInstance = $.data(parent[0], "ui-droppable");
					parentInstance.greedyChild = (c === "isover");
				}
			}

			// we just moved into a greedy child
			if (parentInstance && c === "isover") {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call(parentInstance, event);
			}

			this[c] = true;
			this[c === "isout" ? "isover" : "isout"] = false;
			this[c === "isover" ? "_over" : "_out"].call(this, event);

			// we just moved out of a greedy child
			if (parentInstance && c === "isout") {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call(parentInstance, event);
			}
		});

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
		//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

})(jQuery);
(function( $, undefined ) {

function num(v) {
	return parseInt(v, 10) || 0;
}

function isNumber(value) {
	return !isNaN(parseInt(value, 10));
}

$.widget("ui.resizable", $.ui.mouse, {
	version: "1.10.4",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		// See #7960
		zIndex: 90,

		// callbacks
		resize: null,
		start: null,
		stop: null
	},
	_create: function() {

		var n, i, handle, axis, hname,
			that = this,
			o = this.options;
		this.element.addClass("ui-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		});

		//Wrap the element if it cannot hold child nodes
		if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

			//Create a wrapper element and set the wrapper to the new current internal element
			this.element.wrap(
				$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
					position: this.element.css("position"),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css("top"),
					left: this.element.css("left")
				})
			);

			//Overwrite the original this.element
			this.element = this.element.parent().data(
				"ui-resizable", this.element.data("ui-resizable")
			);

			this.elementIsWrapper = true;

			//Move margins to the wrapper
			this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
			this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

			//Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css("resize");
			this.originalElement.css("resize", "none");

			//Push the actual element to our proportionallyResize internal array
			this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css("margin") });

			// fix handlers offset
			this._proportionallyResize();

		}

		this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
		if(this.handles.constructor === String) {

			if ( this.handles === "all") {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split(",");
			this.handles = {};

			for(i = 0; i < n.length; i++) {

				handle = $.trim(n[i]);
				hname = "ui-resizable-"+handle;
				axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

				// Apply zIndex to all handles - see #7960
				axis.css({ zIndex: o.zIndex });

				//TODO : What's going on here?
				if ("se" === handle) {
					axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
				}

				//Insert into internal handles object and append to element
				this.handles[handle] = ".ui-resizable-"+handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for(i in this.handles) {

				if(this.handles[i].constructor === String) {
					this.handles[i] = $(this.handles[i], this.element).show();
				}

				//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

					axis = $(this.handles[i], this.element);

					//Checking the correct pad and border
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					//The padding type i have to apply...
					padPos = [ "padding",
						/ne|nw|n/.test(i) ? "Top" :
						/se|sw|s/.test(i) ? "Bottom" :
						/^e$/.test(i) ? "Right" : "Left" ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();

				}

				//TODO: What's that good for? There's not anything to be executed left
				if(!$(this.handles[i]).length) {
					continue;
				}
			}
		};

		//TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = $(".ui-resizable-handle", this.element)
			.disableSelection();

		//Matching axis name
		this._handles.mouseover(function() {
			if (!that.resizing) {
				if (this.className) {
					axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				}
				//Axis, default = se
				that.axis = axis && axis[1] ? axis[1] : "se";
			}
		});

		//If we want to auto hide the elements
		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("ui-resizable-autohide")
				.mouseenter(function() {
					if (o.disabled) {
						return;
					}
					$(this).removeClass("ui-resizable-autohide");
					that._handles.show();
				})
				.mouseleave(function(){
					if (o.disabled) {
						return;
					}
					if (!that.resizing) {
						$(this).addClass("ui-resizable-autohide");
						that._handles.hide();
					}
				});
		}

		//Initialize the mouse interaction
		this._mouseInit();

	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function(exp) {
				$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
					.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
			};

		//TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			wrapper = this.element;
			this.originalElement.css({
				position: wrapper.css("position"),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css("top"),
				left: wrapper.css("left")
			}).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css("resize", this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var i, handle,
			capture = false;

		for (i in this.handles) {
			handle = $(this.handles[i])[0];
			if (handle === event.target || $.contains(handle, event.target)) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function(event) {

		var curleft, curtop, cursor,
			o = this.options,
			iniPos = this.element.position(),
			el = this.element;

		this.resizing = true;

		// bugfix for http://dev.jquery.com/ticket/1749
		if ( (/absolute/).test( el.css("position") ) ) {
			el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
		} else if (el.is(".ui-draggable")) {
			el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
		}

		this._renderProxy();

		curleft = num(this.helper.css("left"));
		curtop = num(this.helper.css("top"));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		//Store needed variables
		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };
		this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: el.width(), height: el.height() };
		this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalPosition = { left: curleft, top: curtop };
		this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		//Aspect Ratio
		this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

		cursor = $(".ui-resizable-" + this.axis).css("cursor");
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

		el.addClass("ui-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		//Increase performance, avoid regex
		var data,
			el = this.helper, props = {},
			smp = this.originalMousePosition,
			a = this.axis,
			prevTop = this.position.top,
			prevLeft = this.position.left,
			prevWidth = this.size.width,
			prevHeight = this.size.height,
			dx = (event.pageX-smp.left)||0,
			dy = (event.pageY-smp.top)||0,
			trigger = this._change[a];

		if (!trigger) {
			return false;
		}

		// Calculate the attrs that will be change
		data = trigger.apply(this, [event, dx, dy]);

		// Put this in the mouseDrag handler since the user can start pressing shift while resizing
		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey) {
			data = this._updateRatio(data, event);
		}

		data = this._respectSize(data, event);

		this._updateCache(data);

		// plugins callbacks need to be called first
		this._propagate("resize", event);

		if (this.position.top !== prevTop) {
			props.top = this.position.top + "px";
		}
		if (this.position.left !== prevLeft) {
			props.left = this.position.left + "px";
		}
		if (this.size.width !== prevWidth) {
			props.width = this.size.width + "px";
		}
		if (this.size.height !== prevHeight) {
			props.height = this.size.height + "px";
		}
		el.css(props);

		if (!this._helper && this._proportionallyResizeElements.length) {
			this._proportionallyResize();
		}

		// Call the user callback if the element was resized
		if ( ! $.isEmptyObject(props) ) {
			this._trigger("resize", event, this.ui());
		}

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if(this._helper) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);
			soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			if (!o.animate) {
				this.element.css($.extend(s, { top: top, left: left }));
			}

			that.helper.height(that.size.height);
			that.helper.width(that.size.width);

			if (this._helper && !o.animate) {
				this._proportionallyResize();
			}
		}

		$("body").css("cursor", "auto");

		this.element.removeClass("ui-resizable-resizing");

		this._propagate("stop", event);

		if (this._helper) {
			this.helper.remove();
		}

		return false;

	},

	_updateVirtualBoundaries: function(forceAspectRatio) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
			maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
			minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
			maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
		};

		if(this._aspectRatio || forceAspectRatio) {
			// We want to create an enclosing box whose aspect ration is the requested one
			// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if(pMinWidth > b.minWidth) {
				b.minWidth = pMinWidth;
			}
			if(pMinHeight > b.minHeight) {
				b.minHeight = pMinHeight;
			}
			if(pMaxWidth < b.maxWidth) {
				b.maxWidth = pMaxWidth;
			}
			if(pMaxHeight < b.maxHeight) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function(data) {
		this.offset = this.helper.offset();
		if (isNumber(data.left)) {
			this.position.left = data.left;
		}
		if (isNumber(data.top)) {
			this.position.top = data.top;
		}
		if (isNumber(data.height)) {
			this.size.height = data.height;
		}
		if (isNumber(data.width)) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if (isNumber(data.height)) {
			data.width = (data.height * this.aspectRatio);
		} else if (isNumber(data.width)) {
			data.height = (data.width / this.aspectRatio);
		}

		if (a === "sw") {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a === "nw") {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
			isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.position.top + this.size.height,
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
		if (isminw) {
			data.width = o.minWidth;
		}
		if (isminh) {
			data.height = o.minHeight;
		}
		if (ismaxw) {
			data.width = o.maxWidth;
		}
		if (ismaxh) {
			data.height = o.maxHeight;
		}

		if (isminw && cw) {
			data.left = dw - o.minWidth;
		}
		if (ismaxw && cw) {
			data.left = dw - o.maxWidth;
		}
		if (isminh && ch) {
			data.top = dh - o.minHeight;
		}
		if (ismaxh && ch) {
			data.top = dh - o.maxHeight;
		}

		// fixing jump error on top/left - bug #2330
		if (!data.width && !data.height && !data.left && data.top) {
			data.top = null;
		} else if (!data.width && !data.height && !data.top && data.left) {
			data.left = null;
		}

		return data;
	},

	_proportionallyResize: function() {

		if (!this._proportionallyResizeElements.length) {
			return;
		}

		var i, j, borders, paddings, prel,
			element = this.helper || this.element;

		for ( i=0; i < this._proportionallyResizeElements.length; i++) {

			prel = this._proportionallyResizeElements[i];

			if (!this.borderDif) {
				this.borderDif = [];
				borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
				paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

				for ( j = 0; j < borders.length; j++ ) {
					this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
				}
			}

			prel.css({
				height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
				width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
			});

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if(this._helper) {

			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() - 1,
				height: this.element.outerHeight() - 1,
				position: "absolute",
				left: this.elementOffset.left +"px",
				top: this.elementOffset.top +"px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		}
	},

	_propagate: function(n, event) {
		$.ui.plugin.call(this, n, [event, this.ui()]);
		(n !== "resize" && this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "animate", {

	stop: function( event ) {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),
			soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

		that.element.animate(
			$.extend(style, top && left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(that.element.css("width"), 10),
						height: parseInt(that.element.css("height"), 10),
						top: parseInt(that.element.css("top"), 10),
						left: parseInt(that.element.css("left"), 10)
					};

					if (pr && pr.length) {
						$(pr[0]).css({ width: data.width, height: data.height });
					}

					// propagating resize, and updating values for each animation step
					that._updateCache(data);
					that._propagate("resize", event);

				}
			}
		);
	}

});

$.ui.plugin.add("resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $(this).data("ui-resizable"),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

		if (!ce) {
			return;
		}

		that.containerElement = $(ce);

		if (/document/.test(oc) || oc === document) {
			that.containerOffset = { left: 0, top: 0 };
			that.containerPosition = { left: 0, top: 0 };

			that.parentData = {
				element: $(document), left: 0, top: 0,
				width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
			};
		}

		// i'm a node, so compute top, left, right, bottom
		else {
			element = $(ce);
			p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
			height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

			that.parentData = {
				element: ce, left: co.left, top: co.top, width: width, height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $(this).data("ui-resizable"),
			o = that.options,
			co = that.containerOffset, cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = { top:0, left:0 }, ce = that.containerElement;

		if (ce[0] !== document && (/static/).test(ce.css("position"))) {
			cop = co;
		}

		if (cp.left < (that._helper ? co.left : 0)) {
			that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
			if (pRatio) {
				that.size.height = that.size.width / that.aspectRatio;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if (cp.top < (that._helper ? co.top : 0)) {
			that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
			if (pRatio) {
				that.size.width = that.size.height * that.aspectRatio;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		that.offset.left = that.parentData.left+that.position.left;
		that.offset.top = that.parentData.top+that.position.top;

		woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
		hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

		isParent = that.containerElement.get(0) === that.element.parent().get(0);
		isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

		if ( isParent && isOffsetRelative ) {
			woset -= Math.abs( that.parentData.left );
		}

		if (woset + that.size.width >= that.parentData.width) {
			that.size.width = that.parentData.width - woset;
			if (pRatio) {
				that.size.height = that.size.width / that.aspectRatio;
			}
		}

		if (hoset + that.size.height >= that.parentData.height) {
			that.size.height = that.parentData.height - hoset;
			if (pRatio) {
				that.size.width = that.size.height * that.aspectRatio;
			}
		}
	},

	stop: function(){
		var that = $(this).data("ui-resizable"),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $(that.helper),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
		}

		if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
		}

	}
});

$.ui.plugin.add("resizable", "alsoResize", {

	start: function () {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			_store = function (exp) {
				$(exp).each(function() {
					var el = $(this);
					el.data("ui-resizable-alsoresize", {
						width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
						left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
					});
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
			if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
			else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
		}else{
			_store(o.alsoResize);
		}
	},

	resize: function (event, ui) {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
				top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
			},

			_alsoResize = function (exp, c) {
				$(exp).each(function() {
					var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
						css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

					$.each(css, function (i, prop) {
						var sum = (start[prop]||0) + (delta[prop]||0);
						if (sum && sum >= 0) {
							style[prop] = sum || null;
						}
					});

					el.css(style);
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
			$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
		}else{
			_alsoResize(o.alsoResize);
		}
	},

	stop: function () {
		$(this).removeData("resizable-alsoresize");
	}
});

$.ui.plugin.add("resizable", "ghost", {

	start: function() {

		var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost
			.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
			.addClass("ui-resizable-ghost")
			.addClass(typeof o.ghost === "string" ? o.ghost : "");

		that.ghost.appendTo(that.helper);

	},

	resize: function(){
		var that = $(this).data("ui-resizable");
		if (that.ghost) {
			that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
		}
	},

	stop: function() {
		var that = $(this).data("ui-resizable");
		if (that.ghost && that.helper) {
			that.helper.get(0).removeChild(that.ghost.get(0));
		}
	}

});

$.ui.plugin.add("resizable", "grid", {

	resize: function() {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
			gridX = (grid[0]||1),
			gridY = (grid[1]||1),
			ox = Math.round((cs.width - os.width) / gridX) * gridX,
			oy = Math.round((cs.height - os.height) / gridY) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
			isMinWidth = o.minWidth && (o.minWidth > newWidth),
			isMinHeight = o.minHeight && (o.minHeight > newHeight);

		o.grid = grid;

		if (isMinWidth) {
			newWidth = newWidth + gridX;
		}
		if (isMinHeight) {
			newHeight = newHeight + gridY;
		}
		if (isMaxWidth) {
			newWidth = newWidth - gridX;
		}
		if (isMaxHeight) {
			newHeight = newHeight - gridY;
		}

		if (/^(se|s|e)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if (/^(ne)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if (/^(sw)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				that.size.height = gridY;
				that.position.top = op.top + os.height - gridY;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				that.size.width = gridX;
				that.position.left = op.left + os.width - gridX;
			}
		}
	}

});

})(jQuery);
(function( $, undefined ) {

$.widget("ui.selectable", $.ui.mouse, {
	version: "1.10.4",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var selectees,
			that = this;

		this.element.addClass("ui-selectable");

		this.dragged = false;

		// cache selectee children based on filter
		this.refresh = function() {
			selectees = $(that.options.filter, that.element[0]);
			selectees.addClass("ui-selectee");
			selectees.each(function() {
				var $this = $(this),
					pos = $this.offset();
				$.data(this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass("ui-selected"),
					selecting: $this.hasClass("ui-selecting"),
					unselecting: $this.hasClass("ui-unselecting")
				});
			});
		};
		this.refresh();

		this.selectees = selectees.addClass("ui-selectee");

		this._mouseInit();

		this.helper = $("<div class='ui-selectable-helper'></div>");
	},

	_destroy: function() {
		this.selectees
			.removeClass("ui-selectee")
			.removeData("selectable-item");
		this.element
			.removeClass("ui-selectable ui-selectable-disabled");
		this._mouseDestroy();
	},

	_mouseStart: function(event) {
		var that = this,
			options = this.options;

		this.opos = [event.pageX, event.pageY];

		if (this.options.disabled) {
			return;
		}

		this.selectees = $(options.filter, this.element[0]);

		this._trigger("start", event);

		$(options.appendTo).append(this.helper);
		// position helper (lasso)
		this.helper.css({
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		});

		if (options.autoRefresh) {
			this.refresh();
		}

		this.selectees.filter(".ui-selected").each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.startselected = true;
			if (!event.metaKey && !event.ctrlKey) {
				selectee.$element.removeClass("ui-selected");
				selectee.selected = false;
				selectee.$element.addClass("ui-unselecting");
				selectee.unselecting = true;
				// selectable UNSELECTING callback
				that._trigger("unselecting", event, {
					unselecting: selectee.element
				});
			}
		});

		$(event.target).parents().addBack().each(function() {
			var doSelect,
				selectee = $.data(this, "selectable-item");
			if (selectee) {
				doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
				selectee.$element
					.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
					.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;
				// selectable (UN)SELECTING callback
				if (doSelect) {
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				} else {
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
				return false;
			}
		});

	},

	_mouseDrag: function(event) {

		this.dragged = true;

		if (this.options.disabled) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[0],
			y1 = this.opos[1],
			x2 = event.pageX,
			y2 = event.pageY;

		if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
		if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

		this.selectees.each(function() {
			var selectee = $.data(this, "selectable-item"),
				hit = false;

			//prevent helper from being selected if appendTo: selectable
			if (!selectee || selectee.element === that.element[0]) {
				return;
			}

			if (options.tolerance === "touch") {
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
			} else if (options.tolerance === "fit") {
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
			}

			if (hit) {
				// SELECT
				if (selectee.selected) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
				}
				if (selectee.unselecting) {
					selectee.$element.removeClass("ui-unselecting");
					selectee.unselecting = false;
				}
				if (!selectee.selecting) {
					selectee.$element.addClass("ui-selecting");
					selectee.selecting = true;
					// selectable SELECTING callback
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				}
			} else {
				// UNSELECT
				if (selectee.selecting) {
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
						selectee.$element.removeClass("ui-selecting");
						selectee.selecting = false;
						selectee.$element.addClass("ui-selected");
						selectee.selected = true;
					} else {
						selectee.$element.removeClass("ui-selecting");
						selectee.selecting = false;
						if (selectee.startselected) {
							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
						}
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
				if (selectee.selected) {
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;

						selectee.$element.addClass("ui-unselecting");
						selectee.unselecting = true;
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
			}
		});

		return false;
	},

	_mouseStop: function(event) {
		var that = this;

		this.dragged = false;

		$(".ui-unselecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("ui-unselecting");
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger("unselected", event, {
				unselected: selectee.element
			});
		});
		$(".ui-selecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger("selected", event, {
				selected: selectee.element
			});
		});
		this._trigger("stop", event);

		this.helper.remove();

		return false;
	}

});

})(jQuery);
(function( $, undefined ) {

function isOverAxis( x, reference, size ) {
	return ( x > reference ) && ( x < ( reference + size ) );
}

function isFloating(item) {
	return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
}

$.widget("ui.sortable", $.ui.mouse, {
	version: "1.10.4",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},
	_create: function() {

		var o = this.options;
		this.containerCache = {};
		this.element.addClass("ui-sortable");

		//Get the items
		this.refresh();

		//Let's determine if the items are being displayed horizontally
		this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		//We're ready to go
		this.ready = true;

	},

	_destroy: function() {
		this.element
			.removeClass("ui-sortable ui-sortable-disabled");
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[i].item.removeData(this.widgetName + "-item");
		}

		return this;
	},

	_setOption: function(key, value){
		if ( key === "disabled" ) {
			this.options[ key ] = value;

			this.widget().toggleClass( "ui-sortable-disabled", !!value );
		} else {
			// Don't call widget base _setOption for disable as it adds ui-state-disabled class
			$.Widget.prototype._setOption.apply(this, arguments);
		}
	},

	_mouseCapture: function(event, overrideHandle) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type === "static") {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$(event.target).parents().each(function() {
			if($.data(this, that.widgetName + "-item") === that) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.widgetName + "-item") === that) {
			currentItem = $(event.target);
		}

		if(!currentItem) {
			return false;
		}
		if(this.options.handle && !overrideHandle) {
			$(this.options.handle, currentItem).find("*").addBack().each(function() {
				if(this === event.target) {
					validHandle = true;
				}
			});
			if(!validHandle) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");

		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment) {
			this._setContainment();
		}

		if( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) {
				this._storedOpacity = this.helper.css("opacity");
			}
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) {
				this._storedZIndex = this.helper.css("zIndex");
			}
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions) {
			this._cacheHelperProportions();
		}


		//Post "activate" events to possible containers
		if( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}

		this.dragging = true;

		this.helper.addClass("ui-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
				}

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
				}

			} else {

				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}

				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}

		//Rearrange
		for (i = this.items.length - 1; i >= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[i];
			itemElement = item.item[0];
			intersection = this._intersectsWithPointer(item);
			if (!intersection) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter beetween the outer and inner container.
			if (item.instance !== this.currentContainer) {
				continue;
			}

			// cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if (itemElement !== this.currentItem[0] &&
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
				!$.contains(this.placeholder[0], itemElement) &&
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		//Call callbacks
		this._trigger("sort", event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			$.ui.ddmanager.drop(this, event);
		}

		if(this.options.revert) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
			}
			this.reverting = true;
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
				that._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper === "original") {
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i >= 0; i--){
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			}
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
				this.helper.remove();
			}

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			str = [];
		o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
			if (res) {
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
			}
		});

		if(!str.length && o.key) {
			str.push(o.key + "=");
		}

		return str.join("&");

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			ret = [];

		o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {
			return isOverElement;
		} else {

			return (l < x1 + (this.helperProportions.width / 2) && // Right Half
				x2 - (this.helperProportions.width / 2) < r && // Left Half
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half
				y2 - (this.helperProportions.height / 2) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement) {
			return false;
		}

		return this.floating ?
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating && horizontalDirection) {
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && (delta > 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && (delta > 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
	},

	_getItemsAsjQuery: function(connected) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if(connectWith && connected) {
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for ( j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
					}
				}
			}
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

		function addItems() {
			items.push( this );
		}
		for (i = queries.length - 1; i >= 0; i--){
			queries[i][0].each( addItems );
		}

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

		this.items = $.grep(this.items, function (item) {
			for (var j=0; j < list.length; j++) {
				if(list[j] === item.item[0]) {
					return false;
				}
			}
			return true;
		});

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();

		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for (j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				}
			}
		}

		for (i = queries.length - 1; i >= 0; i--) {
			targetData = queries[i][1];
			_queries = queries[i][0];

			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
				item = $(_queries[j]);

				item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			}
		}

	},

	refreshPositions: function(fast) {

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for (i = this.items.length - 1; i >= 0; i--){
			item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
				continue;
			}

			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if(this.options.custom && this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (i = this.containers.length - 1; i >= 0; i--){
				p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function(that) {
		that = that || this;
		var className,
			o = that.options;

		if(!o.placeholder || o.placeholder.constructor === String) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[0].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[0] )
							.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
							.removeClass("ui-sortable-helper");

					if ( nodeName === "tr" ) {
						that.currentItem.children().each(function() {
							$( "<td>&#160;</td>", that.document[0] )
								.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
								.appendTo( element );
						});
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className && !o.forcePlaceholderSize) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}
			};
		}

		//Create the placeholder
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

		//Append it after the actual current item
		that.currentItem.after(that.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(that, that.placeholder);

	},

	_contactContainers: function(event) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating,
			innermostContainer = null,
			innermostIndex = null;

		// get innermost container that intersects with item
		for (i = this.containers.length - 1; i >= 0; i--) {

			// never consider a container that's located within the item itself
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {
				continue;
			}

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
					continue;
				}

				innermostContainer = this.containers[i];
				innermostIndex = i;

			} else {
				// container doesn't intersect. trigger "out" event if necessary
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		// if no intersecting containers found, return
		if(!innermostContainer) {
			return;
		}

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			if (!this.containers[innermostIndex].containerCache.over) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
		} else {

			//When entering a new container, we will find the item with the least distance and append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || isFloating(this.currentItem);
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			base = this.positionAbs[posProperty] + this.offset.click[posProperty];
			for (j = this.items.length - 1; j >= 0; j--) {
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
					continue;
				}
				if(this.items[j].item[0] === this.currentItem[0]) {
					continue;
				}
				if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {
					continue;
				}
				cur = this.items[j].item.offset()[posProperty];
				nearBottom = false;
				if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
					nearBottom = true;
					cur += this.items[j][sizeProperty];
				}

				if(Math.abs(cur - base) < dist) {
					dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
					this.direction = nearBottom ? "up": "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
				return;
			}

			if(this.currentContainer === this.containers[innermostIndex]) {
				return;
			}

			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
			this.currentContainer = this.containers[innermostIndex];

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		}


	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

		//Add the helper to the DOM if that didn't happen already
		if(!helper.parents("body").length) {
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
		}

		if(helper[0] === this.currentItem[0]) {
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}

		if(!helper[0].style.width || o.forceHelperSize) {
			helper.width(this.currentItem.width());
		}
		if(!helper[0].style.height || o.forceHelperSize) {
			helper.height(this.currentItem.height());
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this information
		// with an ugly IE fix
		if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if(o.containment === "parent") {
			o.containment = this.helper[0].parentNode;
		}
		if(o.containment === "document" || o.containment === "window") {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
				($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];
		}

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			ce = $(o.containment)[0];
			co = $(o.containment).offset();
			over = ($(ce).css("overflow") !== "hidden");

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left < this.containment[0]) {
					pageX = this.containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < this.containment[1]) {
					pageY = this.containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > this.containment[2]) {
					pageX = this.containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > this.containment[3]) {
					pageY = this.containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																// The absolute mouse position
				this.offset.click.top -													// Click offset (relative to the element)
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX -																// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay(function() {
			if(counter === this.counter) {
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
			}
		});

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort && this.currentItem.parent().length) {
			this.placeholder.before(this.currentItem);
		}
		this._noFinalSort = null;

		if(this.helper[0] === this.currentItem[0]) {
			for(i in this._storedCSS) {
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
					this._storedCSS[i] = "";
				}
			}
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		}
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}


		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for (i = this.containers.length - 1; i >= 0; i--){
			if (!noPropagation) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if(this._storedOpacity) {
			this.helper.css("opacity", this._storedOpacity);
		}
		if(this._storedZIndex) {
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
		}

		this.dragging = false;
		if(this.cancelHelperRemoval) {
			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return false;
		}

		if(!noPropagation) {
			this._trigger("beforeStop", event, this._uiHash());
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if(this.helper[0] !== this.currentItem[0]) {
			this.helper.remove();
		}
		this.helper = null;

		if(!noPropagation) {
			for (i=0; i < delayedTriggers.length; i++) {
				delayedTriggers[i].call(this, event);
			} //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return true;

	},

	_trigger: function() {
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(_inst) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $([]),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

});

})(jQuery);
(function( $, undefined ) {

var uid = 0,
	hideProps = {},
	showProps = {};

hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =
	hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
showProps.height = showProps.paddingTop = showProps.paddingBottom =
	showProps.borderTopWidth = showProps.borderBottomWidth = "show";

$.widget( "ui.accordion", {
	version: "1.10.4",
	options: {
		active: 0,
		animate: {},
		collapsible: false,
		event: "click",
		header: "> li > :first-child,> :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "ui-icon-triangle-1-s",
			header: "ui-icon-triangle-1-e"
		},

		// callbacks
		activate: null,
		beforeActivate: null
	},

	_create: function() {
		var options = this.options;
		this.prevShow = this.prevHide = $();
		this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
			// ARIA
			.attr( "role", "tablist" );

		// don't allow collapsible: false and active: false / null
		if ( !options.collapsible && (options.active === false || options.active == null) ) {
			options.active = 0;
		}

		this._processPanels();
		// handle negative values
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next(),
			content: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var icons = this.options.icons;
		if ( icons ) {
			$( "<span>" )
				.addClass( "ui-accordion-header-icon ui-icon " + icons.header )
				.prependTo( this.headers );
			this.active.children( ".ui-accordion-header-icon" )
				.removeClass( icons.header )
				.addClass( icons.activeHeader );
			this.headers.addClass( "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this.headers
			.removeClass( "ui-accordion-icons" )
			.children( ".ui-accordion-header-icon" )
				.remove();
	},

	_destroy: function() {
		var contents;

		// clean up main element
		this.element
			.removeClass( "ui-accordion ui-widget ui-helper-reset" )
			.removeAttr( "role" );

		// clean up headers
		this.headers
			.removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
			.removeAttr( "role" )
			.removeAttr( "aria-expanded" )
			.removeAttr( "aria-selected" )
			.removeAttr( "aria-controls" )
			.removeAttr( "tabIndex" )
			.each(function() {
				if ( /^ui-accordion/.test( this.id ) ) {
					this.removeAttribute( "id" );
				}
			});
		this._destroyIcons();

		// clean up content panels
		contents = this.headers.next()
			.css( "display", "" )
			.removeAttr( "role" )
			.removeAttr( "aria-hidden" )
			.removeAttr( "aria-labelledby" )
			.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
			.each(function() {
				if ( /^ui-accordion/.test( this.id ) ) {
					this.removeAttribute( "id" );
				}
			});
		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		// setting collapsible: false while collapsed; open first panel
		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}

		// #5332 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		if ( key === "disabled" ) {
			this.headers.add( this.headers.next() )
				.toggleClass( "ui-state-disabled", !!value );
		}
	},

	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
			case keyCode.RIGHT:
			case keyCode.DOWN:
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];
				break;
			case keyCode.LEFT:
			case keyCode.UP:
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
				break;
			case keyCode.SPACE:
			case keyCode.ENTER:
				this._eventHandler( event );
				break;
			case keyCode.HOME:
				toFocus = this.headers[ 0 ];
				break;
			case keyCode.END:
				toFocus = this.headers[ length - 1 ];
				break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			toFocus.focus();
			event.preventDefault();
		}
	},

	_panelKeyDown : function( event ) {
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().focus();
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		// was collapsed or no panel
		if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
			options.active = false;
			this.active = $();
		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );
		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			// all remaining panel are disabled
			if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
				options.active = false;
				this.active = $();
			// activate previous panel
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}
		// was active, active panel still exists
		} else {
			// make sure active index is correct
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		this.headers = this.element.find( this.options.header )
			.addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );

		this.headers.next()
			.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
			.filter(":not(.ui-accordion-content-active)")
			.hide();
	},

	_refresh: function() {
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent(),
			accordionId = this.accordionId = "ui-accordion-" +
				(this.element.attr( "id" ) || ++uid);

		this.active = this._findActive( options.active )
			.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
			.removeClass( "ui-corner-all" );
		this.active.next()
			.addClass( "ui-accordion-content-active" )
			.show();

		this.headers
			.attr( "role", "tab" )
			.each(function( i ) {
				var header = $( this ),
					headerId = header.attr( "id" ),
					panel = header.next(),
					panelId = panel.attr( "id" );
				if ( !headerId ) {
					headerId = accordionId + "-header-" + i;
					header.attr( "id", headerId );
				}
				if ( !panelId ) {
					panelId = accordionId + "-panel-" + i;
					panel.attr( "id", panelId );
				}
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			})
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
			.attr({
				"aria-selected": "false",
				"aria-expanded": "false",
				tabIndex: -1
			})
			.next()
				.attr({
					"aria-hidden": "true"
				})
				.hide();

		// make sure at least one header is in the tab order
		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr({
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			})
			.next()
				.attr({
					"aria-hidden": "false"
				});
		}

		this._createIcons();

		this._setupEvents( options.event );

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});

			this.headers.each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});

			this.headers.next()
				.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.headers.next()
				.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
				})
				.height( maxHeight );
		}
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		// trying to activate the already active panel
		if ( active === this.active[ 0 ] ) {
			return;
		}

		// trying to collapse, simulate a click on the currently active header
		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" });
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : clicked.next(),
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow
			};

		event.preventDefault();

		if (
				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||
				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );

		// when the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $() : clicked;
		this._toggle( eventData );

		// switch classes
		// corner classes on the previously active header stay after the animation
		active.removeClass( "ui-accordion-header-active ui-state-active" );
		if ( options.icons ) {
			active.children( ".ui-accordion-header-icon" )
				.removeClass( options.icons.activeHeader )
				.addClass( options.icons.header );
		}

		if ( !clickedIsActive ) {
			clicked
				.removeClass( "ui-corner-all" )
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
			if ( options.icons ) {
				clicked.children( ".ui-accordion-header-icon" )
					.removeClass( options.icons.header )
					.addClass( options.icons.activeHeader );
			}

			clicked
				.next()
				.addClass( "ui-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// handle activating a panel during the animation for another activation
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;

		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {
			toHide.hide();
			toShow.show();
			this._toggleComplete( data );
		}

		toHide.attr({
			"aria-hidden": "true"
		});
		toHide.prev().attr( "aria-selected", "false" );
		// if we're switching panels, remove the old header from the tab order
		// if we're opening from collapsed state, remove the previous header from the tab order
		// if we're collapsing, then keep the collapsing header in the tab order
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr({
				"tabIndex": -1,
				"aria-expanded": "false"
			});
		} else if ( toShow.length ) {
			this.headers.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr({
					"aria-selected": "true",
					tabIndex: 0,
					"aria-expanded": "true"
				});
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}
		// fall back from options to animation in case of partial down settings
		easing = easing || options.easing || animate.easing;
		duration = duration || options.duration || animate.duration;

		if ( !toHide.length ) {
			return toShow.animate( showProps, duration, easing, complete );
		}
		if ( !toShow.length ) {
			return toHide.animate( hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		toHide.animate( hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		});
		toShow
			.hide()
			.animate( showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						adjust += fx.now;
					} else if ( that.options.heightStyle !== "content" ) {
						fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			});
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel;

		toHide
			.removeClass( "ui-accordion-content-active" )
			.prev()
				.removeClass( "ui-corner-top" )
				.addClass( "ui-corner-all" );

		// Work around for rendering bug in IE (#5421)
		if ( toHide.length ) {
			toHide.parent()[0].className = toHide.parent()[0].className;
		}
		this._trigger( "activate", null, data );
	}
});

})( jQuery );
(function( $, undefined ) {

$.widget( "ui.autocomplete", {
	version: "1.10.4",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {
		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[0].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		this.isMultiLine =
			// Textareas are always multi-line
			isTextarea ? true :
			// Inputs are always single-line, even if inside a contentEditable element
			// IE also treats inputs as contentEditable
			isInput ? false :
			// All other element types are determined by whether or not they're contentEditable
			this.element.prop( "isContentEditable" );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this.element
			.addClass( "ui-autocomplete-input" )
			.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
				case keyCode.NUMPAD_ENTER:
					// when menu is open and has focus
					if ( this.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						this._value( this.term );
						this.close( event );
						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;
					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		});

		this._initSource();
		this.menu = $( "<ul>" )
			.addClass( "ui-autocomplete ui-front" )
			.appendTo( this._appendTo() )
			.menu({
				// disable ARIA support, the live region takes care of that
				role: null
			})
			.hide()
			.data( "ui-menu" );

		this._on( this.menu.element, {
			mousedown: function( event ) {
				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});

				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = this.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
					this._delay(function() {
						var that = this;
						this.document.one( "mousedown", function( event ) {
							if ( event.target !== that.element[ 0 ] &&
									event.target !== menuElement &&
									!$.contains( menuElement, event.target ) ) {
								that.close();
							}
						});
					});
				}
			},
			menufocus: function( event, ui ) {
				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						});

						return;
					}
				}

				var item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {
					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				} else {
					// Normally the input is populated with the item's value as the
					// menu is navigated, causing screen readers to notice a change and
					// announce the item. Since the focus event was canceled, this doesn't
					// happen, so we update the live region so that screen readers can
					// still notice the change and announce it.
					this.liveRegion.text( item.value );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// only trigger when focus was lost (click on menu)
				if ( this.element[0] !== this.document[0].activeElement ) {
					this.element.focus();
					this.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay(function() {
						this.previous = previous;
						this.selectedItem = item;
					});
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}
				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		});

		this.liveRegion = $( "<span>", {
				role: "status",
				"aria-live": "polite"
			})
			.addClass( "ui-helper-hidden-accessible" )
			.insertBefore( this.element );

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element
			.removeClass( "ui-autocomplete-input" )
			.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element ) {
			element = this.element.closest( ".ui-front" );
		}

		if ( !element.length ) {
			element = this.document[0].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray(this.options.source) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax({
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay(function() {
			// only search if the value has changed
			if ( this.term !== this._value() ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this.element.addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy(function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this.element.removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {
			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {
		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {
		// assume all items have the right format when the first item is complete
		if ( items.length && items[0].label && items[0].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend({
				label: item.label || item.value,
				value: item.value || item.label
			}, item );
		});
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend({
			of: this.element
		}, this.options.position ));

		if ( this.options.autoFocus ) {
			this.menu.next();
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		});
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<a>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {
			this._value( this.term );
			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	}
});

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
	},
	filter: function(array, term) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
		return $.grep( array, function(value) {
			return matcher.test( value.label || value.value || value );
		});
	}
});


// live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.text( message );
	}
});

}( jQuery ));
(function( $, undefined ) {

var lastActive,
	baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
	typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
	formResetHandler = function() {
		var form = $( this );
		setTimeout(function() {
			form.find( ":ui-button" ).button( "refresh" );
		}, 1 );
	},
	radioGroup = function( radio ) {
		var name = radio.name,
			form = radio.form,
			radios = $( [] );
		if ( name ) {
			name = name.replace( /'/g, "\\'" );
			if ( form ) {
				radios = $( form ).find( "[name='" + name + "']" );
			} else {
				radios = $( "[name='" + name + "']", radio.ownerDocument )
					.filter(function() {
						return !this.form;
					});
			}
		}
		return radios;
	};

$.widget( "ui.button", {
	version: "1.10.4",
	defaultElement: "<button>",
	options: {
		disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		}
	},
	_create: function() {
		this.element.closest( "form" )
			.unbind( "reset" + this.eventNamespace )
			.bind( "reset" + this.eventNamespace, formResetHandler );

		if ( typeof this.options.disabled !== "boolean" ) {
			this.options.disabled = !!this.element.prop( "disabled" );
		} else {
			this.element.prop( "disabled", this.options.disabled );
		}

		this._determineButtonType();
		this.hasTitle = !!this.buttonElement.attr( "title" );

		var that = this,
			options = this.options,
			toggleButton = this.type === "checkbox" || this.type === "radio",
			activeClass = !toggleButton ? "ui-state-active" : "";

		if ( options.label === null ) {
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
		}

		this._hoverable( this.buttonElement );

		this.buttonElement
			.addClass( baseClasses )
			.attr( "role", "button" )
			.bind( "mouseenter" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				if ( this === lastActive ) {
					$( this ).addClass( "ui-state-active" );
				}
			})
			.bind( "mouseleave" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( activeClass );
			})
			.bind( "click" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				}
			});

		// Can't use _focusable() because the element that receives focus
		// and the element that gets the ui-state-focus class are different
		this._on({
			focus: function() {
				this.buttonElement.addClass( "ui-state-focus" );
			},
			blur: function() {
				this.buttonElement.removeClass( "ui-state-focus" );
			}
		});

		if ( toggleButton ) {
			this.element.bind( "change" + this.eventNamespace, function() {
				that.refresh();
			});
		}

		if ( this.type === "checkbox" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
			});
		} else if ( this.type === "radio" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
				$( this ).addClass( "ui-state-active" );
				that.buttonElement.attr( "aria-pressed", "true" );

				var radio = that.element[ 0 ];
				radioGroup( radio )
					.not( radio )
					.map(function() {
						return $( this ).button( "widget" )[ 0 ];
					})
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			});
		} else {
			this.buttonElement
				.bind( "mousedown" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					lastActive = this;
					that.document.one( "mouseup", function() {
						lastActive = null;
					});
				})
				.bind( "mouseup" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).removeClass( "ui-state-active" );
				})
				.bind( "keydown" + this.eventNamespace, function(event) {
					if ( options.disabled ) {
						return false;
					}
					if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				// see #8559, we bind to blur here in case the button element loses
				// focus between keydown and keyup, it would be left in an "active" state
				.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
					$( this ).removeClass( "ui-state-active" );
				});

			if ( this.buttonElement.is("a") ) {
				this.buttonElement.keyup(function(event) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						// TODO pass through original event correctly (just as 2nd argument doesn't work)
						$( this ).click();
					}
				});
			}
		}

		// TODO: pull out $.Widget's handling for the disabled option into
		// $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
		// be overridden by individual plugins
		this._setOption( "disabled", options.disabled );
		this._resetButton();
	},

	_determineButtonType: function() {
		var ancestor, labelSelector, checked;

		if ( this.element.is("[type=checkbox]") ) {
			this.type = "checkbox";
		} else if ( this.element.is("[type=radio]") ) {
			this.type = "radio";
		} else if ( this.element.is("input") ) {
			this.type = "input";
		} else {
			this.type = "button";
		}

		if ( this.type === "checkbox" || this.type === "radio" ) {
			// we don't search against the document in case the element
			// is disconnected from the DOM
			ancestor = this.element.parents().last();
			labelSelector = "label[for='" + this.element.attr("id") + "']";
			this.buttonElement = ancestor.find( labelSelector );
			if ( !this.buttonElement.length ) {
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
				this.buttonElement = ancestor.filter( labelSelector );
				if ( !this.buttonElement.length ) {
					this.buttonElement = ancestor.find( labelSelector );
				}
			}
			this.element.addClass( "ui-helper-hidden-accessible" );

			checked = this.element.is( ":checked" );
			if ( checked ) {
				this.buttonElement.addClass( "ui-state-active" );
			}
			this.buttonElement.prop( "aria-pressed", checked );
		} else {
			this.buttonElement = this.element;
		}
	},

	widget: function() {
		return this.buttonElement;
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-helper-hidden-accessible" );
		this.buttonElement
			.removeClass( baseClasses + " ui-state-active " + typeClasses )
			.removeAttr( "role" )
			.removeAttr( "aria-pressed" )
			.html( this.buttonElement.find(".ui-button-text").html() );

		if ( !this.hasTitle ) {
			this.buttonElement.removeAttr( "title" );
		}
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "disabled" ) {
			this.element.prop( "disabled", !!value );
			if ( value ) {
				this.buttonElement.removeClass( "ui-state-focus" );
			}
			return;
		}
		this._resetButton();
	},

	refresh: function() {
		//See #8237 & #8828
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOption( "disabled", isDisabled );
		}
		if ( this.type === "radio" ) {
			radioGroup( this.element[0] ).each(function() {
				if ( $( this ).is( ":checked" ) ) {
					$( this ).button( "widget" )
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					$( this ).button( "widget" )
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			});
		} else if ( this.type === "checkbox" ) {
			if ( this.element.is( ":checked" ) ) {
				this.buttonElement
					.addClass( "ui-state-active" )
					.attr( "aria-pressed", "true" );
			} else {
				this.buttonElement
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			}
		}
	},

	_resetButton: function() {
		if ( this.type === "input" ) {
			if ( this.options.label ) {
				this.element.val( this.options.label );
			}
			return;
		}
		var buttonElement = this.buttonElement.removeClass( typeClasses ),
			buttonText = $( "<span></span>", this.document[0] )
				.addClass( "ui-button-text" )
				.html( this.options.label )
				.appendTo( buttonElement.empty() )
				.text(),
			icons = this.options.icons,
			multipleIcons = icons.primary && icons.secondary,
			buttonClasses = [];

		if ( icons.primary || icons.secondary ) {
			if ( this.options.text ) {
				buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}

			if ( icons.primary ) {
				buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
			}

			if ( icons.secondary ) {
				buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
			}

			if ( !this.options.text ) {
				buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

				if ( !this.hasTitle ) {
					buttonElement.attr( "title", $.trim( buttonText ) );
				}
			}
		} else {
			buttonClasses.push( "ui-button-text-only" );
		}
		buttonElement.addClass( buttonClasses.join( " " ) );
	}
});

$.widget( "ui.buttonset", {
	version: "1.10.4",
	options: {
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
	},

	_create: function() {
		this.element.addClass( "ui-buttonset" );
	},

	_init: function() {
		this.refresh();
	},

	_setOption: function( key, value ) {
		if ( key === "disabled" ) {
			this.buttons.button( "option", key, value );
		}

		this._super( key, value );
	},

	refresh: function() {
		var rtl = this.element.css( "direction" ) === "rtl";

		this.buttons = this.element.find( this.options.items )
			.filter( ":ui-button" )
				.button( "refresh" )
			.end()
			.not( ":ui-button" )
				.button()
			.end()
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
				.filter( ":first" )
					.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
				.end()
				.filter( ":last" )
					.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
				.end()
			.end();
	},

	_destroy: function() {
		this.element.removeClass( "ui-buttonset" );
		this.buttons
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-left ui-corner-right" )
			.end()
			.button( "destroy" );
	}
});

}( jQuery ) );
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.10.4" } });

var PROP_NAME = "datepicker",
	instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[""] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: ["January","February","March","April","May","June",
			"July","August","September","October","November","December"], // Names of months for drop-down and formatting
		monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
		dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
		dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
		dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional[""]);
	this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function(target, settings) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
		if (!target.id) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {});
		if (nodeName === "input") {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp);
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var showOn, buttonText, buttonImage,
			appendText = this._get(inst, "appendText"),
			isRTL = this._get(inst, "isRTL");

		if (inst.append) {
			inst.append.remove();
		}
		if (appendText) {
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](inst.append);
		}

		input.unbind("focus", this._showDatepicker);

		if (inst.trigger) {
			inst.trigger.remove();
		}

		showOn = this._get(inst, "showOn");
		if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		}
		if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
			buttonText = this._get(inst, "buttonText");
			buttonImage = this._get(inst, "buttonImage");
			inst.trigger = $(this._get(inst, "buttonImageOnly") ?
				$("<img/>").addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$("<button type='button'></button>").addClass(this._triggerClass).
					html(!buttonImage ? buttonText : $("<img/>").attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? "before" : "after"](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
					$.datepicker._hideDatepicker();
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker(input[0]);
				} else {
					$.datepicker._showDatepicker(input[0]);
				}
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, "autoSize") && !inst.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // Ensure double digits
				dateFormat = this._get(inst, "dateFormat");

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					"monthNames" : "monthNamesShort"))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
			}
			inst.input.attr("size", this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if (!inst) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown(this._doKeyDown);
			$("body").append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function(target) {
		var nodeName,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName === "input") {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind("focus", this._showDatepicker).
				unbind("keydown", this._doKeyDown).
				unbind("keypress", this._doKeyPress).
				unbind("keyup", this._doKeyUp);
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			inst.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			inst.trigger.filter("button").
				each(function() { this.disabled = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function(target, name, value) {
		var settings, date, minDate, maxDate,
			inst = this._getInst(target);

		if (arguments.length === 2 && typeof name === "string") {
			return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name === "all" ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}

		settings = name || {};
		if (typeof name === "string") {
			settings = {};
			settings[name] = value;
		}

		if (inst) {
			if (this._curInst === inst) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker(target, true);
			minDate = this._getMinMaxDate(inst, "min");
			maxDate = this._getMinMaxDate(inst, "max");
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
				inst.settings.minDate = this._formatDate(inst, minDate);
			}
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker(target);
				} else {
					this._enableDatepicker(target);
				}
			}
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline) {
			this._setDateFromField(inst, noDefault);
		}
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst(event.target),
			handled = true,
			isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing) {
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv);
						if (sel[0]) {
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						}

						onSelect = $.datepicker._get(inst, "onSelect");
						if (onSelect) {
							dateStr = $.datepicker._formatDate(inst);

							// trigger custom callback
							onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, "stepBigMonths") :
							-$.datepicker._get(inst, "stepMonths")), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, "stepBigMonths") :
							+$.datepicker._get(inst, "stepMonths")), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							$.datepicker._clearDate(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							$.datepicker._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		} else {
			handled = false;
		}

		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var date,
			inst = $.datepicker._getInst(event.target);

		if (inst.input.val() !== inst.lastVal) {
			try {
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));

				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}

		beforeShow = $.datepicker._get(inst, "beforeShow");
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);

		if ($.datepicker._inDialog) { // hide cursor
			input.value = "";
		}
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});

		if (!inst.inline) {
			showAnim = $.datepicker._get(inst, "showAnim");
			duration = $.datepicker._get(inst, "duration");
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
			} else {
				inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);
		inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

		var origyearshtml,
			numMonths = this._getNumberOfMonths(inst),
			cols = numMonths[1],
			width = 17;

		inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
		if (cols > 1) {
			inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("ui-datepicker-multi");
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
			"Class"]("ui-datepicker-rtl");

		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.focus();
		}

		// deffered render of the years select (to avoid flashes on Firefox)
		if( inst.yearshtml ){
			origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var position,
			inst = this._getInst(obj),
			isRTL = this._get(inst, "isRTL");

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function(input) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
			return;
		}

		if (this._datepickerShowing) {
			showAnim = this._get(inst, "showAnim");
			duration = this._get(inst, "duration");
			postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
			} else {
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}

			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get(inst, "onClose");
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst) {
			return;
		}

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var date,
			target = $(id),
			inst = this._getInst(target[0]);

		if (this._get(inst, "gotoCurrent") && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		inst["selected" + (period === "M" ? "Month" : "Year")] =
		inst["draw" + (period === "M" ? "Month" : "Year")] =
			parseInt(select.options[select.selectedIndex].value,10);

		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var inst,
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}

		inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $("a", td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		this._selectDate(target, "");
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			inst = this._getInst(target[0]);

		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input) {
			inst.input.val(dateStr);
		}
		this._updateAlternate(inst);

		onSelect = this._get(inst, "onSelect");
		if (onSelect) {
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		} else if (inst.input) {
			inst.input.trigger("change"); // fire the change event
		}

		if (inst.inline){
			this._updateDatepicker(inst);
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) !== "object") {
				inst.input.focus(); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altFormat, date, dateStr,
			altField = this._get(inst, "altField");

		if (altField) { // update alternate field too
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
			date = this._getDate(inst);
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function(date) {
		var time,
			checkDate = new Date(date.getTime());

		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

		time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function (format, value, settings) {
		if (format == null || value == null) {
			throw "Invalid arguments";
		}

		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Extract a number from the string value
			getNumber = function(match) {
				var isDoubled = lookAhead(match),
					size = (match === "@" ? 14 : (match === "!" ? 20 :
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
					digits = new RegExp("^\\d{1," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			// Extract a name from the string value and convert to an index
			getName = function(match, shortNames, longNames) {
				var index = -1,
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
						return [ [k, v] ];
					}).sort(function (a, b) {
						return -(a[1].length - b[1].length);
					});

				$.each(names, function (i, pair) {
					var name = pair[1];
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
						index = pair[0];
						iValue += name.length;
						return false;
					}
				});
				if (index !== -1) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},
			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if (value.charAt(iValue) !== format.charAt(iFormat)) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d":
						day = getNumber("d");
						break;
					case "D":
						getName("D", dayNamesShort, dayNames);
						break;
					case "o":
						doy = getNumber("o");
						break;
					case "m":
						month = getNumber("m");
						break;
					case "M":
						month = getName("M", monthNamesShort, monthNames);
						break;
					case "y":
						year = getNumber("y");
						break;
					case "@":
						date = new Date(getNumber("@"));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'")){
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if (iValue < value.length){
			extra = value.substr(iValue);
			if (!/^\s+/.test(extra)) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if (year === -1) {
			year = new Date().getFullYear();
		} else if (year < 100) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		}

		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim) {
					break;
				}
				month++;
				day -= dim;
			} while (true);
		}

		date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function (format, date, settings) {
		if (!date) {
			return "";
		}

		var iFormat,
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Format a number, with leading zero if necessary
			formatNumber = function(match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num;
					}
				}
				return num;
			},
			// Format a name, short or long as requested
			formatName = function(match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value]);
			},
			output = "",
			literal = false;

		if (date) {
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						output += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						case "o":
							output += formatNumber("o",
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;
						case "M":
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							output += (lookAhead("y") ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt(iFormat);
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() === inst.lastVal) {
			return;
		}

		var dateFormat = this._get(inst, "dateFormat"),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate(inst),
			date = defaultDate,
			settings = this._getFormatConfig(inst);

		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			dates = (noDefault ? "" : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						offset, $.datepicker._getFormatConfig(inst));
				}
				catch (e) {
					// Ignore
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					$.datepicker._getDate(inst) : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
				(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function(date) {
		if (!date) {
			return null;
		}
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
			this._notifyChange(inst);
		}
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? "" : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, "stepMonths"),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					$.datepicker._adjustDate(id, -stepMonths, "M");
				},
				next: function () {
					$.datepicker._adjustDate(id, +stepMonths, "M");
				},
				hide: function () {
					$.datepicker._hideDatepicker();
				},
				today: function () {
					$.datepicker._gotoToday(id);
				},
				selectDay: function () {
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonth: function () {
					$.datepicker._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$.datepicker._selectMonthYear(id, this, "Y");
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
		});
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
			isRTL = this._get(inst, "isRTL"),
			showButtonPanel = this._get(inst, "showButtonPanel"),
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
			numMonths = this._getNumberOfMonths(inst),
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
			stepMonths = this._get(inst, "stepMonths"),
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get(inst, "prevText");
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));

		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = this._get(inst, "nextText");
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));

		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = this._get(inst, "currentText");
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

		controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

		firstDay = parseInt(this._get(inst, "firstDay"),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = this._get(inst, "showWeek");
		dayNames = this._get(inst, "dayNames");
		dayNamesMin = this._get(inst, "dayNamesMin");
		monthNames = this._get(inst, "monthNames");
		monthNamesShort = this._get(inst, "monthNamesShort");
		beforeShowDay = this._get(inst, "beforeShowDay");
		showOtherMonths = this._get(inst, "showOtherMonths");
		selectOtherMonths = this._get(inst, "selectOtherMonths");
		defaultDate = this._getDefaultDate(inst);
		html = "";
		dow;
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				cornerClass = " ui-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='ui-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get(inst, "calculateWeek")(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
							(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get(inst, "changeMonth"),
			changeYear = this._get(inst, "changeYear"),
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// month selection
		if (secondary || !changeMonth) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
		} else {
			inMinYear = (minDate && minDate.getFullYear() === drawYear);
			inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
					monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if (!showMonthAfterYear) {
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
		}

		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {
				// determine range of years to display
				years = this._get(inst, "yearRange").split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for (; year <= endYear; year++) {
					inst.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get(inst, "yearSuffix");
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period === "Y" ? offset : 0),
			month = inst.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange(inst);
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, "onChangeMonthYear");
		if (onChange) {
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, "numberOfMonths");
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst),
			date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		}
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			minYear = null,
			maxYear = null,
			years = this._get(inst, "yearRange");
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, "shortYearCutoff");
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day === "object" ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function bindHover(dpDiv) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.delegate(selector, "mouseout", function() {
			$(this).removeClass("ui-state-hover");
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {
				$(this).removeClass("ui-datepicker-prev-hover");
			}
			if (this.className.indexOf("ui-datepicker-next") !== -1) {
				$(this).removeClass("ui-datepicker-next-hover");
			}
		})
		.delegate(selector, "mouseover", function(){
			if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
				$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
				$(this).addClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).addClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).addClass("ui-datepicker-next-hover");
				}
			}
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props) {
		if (props[name] == null) {
			target[name] = props[name];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick);
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ($("#"+$.datepicker._mainDivId).length === 0) {
		$("body").append($.datepicker.dpDiv);
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		typeof options === "string" ?
			$.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.10.4";

})(jQuery);
(function( $, undefined ) {

var sizeRelatedOptions = {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},
	resizableRelatedOptions = {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	};

$.widget( "ui.dialog", {
	version: "1.10.4",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		closeOnEscape: true,
		closeText: "close",
		dialogClass: "",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",
			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	_create: function() {
		this.originalCss = {
			display: this.element[0].style.display,
			width: this.element[0].style.width,
			minHeight: this.element[0].style.minHeight,
			maxHeight: this.element[0].style.maxHeight,
			height: this.element[0].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr("title");
		this.options.title = this.options.title || this.originalTitle;

		this._createWrapper();

		this.element
			.show()
			.removeAttr("title")
			.addClass("ui-dialog-content ui-widget-content")
			.appendTo( this.uiDialog );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && (element.jquery || element.nodeType) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.removeClass("ui-dialog-content ui-widget-content")
			.css( this.originalCss )
			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.stop( true, true ).remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );
		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[0] !== this.element[0] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var activeElement,
			that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._destroyOverlay();

		if ( !this.opener.filter(":focusable").focus().length ) {

			// support: IE9
			// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
			try {
				activeElement = this.document[ 0 ].activeElement;

				// Support: IE9, IE10
				// If the <body> is blurred, IE will switch windows, see #4520
				if ( activeElement && activeElement.nodeName.toLowerCase() !== "body" ) {

					// Hiding a focused element doesn't trigger blur in WebKit
					// so in case we have nothing to focus on, explicitly blur the active element
					// https://bugs.webkit.org/show_bug.cgi?id=47182
					$( activeElement ).blur();
				}
			} catch ( error ) {}
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		});
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = !!this.uiDialog.nextAll(":visible").insertBefore( this.uiDialog ).length;
		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( this.document[0].activeElement );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );
		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger("focus");
		});

		this._trigger("open");
	},

	_focusTabbable: function() {
		// Set focus to the first match:
		// 1. First element inside the dialog matching [autofocus]
		// 2. Tabbable element inside the content element
		// 3. Tabbable element inside the buttonpane
		// 4. The close button
		// 5. The dialog itself
		var hasFocus = this.element.find("[autofocus]");
		if ( !hasFocus.length ) {
			hasFocus = this.element.find(":tabbable");
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find(":tabbable");
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).focus();
	},

	_keepFocus: function( event ) {
		function checkFocus() {
			var activeElement = this.document[0].activeElement,
				isActive = this.uiDialog[0] === activeElement ||
					$.contains( this.uiDialog[0], activeElement );
			if ( !isActive ) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call( this );
		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( checkFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $("<div>")
			.addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
				this.options.dialogClass )
			.hide()
			.attr({
				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			})
			.appendTo( this._appendTo() );

		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB ) {
					return;
				}
				var tabbables = this.uiDialog.find(":tabbable"),
					first = tabbables.filter(":first"),
					last  = tabbables.filter(":last");

				if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
					first.focus( 1 );
					event.preventDefault();
				} else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
					last.focus( 1 );
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		});

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find("[aria-describedby]").length ) {
			this.uiDialog.attr({
				"aria-describedby": this.element.uniqueId().attr("id")
			});
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $("<div>")
			.addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix")
			.prependTo( this.uiDialog );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {
				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest(".ui-dialog-titlebar-close") ) {
					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.focus();
				}
			}
		});

		// support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button({
				label: this.options.closeText,
				icons: {
					primary: "ui-icon-closethick"
				},
				text: false
			})
			.addClass("ui-dialog-titlebar-close")
			.appendTo( this.uiDialogTitlebar );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		});

		uiDialogTitle = $("<span>")
			.uniqueId()
			.addClass("ui-dialog-title")
			.prependTo( this.uiDialogTitlebar );
		this._title( uiDialogTitle );

		this.uiDialog.attr({
			"aria-labelledby": uiDialogTitle.attr("id")
		});
	},

	_title: function( title ) {
		if ( !this.options.title ) {
			title.html("&#160;");
		}
		title.text( this.options.title );
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $("<div>")
			.addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");

		this.uiButtonSet = $("<div>")
			.addClass("ui-dialog-buttonset")
			.appendTo( this.uiDialogButtonPane );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// if we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
			this.uiDialog.removeClass("ui-dialog-buttons");
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = $.isFunction( props ) ?
				{ click: props, text: name } :
				props;
			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );
			// Change the context for the click callback to be the main element
			click = props.click;
			props.click = function() {
				click.apply( that.element[0], arguments );
			};
			buttonOptions = {
				icons: props.icons,
				text: props.showText
			};
			delete props.icons;
			delete props.showText;
			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet );
		});
		this.uiDialog.addClass("ui-dialog-buttons");
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable({
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				$( this ).addClass("ui-dialog-dragging");
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				options.position = [
					ui.position.left - that.document.scrollLeft(),
					ui.position.top - that.document.scrollTop()
				];
				$( this ).removeClass("ui-dialog-dragging");
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		});
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,
			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css("position"),
			resizeHandles = typeof handles === "string" ?
				handles	:
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable({
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				$( this ).addClass("ui-dialog-resizing");
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				options.height = $( this ).height();
				options.width = $( this ).width();
				$( this ).removeClass("ui-dialog-resizing");
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		})
		.css( "position", position );
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {
		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is(":visible");
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		});

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is(":data(ui-resizable)") ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "dialogClass" ) {
			uiDialog
				.removeClass( this.options.dialogClass )
				.addClass( value );
		}

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button({
				// Ensure that we always pass a string
				label: "" + value
			});
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is(":data(ui-draggable)");
			if ( isDraggable && !value ) {
				uiDialog.draggable("destroy");
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {
			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is(":data(ui-resizable)");
			if ( isResizable && !value ) {
				uiDialog.resizable("destroy");
			}

			// currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find(".ui-dialog-title") );
		}
	},

	_size: function() {
		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css({
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		});

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css({
				height: "auto",
				width: options.width
			})
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css({
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			});
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if (this.uiDialog.is(":data(ui-resizable)") ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map(function() {
			var iframe = $( this );

			return $( "<div>" )
				.css({
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				})
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[0];
		});
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest(".ui-dialog").length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest(".ui-datepicker").length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		var that = this,
			widgetFullName = this.widgetFullName;
		if ( !$.ui.dialog.overlayInstances ) {
			// Prevent use of anchors and inputs.
			// We use a delay in case the overlay is created from an
			// event that we're going to be cancelling. (#2804)
			this._delay(function() {
				// Handle .dialog().dialog("close") (#4065)
				if ( $.ui.dialog.overlayInstances ) {
					this.document.bind( "focusin.dialog", function( event ) {
						if ( !that._allowInteraction( event ) ) {
							event.preventDefault();
							$(".ui-dialog:visible:last .ui-dialog-content")
								.data( widgetFullName )._focusTabbable();
						}
					});
				}
			});
		}

		this.overlay = $("<div>")
			.addClass("ui-widget-overlay ui-front")
			.appendTo( this._appendTo() );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		});
		$.ui.dialog.overlayInstances++;
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			$.ui.dialog.overlayInstances--;

			if ( !$.ui.dialog.overlayInstances ) {
				this.document.unbind( "focusin.dialog" );
			}
			this.overlay.remove();
			this.overlay = null;
		}
	}
});

$.ui.dialog.overlayInstances = 0;

// DEPRECATED
if ( $.uiBackCompat !== false ) {
	// position option with array notation
	// just override with old implementation
	$.widget( "ui.dialog", $.ui.dialog, {
		_position: function() {
			var position = this.options.position,
				myAt = [],
				offset = [ 0, 0 ],
				isVisible;

			if ( position ) {
				if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
					myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
					if ( myAt.length === 1 ) {
						myAt[1] = myAt[0];
					}

					$.each( [ "left", "top" ], function( i, offsetPosition ) {
						if ( +myAt[ i ] === myAt[ i ] ) {
							offset[ i ] = myAt[ i ];
							myAt[ i ] = offsetPosition;
						}
					});

					position = {
						my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
							myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
						at: myAt.join(" ")
					};
				}

				position = $.extend( {}, $.ui.dialog.prototype.options.position, position );
			} else {
				position = $.ui.dialog.prototype.options.position;
			}

			// need to show the dialog to get the actual offset in the position plugin
			isVisible = this.uiDialog.is(":visible");
			if ( !isVisible ) {
				this.uiDialog.show();
			}
			this.uiDialog.position( position );
			if ( !isVisible ) {
				this.uiDialog.hide();
			}
		}
	});
}

}( jQuery ) );
(function( $, undefined ) {

$.widget( "ui.menu", {
	version: "1.10.4",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-carat-1-e"
		},
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;
		// flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
			.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
			.attr({
				role: this.options.role,
				tabIndex: 0
			})
			// need to catch all clicks on disabled menu
			// not possible through _on
			.bind( "click" + this.eventNamespace, $.proxy(function( event ) {
				if ( this.options.disabled ) {
					event.preventDefault();
				}
			}, this ));

		if ( this.options.disabled ) {
			this.element
				.addClass( "ui-state-disabled" )
				.attr( "aria-disabled", "true" );
		}

		this._on({
			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item > a": function( event ) {
				event.preventDefault();
			},
			"click .ui-state-disabled > a": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item:has(a)": function( event ) {
				var target = $( event.target ).closest( ".ui-menu-item" );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {
				var target = $( event.currentTarget );
				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {
				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay(function() {
					if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
						this.collapseAll( event );
					}
				});
			},
			keydown: "_keydown"
		});

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( !$( event.target ).closest( ".ui-menu" ).length ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		});
	},

	_destroy: function() {
		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
				.removeAttr( "role" )
				.removeAttr( "tabIndex" )
				.removeAttr( "aria-labelledby" )
				.removeAttr( "aria-expanded" )
				.removeAttr( "aria-hidden" )
				.removeAttr( "aria-disabled" )
				.removeUniqueId()
				.show();

		// Destroy menu items
		this.element.find( ".ui-menu-item" )
			.removeClass( "ui-menu-item" )
			.removeAttr( "role" )
			.removeAttr( "aria-disabled" )
			.children( "a" )
				.removeUniqueId()
				.removeClass( "ui-corner-all ui-state-hover" )
				.removeAttr( "tabIndex" )
				.removeAttr( "role" )
				.removeAttr( "aria-haspopup" )
				.children().each( function() {
					var elem = $( this );
					if ( elem.data( "ui-menu-submenu-carat" ) ) {
						elem.remove();
					}
				});

		// Destroy menu dividers
		this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
	},

	_keydown: function( event ) {
		var match, prev, character, skip, regex,
			preventDefault = true;

		function escape( value ) {
			return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
		}

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			character = String.fromCharCode( event.keyCode );
			skip = false;

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			regex = new RegExp( "^" + escape( character ), "i" );
			match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
				return regex.test( $( this ).children( "a" ).text() );
			});
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				regex = new RegExp( "^" + escape( character ), "i" );
				match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
					return regex.test( $( this ).children( "a" ).text() );
				});
			}

			if ( match.length ) {
				this.focus( event, match );
				if ( match.length > 1 ) {
					this.previousFilter = character;
					this.filterTimer = this._delay(function() {
						delete this.previousFilter;
					}, 1000 );
				} else {
					delete this.previousFilter;
				}
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this.element.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		submenus.filter( ":not(.ui-menu)" )
			.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
			.hide()
			.attr({
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			})
			.each(function() {
				var menu = $( this ),
					item = menu.prev( "a" ),
					submenuCarat = $( "<span>" )
						.addClass( "ui-menu-icon ui-icon " + icon )
						.data( "ui-menu-submenu-carat", true );

				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCarat );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			});

		menus = submenus.add( this.element );

		// Don't refresh list items that are already adapted
		menus.children( ":not(.ui-menu-item):has(a)" )
			.addClass( "ui-menu-item" )
			.attr( "role", "presentation" )
			.children( "a" )
				.uniqueId()
				.addClass( "ui-corner-all" )
				.attr({
					tabIndex: -1,
					role: this._itemRole()
				});

		// Initialize unlinked menu-items containing spaces and/or dashes only as dividers
		menus.children( ":not(.ui-menu-item)" ).each(function() {
			var item = $( this );
			// hyphen, em dash, en dash
			if ( !/[^\-\u2014\u2013\s]/.test( item.text() ) ) {
				item.addClass( "ui-widget-content ui-menu-divider" );
			}
		});

		// Add aria-disabled attribute to any disabled menu item
		menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			this.element.find( ".ui-menu-icon" )
				.removeClass( this.options.icons.submenu )
				.addClass( value.submenu );
		}
		this._super( key, value );
	},

	focus: function( event, item ) {
		var nested, focused;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();
		focused = this.active.children( "a" ).addClass( "ui-state-focus" );
		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		this.active
			.parent()
			.closest( ".ui-menu-item" )
			.children( "a:first" )
			.addClass( "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay(function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening(nested);
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.height();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this.active.children( "a" ).removeClass( "ui-state-focus" );
		this.active = null;

		this._trigger( "blur", event, { item: this.active } );
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the carat icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay(function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend({
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );
			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu
			.find( ".ui-menu" )
				.hide()
				.attr( "aria-hidden", "true" )
				.attr( "aria-expanded", "false" )
			.end()
			.find( "a.ui-state-active" )
				.removeClass( "ui-state-active" );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
				.children( ".ui-menu-item" )
				.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay(function() {
				this.focus( event, newItem );
			});
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each(function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			});

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.children( ".ui-menu-item" )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each(function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			});

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {
		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	}
});

}( jQuery ));
(function( $, undefined ) {

$.widget( "ui.progressbar", {
	version: "1.10.4",
	options: {
		max: 100,
		value: 0,

		change: null,
		complete: null
	},

	min: 0,

	_create: function() {
		// Constrain initial value
		this.oldValue = this.options.value = this._constrainedValue();

		this.element
			.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
			.attr({
				// Only set static values, aria-valuenow and aria-valuemax are
				// set inside _refreshValue()
				role: "progressbar",
				"aria-valuemin": this.min
			});

		this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
			.appendTo( this.element );

		this._refreshValue();
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		// sanitize value
		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}

		return this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) );
	},

	_setOptions: function( options ) {
		// Ensure "value" option is set after other values (like max)
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {
			// Don't allow a max less than min
			value = Math.max( this.min, value );
		}

		this._super( key, value );
	},

	_percentage: function() {
		return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage();

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.toggleClass( "ui-corner-right", value === this.options.max )
			.width( percentage.toFixed(0) + "%" );

		this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

		if ( this.indeterminate ) {
			this.element.removeAttr( "aria-valuenow" );
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
			}
		} else {
			this.element.attr({
				"aria-valuemax": this.options.max,
				"aria-valuenow": value
			});
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}
		if ( value === this.options.max ) {
			this._trigger( "complete" );
		}
	}
});

})( jQuery );
(function( $, undefined ) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
var numPages = 5;

$.widget( "ui.slider", $.ui.mouse, {
	version: "1.10.4",
	widgetEventPrefix: "slide",

	options: {
		animate: false,
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();

		this.element
			.addClass( "ui-slider" +
				" ui-slider-" + this.orientation +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all");

		this._refresh();
		this._setOption( "disabled", this.options.disabled );

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
			handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this.handle = this.handles.eq( 0 );

		this.handles.each(function( i ) {
			$( this ).data( "ui-slider-handle-index", i );
		});
	},

	_createRange: function() {
		var options = this.options,
			classes = "";

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[0], options.values[0] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice(0);
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div></div>" )
					.appendTo( this.element );

				classes = "ui-slider-range" +
				// note: this isn't the most fittingly semantic framework class for this element,
				// but worked best visually with a variety of themes
				" ui-widget-header ui-corner-all";
			} else {
				this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
					// Handle range switching from true to min/max
					.css({
						"left": "",
						"bottom": ""
					});
			}

			this.range.addClass( classes +
				( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		var elements = this.handles.add( this.range ).filter( "a" );
		this._off( elements );
		this._on( elements, this._handleEvents );
		this._hoverable( elements );
		this._focusable( elements );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this.element
			.removeClass( "ui-slider" +
				" ui-slider-horizontal" +
				" ui-slider-vertical" +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all" );

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each(function( i ) {
			var thisDistance = Math.abs( normValue - that.values(i) );
			if (( distance > thisDistance ) ||
				( distance === thisDistance &&
					(i === that._lastChangedValue || that.values(i) === o.min ))) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		});

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		closestHandle
			.addClass( "ui-state-active" )
			.focus();

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this.handles.removeClass( "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_start: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}
		return this._trigger( "start", event, uiHash );
	},

	_slide: function( event, index, newVal ) {
		var otherVal,
			newValues,
			allowed;

		if ( this.options.values && this.options.values.length ) {
			otherVal = this.values( index ? 0 : 1 );

			if ( ( this.options.values.length === 2 && this.options.range === true ) &&
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
				) {
				newVal = otherVal;
			}

			if ( newVal !== this.values( index ) ) {
				newValues = this.values();
				newValues[ index ] = newVal;
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal,
					values: newValues
				} );
				otherVal = this.values( index ? 0 : 1 );
				if ( allowed !== false ) {
					this.values( index, newVal );
				}
			}
		} else {
			if ( newVal !== this.value() ) {
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal
				} );
				if ( allowed !== false ) {
					this.value( newVal );
				}
			}
		}
	},

	_stop: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}

		this._trigger( "stop", event, uiHash );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;

			this._trigger( "change", event, uiHash );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this.options.values && this.options.values.length ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length-1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		$.Widget.prototype._setOption.apply( this, arguments );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this.element
					.removeClass( "ui-slider-horizontal ui-slider-vertical" )
					.addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for ( i = 0; i < valsLength; i += 1 ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "min":
			case "max":
				this._animateOff = true;
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this.options.values && this.options.values.length ) {
			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i+= 1) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = (val - this._valueMin()) % step,
			alignValue = val - valModStep;

		if ( Math.abs(valModStep) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed(5) );
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.options.max;
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this.options.values && this.options.values.length ) {
			this.handles.each(function( i ) {
				valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					}
				}
				lastValPercent = valPercent;
			});
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "ui-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_UP:
				case $.ui.keyCode.PAGE_DOWN:
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						$( event.target ).addClass( "ui-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this.options.values && this.options.values.length ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.ui.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.ui.keyCode.PAGE_UP:
					newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );
					break;
				case $.ui.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		click: function( event ) {
			event.preventDefault();
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "ui-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				$( event.target ).removeClass( "ui-state-active" );
			}
		}
	}

});

}(jQuery));
(function( $ ) {

function modifier( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.10.4",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {
		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {
			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_getCreateOptions: function() {
		var options = {},
			element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value !== undefined && value.length ) {
				options[ option ] = value;
			}
		});

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay(function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[0] === this.document[0].activeElement ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[0] === this.document[0].activeElement;
				if ( !isActive ) {
					this.element.focus();
					this.previous = previous;
					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay(function() {
						this.previous = previous;
					});
				}
			}

			// ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay(function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			});

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {
			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	_draw: function() {
		var uiSpinner = this.uiSpinner = this.element
			.addClass( "ui-spinner-input" )
			.attr( "autocomplete", "off" )
			.wrap( this._uiSpinnerHtml() )
			.parent()
				// add buttons
				.append( this._buttonHtml() );

		this.element.attr( "role", "spinbutton" );

		// button bindings
		this.buttons = uiSpinner.find( ".ui-spinner-button" )
			.attr( "tabIndex", -1 )
			.button()
			.removeClass( "ui-corner-all" );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
				uiSpinner.height() > 0 ) {
			uiSpinner.height( uiSpinner.height() );
		}

		// disable spinner if element was already disabled
		if ( this.options.disabled ) {
			this.disable();
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_uiSpinnerHtml: function() {
		return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
	},

	_buttonHtml: function() {
		return "" +
			"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
				"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
			"</a>" +
			"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
				"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
			"</a>";
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;
		// - round to the nearest step
		aboveMin = Math.round(aboveMin / options.step) * options.step;
		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// clamp the value
		if ( options.max !== null && value > options.max) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		if ( key === "culture" || key === "numberFormat" ) {
			var prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			this.buttons.first().find( ".ui-icon" )
				.removeClass( this.options.icons.up )
				.addClass( value.up );
			this.buttons.last().find( ".ui-icon" )
				.removeClass( this.options.icons.down )
				.addClass( value.down );
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			if ( value ) {
				this.element.prop( "disabled", true );
				this.buttons.button( "disable" );
			} else {
				this.element.prop( "disabled", false );
				this.buttons.button( "enable" );
			}
		}
	},

	_setOptions: modifier(function( options ) {
		this._super( options );
		this._value( this.element.val() );
	}),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr({
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,
			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		});
	},

	// update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-spinner-input" )
			.prop( "disabled", false )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );
		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: modifier(function( steps ) {
		this._stepUp( steps );
	}),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * this.options.step );
			this._stop();
		}
	},

	stepDown: modifier(function( steps ) {
		this._stepDown( steps );
	}),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * -this.options.step );
			this._stop();
		}
	},

	pageUp: modifier(function( pages ) {
		this._stepUp( (pages || 1) * this.options.page );
	}),

	pageDown: modifier(function( pages ) {
		this._stepDown( (pages || 1) * this.options.page );
	}),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		modifier( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
});

}( jQuery ) );
(function( $, undefined ) {

var tabId = 0,
	rhash = /#.*$/;

function getNextTabId() {
	return ++tabId;
}

function isLocal( anchor ) {
	// support: IE7
	// IE7 doesn't normalize the href property when set via script (#9317)
	anchor = anchor.cloneNode( false );

	return anchor.hash.length > 1 &&
		decodeURIComponent( anchor.href.replace( rhash, "" ) ) ===
			decodeURIComponent( location.href.replace( rhash, "" ) );
}

$.widget( "ui.tabs", {
	version: "1.10.4",
	delay: 300,
	options: {
		active: null,
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this.element
			.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
			.toggleClass( "ui-tabs-collapsible", options.collapsible )
			// Prevent users from focusing disabled tabs via click
			.delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			})
			// support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			});

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				})
			) ).sort();
		}

		// check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {
			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each(function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				});
			}

			// check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// no active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
			case $.ui.keyCode.RIGHT:
			case $.ui.keyCode.DOWN:
				selectedIndex++;
				break;
			case $.ui.keyCode.UP:
			case $.ui.keyCode.LEFT:
				goingForward = false;
				selectedIndex--;
				break;
			case $.ui.keyCode.END:
				selectedIndex = this.anchors.length - 1;
				break;
			case $.ui.keyCode.HOME:
				selectedIndex = 0;
				break;
			case $.ui.keyCode.SPACE:
				// Activate only, no collapsing
				event.preventDefault();
				clearTimeout( this.activating );
				this._activate( selectedIndex );
				return;
			case $.ui.keyCode.ENTER:
				// Toggle (cancel delayed activation, allow collapsing)
				event.preventDefault();
				clearTimeout( this.activating );
				// Determine if we should collapse or activate
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );
				return;
			default:
				return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control key will prevent automatic activation
		if ( !event.ctrlKey ) {
			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay(function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.focus();
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).focus();
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "disabled" ) {
			// don't use the widget factory's disabled handling
			this._setupDisabled( value );
			return;
		}

		this._super( key, value);

		if ( key === "collapsible" ) {
			this.element.toggleClass( "ui-tabs-collapsible", value );
			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_tabId: function( tab ) {
		return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		});

		this._processTabs();

		// was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();
		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();
			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}
		// was active, active tab still exists
		} else {
			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setupDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr({
			"aria-selected": "false",
			tabIndex: -1
		});
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr({
				"aria-expanded": "false",
				"aria-hidden": "true"
			});

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.addClass( "ui-tabs-active ui-state-active" )
				.attr({
					"aria-selected": "true",
					tabIndex: 0
				});
			this._getPanelForTab( this.active )
				.show()
				.attr({
					"aria-expanded": "true",
					"aria-hidden": "false"
				});
		}
	},

	_processTabs: function() {
		var that = this;

		this.tablist = this._getList()
			.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
			.attr( "role", "tablist" );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.addClass( "ui-state-default ui-corner-top" )
			.attr({
				role: "tab",
				tabIndex: -1
			});

		this.anchors = this.tabs.map(function() {
				return $( "a", this )[ 0 ];
			})
			.addClass( "ui-tabs-anchor" )
			.attr({
				role: "presentation",
				tabIndex: -1
			});

		this.panels = $();

		this.anchors.each(function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// inline tab
			if ( isLocal( anchor ) ) {
				selector = anchor.hash;
				panel = that.element.find( that._sanitizeSelector( selector ) );
			// remote tab
			} else {
				panelId = that._tabId( tab );
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr({
				"aria-controls": selector.substring( 1 ),
				"aria-labelledby": anchorId
			});
			panel.attr( "aria-labelledby", anchorId );
		});

		this.panels
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
			.attr( "role", "tabpanel" );
	},

	// allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol,ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
			.data( "ui-tabs-destroy", true );
	},

	_setupDisabled: function( disabled ) {
		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// disable tabs
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				$( li )
					.addClass( "ui-state-disabled" )
					.attr( "aria-disabled", "true" );
			} else {
				$( li )
					.removeClass( "ui-state-disabled" )
					.removeAttr( "aria-disabled" );
			}
		}

		this.options.disabled = disabled;
	},

	_setupEvents: function( event ) {
		var events = {
			click: function( event ) {
				event.preventDefault();
			}
		};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});

			this.element.children().not( this.panels ).each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});

			this.panels.each(function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			})
			.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each(function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			}).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||
				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||
				// can't switch durning an animation
				this.running ||
				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||
				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
				show();
			});
		} else {
			eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr({
			"aria-expanded": "false",
			"aria-hidden": "true"
		});
		eventData.oldTab.attr( "aria-selected", "false" );
		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow.attr({
			"aria-expanded": "true",
			"aria-hidden": "false"
		});
		eventData.newTab.attr({
			"aria-selected": "true",
			tabIndex: 0
		});
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler({
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		});
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {
		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

		this.tablist
			.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
			.removeAttr( "role" );

		this.anchors
			.removeClass( "ui-tabs-anchor" )
			.removeAttr( "role" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each(function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this )
					.removeClass( "ui-state-default ui-state-active ui-state-disabled " +
						"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-live" )
					.removeAttr( "aria-busy" )
					.removeAttr( "aria-selected" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "role" );
			}
		});

		this.tabs.each(function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		});

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				});
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				});
			}
		}
		this._setupDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setupDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			};

		// not remote
		if ( isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			tab.addClass( "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.success(function( response ) {
					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						panel.html( response );
						that._trigger( "load", event, eventData );
					}, 1 );
				})
				.complete(function( jqXHR, status ) {
					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						if ( status === "abort" ) {
							that.panels.stop( false, true );
						}

						tab.removeClass( "ui-tabs-loading" );
						panel.removeAttr( "aria-busy" );

						if ( jqXHR === that.xhr ) {
							delete that.xhr;
						}
					}, 1 );
				});
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {
			url: anchor.attr( "href" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
});

})( jQuery );
(function( $ ) {

var increments = 0;

function addDescribedBy( elem, id ) {
	var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
	describedby.push( id );
	elem
		.data( "ui-tooltip-id", id )
		.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
}

function removeDescribedBy( elem ) {
	var id = elem.data( "ui-tooltip-id" ),
		describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
		index = $.inArray( id, describedby );
	if ( index !== -1 ) {
		describedby.splice( index, 1 );
	}

	elem.removeData( "ui-tooltip-id" );
	describedby = $.trim( describedby.join( " " ) );
	if ( describedby ) {
		elem.attr( "aria-describedby", describedby );
	} else {
		elem.removeAttr( "aria-describedby" );
	}
}

$.widget( "ui.tooltip", {
	version: "1.10.4",
	options: {
		content: function() {
			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";
			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,
		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		tooltipClass: null,
		track: false,

		// callbacks
		close: null,
		open: null
	},

	_create: function() {
		this._on({
			mouseover: "open",
			focusin: "open"
		});

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};
		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		if ( this.options.disabled ) {
			this._disable();
		}
	},

	_setOption: function( key, value ) {
		var that = this;

		if ( key === "disabled" ) {
			this[ value ? "_disable" : "_enable" ]();
			this.options[ key ] = value;
			// disable element style changes
			return;
		}

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, element ) {
				that._updateContent( element );
			});
		}
	},

	_disable: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, element ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = element[0];
			that.close( event, true );
		});

		// remove title attributes to prevent native tooltips
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.is( "[title]" ) ) {
				element
					.data( "ui-tooltip-title", element.attr( "title" ) )
					.attr( "title", "" );
			}
		});
	},

	_enable: function() {
		// restore title attributes
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
			}
		});
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )
				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "ui-tooltip-title", target.attr( "title" ) );
		}

		target.data( "ui-tooltip-open", true );

		// kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each(function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "ui-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			});
		}

		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[0], function( response ) {
			// ignore async response if tooltip was closed already
			if ( !target.data( "ui-tooltip-open" ) ) {
				return;
			}
			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay(function() {
				// jQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			});
		});
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltip, events, delayedShow,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltip = this._find( target );
		if ( tooltip.length ) {
			tooltip.find( ".ui-tooltip-content" ).html( content );
			return;
		}

		// if we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltip = this._tooltip( target );
		addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".ui-tooltip-content" ).html( content );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			});
			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend({
				of: target
			}, this.options.position ) );
		}

		tooltip.hide();

		this._show( tooltip, this.options.show );
		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		if ( this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval(function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "open", event, { tooltip: tooltip } );

		events = {
			keyup: function( event ) {
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
					var fakeEvent = $.Event(event);
					fakeEvent.currentTarget = target[0];
					this.close( fakeEvent, true );
				}
			},
			remove: function() {
				this._removeTooltip( tooltip );
			}
		};
		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltip = this._find( target );

		// disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( this.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// only set title if we had one before (see comment in _open())
		if ( target.data( "ui-tooltip-title" ) ) {
			target.attr( "title", target.data( "ui-tooltip-title" ) );
		}

		removeDescribedBy( target );

		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
		});

		target.removeData( "ui-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );
		// Remove 'remove' binding only on delegated targets
		if ( target[0] !== this.element[0] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			});
		}

		this.closing = true;
		this._trigger( "close", event, { tooltip: tooltip } );
		this.closing = false;
	},

	_tooltip: function( element ) {
		var id = "ui-tooltip-" + increments++,
			tooltip = $( "<div>" )
				.attr({
					id: id,
					role: "tooltip"
				})
				.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
					( this.options.tooltipClass || "" ) );
		$( "<div>" )
			.addClass( "ui-tooltip-content" )
			.appendTo( tooltip );
		tooltip.appendTo( this.document[0].body );
		this.tooltips[ id ] = element;
		return tooltip;
	},

	_find: function( target ) {
		var id = target.data( "ui-tooltip-id" );
		return id ? $( "#" + id ) : $();
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_destroy: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, element ) {
			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" );
			event.target = event.currentTarget = element[0];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
				element.removeData( "ui-tooltip-title" );
			}
		});
	}
});

}( jQuery ) );
(function($, undefined) {

var dataSpace = "ui-effects-";

$.effects = {
	effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
(function( jQuery, undefined ) {

	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	// plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
	// a set of RE's that can match strings and generate color tuples.
	stringParsers = [{
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {
			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 )
				];
			}
		}, {
			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		}],

	// jQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// colors = jQuery.Color.names
	colors,

	// local aliases of functions called often
	each = jQuery.each;

// determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
});

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return (allowEmpty || !prop.def) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {
		// we add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return (value + type.mod) % type.mod;
	}

	// for now all property types without mod have min and max
	return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// if this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// exit each( stringParsers ) here because we matched
			return false;
		}
	});

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// if this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = jQuery.type( red ),
			rgba = this._rgba = [];

		// more than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			});
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				});
			} else {
				each( spaces, function( spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// if the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// if the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// this is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					});

					// everything defined but alpha?
					if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
						// use the default of 1
						inst[ cache ][ 3 ] = 1;
						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				});
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if (isCache) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				});
			}
			return same;
		});
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		});
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// if null, don't override start value
			if ( endValue === null ) {
				return;
			}
			// if null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		});
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {
		// if we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		}));
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				return v == null ? ( i > 2 ? 1 : 0 ) : v;
			});

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			});

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		}).join("");
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
});
color.fn.parse.prototype = color.fn;

// hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + (q - p) * h * 6;
	}
	if ( h * 2 < 1) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + (q - p) * ((2/3) - h) * 6;
	}
	return p;
}

spaces.hsla.to = function ( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function ( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};


each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = jQuery.type( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		});

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {
		// alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var vtype = jQuery.type( value ),
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
				local = this[ fn ](),
				cur = local[ prop.idx ],
				match;

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = jQuery.type( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	});
});

// add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							(backgroundColor === "" || backgroundColor === "transparent") &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch( e ) {
					// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	});

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		});
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {
	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};

})( jQuery );


/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
(function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
	$.fx.step[ prop ] = function( fx ) {
		if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
			jQuery.style( fx.elem, prop, fx.end );
			fx.setAttr = true;
		}
	};
});

function getElementStyles( elem ) {
	var key, len,
		style = elem.ownerDocument.defaultView ?
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
			elem.currentStyle,
		styles = {};

	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
		len = style.length;
		while ( len-- ) {
			key = style[ len ];
			if ( typeof style[ key ] === "string" ) {
				styles[ $.camelCase( key ) ] = style[ key ];
			}
		}
	// support: Opera, IE <9
	} else {
		for ( key in style ) {
			if ( typeof style[ key ] === "string" ) {
				styles[ key ] = style[ key ];
			}
		}
	}

	return styles;
}


function styleDifference( oldStyle, newStyle ) {
	var diff = {},
		name, value;

	for ( name in newStyle ) {
		value = newStyle[ name ];
		if ( oldStyle[ name ] !== value ) {
			if ( !shorthandStyles[ name ] ) {
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
					diff[ name ] = value;
				}
			}
		}
	}

	return diff;
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

$.effects.animateClass = function( value, duration, easing, callback ) {
	var o = $.speed( duration, easing, callback );

	return this.queue( function() {
		var animated = $( this ),
			baseClass = animated.attr( "class" ) || "",
			applyClassChange,
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

		// map the animated objects to store the original styles.
		allAnimations = allAnimations.map(function() {
			var el = $( this );
			return {
				el: el,
				start: getElementStyles( this )
			};
		});

		// apply class change
		applyClassChange = function() {
			$.each( classAnimationActions, function(i, action) {
				if ( value[ action ] ) {
					animated[ action + "Class" ]( value[ action ] );
				}
			});
		};
		applyClassChange();

		// map all animated objects again - calculate new styles and diff
		allAnimations = allAnimations.map(function() {
			this.end = getElementStyles( this.el[ 0 ] );
			this.diff = styleDifference( this.start, this.end );
			return this;
		});

		// apply original class
		animated.attr( "class", baseClass );

		// map all animated objects again - this time collecting a promise
		allAnimations = allAnimations.map(function() {
			var styleInfo = this,
				dfd = $.Deferred(),
				opts = $.extend({}, o, {
					queue: false,
					complete: function() {
						dfd.resolve( styleInfo );
					}
				});

			this.el.animate( this.diff, opts );
			return dfd.promise();
		});

		// once all animations have completed:
		$.when.apply( $, allAnimations.get() ).done(function() {

			// set the final class
			applyClassChange();

			// for each animated element,
			// clear all css properties that were animated
			$.each( arguments, function() {
				var el = this.el;
				$.each( this.diff, function(key) {
					el.css( key, "" );
				});
			});

			// this is guarnteed to be there if you use jQuery.speed()
			// it also handles dequeuing the next anim...
			o.complete.call( animated[ 0 ] );
		});
	});
};

$.fn.extend({
	addClass: (function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	})( $.fn.addClass ),

	removeClass: (function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return arguments.length > 1 ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	})( $.fn.removeClass ),

	toggleClass: (function( orig ) {
		return function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {
					// without speed parameter
					return orig.apply( this, arguments );
				} else {
					return $.effects.animateClass.call( this,
						(force ? { add: classNames } : { remove: classNames }),
						speed, easing, callback );
				}
			} else {
				// without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		};
	})( $.fn.toggleClass ),

	switchClass: function( remove, add, speed, easing, callback) {
		return $.effects.animateClass.call( this, {
			add: add,
			remove: remove
		}, speed, easing, callback );
	}
});

})();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

(function() {

$.extend( $.effects, {
	version: "1.10.4",

	// Saves a set of properties in a data storage
	save: function( element, set ) {
		for( var i=0; i < set.length; i++ ) {
			if ( set[ i ] !== null ) {
				element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
			}
		}
	},

	// Restores a set of previously saved properties from a data storage
	restore: function( element, set ) {
		var val, i;
		for( i=0; i < set.length; i++ ) {
			if ( set[ i ] !== null ) {
				val = element.data( dataSpace + set[ i ] );
				// support: jQuery 1.6.2
				// http://bugs.jquery.com/ticket/9917
				// jQuery 1.6.2 incorrectly returns undefined for any falsy value.
				// We can't differentiate between "" and 0 here, so we just assume
				// empty string since it's likely to be a more common value...
				if ( val === undefined ) {
					val = "";
				}
				element.css( set[ i ], val );
			}
		}
	},

	setMode: function( el, mode ) {
		if (mode === "toggle") {
			mode = el.is( ":hidden" ) ? "show" : "hide";
		}
		return mode;
	},

	// Translates a [top,left] array into a baseline value
	// this should be a little more flexible in the future to handle a string & hash
	getBaseline: function( origin, original ) {
		var y, x;
		switch ( origin[ 0 ] ) {
			case "top": y = 0; break;
			case "middle": y = 0.5; break;
			case "bottom": y = 1; break;
			default: y = origin[ 0 ] / original.height;
		}
		switch ( origin[ 1 ] ) {
			case "left": x = 0; break;
			case "center": x = 0.5; break;
			case "right": x = 1; break;
			default: x = origin[ 1 ] / original.width;
		}
		return {
			x: x,
			y: y
		};
	},

	// Wraps the element around a wrapper that copies position properties
	createWrapper: function( element ) {

		// if the element is already wrapped, return it
		if ( element.parent().is( ".ui-effects-wrapper" )) {
			return element.parent();
		}

		// wrap the element
		var props = {
				width: element.outerWidth(true),
				height: element.outerHeight(true),
				"float": element.css( "float" )
			},
			wrapper = $( "<div></div>" )
				.addClass( "ui-effects-wrapper" )
				.css({
					fontSize: "100%",
					background: "transparent",
					border: "none",
					margin: 0,
					padding: 0
				}),
			// Store the size in case width/height are defined in % - Fixes #5245
			size = {
				width: element.width(),
				height: element.height()
			},
			active = document.activeElement;

		// support: Firefox
		// Firefox incorrectly exposes anonymous content
		// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
		try {
			active.id;
		} catch( e ) {
			active = document.body;
		}

		element.wrap( wrapper );

		// Fixes #7595 - Elements lose focus when wrapped.
		if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
			$( active ).focus();
		}

		wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

		// transfer positioning properties to the wrapper
		if ( element.css( "position" ) === "static" ) {
			wrapper.css({ position: "relative" });
			element.css({ position: "relative" });
		} else {
			$.extend( props, {
				position: element.css( "position" ),
				zIndex: element.css( "z-index" )
			});
			$.each([ "top", "left", "bottom", "right" ], function(i, pos) {
				props[ pos ] = element.css( pos );
				if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
					props[ pos ] = "auto";
				}
			});
			element.css({
				position: "relative",
				top: 0,
				left: 0,
				right: "auto",
				bottom: "auto"
			});
		}
		element.css(size);

		return wrapper.css( props ).show();
	},

	removeWrapper: function( element ) {
		var active = document.activeElement;

		if ( element.parent().is( ".ui-effects-wrapper" ) ) {
			element.parent().replaceWith( element );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}
		}


		return element;
	},

	setTransition: function( element, list, factor, value ) {
		value = value || {};
		$.each( list, function( i, x ) {
			var unit = element.cssUnit( x );
			if ( unit[ 0 ] > 0 ) {
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
			}
		});
		return value;
	}
});

// return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

	// allow passing all options as the first parameter
	if ( $.isPlainObject( effect ) ) {
		options = effect;
		effect = effect.effect;
	}

	// convert to an object
	effect = { effect: effect };

	// catch (effect, null, ...)
	if ( options == null ) {
		options = {};
	}

	// catch (effect, callback)
	if ( $.isFunction( options ) ) {
		callback = options;
		speed = null;
		options = {};
	}

	// catch (effect, speed, ?)
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
		callback = speed;
		speed = options;
		options = {};
	}

	// catch (effect, options, callback)
	if ( $.isFunction( speed ) ) {
		callback = speed;
		speed = null;
	}

	// add options to effect
	if ( options ) {
		$.extend( effect, options );
	}

	speed = speed || options.duration;
	effect.duration = $.fx.off ? 0 :
		typeof speed === "number" ? speed :
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
		$.fx.speeds._default;

	effect.complete = callback || options.complete;

	return effect;
}

function standardAnimationOption( option ) {
	// Valid standard speeds (nothing, number, named speed)
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
		return true;
	}

	// Invalid strings - treat as "normal" speed
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
		return true;
	}

	// Complete callback
	if ( $.isFunction( option ) ) {
		return true;
	}

	// Options hash (but not naming an effect)
	if ( typeof option === "object" && !option.effect ) {
		return true;
	}

	// Didn't match any standard API
	return false;
}

$.fn.extend({
	effect: function( /* effect, options, speed, callback */ ) {
		var args = _normalizeArguments.apply( this, arguments ),
			mode = args.mode,
			queue = args.queue,
			effectMethod = $.effects.effect[ args.effect ];

		if ( $.fx.off || !effectMethod ) {
			// delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args.duration, args.complete );
			} else {
				return this.each( function() {
					if ( args.complete ) {
						args.complete.call( this );
					}
				});
			}
		}

		function run( next ) {
			var elem = $( this ),
				complete = args.complete,
				mode = args.mode;

			function done() {
				if ( $.isFunction( complete ) ) {
					complete.call( elem[0] );
				}
				if ( $.isFunction( next ) ) {
					next();
				}
			}

			// If the element already has the correct final state, delegate to
			// the core methods so the internal tracking of "olddisplay" works.
			if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
				elem[ mode ]();
				done();
			} else {
				effectMethod.call( elem[0], args, done );
			}
		}

		return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
	},

	show: (function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		};
	})( $.fn.show ),

	hide: (function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		};
	})( $.fn.hide ),

	toggle: (function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		};
	})( $.fn.toggle ),

	// helper functions
	cssUnit: function(key) {
		var style = this.css( key ),
			val = [];

		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
			if ( style.indexOf( unit ) > 0 ) {
				val = [ parseFloat( style ), unit ];
			}
		});
		return val;
	}
});

})();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

(function() {

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
});

$.extend( baseEasings, {
	Sine: function ( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function ( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function ( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
});

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
});

})();

})(jQuery);
(function( $, undefined ) {

var rvertical = /up|down|vertical/,
	rpositivemotion = /up|left|vertical|horizontal/;

$.effects.effect.blind = function( o, done ) {
	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		direction = o.direction || "up",
		vertical = rvertical.test( direction ),
		ref = vertical ? "height" : "width",
		ref2 = vertical ? "top" : "left",
		motion = rpositivemotion.test( direction ),
		animation = {},
		show = mode === "show",
		wrapper, distance, margin;

	// if already wrapped, the wrapper's properties are my property. #6245
	if ( el.parent().is( ".ui-effects-wrapper" ) ) {
		$.effects.save( el.parent(), props );
	} else {
		$.effects.save( el, props );
	}
	el.show();
	wrapper = $.effects.createWrapper( el ).css({
		overflow: "hidden"
	});

	distance = wrapper[ ref ]();
	margin = parseFloat( wrapper.css( ref2 ) ) || 0;

	animation[ ref ] = show ? distance : 0;
	if ( !motion ) {
		el
			.css( vertical ? "bottom" : "right", 0 )
			.css( vertical ? "top" : "left", "auto" )
			.css({ position: "absolute" });

		animation[ ref2 ] = show ? margin : distance + margin;
	}

	// start at 0 if we are showing
	if ( show ) {
		wrapper.css( ref, 0 );
		if ( ! motion ) {
			wrapper.css( ref2, margin + distance );
		}
	}

	// Animate
	wrapper.animate( animation, {
		duration: o.duration,
		easing: o.easing,
		queue: false,
		complete: function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.bounce = function( o, done ) {
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

		// defaults:
		mode = $.effects.setMode( el, o.mode || "effect" ),
		hide = mode === "hide",
		show = mode === "show",
		direction = o.direction || "up",
		distance = o.distance,
		times = o.times || 5,

		// number of internal animations
		anims = times * 2 + ( show || hide ? 1 : 0 ),
		speed = o.duration / anims,
		easing = o.easing,

		// utility:
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ),
		i,
		upAnim,
		downAnim,

		// we will need to re-assemble the queue to stack our animations in place
		queue = el.queue(),
		queuelen = queue.length;

	// Avoid touching opacity to prevent clearType and PNG issues in IE
	if ( show || hide ) {
		props.push( "opacity" );
	}

	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el ); // Create Wrapper

	// default distance for the BIGGEST bounce is the outer Distance / 3
	if ( !distance ) {
		distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
	}

	if ( show ) {
		downAnim = { opacity: 1 };
		downAnim[ ref ] = 0;

		// if we are showing, force opacity 0 and set the initial position
		// then do the "first" animation
		el.css( "opacity", 0 )
			.css( ref, motion ? -distance * 2 : distance * 2 )
			.animate( downAnim, speed, easing );
	}

	// start at the smallest distance if we are hiding
	if ( hide ) {
		distance = distance / Math.pow( 2, times - 1 );
	}

	downAnim = {};
	downAnim[ ref ] = 0;
	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for ( i = 0; i < times; i++ ) {
		upAnim = {};
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		el.animate( upAnim, speed, easing )
			.animate( downAnim, speed, easing );

		distance = hide ? distance * 2 : distance / 2;
	}

	// Last Bounce when Hiding
	if ( hide ) {
		upAnim = { opacity: 0 };
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		el.animate( upAnim, speed, easing );
	}

	el.queue(function() {
		if ( hide ) {
			el.hide();
		}
		$.effects.restore( el, props );
		$.effects.removeWrapper( el );
		done();
	});

	// inject all the animations we just queued to be first in line (after "inprogress")
	if ( queuelen > 1) {
		queue.splice.apply( queue,
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
	}
	el.dequeue();

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.clip = function( o, done ) {
	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",
		direction = o.direction || "vertical",
		vert = direction === "vertical",
		size = vert ? "height" : "width",
		position = vert ? "top" : "left",
		animation = {},
		wrapper, animate, distance;

	// Save & Show
	$.effects.save( el, props );
	el.show();

	// Create Wrapper
	wrapper = $.effects.createWrapper( el ).css({
		overflow: "hidden"
	});
	animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
	distance = animate[ size ]();

	// Shift
	if ( show ) {
		animate.css( size, 0 );
		animate.css( position, distance / 2 );
	}

	// Create Animation Object:
	animation[ size ] = show ? distance : 0;
	animation[ position ] = show ? 0 : distance / 2;

	// Animate
	animate.animate( animation, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( !show ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.drop = function( o, done ) {

	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",
		direction = o.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
		animation = {
			opacity: show ? 1 : 0
		},
		distance;

	// Adjust
	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el );

	distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

	if ( show ) {
		el
			.css( "opacity", 0 )
			.css( ref, motion === "pos" ? -distance : distance );
	}

	// Animation
	animation[ ref ] = ( show ?
		( motion === "pos" ? "+=" : "-=" ) :
		( motion === "pos" ? "-=" : "+=" ) ) +
		distance;

	// Animate
	el.animate( animation, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.explode = function( o, done ) {

	var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
		cells = rows,
		el = $( this ),
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",

		// show and then visibility:hidden the element before calculating offset
		offset = el.show().css( "visibility", "hidden" ).offset(),

		// width and height of a piece
		width = Math.ceil( el.outerWidth() / cells ),
		height = Math.ceil( el.outerHeight() / rows ),
		pieces = [],

		// loop
		i, j, left, top, mx, my;

	// children animate complete:
	function childComplete() {
		pieces.push( this );
		if ( pieces.length === rows * cells ) {
			animComplete();
		}
	}

	// clone the element for each row and cell.
	for( i = 0; i < rows ; i++ ) { // ===>
		top = offset.top + i * height;
		my = i - ( rows - 1 ) / 2 ;

		for( j = 0; j < cells ; j++ ) { // |||
			left = offset.left + j * width;
			mx = j - ( cells - 1 ) / 2 ;

			// Create a clone of the now hidden main element that will be absolute positioned
			// within a wrapper div off the -left and -top equal to size of our pieces
			el
				.clone()
				.appendTo( "body" )
				.wrap( "<div></div>" )
				.css({
					position: "absolute",
					visibility: "visible",
					left: -j * width,
					top: -i * height
				})

			// select the wrapper - make it overflow: hidden and absolute positioned based on
			// where the original was located +left and +top equal to the size of pieces
				.parent()
				.addClass( "ui-effects-explode" )
				.css({
					position: "absolute",
					overflow: "hidden",
					width: width,
					height: height,
					left: left + ( show ? mx * width : 0 ),
					top: top + ( show ? my * height : 0 ),
					opacity: show ? 0 : 1
				}).animate({
					left: left + ( show ? 0 : mx * width ),
					top: top + ( show ? 0 : my * height ),
					opacity: show ? 1 : 0
				}, o.duration || 500, o.easing, childComplete );
		}
	}

	function animComplete() {
		el.css({
			visibility: "visible"
		});
		$( pieces ).remove();
		if ( !show ) {
			el.hide();
		}
		done();
	}
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.fade = function( o, done ) {
	var el = $( this ),
		mode = $.effects.setMode( el, o.mode || "toggle" );

	el.animate({
		opacity: mode
	}, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: done
	});
};

})( jQuery );
(function( $, undefined ) {

$.effects.effect.fold = function( o, done ) {

	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "hide" ),
		show = mode === "show",
		hide = mode === "hide",
		size = o.size || 15,
		percent = /([0-9]+)%/.exec( size ),
		horizFirst = !!o.horizFirst,
		widthFirst = show !== horizFirst,
		ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
		duration = o.duration / 2,
		wrapper, distance,
		animation1 = {},
		animation2 = {};

	$.effects.save( el, props );
	el.show();

	// Create Wrapper
	wrapper = $.effects.createWrapper( el ).css({
		overflow: "hidden"
	});
	distance = widthFirst ?
		[ wrapper.width(), wrapper.height() ] :
		[ wrapper.height(), wrapper.width() ];

	if ( percent ) {
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
	}
	if ( show ) {
		wrapper.css( horizFirst ? {
			height: 0,
			width: size
		} : {
			height: size,
			width: 0
		});
	}

	// Animation
	animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
	animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

	// Animate
	wrapper
		.animate( animation1, duration, o.easing )
		.animate( animation2, duration, o.easing, function() {
			if ( hide ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.highlight = function( o, done ) {
	var elem = $( this ),
		props = [ "backgroundImage", "backgroundColor", "opacity" ],
		mode = $.effects.setMode( elem, o.mode || "show" ),
		animation = {
			backgroundColor: elem.css( "backgroundColor" )
		};

	if (mode === "hide") {
		animation.opacity = 0;
	}

	$.effects.save( elem, props );

	elem
		.show()
		.css({
			backgroundImage: "none",
			backgroundColor: o.color || "#ffff99"
		})
		.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					elem.hide();
				}
				$.effects.restore( elem, props );
				done();
			}
		});
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.pulsate = function( o, done ) {
	var elem = $( this ),
		mode = $.effects.setMode( elem, o.mode || "show" ),
		show = mode === "show",
		hide = mode === "hide",
		showhide = ( show || mode === "hide" ),

		// showing or hiding leaves of the "last" animation
		anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
		duration = o.duration / anims,
		animateTo = 0,
		queue = elem.queue(),
		queuelen = queue.length,
		i;

	if ( show || !elem.is(":visible")) {
		elem.css( "opacity", 0 ).show();
		animateTo = 1;
	}

	// anims - 1 opacity "toggles"
	for ( i = 1; i < anims; i++ ) {
		elem.animate({
			opacity: animateTo
		}, duration, o.easing );
		animateTo = 1 - animateTo;
	}

	elem.animate({
		opacity: animateTo
	}, duration, o.easing);

	elem.queue(function() {
		if ( hide ) {
			elem.hide();
		}
		done();
	});

	// We just queued up "anims" animations, we need to put them next in the queue
	if ( queuelen > 1 ) {
		queue.splice.apply( queue,
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
	}
	elem.dequeue();
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.puff = function( o, done ) {
	var elem = $( this ),
		mode = $.effects.setMode( elem, o.mode || "hide" ),
		hide = mode === "hide",
		percent = parseInt( o.percent, 10 ) || 150,
		factor = percent / 100,
		original = {
			height: elem.height(),
			width: elem.width(),
			outerHeight: elem.outerHeight(),
			outerWidth: elem.outerWidth()
		};

	$.extend( o, {
		effect: "scale",
		queue: false,
		fade: true,
		mode: mode,
		complete: done,
		percent: hide ? percent : 100,
		from: hide ?
			original :
			{
				height: original.height * factor,
				width: original.width * factor,
				outerHeight: original.outerHeight * factor,
				outerWidth: original.outerWidth * factor
			}
	});

	elem.effect( o );
};

$.effects.effect.scale = function( o, done ) {

	// Create element
	var el = $( this ),
		options = $.extend( true, {}, o ),
		mode = $.effects.setMode( el, o.mode || "effect" ),
		percent = parseInt( o.percent, 10 ) ||
			( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
		direction = o.direction || "both",
		origin = o.origin,
		original = {
			height: el.height(),
			width: el.width(),
			outerHeight: el.outerHeight(),
			outerWidth: el.outerWidth()
		},
		factor = {
			y: direction !== "horizontal" ? (percent / 100) : 1,
			x: direction !== "vertical" ? (percent / 100) : 1
		};

	// We are going to pass this effect to the size effect:
	options.effect = "size";
	options.queue = false;
	options.complete = done;

	// Set default origin and restore for show/hide
	if ( mode !== "effect" ) {
		options.origin = origin || ["middle","center"];
		options.restore = true;
	}

	options.from = o.from || ( mode === "show" ? {
		height: 0,
		width: 0,
		outerHeight: 0,
		outerWidth: 0
	} : original );
	options.to = {
		height: original.height * factor.y,
		width: original.width * factor.x,
		outerHeight: original.outerHeight * factor.y,
		outerWidth: original.outerWidth * factor.x
	};

	// Fade option to support puff
	if ( options.fade ) {
		if ( mode === "show" ) {
			options.from.opacity = 0;
			options.to.opacity = 1;
		}
		if ( mode === "hide" ) {
			options.from.opacity = 1;
			options.to.opacity = 0;
		}
	}

	// Animate
	el.effect( options );

};

$.effects.effect.size = function( o, done ) {

	// Create element
	var original, baseline, factor,
		el = $( this ),
		props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

		// Always restore
		props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

		// Copy for children
		props2 = [ "width", "height", "overflow" ],
		cProps = [ "fontSize" ],
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

		// Set options
		mode = $.effects.setMode( el, o.mode || "effect" ),
		restore = o.restore || mode !== "effect",
		scale = o.scale || "both",
		origin = o.origin || [ "middle", "center" ],
		position = el.css( "position" ),
		props = restore ? props0 : props1,
		zero = {
			height: 0,
			width: 0,
			outerHeight: 0,
			outerWidth: 0
		};

	if ( mode === "show" ) {
		el.show();
	}
	original = {
		height: el.height(),
		width: el.width(),
		outerHeight: el.outerHeight(),
		outerWidth: el.outerWidth()
	};

	if ( o.mode === "toggle" && mode === "show" ) {
		el.from = o.to || zero;
		el.to = o.from || original;
	} else {
		el.from = o.from || ( mode === "show" ? zero : original );
		el.to = o.to || ( mode === "hide" ? zero : original );
	}

	// Set scaling factor
	factor = {
		from: {
			y: el.from.height / original.height,
			x: el.from.width / original.width
		},
		to: {
			y: el.to.height / original.height,
			x: el.to.width / original.width
		}
	};

	// Scale the css box
	if ( scale === "box" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			props = props.concat( vProps );
			el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
			el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
		}

		// Horizontal props scaling
		if ( factor.from.x !== factor.to.x ) {
			props = props.concat( hProps );
			el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
			el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
		}
	}

	// Scale the content
	if ( scale === "content" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			props = props.concat( cProps ).concat( props2 );
			el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
			el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
		}
	}

	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el );
	el.css( "overflow", "hidden" ).css( el.from );

	// Adjust
	if (origin) { // Calculate baseline shifts
		baseline = $.effects.getBaseline( origin, original );
		el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
		el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
		el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
		el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
	}
	el.css( el.from ); // set top & left

	// Animate
	if ( scale === "content" || scale === "both" ) { // Scale the children

		// Add margins/font-size
		vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
		hProps = hProps.concat([ "marginLeft", "marginRight" ]);
		props2 = props0.concat(vProps).concat(hProps);

		el.find( "*[width]" ).each( function(){
			var child = $( this ),
				c_original = {
					height: child.height(),
					width: child.width(),
					outerHeight: child.outerHeight(),
					outerWidth: child.outerWidth()
				};
			if (restore) {
				$.effects.save(child, props2);
			}

			child.from = {
				height: c_original.height * factor.from.y,
				width: c_original.width * factor.from.x,
				outerHeight: c_original.outerHeight * factor.from.y,
				outerWidth: c_original.outerWidth * factor.from.x
			};
			child.to = {
				height: c_original.height * factor.to.y,
				width: c_original.width * factor.to.x,
				outerHeight: c_original.height * factor.to.y,
				outerWidth: c_original.width * factor.to.x
			};

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
				child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
				child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
			}

			// Animate children
			child.css( child.from );
			child.animate( child.to, o.duration, o.easing, function() {

				// Restore children
				if ( restore ) {
					$.effects.restore( child, props2 );
				}
			});
		});
	}

	// Animate
	el.animate( el.to, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( el.to.opacity === 0 ) {
				el.css( "opacity", el.from.opacity );
			}
			if( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			if ( !restore ) {

				// we need to calculate our new positioning based on the scaling
				if ( position === "static" ) {
					el.css({
						position: "relative",
						top: el.to.top,
						left: el.to.left
					});
				} else {
					$.each([ "top", "left" ], function( idx, pos ) {
						el.css( pos, function( _, str ) {
							var val = parseInt( str, 10 ),
								toRef = idx ? el.to.left : el.to.top;

							// if original was "auto", recalculate the new value from wrapper
							if ( str === "auto" ) {
								return toRef + "px";
							}

							return val + toRef + "px";
						});
					});
				}
			}

			$.effects.removeWrapper( el );
			done();
		}
	});

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.shake = function( o, done ) {

	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
		mode = $.effects.setMode( el, o.mode || "effect" ),
		direction = o.direction || "left",
		distance = o.distance || 20,
		times = o.times || 3,
		anims = times * 2 + 1,
		speed = Math.round(o.duration/anims),
		ref = (direction === "up" || direction === "down") ? "top" : "left",
		positiveMotion = (direction === "up" || direction === "left"),
		animation = {},
		animation1 = {},
		animation2 = {},
		i,

		// we will need to re-assemble the queue to stack our animations in place
		queue = el.queue(),
		queuelen = queue.length;

	$.effects.save( el, props );
	el.show();
	$.effects.createWrapper( el );

	// Animation
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

	// Animate
	el.animate( animation, speed, o.easing );

	// Shakes
	for ( i = 1; i < times; i++ ) {
		el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
	}
	el
		.animate( animation1, speed, o.easing )
		.animate( animation, speed / 2, o.easing )
		.queue(function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

	// inject all the animations we just queued to be first in line (after "inprogress")
	if ( queuelen > 1) {
		queue.splice.apply( queue,
			[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
	}
	el.dequeue();

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.slide = function( o, done ) {

	// Create element
	var el = $( this ),
		props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
		mode = $.effects.setMode( el, o.mode || "show" ),
		show = mode === "show",
		direction = o.direction || "left",
		ref = (direction === "up" || direction === "down") ? "top" : "left",
		positiveMotion = (direction === "up" || direction === "left"),
		distance,
		animation = {};

	// Adjust
	$.effects.save( el, props );
	el.show();
	distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

	$.effects.createWrapper( el ).css({
		overflow: "hidden"
	});

	if ( show ) {
		el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
	}

	// Animation
	animation[ ref ] = ( show ?
		( positiveMotion ? "+=" : "-=") :
		( positiveMotion ? "-=" : "+=")) +
		distance;

	// Animate
	el.animate( animation, {
		queue: false,
		duration: o.duration,
		easing: o.easing,
		complete: function() {
			if ( mode === "hide" ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		}
	});
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.transfer = function( o, done ) {
	var elem = $( this ),
		target = $( o.to ),
		targetFixed = target.css( "position" ) === "fixed",
		body = $("body"),
		fixTop = targetFixed ? body.scrollTop() : 0,
		fixLeft = targetFixed ? body.scrollLeft() : 0,
		endPosition = target.offset(),
		animation = {
			top: endPosition.top - fixTop ,
			left: endPosition.left - fixLeft ,
			height: target.innerHeight(),
			width: target.innerWidth()
		},
		startPosition = elem.offset(),
		transfer = $( "<div class='ui-effects-transfer'></div>" )
			.appendTo( document.body )
			.addClass( o.className )
			.css({
				top: startPosition.top - fixTop ,
				left: startPosition.left - fixLeft ,
				height: elem.innerHeight(),
				width: elem.innerWidth(),
				position: targetFixed ? "fixed" : "absolute"
			})
			.animate( animation, o.duration, o.easing, function() {
				transfer.remove();
				done();
			});
};

})(jQuery);
;
